System.register([], function (exports, module) {
    'use strict';
    return {
        execute: function () {

            exports({
                B: nextPow2$1,
                D: repeat,
                F: pingPong,
                G: inverseLerp,
                H: absMaxComponent,
                I: absMax,
                J: enumerableProps,
                O: void 0,
                P: void 0,
                T: void 0,
                U: void 0,
                W: void 0,
                X: void 0,
                Z: void 0,
                a3: void 0,
                a4: void 0,
                a5: void 0,
                a6: void 0,
                a7: void 0,
                a8: void 0,
                a9: void 0,
                aA: void 0,
                aB: void 0,
                aC: void 0,
                aD: void 0,
                aa: void 0,
                ab: void 0,
                ac: void 0,
                ad: void 0,
                ae: void 0,
                af: void 0,
                ag: void 0,
                ah: void 0,
                ai: void 0,
                aj: void 0,
                ak: void 0,
                al: void 0,
                am: void 0,
                an: void 0,
                ao: void 0,
                ap: void 0,
                aq: void 0,
                ar: void 0,
                as: void 0,
                at: void 0,
                au: void 0,
                av: void 0,
                aw: void 0,
                ax: void 0,
                ay: void 0,
                az: void 0,
                bA: GetTypeSize,
                bB: getTypedArrayConstructor,
                bC: formatAlignment,
                bD: alignTo,
                bM: void 0,
                bN: void 0,
                bt: void 0,
                bx: IsPowerOf2,
                by: FormatSize,
                bz: FormatSurfaceSize,
                c2: void 0,
                c4: void 0,
                cK: void 0,
                cO: void 0,
                cQ: void 0,
                cT: parseLoadResArgs,
                cZ: extname,
                ce: void 0,
                ch: void 0,
                ci: void 0,
                cj: void 0,
                ck: void 0,
                cl: void 0,
                cm: void 0,
                cn: void 0,
                cr: ColorTemperatureToRGB,
                cs: void 0,
                d: v3,
                d2: void 0,
                d3: transform,
                d4: changeExtname,
                d6: getError,
                dA: _applyDecoratedDescriptor,
                dB: createMap,
                dE: _initializerDefineProperty,
                dF: getClassId,
                dI: type,
                dJ: mixin,
                dK: warn,
                dM: assertIsTrue,
                dN: assertID,
                dO: assert,
                dR: void 0,
                dZ: ccenum,
                da: getUuidFromURL,
                dc: dirname,
                dd: basename,
                de: setDefaultProgressCallback,
                df: supportsR32FloatTexture,
                dr: void 0,
                ds: void 0,
                dv: find,
                dy: warnID,
                dz: errorID,
                e$: void 0,
                e7: debug,
                e8: Enum,
                eA: property,
                eB: formerlySerializedAs,
                eF: void 0,
                eG: void 0,
                eI: getClassByName,
                eO: remove,
                eP: instantiate,
                eQ: assertsArrayIndex,
                eR: assertIsNonNullable,
                eS: removeIf,
                eU: binarySearchEpsilon,
                eW: bezierByTime,
                eX: isLerpable,
                eY: void 0,
                eZ: void 0,
                e_: void 0,
                em: void 0,
                en: void 0,
                eo: void 0,
                ep: clampf,
                eq: addon,
                er: void 0,
                es: logID,
                eu: void 0,
                ew: void 0,
                ex: void 0,
                f: v4,
                f1: Eventify,
                f2: contains,
                f5: void 0,
                f6: fastRemoveAt,
                f7: log,
                f8: error,
                f9: _throw,
                fJ: isValid,
                fK: void 0,
                fN: isCCObject,
                fT: contains$1,
                fV: void 0,
                f_: void 0,
                fb: join,
                fc: mainFileName,
                fd: changeBasename,
                fe: _normalize,
                ff: stripSep,
                fg: getSeperator,
                fi: setClassAlias,
                fj: CCClass,
                fk: nextPow2,
                fl: void 0,
                fm: void 0,
                fp: constructLegacyCurveAndConvert,
                fq: sign,
                fv: degreesToRadians,
                fw: radiansToDegrees,
                fy: createCommonjsModule,
                fz: unwrapExports,
                g4: deprecateModuleExportedName,
                g5: bezier,
                g6: BitMask,
                gb: setDefaultLogTimes,
                gc: __checkObsolete__,
                gd: __checkObsoleteInNamespace__,
                ge: WorldNode3DToLocalNodeUI,
                gf: WorldNode3DToWorldNodeUI,
                gh: deserialize,
                gj: getSerializationMetadata,
                gx: isDisplayStats,
                gy: setDisplayStats,
                gz: void 0,
                h: color,
                h4: void 0,
                hd: waitForAmmoInstantiation,
                i: equals,
                j: approx,
                k: clamp,
                l: clamp01,
                m: mat4,
                n: lerp,
                o: toDegree,
                q: quat,
                r: rect,
                s: size,
                t: toRadian,
                u: randomRange,
                v: v2,
                w: randomRangeInt,
                x: pseudoRandom,
                y: pseudoRandomRange,
                z: pseudoRandomRangeInt
            });

            const INT_BITS = 32;
            const INT_MAX = exports('fs', 0x7fffffff);
            const INT_MIN = -1 << INT_BITS - 1;
            function sign(v) {
              return (v > 0) - (v < 0);
            }
            function abs(v) {
              const mask = v >> INT_BITS - 1;
              return (v ^ mask) - mask;
            }
            function min(x, y) {
              return y ^ (x ^ y) & -(x < y);
            }
            function max(x, y) {
              return x ^ (x ^ y) & -(x < y);
            }
            function isPow2(v) {
              return !(v & v - 1) && !!v;
            }
            function log2(v) {
              let r;
              let shift;
              r = (v > 0xFFFF) << 4;
              v >>>= r;
              shift = (v > 0xFF) << 3;
              v >>>= shift;
              r |= shift;
              shift = (v > 0xF) << 2;
              v >>>= shift;
              r |= shift;
              shift = (v > 0x3) << 1;
              v >>>= shift;
              r |= shift;
              return r | v >> 1;
            }
            function log10(v) {
              return v >= 1000000000 ? 9 : v >= 100000000 ? 8 : v >= 10000000 ? 7 : v >= 1000000 ? 6 : v >= 100000 ? 5 : v >= 10000 ? 4 : v >= 1000 ? 3 : v >= 100 ? 2 : v >= 10 ? 1 : 0;
            }
            function popCount(v) {
              v -= v >>> 1 & 0x55555555;
              v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
              return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;
            }
            function countTrailingZeros(v) {
              let c = 32;
              v &= -v;

              if (v) {
                c--;
              }

              if (v & 0x0000FFFF) {
                c -= 16;
              }

              if (v & 0x00FF00FF) {
                c -= 8;
              }

              if (v & 0x0F0F0F0F) {
                c -= 4;
              }

              if (v & 0x33333333) {
                c -= 2;
              }

              if (v & 0x55555555) {
                c -= 1;
              }

              return c;
            }
            function nextPow2(v) {
              --v;
              v |= v >>> 1;
              v |= v >>> 2;
              v |= v >>> 4;
              v |= v >>> 8;
              v |= v >>> 16;
              return v + 1;
            }
            function prevPow2(v) {
              v |= v >>> 1;
              v |= v >>> 2;
              v |= v >>> 4;
              v |= v >>> 8;
              v |= v >>> 16;
              return v - (v >>> 1);
            }
            function parity(v) {
              v ^= v >>> 16;
              v ^= v >>> 8;
              v ^= v >>> 4;
              v &= 0xf;
              return 0x6996 >>> v & 1;
            }
            const REVERSE_TABLE = new Array(256);

            (tab => {
              for (let i = 0; i < 256; ++i) {
                let v = i;
                let r = i;
                let s = 7;

                for (v >>>= 1; v; v >>>= 1) {
                  r <<= 1;
                  r |= v & 1;
                  --s;
                }

                tab[i] = r << s & 0xff;
              }
            })(REVERSE_TABLE);

            function reverse(v) {
              return REVERSE_TABLE[v & 0xff] << 24 | REVERSE_TABLE[v >>> 8 & 0xff] << 16 | REVERSE_TABLE[v >>> 16 & 0xff] << 8 | REVERSE_TABLE[v >>> 24 & 0xff];
            }
            function interleave2(x, y) {
              x &= 0xFFFF;
              x = (x | x << 8) & 0x00FF00FF;
              x = (x | x << 4) & 0x0F0F0F0F;
              x = (x | x << 2) & 0x33333333;
              x = (x | x << 1) & 0x55555555;
              y &= 0xFFFF;
              y = (y | y << 8) & 0x00FF00FF;
              y = (y | y << 4) & 0x0F0F0F0F;
              y = (y | y << 2) & 0x33333333;
              y = (y | y << 1) & 0x55555555;
              return x | y << 1;
            }
            function deinterleave2(v, n) {
              v = v >>> n & 0x55555555;
              v = (v | v >>> 1) & 0x33333333;
              v = (v | v >>> 2) & 0x0F0F0F0F;
              v = (v | v >>> 4) & 0x00FF00FF;
              v = (v | v >>> 16) & 0x000FFFF;
              return v << 16 >> 16;
            }
            function interleave3(x, y, z) {
              x &= 0x3FF;
              x = (x | x << 16) & 4278190335;
              x = (x | x << 8) & 251719695;
              x = (x | x << 4) & 3272356035;
              x = (x | x << 2) & 1227133513;
              y &= 0x3FF;
              y = (y | y << 16) & 4278190335;
              y = (y | y << 8) & 251719695;
              y = (y | y << 4) & 3272356035;
              y = (y | y << 2) & 1227133513;
              x |= y << 1;
              z &= 0x3FF;
              z = (z | z << 16) & 4278190335;
              z = (z | z << 8) & 251719695;
              z = (z | z << 4) & 3272356035;
              z = (z | z << 2) & 1227133513;
              return x | z << 2;
            }
            function deinterleave3(v, n) {
              v = v >>> n & 1227133513;
              v = (v | v >>> 2) & 3272356035;
              v = (v | v >>> 4) & 251719695;
              v = (v | v >>> 8) & 4278190335;
              v = (v | v >>> 16) & 0x3FF;
              return v << 22 >> 22;
            }
            function nextCombination(v) {
              const t = v | v - 1;
              return t + 1 | (~t & -~t) - 1 >>> countTrailingZeros(v) + 1;
            }

            var bits = /*#__PURE__*/Object.freeze({
                __proto__: null,
                INT_BITS: INT_BITS,
                INT_MAX: INT_MAX,
                INT_MIN: INT_MIN,
                sign: sign,
                abs: abs,
                min: min,
                max: max,
                isPow2: isPow2,
                log2: log2,
                log10: log10,
                popCount: popCount,
                countTrailingZeros: countTrailingZeros,
                nextPow2: nextPow2,
                prevPow2: prevPow2,
                parity: parity,
                reverse: reverse,
                interleave2: interleave2,
                deinterleave2: deinterleave2,
                interleave3: interleave3,
                deinterleave3: deinterleave3,
                nextCombination: nextCombination
            });
            exports('b', bits);

            function tryDefineGlobal (name, value) {
                const _global = typeof window === 'undefined' ? global : window;
                if (typeof _global[name] === 'undefined') {
                    return (_global[name] = value);
                } else {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                    return _global[name];
                }
            }

            const NATIVE = true;

            const WECHAT = exports('fn', false);
            tryDefineGlobal('CC_WECHAT', false);
            tryDefineGlobal('CC_BAIDU', false);
            tryDefineGlobal('CC_XIAOMI', false);
            tryDefineGlobal('CC_ALIPAY', false);
            tryDefineGlobal('CC_BYTEDANCE', false);
            tryDefineGlobal('CC_OPPO', false);
            tryDefineGlobal('CC_VIVO', false);
            tryDefineGlobal('CC_HUAWEI', false);
            tryDefineGlobal('CC_COCOSPLAY', false);
            tryDefineGlobal('CC_QTT', false);
            tryDefineGlobal('CC_LINKSURE', false);

            const EDITOR$1 = exports('fo', false);
            tryDefineGlobal('CC_EDITOR', false);

            const PREVIEW = false;
            tryDefineGlobal('CC_PREVIEW', false);
            tryDefineGlobal('CC_BUILD', true);

            const TEST$1 = false;
            tryDefineGlobal('CC_TEST', false);
            tryDefineGlobal('CC_DEBUG', true);
            tryDefineGlobal('CC_DEV', false);

            const MINIGAME = exports('fW', false);
            tryDefineGlobal('CC_MINIGAME', false);

            const RUNTIME_BASED = exports('fY', false);
            tryDefineGlobal('CC_RUNTIME_BASED', false);
            tryDefineGlobal('CC_SUPPORT_JIT', true);

            const JSB = exports('fX', true);
            tryDefineGlobal('CC_JSB', true);

            var debugInfos = {
            	"1006": "[Action step]. override me",
            	"1007": "[Action update]. override me",
            	"1008": "[Action reverse]. override me",
            	"1100": "Expected 'data' dict, but not found. Config file: %s",
            	"1101": "Please load the resource first : %s",
            	"1200": "cocos2d: Director: Error in gettimeofday",
            	"1204": "Running scene should not be null",
            	"1205": "The scene should not be null",
            	"1206": "loadScene: The scene index to load (%s) is out of range.",
            	"1207": "loadScene: Unknown name type to load: '%s'",
            	"1208": "loadScene: Failed to load scene '%s' because '%s' is already being loaded.",
            	"1209": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
            	"1210": "Failed to preload '%s', %s",
            	"1211": "loadScene: The scene index to load (%s) is out of range.",
            	"1212": "loadScene: Unknown name type to load: '%s'",
            	"1213": "loadScene: Failed to load scene '%s' because '%s' is already loading",
            	"1214": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
            	"1215": "Failed to preload '%s', %s",
            	"1216": "Director.runSceneImmediate: scene is not valid",
            	"1217": "Director._initOnEngineInitialized: renderer root initialization failed",
            	"1218": "Forward render pipeline initialized.",
            	"1219": "Deferred render pipeline initialized. Note that non-transparent materials with no lighting will not be rendered, such as builtin-unlit.",
            	"1220": "Failed to set shading scale, pipelineSceneData is invalid.",
            	"1221": "Setting orientation is not supported yet.",
            	"1300": "%s is not in the model pool and cannot be destroyed by destroyModel.",
            	"1400": "'%s' is deprecated, please use '%s' instead.",
            	"1404": "cc.spriteFrameCache is removed, please use cc.loader to load and cache sprite frames of atlas format.",
            	"1406": "'%s.%s' is removed",
            	"1408": "'%s' is removed",
            	"1409": "element type is wrong!",
            	"1502": "cc.scheduler.scheduleCallbackForTarget(): target should be non-null.",
            	"1503": "cc.Scheduler.pauseTarget():target should be non-null",
            	"1504": "cc.Scheduler.resumeTarget():target should be non-null",
            	"1505": "cc.Scheduler.isTargetPaused():target should be non-null",
            	"1506": "warning: you CANNOT change update priority in scheduled function",
            	"1507": "scheduler#scheduleSelector. Selector already scheduled. Updating interval from: %.4f to %.4f",
            	"1508": "Argument callback must not be empty",
            	"1509": "Argument target must be non-nullptr",
            	"1510": "cc.Scheduler: Illegal target which doesn't have id, you should do Scheduler.enableForTarget(target) before all scheduler API usage on target",
            	"1511": "cc.Scheduler: pause state of the scheduled task doesn't match the element pause state in Scheduler, the given paused state will be ignored.",
            	"1513": "cc.Scheduler: scheduler stopped using `__instanceId` as id since v2.0, you should do Scheduler.enableForTarget(target) before all scheduler API usage on target",
            	"1607": "removeFromParentAndCleanup is deprecated. Use removeFromParent instead",
            	"1619": "callback function must be non-null",
            	"1620": "interval must be positive",
            	"1623": "Set '%s' to normal node (not persist root node).",
            	"1624": "Replacing with the same sgNode",
            	"1625": "The replacement sgNode should not contain any child.",
            	"1626": "Should not set alpha via 'color', set 'opacity' please.",
            	"1627": "Not support for asynchronous creating node in SG",
            	"1632": "Node name can not include '/'.",
            	"1633": "Internal error, should not remove unknown node from parent.",
            	"1635": "reorderChild: this child is not in children list.",
            	"1636": "Node's zIndex value can't be greater than cc.macro.MAX_ZINDEX, setting to the maximum value",
            	"1637": "Node's zIndex value can't be smaller than cc.macro.MIN_ZINDEX, setting to the minimum value",
            	"1638": "Private node's zIndex can't be set, it will keep cc.macro.MIN_ZINDEX as its value",
            	"1800": "cc._EventListenerKeyboard.checkAvailable(): Invalid EventListenerKeyboard!",
            	"1801": "cc._EventListenerTouchOneByOne.checkAvailable(): Invalid EventListenerTouchOneByOne!",
            	"1802": "cc._EventListenerTouchAllAtOnce.checkAvailable(): Invalid EventListenerTouchAllAtOnce!",
            	"1803": "cc._EventListenerAcceleration.checkAvailable():_onAccelerationEvent must be non-nil",
            	"1900": "Invalid parameter.",
            	"2104": "Layer collision. The name of layer (%s) is collided with the name or value of some layer",
            	"2200": "Design resolution not valid",
            	"2201": "should set resolutionPolicy",
            	"2300": "The touches is more than MAX_TOUCHES, nUnusedIndex = %s",
            	"2402": "Forward pipeline startup failed!",
            	"3103": "cc.Texture.addImage(): path should be non-null",
            	"3119": "Lazy init texture with image element failed due to image loading failure: %s",
            	"3120": "Loading texture with unsupported type: '%s'. Add '%s' into 'cc.macro.SUPPORT_TEXTURE_FORMATS' please.",
            	"3121": "Can't find a texture format supported by the current platform! Please add a fallback format in the editor.",
            	"3122": "Error Texture in %s.",
            	"3123": "Set same texture %s.",
            	"3124": "Texture: setMipRange failed because base level is larger than max level",
            	"3300": "Rect width exceeds maximum margin: %s",
            	"3301": "Rect height exceeds maximum margin: %s",
            	"3500": "0 priority is forbidden for fixed priority since it's used for scene graph based priority.",
            	"3501": "Invalid listener type!",
            	"3502": "Can't set fixed priority with scene graph based listener.",
            	"3503": "Invalid parameters.",
            	"3504": "listener must be a cc.EventListener object when adding a fixed priority listener",
            	"3505": "The listener has been registered, please don't register it again.",
            	"3506": "Unsupported listener target.",
            	"3507": "Invalid scene graph priority!",
            	"3508": "If program goes here, there should be event in dispatch.",
            	"3509": "_inDispatch should be 1 here.",
            	"3510": "%s's scene graph node not contains in the parent's children",
            	"3511": "event is undefined",
            	"3512": "Event manager only support scene graph priority for ui nodes which contain UIComponent",
            	"3520": "Device Motion Event request permission: %s",
            	"3521": "Device Motion Event request permission failed: %s",
            	"3601": "The editor property 'playOnFocus' should be used with 'executeInEditMode' in class '%s'",
            	"3602": "Unknown editor property '%s' in class '%s'.",
            	"3603": "Use 'cc.Float' or 'cc.Integer' instead of 'cc.Number' please.",
            	"3604": "Can only indicate one type attribute for %s.",
            	"3605": "The default value of %s is not instance of %s.",
            	"3606": "No needs to indicate the '%s' attribute for %s, which its default value is type of %s.",
            	"3607": "The default value of %s must be an empty string.",
            	"3608": "The type of %s must be CCString, not String.",
            	"3609": "The type of %s must be CCBoolean, not Boolean.",
            	"3610": "The type of %s must be CCFloat or CCInteger, not Number.",
            	"3611": "Can not indicate the '%s' attribute for %s, which its default value is type of %s.",
            	"3612": "%s Just set the default value to 'new %s()' and it will be handled properly.",
            	"3613": "'No need to use 'serializable: false' or 'editorOnly: true' for the getter of '%s.%s', every getter is actually non-serialized.",
            	"3614": "Should not define constructor for cc.Component %s.",
            	"3615": "Each script can have at most one Component.",
            	"3616": "Should not specify class name %s for Component which defines in project.",
            	"3618": "ctor of '%s' can not be another CCClass",
            	"3623": "Can not use 'editor' attribute, '%s' not inherits from Components.",
            	"3625": "[isChildClassOf] superclass should be function type, not",
            	"3626": "Can't remove '%s' because '%s' depends on it.",
            	"3627": "Should not add renderer component (%s) to a Canvas node.",
            	"3628": "Should not add %s to a node which size is already used by its other component.",
            	"3633": "Properties function of '%s' should return an object!",
            	"3634": "Disallow to use '.' in property name",
            	"3637": "Can not declare %s.%s, it is already defined in the prototype of %s",
            	"3639": "Can not apply the specified attribute to the getter of '%s.%s', attribute index: %s",
            	"3640": "'%s': the setter of '%s' is already defined!",
            	"3641": "Can not construct %s because it contains object property.",
            	"3644": "Please define 'type' parameter of %s.%s as the actual constructor.",
            	"3645": "Please define 'type' parameter of %s.%s as the constructor of %s.",
            	"3646": "Unknown 'type' parameter of %s.%s：%s",
            	"3647": "The length of range array must be equal or greater than 2",
            	"3648": "Can not declare %s.%s method, it is already defined in the properties of %s.",
            	"3652": "Failed to `new %s()` under the hood, %s\nIt is used for getting default values declared in TypeScript in the first place.\nPlease ensure the constructor can be called during the script's initialization.",
            	"3653": "Please do not specifiy \"default\" attribute in decorator of \"%s\" property in \"%s\" class.\nDefault value must be initialized at their declaration:\n\n \n// Before:\n@property({\n  type: cc.SpriteFrame\n  default: null  // <--\n})\nmyProp;\n// After:\n@property({\n  type: cc.SpriteFrame\n})\nmyProp = null;   // <--",
            	"3654": "Please specifiy a default value for \"%s.%s\" property at its declaration:\n\n \n// Before:\n@property(...)\nmyProp;\n// After:\n@property(...)\nmyProp = 0;",
            	"3655": "Can not specifiy \"get\" or \"set\"  attribute in decorator for \"%s\" property in \"%s\" class.\nPlease use:\n\n \n@property(...)\nget %s () {\n    ...\n}\n@property\nset %s (value) {\n    ...\n}",
            	"3659": "Violation error: extending enumerations shall have non-overlaped member names or member values",
            	"3660": "You are explicitly specifying `undefined` type to cc property \"%s\" of cc class \"%s\".\nIs this intended? If not, this may indicate a circular reference.\nFor example:\n\n \n// foo.ts\nimport { _decorator } from 'cc';\nimport { Bar } from './bar';  // Given that './bar' also reference 'foo.ts'.\n                              // When importing './bar', execution of './bar' is hung on to wait execution of 'foo.ts',\n                              // the `Bar` imported here is `undefined` until './bar' finish its execution.\n                              // It leads to that\n@_decorator.ccclass           //  ↓\nexport class Foo {            //  ↓\n    @_decorator.type(Bar)     //  → is equivalent to `@_decorator.type(undefined)`\n    public bar: Bar;          // To eliminate this error, either:\n                              // - Refactor your module structure(recommended), or\n                              // - specify the type as cc class name: `@_decorator.type('Bar'/* or any name you specified for `Bar` */)`\n}",
            	"3700": "internal error: _prefab is undefined",
            	"3701": "Failed to load prefab asset for node '%s'",
            	"3800": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
            	"3801": "The node can not be made persist because it's not under root node.",
            	"3802": "The node can not be made persist because it's not in current scene.",
            	"3803": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
            	"3804": "getComponent: Type must be non-nil",
            	"3805": "Can't add component '%s' because %s already contains the same component.",
            	"3806": "Can't add component '%s' to %s because it conflicts with the existing '%s' derived component.",
            	"3807": "addComponent: Failed to get class '%s'",
            	"3808": "addComponent: Should not add component ('%s') when the scripts are still loading.",
            	"3809": "addComponent: The component to add must be a constructor",
            	"3810": "addComponent: The component to add must be child class of cc.Component",
            	"3811": "_addComponentAt: The component to add must be a constructor",
            	"3812": "_addComponentAt: Index out of range",
            	"3813": "removeComponent: Component must be non-nil",
            	"3814": "Argument must be non-nil",
            	"3815": "Component not owned by this entity",
            	"3816": "Node '%s' is already activating",
            	"3817": "Sorry, the component of '%s' which with an index of %s is corrupted! It has been removed.",
            	"3818": "Failed to read or parse project.json",
            	"3819": "Warning: target element is not a DIV or CANVAS",
            	"3820": "The renderer doesn't support the renderMode %s",
            	"3821": "Cannot change hierarchy while activating or deactivating the parent.",
            	"3822": "addComponent: Cannot add any component to the scene.",
            	"3823": "The enabled component (id: %s, name: %s) doesn't have a valid node",
            	"3900": "Invalid clip to add",
            	"3901": "Invalid clip to remove",
            	"3902": "clip is defaultClip, set force to true to force remove clip and animation state",
            	"3903": "animation state is playing, set force to true to force stop and remove clip and animation state",
            	"3904": "motion path of target [%s] in prop [%s] frame [%s] is not valid",
            	"3905": "sprite frames must be an Array.",
            	"3906": "Can't find easing type [%s]",
            	"3907": "Animation state is not playing or already removed",
            	"3912": "already-playing",
            	"3920": "Current context does not allow root motion.",
            	"3921": "You provided a ill-formed track path. The last component of track path should be property key, or the setter should not be empty.",
            	"3923": "Root motion is ignored since root bone could not be located in animation.",
            	"3924": "Root motion is ignored since the root bone could not be located in scene.",
            	"3925": "Target of hierarchy path should be of type Node.",
            	"3926": "Node \"%s\" has no path \"%s\".",
            	"3927": "Target of component path should be of type Node.",
            	"3928": "Node \"%s\" has no component \"%s\".",
            	"3929": "Target object has no property \"%s\".",
            	"3930": "Can not decide type for untyped track: runtime binding does not provide a getter.",
            	"3931": "Can not decide type for untyped track: got a unsupported value from runtime binding.",
            	"3932": "Common targets should only target Vectors/`Size`/`Color`.",
            	"3933": "Each curve that has common target should be numeric curve and targets string property.",
            	"3934": "Misconfigured legacy curve: the first keyframe value is number but others aren't.",
            	"3935": "We don't currently support conversion of \\`CubicSplineQuatValue\\`.",
            	"3936": "Instancing/Batching enabled for non-baked skinning model '%s', this may result in unexpected rendering artifacts. Consider turning it off in the material if you do not intend to do this.",
            	"3937": "Previous error occurred when instantiating animation clip %s on node %s.",
            	"3938": "'%s' is not found from '%s'. It's specified as the root node to play animation clip '%s'.",
            	"4003": "Label font size can't be shirnked less than 0!",
            	"4004": "force notify all fonts loaded!",
            	"4011": "Property spriteFrame of Font '%s' is invalid. Using system font instead.",
            	"4012": "The texture of Font '%s' must be already loaded on JSB. Using system font instead.",
            	"4013": "Sorry, lineHeight of system font not supported on JSB.",
            	"4200": "MaskType: IMAGE_STENCIL only support WebGL mode.",
            	"4201": "The alphaThreshold invalid in Canvas Mode.",
            	"4202": "The inverted invalid in Canvas Mode.",
            	"4300": "Can not found the %s page.",
            	"4301": "Can not add a page without UITransform.",
            	"4302": "Can not set the scroll view content when it hasn't UITransform or its parent hasn't UITransform.",
            	"4400": "Invalid RichText img tag! The sprite frame name can't be found in the ImageAtlas!",
            	"4500": "Graphics: There is no model in %s.",
            	"4600": "Script attached to '%s' is missing or invalid.",
            	"4700": "The dom control is not created!",
            	"4800": "unknown asset type",
            	"4901": "loadRes: should not specify the extname in %s %s",
            	"4902": "No need to release non-cached asset.",
            	"4914": "Resources url '%s' does not exist.",
            	"4915": "Pack indices and data do not match in size",
            	"4916": "Failed to download package for %s",
            	"4921": "Invalid pipe or invalid index provided!",
            	"4922": "The pipe to be inserted is already in the pipeline!",
            	"4923": "Uuid Loader: Parse asset [ %s ] failed : %s",
            	"4924": "JSON Loader: Input item doesn't contain string content",
            	"4925": "Uuid Loader: Deserialize asset [ %s ] failed : %s",
            	"4926": "Audio Downloader: no web audio context.",
            	"4927": "Audio Downloader: audio not supported on this browser!",
            	"4928": "Load %s failed!",
            	"4929": "Load Webp ( %s ) failed",
            	"4930": "Load image ( %s ) failed",
            	"4932": "Since v1.10, for any atlas (\"%s\") in the \"resources\" directory, it is not possible to find the contained SpriteFrames via `loadRes`, `getRes` or `releaseRes`. Load the SpriteAtlas first and then use `spriteAtlas.getSpriteFrame(name)` instead please.",
            	"4933": "Download Font [ %s ] failed, using Arial or system default font instead",
            	"4934": "Please assure that the full path of sub asset is correct!",
            	"4935": "Failed to skip prefab asset while deserializing PrefabInfo",
            	"5000": "You are trying to destroy a object twice or more.",
            	"5001": "object not yet destroyed",
            	"5100": "Not a plist file!",
            	"5200": "Warning: localStorage isn't enabled. Please confirm browser cookie or privacy option",
            	"5201": "browser don't support web audio",
            	"5202": "This feature supports WebGL render mode only.",
            	"5300": "Type of target to deserialize not matched with data: target is %s, data is %s",
            	"5301": "Can not find script '%s'",
            	"5302": "Can not find class '%s'",
            	"5303": "Failed to deserialize %s, missing _deserialize function.",
            	"5304": "Unable to deserialize version %s data.",
            	"5402": "cc.js.addon called on non-object:",
            	"5403": "cc.js.mixin: arguments must be type object:",
            	"5404": "The base class to extend from must be non-nil",
            	"5405": "The class to extend must be non-nil",
            	"5406": "Class should be extended before assigning any prototype members.",
            	"5500": "'notify' can not be used in 'get/set' !",
            	"5501": "'notify' must be used with 'default' !",
            	"5507": "The 'default' attribute of '%s.%s' must be an array",
            	"5508": "Invalid type of %s.%s",
            	"5510": "The 'type' attribute of '%s.%s' can not be 'Number', use cc.Float or cc.Integer instead please.",
            	"5511": "The 'type' attribute of '%s.%s' is undefined when loading script",
            	"5512": "Can not serialize '%s.%s' because the specified type is anonymous, please provide a class name or set the 'serializable' attribute of '%s.%s' to 'false'.",
            	"5513": "The 'default' value of '%s.%s' should not be used with a 'get' function.",
            	"5514": "The 'default' value of '%s.%s' should not be used with a 'set' function.",
            	"5515": "The 'default' value of '%s.%s' can not be an constructor. Set default to null please.",
            	"5517": "'%s.%s' hides inherited property '%s.%s'. To make the current property override that implementation, add the `override: true` attribute please.",
            	"5601": "Can not get current scene.",
            	"5602": "Scene is destroyed",
            	"5603": "reference node is destroyed",
            	"5700": "no %s or %s on %s",
            	"5800": "%s.lerp not yet implemented.",
            	"5801": "%s.clone not yet implemented.",
            	"5802": "%s.equals not yet implemented.",
            	"5900": "MotionStreak only support WebGL mode.",
            	"5901": "cc.MotionStreak.getOpacity has not been supported.",
            	"5902": "cc.MotionStreak.setOpacity has not been supported.",
            	"6000": "Custom should not be false if file is not specified.",
            	"6001": "The new %s must not be NaN",
            	"6017": "Incomplete or corrupt PNG file",
            	"6018": "Invalid filter algorithm: %s",
            	"6019": "Invalid byte order value.",
            	"6020": "You forgot your towel!",
            	"6021": "Unknown Field Tag: %s",
            	"6022": "Too many bits requested",
            	"6023": "No bits requested",
            	"6024": "Cannot recover from missing StripByteCounts",
            	"6025": "Cannot handle sub-byte bits per sample",
            	"6026": "Cannot handle sub-byte bits per pixel",
            	"6027": "Palette image missing color map",
            	"6028": "Unknown Photometric Interpretation: %s",
            	"6029": "Unkown error",
            	"6030": "cc.ParticleSystem: error decoding or ungzipping textureImageData",
            	"6031": "cc.ParticleSystem: unknown image format with Data",
            	"6032": "cc.ParticleSystem.initWithDictionary() : error loading the texture",
            	"6033": "cc.ParticleSystem: not allowing create to be invoked twice with different particle system",
            	"6034": "cc.ParticleSystem: shouldn't be initialized repetitively, otherwise there will be potential leak",
            	"6035": "cc.ParticleSystem: change material failed, please use proper particle material",
            	"6400": "asset.url is not usable in core process",
            	"6402": "AssetLibrary has already been initialized!",
            	"6500": "Widget target must be one of the parent nodes of it",
            	"6600": "collider not added or already removed",
            	"6601": "Can't find testFunc for (%s, $s).",
            	"6700": "Can't init canvas '%s' because it conflicts with the existing '%s', the scene should only have one active canvas at the same time.",
            	"6705": "Argument must be non-nil",
            	"6706": "Priority can't be set in RenderRoot2D node",
            	"6800": "Callback of event must be non-nil",
            	"6801": "The message must be provided",
            	"6900": "The thing you want to instantiate must be an object",
            	"6901": "The thing you want to instantiate is nil",
            	"6902": "The thing you want to instantiate is destroyed",
            	"6903": "The instantiate method for given asset do not implemented",
            	"6904": "Can not instantiate array",
            	"6905": "Can not instantiate DOM element",
            	"7100": "%s already defined in Enum.",
            	"7101": "Sorry, 'cc.Enum' not available on this platform, please report this error here: <https://github.com/cocos-creator/engine/issues/new>",
            	"7200": "Method 'initWithTMXFile' is no effect now, please set property 'tmxAsset' instead.",
            	"7201": "Method 'initWithXML' is no effect now, please set property 'tmxAsset' instead.",
            	"7202": "Add component TiledLayer into node failed.",
            	"7203": "Property 'mapLoaded' is unused now. Please write the logic to the callback 'start'.",
            	"7210": "TMX Hexa zOrder not supported",
            	"7211": "TMX invalid value",
            	"7215": "cocos2d: Warning: TMX Layer %s has no tiles",
            	"7216": "cocos2d: TMXFormat: Unsupported TMX version: %s",
            	"7217": "cocos2d: TMXFomat: Unsupported orientation: %s",
            	"7218": "cc.TMXMapInfo.parseXMLFile(): unsupported compression method",
            	"7219": "cc.TMXMapInfo.parseXMLFile(): Only base64 and/or gzip/zlib maps are supported",
            	"7221": "cc.TMXMapInfo.parseXMLFile(): Texture '%s' not found.",
            	"7222": "Parse %s failed.",
            	"7236": "cc.TMXLayer.getTileAt(): TMXLayer: the tiles map has been released",
            	"7237": "cc.TMXLayer.getTileGIDAt(): TMXLayer: the tiles map has been released",
            	"7238": "cc.TMXLayer.setTileGID(): TMXLayer: the tiles map has been released",
            	"7239": "cc.TMXLayer.setTileGID(): invalid gid: %s",
            	"7240": "cc.TMXLayer.getTileFlagsAt(): TMXLayer: the tiles map has been released",
            	"7241": "cc.TiledMap.initWithXML(): Map not found. Please check the filename.",
            	"7401": "Failed to set _defaultArmatureIndex for '%s' because the index is out of range.",
            	"7402": "Failed to set _animationIndex for '%s' because the index is out of range.",
            	"7501": "Failed to set _defaultSkinIndex for '%s' because the index is out of range.",
            	"7502": "Failed to set _animationIndex for '%s' because its skeletonData is invalid.",
            	"7503": "Failed to set _animationIndex for '%s' because the index is out of range.",
            	"7504": "Can not render dynamic created SkeletonData",
            	"7506": "Failed to load spine atlas '$s'",
            	"7507": "Please re-import '%s' because its textures is not initialized! (This workflow will be improved in the future.)",
            	"7508": "The atlas asset of '%s' is not exists!",
            	"7509": "Spine: Animation not found: %s",
            	"7510": "Spine: Animation not found: %s",
            	"7600": "The context of RenderTexture is invalid.",
            	"7601": "cc.RenderTexture._initWithWidthAndHeightForWebGL() : only RGB and RGBA formats are valid for a render texture;",
            	"7602": "Could not attach texture to the framebuffer",
            	"7603": "clearDepth isn't supported on Cocos2d-Html5",
            	"7604": "saveToFile isn't supported on Cocos2d-Html5",
            	"7605": "newCCImage isn't supported on Cocos2d-Html5",
            	"7606": "GFXTexture is null",
            	"7607": "readPixels buffer size smaller than %d",
            	"7700": "On the web is always keep the aspect ratio",
            	"7701": "Can't know status",
            	"7702": "Video player's duration is not ready to get now!",
            	"7703": "Video Downloader: video not supported on this browser!",
            	"7800": "Web does not support loading",
            	"7801": "Web does not support query history",
            	"7802": "Web does not support query history",
            	"7803": "The current browser does not support the GoBack",
            	"7804": "The current browser does not support the GoForward",
            	"7805": "Web does not support zoom",
            	"7900": "cc.math.Matrix3.assign(): current matrix equals matIn",
            	"7901": "cc.math.mat4Assign(): pOut equals pIn",
            	"7902": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
            	"7903": "cc.math.Matrix4 equal: pMat1 and pMat2 are same object.",
            	"7904": "cc.math.Matrix4.extractPlane: Invalid plane index",
            	"7905": "cc.math.mat4Assign(): pOut equals pIn",
            	"7906": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
            	"7907": "cc.math.Matrix4 equals: pMat1 and pMat2 are same object.",
            	"7908": "Invalid matrix mode specified",
            	"7909": "current quaternion is an invalid value",
            	"8000": "Can't handle this field type or size",
            	"8001": "No bytes requested",
            	"8002": "Too many bytes requested",
            	"8003": "Missing StripByteCounts!",
            	"8100": "cocos2d: ERROR: Failed to compile shader:\n %s",
            	"8101": "cocos2d: ERROR: Failed to compile vertex shader",
            	"8102": "cocos2d: ERROR: Failed to compile fragment shader",
            	"8103": "cc.GLProgram.link(): Cannot link invalid program",
            	"8104": "cocos2d: ERROR: Failed to link program: %s",
            	"8105": "cocos2d: cc.shaderCache._loadDefaultShader, error shader type",
            	"8106": "Please load the resource firset : %s",
            	"8107": "cc.GLProgram.getUniformLocationForName(): uniform name should be non-null",
            	"8108": "cc.GLProgram.getUniformLocationForName(): Invalid operation. Cannot get uniform location when program is not initialized",
            	"8109": "modelView matrix is undefined.",
            	"8200": "Please set node's active instead of rigidbody's enabled.",
            	"8300": "Should only one camera exists, please check your project.",
            	"8301": "Camera does not support Canvas Mode.",
            	"8302": "Camera.viewport is deprecated, please use setViewportInOrientedSpace instead.",
            	"8400": "Wrong type arguments, 'filePath' must be a String.",
            	"9000": "Stencil manager does not support level bigger than %d in this device.",
            	"9001": "Stencil manager is already empty, cannot pop any mask",
            	"9002": "Failed to request any buffer from a mesh buffer without accessor",
            	"9003": "The internal state of LinearBufferAccessor have severe issue and irreversible, please check the reason",
            	"9004": "Failed to allocate chunk in StaticVBAccessor, the requested buffer might be too large: %d bytes",
            	"9005": "BATCHER2D_MEM_INCREMENT is too large, the Max value for BATCHER2D_MEM_INCREMENT is 2303KB (smaller than 65536 *9* 4 / 1024 = 2304KB)",
            	"9006": "QuadRenderData is removed, please use MeshRenderData instead.",
            	"9100": "texture size exceeds current device limits %d/%d",
            	"9201": "Cannot access game frame or container.",
            	"9202": "Setting window size is not supported.",
            	"9300": "The current buffer beyond the limit in ui static component, please reduce the amount",
            	"9301": "The UI has not been initialized",
            	"9302": "Can't getGFXSampler with out device",
            	"9600": "[Physics]: please check to see if physics modules are included",
            	"9610": "[Physics]: cannon.js physics system doesn't support capsule collider",
            	"9611": "[Physics]: builtin physics system doesn't support mesh collider",
            	"9612": "[Physics]: builtin physics system doesn't support cylinder collider",
            	"9620": "[Physics][Ammo]: changing the mesh is not supported after the initialization is completed",
            	"10001": "The sub-mesh contains %d vertices, which beyonds the capability (%d vertices most) of renderer of your platform.",
            	"10002": "Sub-mesh may include at most %d morph targets, but you specified %d.",
            	"11000": "WebGL context lost.",
            	"12001": "BlendFactors are disabled when using custom material, please modify the blend state in the material instead.",
            	"12002": "Can't add renderable component to this node because it already have one.",
            	"12004": "SubModel can only support %d passes.",
            	"12005": "Material already initialized, request aborted.",
            	"12006": "Pass already destroyed.",
            	"12007": "This is old usage, please swap the parameters.",
            	"12008": "GeometryRenderer: too many lines.",
            	"12009": "GeometryRenderer: too many triangles.",
            	"12100": "The font size is too big to be fitted into texture atlas. Please switch to other label cache modes or choose a smaller font size.",
            	"12101": "The asset %s has been destroyed!",
            	"13100": "Incorrect CCON magic.",
            	"13101": "Unknown CCON version number: %d.",
            	"13102": "CCON Format error.",
            	"13103": "Can not encode CCON binary: lack of text encoder.",
            	"13104": "Can not decode CCON binary: lack of text decoder.",
            	"14000": "Graph update has been interrupted since too many transitions(greater than %s) occurred during one frame.",
            	"14100": "Pool.destroy no longer take a function as parameter, Please specify destruct function in the construction of Pool instead",
            	"14200": "Can not update a static mesh.",
            	"14201": "The primitiveIndex is out of range.",
            	"14300": "Can not keep world transform due to the zero scaling of parent node",
            	"14400": "Spline error: less than 2 knots.",
            	"14401": "Spline error: less than 4 knots or not a multiple of 4.\n\n<!-- Rendering algorithm reserved: 15000 - 16000 -->",
            	"15000": "Can not find corresponding diffuse map for environment lighting, use hemisphere diffuse instead, change environment lighting type to regenerate diffuse map",
            	"15001": "Can not find environment map, disable IBL lighting",
            	"15002": "Diffuse map resource is missing, please change environment lighting type to regenerate resource",
            	"15003": "The shadow visible distance is so small that CSM stratification is not effective, Please change the value of shadowDistance so that it is 10 times greater than 0.1",
            	"15004": "The native folder may be generated from older versions, please refer https://docs.cocos.com/creator/manual/en/release-notes/ to upgrade.",
            	"16000": "'%s' is deprecated since v%s.",
            	"16001": "'%s' is deprecated since v%s, please use '%s' instead.",
            	"16002": "'%s' is removed since v%s.",
            	"16003": "'%s' is removed since v%s, please use '%s' instead.",
            	"16101": "The effect('%s') you are looking for does not exist, please confirm the effect name in the editor. NOTE: Since 3.6, the name of the built-in effect has been changed to its name in the editor, please check it out. More information please refer to https://docs.cocos.com/creator/manual/en/shader/effect-inspector.html",
            	"0100": "%s not yet implemented.",
            	"0200": "You should specify a valid DOM canvas element."
            };

            const _global = typeof window === 'undefined' ? global : window;

            const legacyCC = exports('cL', {
              _global
            });
            legacyCC.internal = {};

            const engineVersion = exports('fO', '3.6.1');
            _global.CocosEngine = legacyCC.ENGINE_VERSION = engineVersion;
            _global.cc = legacyCC;

            let logList = null;
            let ccLog = console.log.bind(console);
            let ccWarn = ccLog;
            let ccError = ccLog;

            let ccAssert = (condition, message, ...optionalParams) => {
              if (!condition) {
                console.log(`ASSERT: ${formatString(message, ...optionalParams)}`);
              }
            };

            let ccDebug = ccLog;

            function formatString(message, ...optionalParams) {
              return legacyCC.js.formatStr.apply(null, [message].concat(optionalParams));
            }

            function log(message, ...optionalParams) {
              return ccLog(message, ...optionalParams);
            }
            function warn(message, ...optionalParams) {
              return ccWarn(message, ...optionalParams);
            }
            function error(message, ...optionalParams) {
              return ccError(message, ...optionalParams);
            }
            function assert(value, message, ...optionalParams) {
              return ccAssert(value, message, ...optionalParams);
            }
            function debug(...data) {
              return ccDebug(...data);
            }
            function _resetDebugSetting(mode) {
              ccLog = ccWarn = ccError = ccAssert = ccDebug = () => {};

              if (mode === DebugMode.NONE) {
                return;
              }

              if (mode > DebugMode.ERROR) {
                const logToWebPage = msg => {
                  if (!legacyCC.game.canvas) {
                    return;
                  }

                  if (!logList) {
                    const logDiv = document.createElement('Div');
                    logDiv.setAttribute('id', 'logInfoDiv');
                    logDiv.setAttribute('width', '200');
                    logDiv.setAttribute('height', legacyCC.game.canvas.height);
                    const logDivStyle = logDiv.style;
                    logDivStyle.zIndex = '99999';
                    logDivStyle.position = 'absolute';
                    logDivStyle.top = logDivStyle.left = '0';
                    logList = document.createElement('textarea');
                    logList.setAttribute('rows', '20');
                    logList.setAttribute('cols', '30');
                    logList.setAttribute('disabled', 'true');
                    const logListStyle = logList.style;
                    logListStyle.backgroundColor = 'transparent';
                    logListStyle.borderBottom = '1px solid #cccccc';
                    logListStyle.borderTopWidth = logListStyle.borderLeftWidth = logListStyle.borderRightWidth = '0px';
                    logListStyle.borderTopStyle = logListStyle.borderLeftStyle = logListStyle.borderRightStyle = 'none';
                    logListStyle.padding = '0px';
                    logListStyle.margin = '0px';
                    logDiv.appendChild(logList);
                    legacyCC.game.canvas.parentNode.appendChild(logDiv);
                  }

                  logList.value = `${logList.value + msg}\r\n`;
                  logList.scrollTop = logList.scrollHeight;
                };

                ccError = (message, ...optionalParams) => {
                  logToWebPage(`ERROR :  ${formatString(message, ...optionalParams)}`);
                };

                ccAssert = (condition, message, ...optionalParams) => {
                  if (!condition) {
                    logToWebPage(`ASSERT: ${formatString(message, ...optionalParams)}`);
                  }
                };

                if (mode !== DebugMode.ERROR_FOR_WEB_PAGE) {
                  ccWarn = (message, ...optionalParams) => {
                    logToWebPage(`WARN :  ${formatString(message, ...optionalParams)}`);
                  };
                }

                if (mode === DebugMode.INFO_FOR_WEB_PAGE) {
                  ccLog = (message, ...optionalParams) => {
                    logToWebPage(formatString(message, ...optionalParams));
                  };
                }
              } else if (console) {
                if (!console.error) {
                  console.error = console.log;
                }

                if (!console.warn) {
                  console.warn = console.log;
                }

                if ( console.error.bind) {
                  ccError = console.error.bind(console);
                } else {
                  ccError =  console.error ;
                }

                ccAssert = (condition, message, ...optionalParams) => {
                  if (!condition) {
                    const errorText = formatString(message, ...optionalParams);

                    {
                      throw new Error(errorText);
                    }
                  }
                };
              }

              if (mode !== DebugMode.ERROR) {
                if (console.warn.bind) {
                  ccWarn = console.warn.bind(console);
                } else {
                  ccWarn =  console.warn ;
                }
              }

              if (mode <= DebugMode.INFO) {
                {
                  if (scriptEngineType === 'JavaScriptCore') {
                    ccLog = (message, ...optionalParams) => console.log.apply(console, [message, ...optionalParams]);
                  } else {
                    ccLog = console.log;
                  }
                }
              }

              if (mode <= DebugMode.VERBOSE) {
                if (typeof console.debug === 'function') {
                  const vendorDebug = console.debug.bind(console);

                  ccDebug = (...data) => vendorDebug(...data);
                }
              }
            }
            function _throw(error_) {
              {
                const stack = error_.stack;

                if (stack) {
                  error( `${error_}\n${stack}` );
                } else {
                  error(error_);
                }

                return undefined;
              }
            }

            function getTypedFormatter(type) {
              return (id, ...args) => {
                const msg =  debugInfos[id] || 'unknown id' ;

                if (args.length === 0) {
                  return msg;
                }

                return  formatString(msg, ...args) ;
              };
            }

            const logFormatter = getTypedFormatter();
            function logID(id, ...optionalParams) {
              log(logFormatter(id, ...optionalParams));
            }
            const warnFormatter = getTypedFormatter();
            function warnID(id, ...optionalParams) {
              warn(warnFormatter(id, ...optionalParams));
            }
            const errorFormatter = getTypedFormatter();
            function errorID(id, ...optionalParams) {
              error(errorFormatter(id, ...optionalParams));
            }
            const assertFormatter = getTypedFormatter();
            function assertID(condition, id, ...optionalParams) {
              if (condition) {
                return;
              }

              assert(false, assertFormatter(id, ...optionalParams));
            }
            let DebugMode;

            (function (DebugMode) {
              DebugMode[DebugMode["NONE"] = 0] = "NONE";
              DebugMode[DebugMode["VERBOSE"] = 1] = "VERBOSE";
              DebugMode[DebugMode["INFO"] = 2] = "INFO";
              DebugMode[DebugMode["WARN"] = 3] = "WARN";
              DebugMode[DebugMode["ERROR"] = 4] = "ERROR";
              DebugMode[DebugMode["INFO_FOR_WEB_PAGE"] = 5] = "INFO_FOR_WEB_PAGE";
              DebugMode[DebugMode["WARN_FOR_WEB_PAGE"] = 6] = "WARN_FOR_WEB_PAGE";
              DebugMode[DebugMode["ERROR_FOR_WEB_PAGE"] = 7] = "ERROR_FOR_WEB_PAGE";
            })(DebugMode || (DebugMode = exports('gz', {})));

            function getError(errorId, ...param) {
              return errorFormatter(errorId, ...param);
            }
            function isDisplayStats() {
              return legacyCC.profiler ? legacyCC.profiler.isShowingStats() : false;
            }
            function setDisplayStats(displayStats) {
              if (legacyCC.profiler) {
                displayStats ? legacyCC.profiler.showStats() : legacyCC.profiler.hideStats();
              }
            }

            var debug$1 = /*#__PURE__*/Object.freeze({
                __proto__: null,
                log: log,
                warn: warn,
                error: error,
                assert: assert,
                debug: debug,
                _resetDebugSetting: _resetDebugSetting,
                _throw: _throw,
                logID: logID,
                warnID: warnID,
                errorID: errorID,
                assertID: assertID,
                get DebugMode () { return DebugMode; },
                getError: getError,
                isDisplayStats: isDisplayStats,
                setDisplayStats: setDisplayStats
            });
            exports('fa', debug$1);

            let defaultLogTimes = 10;
            function setDefaultLogTimes(times) {
              if (times > 0) {
                defaultLogTimes = times;
              }
            }
            let replaceProperty;
            let removeProperty;
            let markAsWarning;
            let replacePropertyLog;
            let markAsWarningLog;
            let removePropertyLog;
            let messageID = 0;
            const messageMap = new Map();

            replacePropertyLog = (n, dp, n2, newp, f, id, s) => {
              const item = messageMap.get(id);

              if (item && item.logTimes > item.count) {
                f(`'%s' is deprecated, please use '%s' instead. ${s}`, `${n}.${dp}`, `${n2}.${newp}`);
                item.count++;
              }
            };

            replaceProperty = exports('cK', (owner, ownerName, properties) => {
              if (owner == null) return;
              properties.forEach(item => {
                const id = messageID++;
                messageMap.set(id, {
                  id,
                  count: 0,
                  logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
                });
                const target = item.target != null ? item.target : owner;
                const newName = item.newName != null ? item.newName : item.name;
                const targetName = item.targetName != null ? item.targetName : ownerName;
                const sameTarget = target === owner;
                const suggest = item.suggest ? `(${item.suggest})` : '';

                if (item.customFunction != null) {
                  owner[item.name] = function () {
                    replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                    return item.customFunction.call(this, ...arguments);
                  };
                } else if (item.customSetter != null || item.customGetter != null) {
                  const hasSetter = item.customSetter != null;
                  const hasGetter = item.customGetter != null;

                  if (hasSetter && hasGetter) {
                    Object.defineProperty(owner, item.name, {
                      get() {
                        replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                        return item.customGetter.call(this);
                      },

                      set(v) {
                        replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                        item.customSetter.call(this, v);
                      },

                      enumerable: false
                    });
                  } else if (hasSetter) {
                    Object.defineProperty(owner, item.name, {
                      set(v) {
                        replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                        item.customSetter.call(this, v);
                      },

                      enumerable: false
                    });
                  } else if (hasGetter) {
                    Object.defineProperty(owner, item.name, {
                      get() {
                        replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                        return item.customGetter.call(this);
                      },

                      enumerable: false
                    });
                  }
                } else {
                  Object.defineProperty(owner, item.name, {
                    get() {
                      replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                      return sameTarget ? this[newName] : target[newName];
                    },

                    set(v) {
                      replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);

                      if (sameTarget) {
                        this[newName] = v;
                      } else {
                        target[newName] = v;
                      }
                    },

                    enumerable: false
                  });
                }
              });
            });

            removePropertyLog = (n, dp, f, id, s) => {
              const item = messageMap.get(id);

              if (item && item.logTimes > item.count) {
                f(`'%s' has been removed. ${s}`, `${n}.${dp}`);
                item.count++;
              }
            };

            removeProperty = exports('cO', (owner, ownerName, properties) => {
              if (owner == null) return;
              properties.forEach(item => {
                const id = messageID++;
                messageMap.set(id, {
                  id,
                  count: 0,
                  logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
                });
                const suggest = item.suggest ? `(${item.suggest})` : '';
                Object.defineProperty(owner, item.name, {
                  get() {
                    return removePropertyLog(ownerName, item.name, error, id, suggest);
                  },

                  set() {
                    removePropertyLog(ownerName, item.name, error, id, suggest);
                  },

                  enumerable: false
                });
              });
            });

            markAsWarningLog = (n, dp, f, id, s) => {
              const item = messageMap.get(id);

              if (item && item.logTimes > item.count) {
                f(`'%s' is deprecated. ${s}`, `${n}.${dp}`);
                item.count++;
              }
            };

            markAsWarning = exports('cQ', (owner, ownerName, properties) => {
              if (owner == null) return;

              const _defaultGetSet = (d, n, dp, f, id, s) => {
                if (d.get) {
                  const oldGet = d.get;

                  d.get = function () {
                    markAsWarningLog(n, dp, f, id, s);
                    return oldGet.call(this);
                  };
                }

                if (d.set) {
                  const oldSet = d.set;

                  d.set = function (v) {
                    markAsWarningLog(n, dp, f, id, s);
                    oldSet.call(this, v);
                  };
                }

                Object.defineProperty(owner, dp, d);
              };

              properties.forEach(item => {
                const deprecatedProp = item.name;
                const descriptor = Object.getOwnPropertyDescriptor(owner, deprecatedProp);

                if (!descriptor || !descriptor.configurable) {
                  return;
                }

                const id = messageID++;
                messageMap.set(id, {
                  id,
                  count: 0,
                  logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
                });
                const suggest = item.suggest ? `(${item.suggest})` : '';

                if (typeof descriptor.value !== 'undefined') {
                  if (typeof descriptor.value === 'function') {
                    const oldValue = descriptor.value;

                    owner[deprecatedProp] = function () {
                      markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                      return oldValue.call(this, ...arguments);
                    };
                  } else {
                    let oldValue = descriptor.value;
                    Object.defineProperty(owner, deprecatedProp, {
                      configurable: true,

                      get() {
                        markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                        return oldValue;
                      }

                    });

                    if (descriptor.writable) {
                      Object.defineProperty(owner, deprecatedProp, {
                        set(value) {
                          markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                          oldValue = value;
                        }

                      });
                    }
                  }
                } else {
                  _defaultGetSet(descriptor, ownerName, deprecatedProp, warn, id, suggest);
                }

                Object.defineProperty(owner, deprecatedProp, {
                  enumerable: false
                });
              });
            });

            const topLevelDeprecateList = {};
            function deprecateModuleExportedName(deprecateList) {
              for (let deprecateName in deprecateList) {
                const deprecateInfo = deprecateList[deprecateName];
                topLevelDeprecateList[deprecateName] = deprecateInfo;
              }
            }

            function _checkObsoleteByName(checkName) {
              const deprecateInfo = topLevelDeprecateList[checkName];

              if (!deprecateInfo) {
                return;
              }

              const {
                newName,
                since,
                removed
              } = deprecateInfo;

              if (removed) {
                if (newName) {
                  errorID(16003, checkName, since, newName);
                } else {
                  errorID(16002, checkName, since);
                }
              } else if (newName) {
                warnID(16001, checkName, since, newName);
              } else {
                warnID(16000, checkName, since);
              }
            }

            function __checkObsolete__(checkList) {
              for (let checkName of checkList) {
                _checkObsoleteByName(checkName);
              }
            }

            let _cachedProxy;

            function __checkObsoleteInNamespace__(ccNamespace) {
              if (!_cachedProxy) {
                if (typeof Proxy === 'undefined') {
                  _cachedProxy = {};
                } else {
                  _cachedProxy = new Proxy(ccNamespace, {
                    get(target, name, receiver) {
                      _checkObsoleteByName(name);

                      return Reflect.get(target, name, receiver);
                    }

                  });
                }
              }

              return _cachedProxy;
            }

            class MutableForwardIterator {
              constructor(array) {
                this.i = 0;
                this.array = array;
              }

              get length() {
                return this.array.length;
              }

              set length(value) {
                this.array.length = value;

                if (this.i >= value) {
                  this.i = value - 1;
                }
              }

              remove(value) {
                const index = this.array.indexOf(value);

                if (index >= 0) {
                  this.removeAt(index);
                }
              }

              removeAt(i) {
                this.array.splice(i, 1);

                if (i <= this.i) {
                  --this.i;
                }
              }

              fastRemove(value) {
                const index = this.array.indexOf(value);

                if (index >= 0) {
                  this.fastRemoveAt(index);
                }
              }

              fastRemoveAt(i) {
                const array = this.array;
                array[i] = array[array.length - 1];
                --array.length;

                if (i <= this.i) {
                  --this.i;
                }
              }

              push(item) {
                this.array.push(item);
              }

            } exports('f0', MutableForwardIterator);

            function removeAt(array, index) {
              array.splice(index, 1);
            }
            function fastRemoveAt(array, index) {
              const length = array.length;

              if (index < 0 || index >= length) {
                return;
              }

              array[index] = array[length - 1];
              array.length = length - 1;
            }
            function remove(array, value) {
              const index = array.indexOf(value);

              if (index >= 0) {
                removeAt(array, index);
                return true;
              } else {
                return false;
              }
            }
            function fastRemove(array, value) {
              const index = array.indexOf(value);

              if (index >= 0) {
                array[index] = array[array.length - 1];
                --array.length;
              }
            }
            function removeIf(array, predicate) {
              const index = array.findIndex(predicate);

              if (index >= 0) {
                const value = array[index];
                removeAt(array, index);
                return value;
              }
            }
            function verifyType(array, type) {
              if (array && array.length > 0) {
                for (const item of array) {
                  if (!(item instanceof type)) {
                    logID(1300);
                    return false;
                  }
                }
              }

              return true;
            }
            function removeArray(array, removals) {
              for (let i = 0, l = removals.length; i < l; i++) {
                remove(array, removals[i]);
              }
            }
            function appendObjectsAt(array, objects, index) {
              array.splice.apply(array, [index, 0, ...objects]);
              return array;
            }
            function contains(array, value) {
              return array.indexOf(value) >= 0;
            }
            function copy(array) {
              const len = array.length;
              const cloned = new Array(len);

              for (let i = 0; i < len; i += 1) {
                cloned[i] = array[i];
              }

              return cloned;
            }

            var jsarray = /*#__PURE__*/Object.freeze({
                __proto__: null,
                removeAt: removeAt,
                fastRemoveAt: fastRemoveAt,
                remove: remove,
                fastRemove: fastRemove,
                removeIf: removeIf,
                verifyType: verifyType,
                removeArray: removeArray,
                appendObjectsAt: appendObjectsAt,
                contains: contains,
                copy: copy,
                MutableForwardIterator: MutableForwardIterator
            });

            const NonUuidMark = '.';
            class IDGenerator {
              constructor(category) {
                this.id = void 0;
                this.prefix = void 0;
                this.id = 0 | Math.random() * 998;
                this.prefix = category ? category + NonUuidMark : '';
              }

              getNewId() {

                return this.prefix + ++this.id;
              }

            }
            IDGenerator.global = new IDGenerator('global');

            const tempCIDGenerator = new IDGenerator('TmpCId.');
            const aliasesTag = typeof Symbol === 'undefined' ? '__aliases__' : Symbol('[[Aliases]]');
            const classNameTag = '__classname__';
            const classIdTag = '__cid__';
            function isNumber(object) {
              return typeof object === 'number' || object instanceof Number;
            }
            function isString(object) {
              return typeof object === 'string' || object instanceof String;
            }
            function isEmptyObject(obj) {
              for (const key in obj) {
                return false;
              }

              return true;
            }
            const value = (() => {
              const descriptor = {
                value: undefined,
                enumerable: false,
                writable: false,
                configurable: true
              };
              return (object, propertyName, value_, writable, enumerable) => {
                descriptor.value = value_;
                descriptor.writable = writable;
                descriptor.enumerable = enumerable;
                Object.defineProperty(object, propertyName, descriptor);
                descriptor.value = undefined;
              };
            })();
            const getset = (() => {
              const descriptor = {
                get: undefined,
                set: undefined,
                enumerable: false
              };
              return (object, propertyName, getter, setter, enumerable = false, configurable = false) => {
                if (typeof setter === 'boolean') {
                  enumerable = setter;
                  setter = undefined;
                }

                descriptor.get = getter;
                descriptor.set = setter;
                descriptor.enumerable = enumerable;
                descriptor.configurable = configurable;
                Object.defineProperty(object, propertyName, descriptor);
                descriptor.get = undefined;
                descriptor.set = undefined;
              };
            })();
            const get = (() => {
              const descriptor = {
                get: undefined,
                enumerable: false,
                configurable: false
              };
              return (object, propertyName, getter, enumerable, configurable) => {
                descriptor.get = getter;
                descriptor.enumerable = enumerable;
                descriptor.configurable = configurable;
                Object.defineProperty(object, propertyName, descriptor);
                descriptor.get = undefined;
              };
            })();
            const set = (() => {
              const descriptor = {
                set: undefined,
                enumerable: false,
                configurable: false
              };
              return (object, propertyName, setter, enumerable, configurable) => {
                descriptor.set = setter;
                descriptor.enumerable = enumerable;
                descriptor.configurable = configurable;
                Object.defineProperty(object, propertyName, descriptor);
                descriptor.set = undefined;
              };
            })();
            function createMap(forceDictMode) {
              const map = Object.create(null);

              if (forceDictMode) {
                const INVALID_IDENTIFIER_1 = '.';
                const INVALID_IDENTIFIER_2 = '/';
                map[INVALID_IDENTIFIER_1] = 1;
                map[INVALID_IDENTIFIER_2] = 1;
                delete map[INVALID_IDENTIFIER_1];
                delete map[INVALID_IDENTIFIER_2];
              }

              return map;
            }
            function getClassName(objOrCtor) {
              if (typeof objOrCtor === 'function') {
                const prototype = objOrCtor.prototype;

                if (prototype && prototype.hasOwnProperty(classNameTag) && prototype[classNameTag]) {
                  return prototype[classNameTag];
                }

                let retval = '';

                if (objOrCtor.name) {
                  retval = objOrCtor.name;
                }

                if (objOrCtor.toString) {
                  let arr;
                  const str = objOrCtor.toString();

                  if (str.charAt(0) === '[') {
                    arr = /\[\w+\s*(\w+)\]/.exec(str);
                  } else {
                    arr = /function\s*(\w+)/.exec(str);
                  }

                  if (arr && arr.length === 2) {
                    retval = arr[1];
                  }
                }

                return retval !== 'Object' ? retval : '';
              } else if (objOrCtor && objOrCtor.constructor) {
                return getClassName(objOrCtor.constructor);
              }

              return '';
            }
            function obsolete(object, obsoleted, newExpr, writable) {
              const extractPropName = /([^.]+)$/;
              const oldProp = extractPropName.exec(obsoleted)[0];
              const newProp = extractPropName.exec(newExpr)[0];

              function getter() {

                return this[newProp];
              }

              function setter(value_) {

                this[newProp] = value_;
              }

              if (writable) {
                getset(object, oldProp, getter, setter);
              } else {
                get(object, oldProp, getter);
              }
            }
            function obsoletes(obj, objName, props, writable) {
              for (const obsoleted in props) {
                const newName = props[obsoleted];
                obsolete(obj, `${objName}.${obsoleted}`, newName, writable);
              }
            }
            const REGEXP_NUM_OR_STR = /(%d)|(%s)/;
            const REGEXP_STR = /%s/;
            function formatStr(msg, ...subst) {
              if (arguments.length === 0) {
                return '';
              }

              if (subst.length === 0) {
                return `${msg}`;
              }

              const hasSubstitution = typeof msg === 'string' && REGEXP_NUM_OR_STR.test(msg);

              if (hasSubstitution) {
                for (const arg of subst) {
                  const regExpToTest = typeof arg === 'number' ? REGEXP_NUM_OR_STR : REGEXP_STR;

                  if (regExpToTest.test(msg)) {
                    const notReplaceFunction = `${arg}`;
                    msg = msg.replace(regExpToTest, notReplaceFunction);
                  } else {
                    msg += ` ${arg}`;
                  }
                }
              } else {
                for (const arg of subst) {
                  msg += ` ${arg}`;
                }
              }

              return msg;
            }
            function shiftArguments() {
              const len = arguments.length - 1;
              const args = new Array(len);

              for (let i = 0; i < len; ++i) {
                args[i] = arguments[i + 1];
              }

              return args;
            }
            function getPropertyDescriptor(object, propertyName) {
              while (object) {
                const pd = Object.getOwnPropertyDescriptor(object, propertyName);

                if (pd) {
                  return pd;
                }

                object = Object.getPrototypeOf(object);
              }

              return null;
            }

            function _copyprop(name, source, target) {
              const pd = getPropertyDescriptor(source, name);

              if (pd) {
                Object.defineProperty(target, name, pd);
              }
            }

            function copyAllProperties(source, target, excepts) {
              const propertyNames = Object.getOwnPropertyNames(source);

              for (let i = 0, len = propertyNames.length; i < len; ++i) {
                const propertyName = propertyNames[i];

                if (excepts.indexOf(propertyName) !== -1) {
                  continue;
                }

                _copyprop(propertyName, source, target);
              }
            }
            function addon(object, ...sources) {
              object = object || {};

              for (const source of sources) {
                if (source) {
                  if (typeof source !== 'object') {
                    errorID(5402, source);
                    continue;
                  }

                  for (const name in source) {
                    if (!(name in object)) {
                      _copyprop(name, source, object);
                    }
                  }
                }
              }

              return object;
            }
            function mixin(object, ...sources) {
              object = object || {};

              for (const source of sources) {
                if (source) {
                  if (typeof source !== 'object') {
                    errorID(5403, source);
                    continue;
                  }

                  for (const name in source) {
                    _copyprop(name, source, object);
                  }
                }
              }

              return object;
            }
            function extend(cls, base) {

              for (const p in base) {
                if (base.hasOwnProperty(p)) {
                  cls[p] = base[p];
                }
              }

              cls.prototype = Object.create(base.prototype, {
                constructor: {
                  value: cls,
                  writable: true,
                  configurable: true
                }
              });
              return cls;
            }
            function getSuper(constructor) {
              const proto = constructor.prototype;
              const dunderProto = proto && Object.getPrototypeOf(proto);
              return dunderProto && dunderProto.constructor;
            }
            function isChildClassOf(subclass, superclass) {
              if (subclass && superclass) {
                if (typeof subclass !== 'function') {
                  return false;
                }

                if (typeof superclass !== 'function') {

                  return false;
                }

                if (subclass === superclass) {
                  return true;
                }

                for (;;) {
                  subclass = getSuper(subclass);

                  if (!subclass) {
                    return false;
                  }

                  if (subclass === superclass) {
                    return true;
                  }
                }
              }

              return false;
            }
            function clear(object) {
              for (const key of Object.keys(object)) {
                delete object[key];
              }
            }

            function isTempClassId(id) {
              return typeof id !== 'string' || id.startsWith(tempCIDGenerator.prefix);
            }

            const _idToClass = createMap(true);
            const _nameToClass = createMap(true);

            function setup(tag, table, allowExist) {
              return function (id, constructor) {
                if (constructor.prototype.hasOwnProperty(tag)) {
                  delete table[constructor.prototype[tag]];
                }

                value(constructor.prototype, tag, id);

                if (id) {
                  const registered = table[id];

                  if (!allowExist && registered && registered !== constructor) {
                    let err = `A Class already exists with the same ${tag} : "${id}".`;

                    error(err);
                  } else {
                    table[id] = constructor;
                  }
                }
              };
            }

            const _setClassId = setup('__cid__', _idToClass, false);
            const doSetClassName = setup('__classname__', _nameToClass, true);
            function setClassName(className, constructor) {
              doSetClassName(className, constructor);

              if (!constructor.prototype.hasOwnProperty(classIdTag)) {
                const id = className || tempCIDGenerator.getNewId();

                if (id) {
                  _setClassId(id, constructor);
                }
              }
            }
            function setClassAlias(target, alias) {
              const nameRegistry = _nameToClass[alias];
              const idRegistry = _idToClass[alias];
              let ok = true;

              if (nameRegistry && nameRegistry !== target) {
                error(`"${alias}" has already been set as name or alias of another class.`);
                ok = false;
              }

              if (idRegistry && idRegistry !== target) {
                error(`"${alias}" has already been set as id or alias of another class.`);
                ok = false;
              }

              if (ok) {
                let classAliases = target[aliasesTag];

                if (!classAliases) {
                  classAliases = [];
                  target[aliasesTag] = classAliases;
                }

                classAliases.push(alias);
                _nameToClass[alias] = target;
                _idToClass[alias] = target;
              }
            }
            function unregisterClass(...constructors) {
              for (const constructor of constructors) {
                const p = constructor.prototype;
                const classId = p[classIdTag];

                if (classId) {
                  delete _idToClass[classId];
                }

                const classname = p[classNameTag];

                if (classname) {
                  delete _nameToClass[classname];
                }

                const aliases = p[aliasesTag];

                if (aliases) {
                  for (let iAlias = 0; iAlias < aliases.length; ++iAlias) {
                    const alias = aliases[iAlias];
                    delete _nameToClass[alias];
                    delete _idToClass[alias];
                  }
                }
              }
            }
            function _getClassById(classId) {
              return getClassById(classId);
            }
            function getClassById(classId) {
              return _idToClass[classId];
            }
            function getClassByName(classname) {
              return _nameToClass[classname];
            }
            function _getClassId(obj, allowTempId) {
              return getClassId(obj, allowTempId);
            }
            function getClassId(obj, allowTempId) {
              allowTempId = typeof allowTempId !== 'undefined' ? allowTempId : true;
              let res;

              if (typeof obj === 'function' && obj.prototype.hasOwnProperty(classIdTag)) {
                res = obj.prototype[classIdTag];

                if (!allowTempId && ( EDITOR$1) && isTempClassId(res)) {
                  return '';
                }

                return res;
              }

              if (obj && obj.constructor) {
                const prototype = obj.constructor.prototype;

                if (prototype && prototype.hasOwnProperty(classIdTag)) {
                  res = obj[classIdTag];

                  if (!allowTempId && ( EDITOR$1) && isTempClassId(res)) {
                    return '';
                  }

                  return res;
                }
              }

              return '';
            }

            class Pool {
              get() {
                return this._get();
              }

              constructor(_0, _1) {
                this.count = void 0;
                this._pool = void 0;
                this._cleanup = void 0;
                const size = _1 === undefined ? _0 : _1;
                const cleanupFunc = _1 === undefined ? null : _0;
                this.count = 0;
                this._pool = new Array(size);
                this._cleanup = cleanupFunc;
              }

              _get() {
                if (this.count > 0) {
                  --this.count;
                  const cache = this._pool[this.count];
                  this._pool[this.count] = null;
                  return cache;
                }

                return null;
              }

              put(obj) {
                const pool = this._pool;

                if (this.count < pool.length) {
                  if (this._cleanup && this._cleanup(obj) === false) {
                    return;
                  }

                  pool[this.count] = obj;
                  ++this.count;
                }
              }

              resize(length) {
                if (length >= 0) {
                  this._pool.length = length;

                  if (this.count > length) {
                    this.count = length;
                  }
                }
              }

            } exports('dL', Pool);

            const array = exports('eT', jsarray);
            const js = exports('dt', {
              IDGenerator,
              Pool,
              array: jsarray,
              isNumber,
              isString,
              isEmptyObject,
              getPropertyDescriptor,
              addon,
              mixin,
              extend,
              getSuper,
              isChildClassOf,
              clear,
              value,
              getset,
              get,
              set,
              unregisterClass,
              getClassName,
              setClassName,
              setClassAlias,
              getClassByName,
              getClassById,

              get _registeredClassNames() {
                return { ..._nameToClass
                };
              },

              set _registeredClassNames(value) {
                clear(_nameToClass);
                Object.assign(_nameToClass, value);
              },

              get _registeredClassIds() {
                return { ..._idToClass
                };
              },

              set _registeredClassIds(value) {
                clear(_idToClass);
                Object.assign(_idToClass, value);
              },

              _getClassId,
              getClassId,
              _setClassId,
              _getClassById,
              obsolete,
              obsoletes,
              formatStr,
              shiftArguments,
              createMap
            });
            legacyCC.js = js;

            var js$1 = /*#__PURE__*/Object.freeze({
                __proto__: null,
                array: array,
                js: js,
                IDGenerator: IDGenerator,
                Pool: Pool,
                isNumber: isNumber,
                isString: isString,
                isEmptyObject: isEmptyObject,
                value: value,
                getset: getset,
                get: get,
                set: set,
                createMap: createMap,
                getClassName: getClassName,
                obsolete: obsolete,
                obsoletes: obsoletes,
                formatStr: formatStr,
                shiftArguments: shiftArguments,
                getPropertyDescriptor: getPropertyDescriptor,
                copyAllProperties: copyAllProperties,
                addon: addon,
                mixin: mixin,
                extend: extend,
                getSuper: getSuper,
                isChildClassOf: isChildClassOf,
                clear: clear,
                _idToClass: _idToClass,
                _nameToClass: _nameToClass,
                _setClassId: _setClassId,
                setClassName: setClassName,
                setClassAlias: setClassAlias,
                unregisterClass: unregisterClass,
                _getClassById: _getClassById,
                getClassById: getClassById,
                getClassByName: getClassByName,
                _getClassId: _getClassId,
                getClassId: getClassId
            });
            exports('g7', js$1);

            function BitMask(obj) {
              if ('__bitmask__' in obj) {
                return obj;
              }

              value(obj, '__bitmask__', null, true);
              let lastIndex = -1;
              const keys = Object.keys(obj);

              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                let val = obj[key];

                if (val === -1) {
                  val = ++lastIndex;
                  obj[key] = val;
                } else if (typeof val === 'number') {
                  lastIndex = val;
                } else if (typeof val === 'string' && Number.isInteger(parseFloat(key))) {
                  continue;
                }

                const reverseKey = `${val}`;

                if (key !== reverseKey) {

                  value(obj, reverseKey, key);
                }
              }

              return obj;
            }

            BitMask.isBitMask = BitMaskType => BitMaskType && BitMaskType.hasOwnProperty('__bitmask__');

            BitMask.getList = BitMaskDef => {
              if (BitMaskDef.__bitmask__) {
                return BitMaskDef.__bitmask__;
              }

              const bitlist = BitMaskDef.__bitmask__ = [];

              for (const name in BitMaskDef) {
                const v = BitMaskDef[name];

                if (Number.isInteger(v)) {
                  bitlist.push({
                    name,
                    value: v
                  });
                }
              }

              bitlist.sort((a, b) => a.value - b.value);
              return bitlist;
            };
            legacyCC.BitMask = BitMask;

            function assertIsNonNullable(expr, message) {
              assertIsTrue(!(expr === null || expr === undefined), message);
            }
            function assertIsTrue(expr, message) {
              if ( !expr) {
                throw new Error(`Assertion failed: ${message !== null && message !== void 0 ? message : '<no-message>'}`);
              }
            }
            function assertsArrayIndex(array, index) {
              assertIsTrue(index >= 0 && index < array.length, `Array index ${index} out of bounds: [0, ${array.length})`);
            }

            function Enum(obj) {
              if ('__enums__' in obj) {
                return obj;
              }

              value(obj, '__enums__', null, true);
              return Enum.update(obj);
            }

            Enum.update = obj => {
              let lastIndex = -1;
              const keys = Object.keys(obj);

              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                let val = obj[key];

                if (val === -1) {
                  val = ++lastIndex;
                  obj[key] = val;
                } else if (typeof val === 'number') {
                  lastIndex = val;
                } else if (typeof val === 'string' && Number.isInteger(parseFloat(key))) {
                  continue;
                }

                const reverseKey = `${val}`;

                if (key !== reverseKey) {

                  value(obj, reverseKey, key);
                }
              }

              if (Array.isArray(obj.__enums__)) {
                updateList(obj);
              }

              return obj;
            };

            (function (_Enum) {})(Enum || (Enum = exports('e8', {})));

            Enum.isEnum = enumType => enumType && enumType.hasOwnProperty('__enums__');

            function assertIsEnum(enumType) {
              assertIsTrue(enumType.hasOwnProperty('__enums__'));
            }

            Enum.getList = enumType => {
              assertIsEnum(enumType);

              if (enumType.__enums__) {
                return enumType.__enums__;
              }

              return updateList(enumType);
            };

            function updateList(enumType) {
              assertIsEnum(enumType);
              const enums = enumType.__enums__ || [];
              enums.length = 0;

              for (const name in enumType) {
                const v = enumType[name];

                if (Number.isInteger(v)) {
                  enums.push({
                    name,
                    value: v
                  });
                }
              }

              enums.sort((a, b) => a.value - b.value);
              enumType.__enums__ = enums;
              return enums;
            }

            function ccenum(enumType) {
              if (!('__enums__' in enumType)) {
                value(enumType, '__enums__', null, true);
              }
            }
            legacyCC.Enum = Enum;

            class ValueType {
              clone() {
                errorID(100, `${getClassName(this)}.clone`);
                return this;
              }

              equals(other) {
                return false;
              }

              set(other) {
                errorID(100, `${getClassName(this)}.set`);
              }

              toString() {
                return `${''}`;
              }

            } exports('V', ValueType);
            setClassName('cc.ValueType', ValueType);
            legacyCC.ValueType = ValueType;

            var Category;

            (function (Category) {
              Category["PATH"] = "path";
              Category["ENGINE"] = "engine";
              Category["ASSETS"] = "assets";
              Category["SCRIPTING"] = "scripting";
              Category["PHYSICS"] = "physics";
              Category["RENDERING"] = "rendering";
              Category["LAUNCH"] = "launch";
              Category["SCREEN"] = "screen";
              Category["SPLASH_SCREEN"] = "splashScreen";
              Category["ANIMATION"] = "animation";
              Category["PROFILING"] = "profiling";
              Category["PLUGINS"] = "plugins";
            })(Category || (Category = {}));

            class Settings {
              constructor() {
                this._settings = {};
                this._override = {};
              }

              init(path = '', overrides = {}) {
                for (const categoryName in overrides) {
                  const category = overrides[categoryName];

                  if (category) {
                    for (const name in category) {
                      this.overrideSettings(categoryName, name, category[name]);
                    }
                  }
                }

                if (!path) return Promise.resolve();
                return new Promise((resolve, reject) => {
                  if ( !path.startsWith('http')) {
                    const result = fsUtils.readJsonSync(path);

                    if (result instanceof Error) {
                      reject(result);
                    } else {
                      this._settings = result;
                      resolve();
                    }
                  } else {
                    const xhr = new XMLHttpRequest();
                    xhr.open('GET', path);
                    xhr.responseType = 'text';

                    xhr.onload = () => {
                      this._settings = JSON.parse(xhr.response);
                      resolve();
                    };

                    xhr.onerror = () => {
                      reject(new Error('request settings failed!'));
                    };

                    xhr.send(null);
                  }
                });
              }

              overrideSettings(category, name, value) {
                if (!(category in this._override)) {
                  this._override[category] = {};
                }

                this._override[category][name] = value;
              }

              querySettings(category, name) {
                if (category in this._override) {
                  const categorySettings = this._override[category];

                  if (categorySettings && name in categorySettings) {
                    return categorySettings[name];
                  }
                }

                if (category in this._settings) {
                  const categorySettings = this._settings[category];

                  if (categorySettings && name in categorySettings) {
                    return categorySettings[name];
                  }
                }

                return null;
              }

            } exports('fC', Settings);
            Settings.Category = Category;
            const settings = exports('fB', new Settings());
            legacyCC.settings = settings;

            const SUPPORT_TEXTURE_FORMATS = ['.astc', '.pkm', '.pvr', '.webp', '.jpg', '.jpeg', '.bmp', '.png'];
            const KEY = {
              none: 0,
              back: 6,
              menu: 18,
              backspace: 8,
              tab: 9,
              enter: 13,
              shift: 16,
              ctrl: 17,
              alt: 18,
              pause: 19,
              capslock: 20,
              escape: 27,
              space: 32,
              pageup: 33,
              pagedown: 34,
              end: 35,
              home: 36,
              left: 37,
              up: 38,
              right: 39,
              down: 40,
              select: 41,
              insert: 45,
              Delete: 46,
              0: 48,
              1: 49,
              2: 50,
              3: 51,
              4: 52,
              5: 53,
              6: 54,
              7: 55,
              8: 56,
              9: 57,
              a: 65,
              b: 66,
              c: 67,
              d: 68,
              e: 69,
              f: 70,
              g: 71,
              h: 72,
              i: 73,
              j: 74,
              k: 75,
              l: 76,
              m: 77,
              n: 78,
              o: 79,
              p: 80,
              q: 81,
              r: 82,
              s: 83,
              t: 84,
              u: 85,
              v: 86,
              w: 87,
              x: 88,
              y: 89,
              z: 90,
              num0: 96,
              num1: 97,
              num2: 98,
              num3: 99,
              num4: 100,
              num5: 101,
              num6: 102,
              num7: 103,
              num8: 104,
              num9: 105,
              '*': 106,
              '+': 107,
              '-': 109,
              numdel: 110,
              '/': 111,
              f1: 112,
              f2: 113,
              f3: 114,
              f4: 115,
              f5: 116,
              f6: 117,
              f7: 118,
              f8: 119,
              f9: 120,
              f10: 121,
              f11: 122,
              f12: 123,
              numlock: 144,
              scrolllock: 145,
              ';': 186,
              semicolon: 186,
              equal: 187,
              '=': 187,
              ',': 188,
              comma: 188,
              dash: 189,
              '.': 190,
              period: 190,
              forwardslash: 191,
              grave: 192,
              '[': 219,
              openbracket: 219,
              backslash: 220,
              ']': 221,
              closebracket: 221,
              quote: 222,
              dpadLeft: 1000,
              dpadRight: 1001,
              dpadUp: 1003,
              dpadDown: 1004,
              dpadCenter: 1005
            };
            const macro = exports('d7', {
              SUPPORT_TEXTURE_FORMATS,
              KEY,
              RAD: Math.PI / 180,
              DEG: 180 / Math.PI,
              REPEAT_FOREVER: Number.MAX_VALUE - 1,
              FLT_EPSILON: 0.0000001192092896,
              ORIENTATION_PORTRAIT: 1,
              ORIENTATION_LANDSCAPE: 2,
              ORIENTATION_AUTO: 3,
              ENABLE_TILEDMAP_CULLING: true,
              TOUCH_TIMEOUT: 5000,
              ENABLE_TRANSPARENT_CANVAS: false,
              ENABLE_WEBGL_ANTIALIAS: true,
              ENABLE_ANTIALIAS_FXAA: false,
              ENABLE_BLOOM: false,
              CLEANUP_IMAGE_CACHE: false,
              ENABLE_MULTI_TOUCH: true,
              MAX_LABEL_CANVAS_POOL_SIZE: 20,
              ENABLE_WEBGL_HIGHP_STRUCT_VALUES: false,
              BATCHER2D_MEM_INCREMENT: 144,
              CUSTOM_PIPELINE_NAME: '',

              init() {
                {
                  this.CLEANUP_IMAGE_CACHE = true;
                }

                const defaultValues = settings.querySettings(Settings.Category.ENGINE, 'macros');

                if (defaultValues) {
                  for (const key in defaultValues) {
                    macro[key] = defaultValues[key];
                  }
                }
              }

            });
            legacyCC.macro = macro;

            const BUILTIN_CLASSID_RE = /^(?:cc|dragonBones|sp|ccsg)\..+/;
            const BASE64_KEYS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            const values = new Array(123);

            for (let i = 0; i < 123; ++i) {
              values[i] = 64;
            }

            for (let i = 0; i < 64; ++i) {
              values[BASE64_KEYS.charCodeAt(i)] = i;
            }

            const BASE64_VALUES = values;
            function propertyDefine(ctor, sameNameGetSets, diffNameGetSets) {
              function define(np, propName, getter, setter) {
                const pd = Object.getOwnPropertyDescriptor(np, propName);

                if (pd) {
                  if (pd.get) {
                    np[getter] = pd.get;
                  }

                  if (pd.set && setter) {
                    np[setter] = pd.set;
                  }
                } else {
                  const getterFunc = np[getter];

                  {
                    getset(np, propName, getterFunc, np[setter]);
                  }
                }
              }

              let propName;
              const np = ctor.prototype;

              for (let i = 0; i < sameNameGetSets.length; i++) {
                propName = sameNameGetSets[i];
                const suffix = propName[0].toUpperCase() + propName.slice(1);
                define(np, propName, `get${suffix}`, `set${suffix}`);
              }

              for (propName in diffNameGetSets) {
                const gs = diffNameGetSets[propName];
                define(np, propName, gs[0], gs[1]);
              }
            }
            function pushToMap(map, key, value, pushFront) {
              const exists = map[key];

              if (exists) {
                if (Array.isArray(exists)) {
                  if (pushFront) {
                    exists.push(exists[0]);
                    exists[0] = value;
                  } else {
                    exists.push(value);
                  }
                } else {
                  map[key] = pushFront ? [value, exists] : [exists, value];
                }
              } else {
                map[key] = value;
              }
            }
            function contains$1(refNode, otherNode) {
              if (typeof refNode.contains === 'function') {
                return refNode.contains(otherNode);
              } else if (typeof refNode.compareDocumentPosition === 'function') {
                return !!(refNode.compareDocumentPosition(otherNode) & 16);
              } else {
                let node = otherNode.parentNode;

                if (node) {
                  do {
                    if (node === refNode) {
                      return true;
                    } else {
                      node = node.parentNode;
                    }
                  } while (node !== null);
                }

                return false;
              }
            }
            function isDomNode(obj) {
              if (typeof window === 'object' && typeof Node === 'function') {
                return obj instanceof Node;
              } else {
                return !!obj && typeof obj === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';
              }
            }
            function callInNextTick(callback, p1, p2) {
              if (callback) {
                setTimeout(() => {
                  callback(p1, p2);
                }, 0);
              }
            }
            function tryCatchFunctor_EDITOR(funcName) {
              return Function('target', `${'try {\n' + '  target.'}${funcName}();\n` + `}\n` + `catch (e) {\n` + `  cc._throw(e);\n` + `}`);
            }
            function isPlainEmptyObj_DEV(obj) {
              if (!obj || obj.constructor !== Object) {
                return false;
              }

              return isEmptyObject(obj);
            }
            function clampf(value, min_inclusive, max_inclusive) {
              if (min_inclusive > max_inclusive) {
                const temp = min_inclusive;
                min_inclusive = max_inclusive;
                max_inclusive = temp;
              }

              return value < min_inclusive ? min_inclusive : value < max_inclusive ? value : max_inclusive;
            }
            function degreesToRadians(angle) {
              return angle * macro.RAD;
            }
            function radiansToDegrees(angle) {
              return angle * macro.DEG;
            }
            legacyCC.misc = {
              BUILTIN_CLASSID_RE,
              BASE64_VALUES,
              propertyDefine,
              pushToMap,
              contains: contains$1,
              isDomNode,
              callInNextTick,
              isPlainEmptyObj_DEV,
              clampf,
              degreesToRadians,
              radiansToDegrees
            };

            var misc = /*#__PURE__*/Object.freeze({
                __proto__: null,
                BUILTIN_CLASSID_RE: BUILTIN_CLASSID_RE,
                BASE64_VALUES: BASE64_VALUES,
                propertyDefine: propertyDefine,
                pushToMap: pushToMap,
                contains: contains$1,
                isDomNode: isDomNode,
                callInNextTick: callInNextTick,
                tryCatchFunctor_EDITOR: tryCatchFunctor_EDITOR,
                isPlainEmptyObj_DEV: isPlainEmptyObj_DEV,
                clampf: clampf,
                degreesToRadians: degreesToRadians,
                radiansToDegrees: radiansToDegrees
            });
            exports('g8', misc);

            const DELIMETER = '$_$';
            function createAttrsSingle(owner, superAttrs) {
              const attrs = superAttrs ? Object.create(superAttrs) : {};
              value(owner, '__attrs__', attrs);
              return attrs;
            }
            function createAttrs(subclass) {
              if (typeof subclass !== 'function') {
                const instance = subclass;
                return createAttrsSingle(instance, getClassAttrs(instance.constructor));
              }

              let superClass;
              const chains = legacyCC.Class.getInheritanceChain(subclass);

              for (let i = chains.length - 1; i >= 0; i--) {
                const cls = chains[i];

                const attrs = cls.hasOwnProperty('__attrs__') && cls.__attrs__;

                if (!attrs) {
                  superClass = chains[i + 1];
                  createAttrsSingle(cls, superClass && superClass.__attrs__);
                }
              }

              superClass = chains[0];
              createAttrsSingle(subclass, superClass && superClass.__attrs__);
              return subclass.__attrs__;
            }
            function attr(constructor, propertyName) {
              const attrs = getClassAttrs(constructor);
              const prefix = propertyName + DELIMETER;
              const ret = {};

              for (const key in attrs) {
                if (key.startsWith(prefix)) {
                  ret[key.slice(prefix.length)] = attrs[key];
                }
              }

              return ret;
            }
            function getClassAttrs(constructor) {
              return constructor.hasOwnProperty('__attrs__') && constructor.__attrs__ || createAttrs(constructor);
            }
            function setClassAttr(ctor, propName, key, value) {
              getClassAttrs(ctor)[propName + DELIMETER + key] = value;
            }
            class PrimitiveType {
              constructor(name, defaultValue) {
                this.name = void 0;
                this.default = void 0;
                this.name = name;
                this.default = defaultValue;
              }

              toString() {
                return this.name;
              }

            }
            const CCInteger = exports('ft', new PrimitiveType('Integer', 0));
            legacyCC.Integer = CCInteger;
            legacyCC.CCInteger = CCInteger;
            const CCFloat = exports('ez', new PrimitiveType('Float', 0.0));
            legacyCC.Float = CCFloat;
            legacyCC.CCFloat = CCFloat;

            const CCBoolean = exports('eD', new PrimitiveType('Boolean', false));
            legacyCC.Boolean = CCBoolean;
            legacyCC.CCBoolean = CCBoolean;
            const CCString = exports('eC', new PrimitiveType('String', ''));
            legacyCC.String = CCString;
            legacyCC.CCString = CCString;
            function getTypeChecker_ET(type, attributeName) {
              return function (constructor, mainPropertyName) {
                const propInfo = `"${getClassName(constructor)}.${mainPropertyName}"`;
                const mainPropAttrs = attr(constructor, mainPropertyName);
                let mainPropAttrsType = mainPropAttrs.type;

                if (mainPropAttrsType === CCInteger || mainPropAttrsType === CCFloat) {
                  mainPropAttrsType = 'Number';
                } else if (mainPropAttrsType === CCString || mainPropAttrsType === CCBoolean) {
                  mainPropAttrsType = `${mainPropAttrsType}`;
                }

                if (mainPropAttrsType !== type) {
                  warnID(3604, propInfo);
                  return;
                }

                if (!mainPropAttrs.hasOwnProperty('default')) {
                  return;
                }

                const defaultVal = mainPropAttrs.default;

                if (typeof defaultVal === 'undefined') {
                  return;
                }

                const isContainer = Array.isArray(defaultVal) || isPlainEmptyObj_DEV(defaultVal);

                if (isContainer) {
                  return;
                }

                const defaultType = typeof defaultVal;
                const type_lowerCase = type.toLowerCase();

                if (defaultType === type_lowerCase) {
                  if (type_lowerCase === 'object') {
                    if (defaultVal && !(defaultVal instanceof mainPropAttrs.ctor)) {
                      warnID(3605, propInfo, getClassName(mainPropAttrs.ctor));
                    } else {
                      return;
                    }
                  } else if (type !== 'Number') {
                    warnID(3606, attributeName, propInfo, type);
                  }
                } else if (defaultType !== 'function') {
                  if (type === CCString.default && defaultVal == null) {
                    warnID(3607, propInfo);
                  } else {
                    warnID(3611, attributeName, propInfo, defaultType);
                  }
                } else {
                  return;
                }

                delete mainPropAttrs.type;
              };
            }
            function getObjTypeChecker_ET(typeCtor) {
              return function (classCtor, mainPropName) {
                getTypeChecker_ET('Object', 'type')(classCtor, mainPropName);
                const defaultDef = getClassAttrs(classCtor)[`${mainPropName + DELIMETER}default`];
                const defaultVal = legacyCC.Class.getDefault(defaultDef);

                if (!Array.isArray(defaultVal) && isChildClassOf(typeCtor, legacyCC.ValueType)) {
                  const typename = getClassName(typeCtor);
                  const info = formatStr('No need to specify the "type" of "%s.%s" because %s is a child class of ValueType.', getClassName(classCtor), mainPropName, typename);

                  if (defaultDef) {
                    log(info);
                  } else {
                    warnID(3612, info, typename, getClassName(classCtor), mainPropName, typename);
                  }
                }
              };
            }

            var attributeUtils = /*#__PURE__*/Object.freeze({
                __proto__: null,
                DELIMETER: DELIMETER,
                createAttrsSingle: createAttrsSingle,
                createAttrs: createAttrs,
                attr: attr,
                getClassAttrs: getClassAttrs,
                setClassAttr: setClassAttr,
                PrimitiveType: PrimitiveType,
                CCInteger: CCInteger,
                CCFloat: CCFloat,
                CCBoolean: CCBoolean,
                CCString: CCString,
                getTypeChecker_ET: getTypeChecker_ET,
                getObjTypeChecker_ET: getObjTypeChecker_ET
            });

            const SerializableAttrs = {
              default: {},
              serializable: {},
              editorOnly: {},
              formerlySerializedAs: {}
            };

            function parseNotify(val, propName, notify, properties) {
              if (val.get || val.set) {

                return;
              }

              if (val.hasOwnProperty('default')) {
                const newKey = `_N$${propName}`;

                val.get = function () {
                  return this[newKey];
                };

                val.set = function (value) {
                  const oldValue = this[newKey];
                  this[newKey] = value;
                  notify.call(this, oldValue);
                };

                const newValue = {};
                properties[newKey] = newValue;

                for (const attr in SerializableAttrs) {
                  const v = SerializableAttrs[attr];

                  if (val.hasOwnProperty(attr)) {
                    newValue[attr] = val[attr];

                    if (!v.canUsedInGet) {
                      delete val[attr];
                    }
                  }
                }
              }
            }

            function parseType(val, type, className, propName) {

              if (Array.isArray(type)) {

                if (type.length > 0) {
                  val.type = type = type[0];
                } else {
                  return errorID(5508, className, propName);
                }
              }

              if (typeof type === 'function') {
                if (type === String) {
                  val.type = legacyCC.String;
                } else if (type === Boolean) {
                  val.type = legacyCC.Boolean;
                } else if (type === Number) {
                  val.type = legacyCC.Float;
                }
              }
            }

            function _wrapOptions(isGetset, _default, type) {
              const res = isGetset ? {
                _short: true
              } : {
                _short: true,
                default: _default
              };

              if (type) {
                res.type = type;
              }

              return res;
            }

            function getFullFormOfProperty(options, isGetset) {
              const isLiteral = options && options.constructor === Object;

              if (!isLiteral) {
                if (Array.isArray(options) && options.length > 0) {
                  return _wrapOptions(isGetset, [], options);
                } else if (typeof options === 'function') {
                  const type = options;
                  return _wrapOptions(isGetset, isChildClassOf(type, legacyCC.ValueType) ? new type() : null, type);
                } else if (options instanceof PrimitiveType) {
                  return _wrapOptions(isGetset, options.default);
                } else {
                  return _wrapOptions(isGetset, options);
                }
              }

              return null;
            }
            function preprocessAttrs(properties, className, cls) {
              for (const propName in properties) {
                let val = properties[propName];
                const fullForm = getFullFormOfProperty(val, false);

                if (fullForm) {
                  val = properties[propName] = fullForm;
                }

                if (val) {

                  const notify = val.notify;

                  if (notify) {
                    {
                      parseNotify(val, propName, notify, properties);
                    }
                  }

                  if ('type' in val) {
                    parseType(val, val.type, className, propName);
                  }
                }
              }
            }

            let requiringFrames = [];
            function push(module, uuid, script, importMeta) {
              if (script === undefined) {
                script = uuid;
                uuid = '';
              }

              requiringFrames.push({
                uuid,
                script,
                module,
                exports: module.exports,
                beh: null,
                importMeta
              });
            }
            function pop() {
              const frameInfo = requiringFrames.pop();
              const module = frameInfo.module;
              let exports = module.exports;

              if (exports === frameInfo.exports) {
                for (const anykey in exports) {
                  return;
                }

                module.exports = exports = frameInfo.cls;
              }
            }
            function peek() {
              return requiringFrames[requiringFrames.length - 1];
            }
            legacyCC._RF = {
              push,
              pop,
              peek
            };

            let PropertyStashInternalFlag;

            (function (PropertyStashInternalFlag) {
              PropertyStashInternalFlag[PropertyStashInternalFlag["STANDALONE"] = 1] = "STANDALONE";
              PropertyStashInternalFlag[PropertyStashInternalFlag["IMPLICIT_VISIBLE"] = 2] = "IMPLICIT_VISIBLE";
              PropertyStashInternalFlag[PropertyStashInternalFlag["IMPLICIT_SERIALIZABLE"] = 4] = "IMPLICIT_SERIALIZABLE";
            })(PropertyStashInternalFlag || (PropertyStashInternalFlag = {}));

            const DELIMETER$1 = DELIMETER;
            const CCCLASS_TAG = '__ctors__';
            const ENUM_TAG = 'Enum';
            const BITMASK_TAG = 'BitMask';

            function pushUnique(array, item) {
              if (array.indexOf(item) < 0) {
                array.push(item);
              }
            }

            function appendProp(cls, name) {

              pushUnique(cls.__props__, name);
            }

            function defineProp(cls, className, propName, val) {

              appendProp(cls, propName);
              parseAttributes(cls, val, className, propName);
            }

            function defineGetSet(cls, name, propName, val) {
              const getter = val.get;
              const setter = val.set;

              if (getter) {
                parseAttributes(cls, val, name, propName);

                setClassAttr(cls, propName, 'serializable', false);
              }
            }

            function getDefault(defaultVal) {
              if (typeof defaultVal === 'function') {
                {
                  return defaultVal();
                }
              }

              return defaultVal;
            }

            function doDefine(className, baseClass, options) {
              const ctor = options.ctor;

              value(ctor, CCCLASS_TAG, true, true);
              const prototype = ctor.prototype;

              if (baseClass) {
                ctor.$super = baseClass;
              }

              setClassName(className, ctor);
              return ctor;
            }

            function define(className, baseClass, options) {
              const Component = legacyCC.Component;
              const frame = peek();

              if (frame && isChildClassOf(baseClass, Component)) {
                if (isChildClassOf(frame.cls, Component)) {
                  errorID(3615);
                  return null;
                }

                className = className || frame.script;
              }

              const cls = doDefine(className, baseClass, options);

              if (frame) {
                if (isChildClassOf(baseClass, Component)) {
                  const uuid = frame.uuid;

                  if (uuid) {
                    _setClassId(uuid, cls);
                  }

                  frame.cls = cls;
                } else if (!isChildClassOf(frame.cls, Component)) {
                  frame.cls = cls;
                }
              }

              return cls;
            }

            function getNewValueTypeCodeJit(value) {
              const clsName = getClassName(value);
              const type = value.constructor;
              let res = `new ${clsName}(`;

              for (let i = 0; i < type.__props__.length; i++) {
                const prop = type.__props__[i];
                const propVal = value[prop];

                res += propVal;

                if (i < type.__props__.length - 1) {
                  res += ',';
                }
              }

              return `${res})`;
            }

            function escapeForJS(s) {
              return JSON.stringify(s).replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
            }

            const IDENTIFIER_RE = /^[A-Za-z_$][0-9A-Za-z_$]*$/;

            function declareProperties(cls, className, properties, baseClass) {
              cls.__props__ = [];

              if (baseClass && baseClass.__props__) {
                cls.__props__ = baseClass.__props__.slice();
              }

              if (properties) {
                preprocessAttrs(properties, className);

                for (const propName in properties) {
                  const val = properties[propName];

                  if (!val.get && !val.set) {
                    defineProp(cls, className, propName, val);
                  } else {
                    defineGetSet(cls, className, propName, val);
                  }
                }
              }

              const attrs = getClassAttrs(cls);
              cls.__values__ = cls.__props__.filter(prop => attrs[`${prop + DELIMETER$1}serializable`] !== false);
            }

            function CCClass(options) {
              let name = options.name;
              const base = options.extends;
              const cls = define(name, base, options);

              if (!name) {
                name = legacyCC.js.getClassName(cls);
              }

              cls._sealed = true;

              if (base) {
                base._sealed = false;
              }

              const properties = options.properties;
              declareProperties(cls, name, properties, base);
              const editor = options.editor;

              if (editor) {
                if (isChildClassOf(base, legacyCC.Component)) {
                  legacyCC.Component._registerEditorProps(cls, editor);
                }
              }

              return cls;
            }

            CCClass._isCCClass = function isCCClass(constructor) {
              var _constructor$hasOwnPr;

              return constructor === null || constructor === void 0 ? void 0 : (_constructor$hasOwnPr = constructor.hasOwnProperty) === null || _constructor$hasOwnPr === void 0 ? void 0 : _constructor$hasOwnPr.call(constructor, CCCLASS_TAG);
            };

            CCClass.fastDefine = function (className, constructor, serializableFields) {
              setClassName(className, constructor);
              const props = constructor.__props__ = constructor.__values__ = Object.keys(serializableFields);
              const attrs = getClassAttrs(constructor);

              for (let i = 0; i < props.length; i++) {
                const key = props[i];
                attrs[`${key + DELIMETER$1}visible`] = false;
                attrs[`${key + DELIMETER$1}default`] = serializableFields[key];
              }
            };

            CCClass.Attr = attributeUtils;
            CCClass.attr = attr;
            function isCCClassOrFastDefined(constructor) {
              var _constructor$hasOwnPr2;

              return constructor === null || constructor === void 0 ? void 0 : (_constructor$hasOwnPr2 = constructor.hasOwnProperty) === null || _constructor$hasOwnPr2 === void 0 ? void 0 : _constructor$hasOwnPr2.call(constructor, '__values__');
            }
            CCClass.isCCClassOrFastDefined = isCCClassOrFastDefined;

            function getInheritanceChain(constructor) {
              const chain = [];

              for (;;) {
                constructor = getSuper(constructor);

                if (!constructor) {
                  break;
                }

                if (constructor !== Object) {
                  chain.push(constructor);
                }
              }

              return chain;
            }

            CCClass.getInheritanceChain = getInheritanceChain;
            const PrimitiveTypes = {
              Integer: 'Number',
              Float: 'Number',
              Boolean: 'Boolean',
              String: 'String'
            };

            function parseAttributes(constructor, attributes, className, propertyName, usedInGetter) {
              let attrs = null;
              let propertyNamePrefix = '';

              function initAttrs() {
                propertyNamePrefix = propertyName + DELIMETER$1;
                return attrs = getClassAttrs(constructor);
              }

              if ('type' in attributes && typeof attributes.type === 'undefined') {
                warnID(3660, propertyName, className);
              }
              const type = attributes.type;

              if (type) {
                const primitiveType = PrimitiveTypes[type];

                if (primitiveType) {
                  (attrs || initAttrs())[`${propertyNamePrefix}type`] = type;
                } else if (type === 'Object') ; else if (typeof type === 'object') {
                    if (Enum.isEnum(type)) {
                      (attrs || initAttrs())[`${propertyNamePrefix}type`] = ENUM_TAG;
                      attrs[`${propertyNamePrefix}enumList`] = Enum.getList(type);
                    } else if (BitMask.isBitMask(type)) {
                      (attrs || initAttrs())[`${propertyNamePrefix}type`] = BITMASK_TAG;
                      attrs[`${propertyNamePrefix}bitmaskList`] = BitMask.getList(type);
                    } else ;
                  } else if (typeof type === 'function') {
                    (attrs || initAttrs())[`${propertyNamePrefix}type`] = 'Object';
                    attrs[`${propertyNamePrefix}ctor`] = type;
                  } else ;
              }

              if ('default' in attributes) {
                (attrs || initAttrs())[`${propertyNamePrefix}default`] = attributes.default;
              }

              const parseSimpleAttribute = (attributeName, expectType) => {
                if (attributeName in attributes) {
                  const val = attributes[attributeName];

                  if (typeof val === expectType) {
                    (attrs || initAttrs())[propertyNamePrefix + attributeName] = val;
                  }
                }
              };

              if (attributes.editorOnly) {
                {
                  (attrs || initAttrs())[`${propertyNamePrefix}editorOnly`] = true;
                }
              }

              const isStandaloneMode = attributes.__internalFlags & PropertyStashInternalFlag.STANDALONE;
              let normalizedSerializable;

              if (isStandaloneMode) {
                normalizedSerializable = attributes.serializable === true || (attributes.__internalFlags & PropertyStashInternalFlag.IMPLICIT_SERIALIZABLE) !== 0;
              } else if (attributes.serializable === false) {
                normalizedSerializable = false;
              }

              if (typeof normalizedSerializable !== 'undefined') {
                (attrs || initAttrs())[`${propertyNamePrefix}serializable`] = normalizedSerializable;
              }

              parseSimpleAttribute('formerlySerializedAs', 'string');

              const range = attributes.range;

              if (range) {
                if (Array.isArray(range)) {
                  if (range.length >= 2) {
                    (attrs || initAttrs())[`${propertyNamePrefix}min`] = range[0];
                    attrs[`${propertyNamePrefix}max`] = range[1];

                    if (range.length > 2) {
                      attrs[`${propertyNamePrefix}step`] = range[2];
                    }
                  }
                }
              }

              parseSimpleAttribute('min', 'number');
              parseSimpleAttribute('max', 'number');
              parseSimpleAttribute('step', 'number');
            }

            CCClass.isArray = function (defaultVal) {
              defaultVal = getDefault(defaultVal);
              return Array.isArray(defaultVal);
            };

            CCClass.getDefault = getDefault;
            CCClass.escapeForJS = escapeForJS;
            CCClass.IDENTIFIER_RE = IDENTIFIER_RE;
            CCClass.getNewValueTypeCode =  getNewValueTypeCodeJit;
            legacyCC.Class = CCClass;

            const _d2r = Math.PI / 180.0;

            const _r2d = 180.0 / Math.PI;

            const EPSILON = exports('E', 0.000001);
            function equals(a, b) {
              return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
            }
            function approx(a, b, maxDiff) {
              maxDiff = maxDiff || EPSILON;
              return Math.abs(a - b) <= maxDiff;
            }
            function clamp(val, min, max) {
              if (min > max) {
                const temp = min;
                min = max;
                max = temp;
              }

              return val < min ? min : val > max ? max : val;
            }
            function clamp01(val) {
              return val < 0 ? 0 : val > 1 ? 1 : val;
            }
            function lerp(from, to, ratio) {
              return from + (to - from) * ratio;
            }
            function toRadian(a) {
              return a * _d2r;
            }
            function toDegree(a) {
              return a * _r2d;
            }
            const random = exports('p', Math.random);
            function randomRange(min, max) {
              return Math.random() * (max - min) + min;
            }
            function randomRangeInt(min, max) {
              return Math.floor(randomRange(min, max));
            }
            function pseudoRandom(seed) {
              seed = (seed * 9301 + 49297) % 233280;
              return seed / 233280.0;
            }
            function pseudoRandomRange(seed, min, max) {
              return pseudoRandom(seed) * (max - min) + min;
            }
            function pseudoRandomRangeInt(seed, min, max) {
              return Math.floor(pseudoRandomRange(seed, min, max));
            }
            function nextPow2$1(val) {
              --val;
              val |= val >> 1;
              val |= val >> 2;
              val |= val >> 4;
              val |= val >> 8;
              val |= val >> 16;
              ++val;
              return val;
            }
            function repeat(t, length) {
              return t - Math.floor(t / length) * length;
            }
            function pingPong(t, length) {
              t = repeat(t, length * 2);
              t = length - Math.abs(t - length);
              return t;
            }
            function inverseLerp(from, to, value) {
              return (value - from) / (to - from);
            }
            function absMaxComponent(v) {
              if (Math.abs(v.x) > Math.abs(v.y)) {
                if (Math.abs(v.x) > Math.abs(v.z)) {
                  return v.x;
                } else {
                  return v.z;
                }
              } else if (Math.abs(v.y) > Math.abs(v.z)) {
                return v.y;
              } else {
                return v.z;
              }
            }
            function absMax(a, b) {
              if (Math.abs(a) > Math.abs(b)) {
                return a;
              } else {
                return b;
              }
            }
            function enumerableProps(prototype, attrs) {
              attrs.forEach(key => {
                Object.defineProperty(prototype, key, {
                  enumerable: true
                });
              });
            }

            const toFloat = 1 / 255;
            class Color extends ValueType {
              static clone(a) {
                const out = new Color();

                if (a._val) {
                  out._val = a._val;
                } else {
                  out._val = (a.a << 24 >>> 0) + (a.b << 16) + (a.g << 8) + a.r;
                }

                return out;
              }

              static copy(out, a) {
                out.r = a.r;
                out.g = a.g;
                out.b = a.b;
                out.a = a.a;
                return out;
              }

              static set(out, r, g, b, a) {
                out.r = r;
                out.g = g;
                out.b = b;
                out.a = a;
                return out;
              }

              static fromHEX(out, hexString) {
                hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
                out.r = parseInt(hexString.substr(0, 2), 16) || 0;
                out.g = parseInt(hexString.substr(2, 2), 16) || 0;
                out.b = parseInt(hexString.substr(4, 2), 16) || 0;
                const a = parseInt(hexString.substr(6, 2), 16);
                out.a = !Number.isNaN(a) ? a : 255;
                out._val = (out.a << 24 >>> 0) + (out.b << 16) + (out.g << 8) + out.r;
                return out;
              }

              static add(out, a, b) {
                out.r = a.r + b.r;
                out.g = a.g + b.g;
                out.b = a.b + b.b;
                out.a = a.a + b.a;
                return out;
              }

              static subtract(out, a, b) {
                out.r = a.r - b.r;
                out.g = a.g - b.g;
                out.b = a.b - b.b;
                out.a = a.a - b.a;
                return out;
              }

              static multiply(out, a, b) {
                out.r = a.r * b.r;
                out.g = a.g * b.g;
                out.b = a.b * b.b;
                out.a = a.a * b.a;
                return out;
              }

              static divide(out, a, b) {
                out.r = a.r / b.r;
                out.g = a.g / b.g;
                out.b = a.b / b.b;
                out.a = a.a / b.a;
                return out;
              }

              static scale(out, a, b) {
                out.r = a.r * b;
                out.g = a.g * b;
                out.b = a.b * b;
                out.a = a.a * b;
                return out;
              }

              static lerp(out, from, to, ratio) {
                let r = from.r;
                let g = from.g;
                let b = from.b;
                let a = from.a;
                r += (to.r - r) * ratio;
                g += (to.g - g) * ratio;
                b += (to.b - b) * ratio;
                a += (to.a - a) * ratio;
                out._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
                return out;
              }

              static toArray(out, a, ofs = 0) {
                const scale = a instanceof Color || a.a > 1 ? 1 / 255 : 1;
                out[ofs + 0] = a.r * scale;
                out[ofs + 1] = a.g * scale;
                out[ofs + 2] = a.b * scale;
                out[ofs + 3] = a.a * scale;
                return out;
              }

              static fromArray(arr, out, ofs = 0) {
                out.r = arr[ofs + 0] * 255;
                out.g = arr[ofs + 1] * 255;
                out.b = arr[ofs + 2] * 255;
                out.a = arr[ofs + 3] * 255;
                return out;
              }

              static strictEquals(a, b) {
                return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.r - b.r) <= epsilon * Math.max(1.0, Math.abs(a.r), Math.abs(b.r)) && Math.abs(a.g - b.g) <= epsilon * Math.max(1.0, Math.abs(a.g), Math.abs(b.g)) && Math.abs(a.b - b.b) <= epsilon * Math.max(1.0, Math.abs(a.b), Math.abs(b.b)) && Math.abs(a.a - b.a) <= epsilon * Math.max(1.0, Math.abs(a.a), Math.abs(b.a));
              }

              static hex(a) {
                return (a.r * 255 << 24 | a.g * 255 << 16 | a.b * 255 << 8 | a.a * 255) >>> 0;
              }

              get r() {
                return this._val & 0x000000ff;
              }

              set r(red) {
                red = ~~clamp(red, 0, 255);
                this._val = (this._val & 0xffffff00 | red) >>> 0;
              }

              get g() {
                return (this._val & 0x0000ff00) >> 8;
              }

              set g(green) {
                green = ~~clamp(green, 0, 255);
                this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
              }

              get b() {
                return (this._val & 0x00ff0000) >> 16;
              }

              set b(blue) {
                blue = ~~clamp(blue, 0, 255);
                this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
              }

              get a() {
                return (this._val & 0xff000000) >>> 24;
              }

              set a(alpha) {
                alpha = ~~clamp(alpha, 0, 255);
                this._val = (this._val & 0x00ffffff | alpha << 24) >>> 0;
              }

              get x() {
                return this.r * toFloat;
              }

              set x(value) {
                this.r = value * 255;
              }

              get y() {
                return this.g * toFloat;
              }

              set y(value) {
                this.g = value * 255;
              }

              get z() {
                return this.b * toFloat;
              }

              set z(value) {
                this.b = value * 255;
              }

              get w() {
                return this.a * toFloat;
              }

              set w(value) {
                this.a = value * 255;
              }

              constructor(r, g, b, a) {
                super();
                this._val = 0;

                if (typeof r === 'string') {
                  this.fromHEX(r);
                } else if (g !== undefined) {
                  this.set(r, g, b, a);
                } else {
                  this.set(r);
                }
              }

              clone() {
                const ret = new Color();
                ret._val = this._val;
                return ret;
              }

              equals(other) {
                return other && this._val === other._val;
              }

              lerp(to, ratio) {
                let r = this.r;
                let g = this.g;
                let b = this.b;
                let a = this.a;
                r += (to.r - r) * ratio;
                g += (to.g - g) * ratio;
                b += (to.b - b) * ratio;
                a += (to.a - a) * ratio;
                this._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
                return this;
              }

              toString() {
                return `rgba(${this.r.toFixed()}, ${this.g.toFixed()}, ${this.b.toFixed()}, ${this.a.toFixed()})`;
              }

              toCSS(opt = 'rgba') {
                if (opt === 'rgba') {
                  return `rgba(${this.r},${this.g},${this.b},${(this.a * toFloat).toFixed(2)})`;
                } else if (opt === 'rgb') {
                  return `rgb(${this.r},${this.g},${this.b})`;
                } else {
                  return `#${this.toHEX(opt)}`;
                }
              }

              fromHEX(hexString) {
                hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
                const r = parseInt(hexString.substr(0, 2), 16) || 0;
                const g = parseInt(hexString.substr(2, 2), 16) || 0;
                const b = parseInt(hexString.substr(4, 2), 16) || 0;
                let a = parseInt(hexString.substr(6, 2), 16);
                a = !Number.isNaN(a) ? a : 255;
                this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
                return this;
              }

              toHEX(fmt = '#rrggbb') {
                const prefix = '0';
                const hex = [(this.r < 16 ? prefix : '') + this.r.toString(16), (this.g < 16 ? prefix : '') + this.g.toString(16), (this.b < 16 ? prefix : '') + this.b.toString(16)];

                if (fmt === '#rgb') {
                  hex[0] = hex[0][0];
                  hex[1] = hex[1][0];
                  hex[2] = hex[2][0];
                } else if (fmt === '#rrggbbaa') {
                  hex.push((this.a < 16 ? prefix : '') + this.a.toString(16));
                }

                return hex.join('');
              }

              toRGBValue() {
                return this._val & 0x00ffffff;
              }

              fromHSV(h, s, v) {
                let r = 0;
                let g = 0;
                let b = 0;

                if (s === 0) {
                  r = g = b = v;
                } else if (v === 0) {
                  r = g = b = 0;
                } else {
                  if (h === 1) {
                    h = 0;
                  }

                  h *= 6;
                  const i = Math.floor(h);
                  const f = h - i;
                  const p = v * (1 - s);
                  const q = v * (1 - s * f);
                  const t = v * (1 - s * (1 - f));

                  switch (i) {
                    case 0:
                      r = v;
                      g = t;
                      b = p;
                      break;

                    case 1:
                      r = q;
                      g = v;
                      b = p;
                      break;

                    case 2:
                      r = p;
                      g = v;
                      b = t;
                      break;

                    case 3:
                      r = p;
                      g = q;
                      b = v;
                      break;

                    case 4:
                      r = t;
                      g = p;
                      b = v;
                      break;

                    case 5:
                      r = v;
                      g = p;
                      b = q;
                      break;
                  }
                }

                r *= 255;
                g *= 255;
                b *= 255;
                this._val = (this.a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
                return this;
              }

              toHSV() {
                const r = this.r * toFloat;
                const g = this.g * toFloat;
                const b = this.b * toFloat;
                const hsv = {
                  h: 0,
                  s: 0,
                  v: 0
                };
                const max = Math.max(r, g, b);
                const min = Math.min(r, g, b);
                let delta = 0;
                hsv.v = max;
                hsv.s = max ? (max - min) / max : 0;

                if (!hsv.s) {
                  hsv.h = 0;
                } else {
                  delta = max - min;

                  if (r === max) {
                    hsv.h = (g - b) / delta;
                  } else if (g === max) {
                    hsv.h = 2 + (b - r) / delta;
                  } else {
                    hsv.h = 4 + (r - g) / delta;
                  }

                  hsv.h /= 6;

                  if (hsv.h < 0) {
                    hsv.h += 1.0;
                  }
                }

                return hsv;
              }

              set(r, g, b, a) {
                if (typeof r === 'object') {
                  if (r._val != null) {
                    this._val = r._val;
                  } else {
                    g = r.g || 0;
                    b = r.b || 0;
                    a = typeof r.a === 'number' ? r.a : 255;
                    r = r.r || 0;
                    this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
                  }
                } else {
                  r = r || 0;
                  g = g || 0;
                  b = b || 0;
                  a = typeof a === 'number' ? a : 255;
                  this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
                }

                return this;
              }

              multiply(other) {
                const r = (this._val & 0x000000ff) * other.r >> 8;
                const g = (this._val & 0x0000ff00) * other.g >> 8;
                const b = (this._val & 0x00ff0000) * other.b >> 8;
                const a = ((this._val & 0xff000000) >>> 8) * other.a;
                this._val = a & 0xff000000 | b & 0x00ff0000 | g & 0x0000ff00 | r & 0x000000ff;
                return this;
              }

              _set_r_unsafe(red) {
                this._val = (this._val & 0xffffff00 | red) >>> 0;
                return this;
              }

              _set_g_unsafe(green) {
                this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
                return this;
              }

              _set_b_unsafe(blue) {
                this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
                return this;
              }

              _set_a_unsafe(alpha) {
                this._val = (this._val & 0x00ffffff | alpha << 24) >>> 0;
                return this;
              }

            } exports('C', Color);
            Color.WHITE = Object.freeze(new Color(255, 255, 255, 255));
            Color.GRAY = Object.freeze(new Color(127, 127, 127, 255));
            Color.BLACK = Object.freeze(new Color(0, 0, 0, 255));
            Color.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));
            Color.RED = Object.freeze(new Color(255, 0, 0, 255));
            Color.GREEN = Object.freeze(new Color(0, 255, 0, 255));
            Color.BLUE = Object.freeze(new Color(0, 0, 255, 255));
            Color.CYAN = Object.freeze(new Color(0, 255, 255, 255));
            Color.MAGENTA = Object.freeze(new Color(255, 0, 255, 255));
            Color.YELLOW = Object.freeze(new Color(255, 255, 0, 255));
            CCClass.fastDefine('cc.Color', Color, {
              r: 0,
              g: 0,
              b: 0,
              a: 255
            });
            legacyCC.Color = Color;
            function color(r, g, b, a) {
              return new Color(r, g, b, a);
            }
            legacyCC.color = color;

            class Vec3 extends ValueType {
              static zero(out) {
                out.x = 0;
                out.y = 0;
                out.z = 0;
                return out;
              }

              static clone(a) {
                return new Vec3(a.x, a.y, a.z);
              }

              static copy(out, a) {
                out.x = a.x;
                out.y = a.y;
                out.z = a.z;
                return out;
              }

              static set(out, x, y, z) {
                out.x = x;
                out.y = y;
                out.z = z;
                return out;
              }

              static add(out, a, b) {
                out.x = a.x + b.x;
                out.y = a.y + b.y;
                out.z = a.z + b.z;
                return out;
              }

              static subtract(out, a, b) {
                out.x = a.x - b.x;
                out.y = a.y - b.y;
                out.z = a.z - b.z;
                return out;
              }

              static multiply(out, a, b) {
                out.x = a.x * b.x;
                out.y = a.y * b.y;
                out.z = a.z * b.z;
                return out;
              }

              static divide(out, a, b) {
                out.x = a.x / b.x;
                out.y = a.y / b.y;
                out.z = a.z / b.z;
                return out;
              }

              static ceil(out, a) {
                out.x = Math.ceil(a.x);
                out.y = Math.ceil(a.y);
                out.z = Math.ceil(a.z);
                return out;
              }

              static floor(out, a) {
                out.x = Math.floor(a.x);
                out.y = Math.floor(a.y);
                out.z = Math.floor(a.z);
                return out;
              }

              static min(out, a, b) {
                out.x = Math.min(a.x, b.x);
                out.y = Math.min(a.y, b.y);
                out.z = Math.min(a.z, b.z);
                return out;
              }

              static max(out, a, b) {
                out.x = Math.max(a.x, b.x);
                out.y = Math.max(a.y, b.y);
                out.z = Math.max(a.z, b.z);
                return out;
              }

              static round(out, a) {
                out.x = Math.round(a.x);
                out.y = Math.round(a.y);
                out.z = Math.round(a.z);
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.x = a.x * b;
                out.y = a.y * b;
                out.z = a.z * b;
                return out;
              }

              static scaleAndAdd(out, a, b, scale) {
                out.x = a.x + b.x * scale;
                out.y = a.y + b.y * scale;
                out.z = a.z + b.z * scale;
                return out;
              }

              static distance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                const z = b.z - a.z;
                return Math.sqrt(x * x + y * y + z * z);
              }

              static squaredDistance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                const z = b.z - a.z;
                return x * x + y * y + z * z;
              }

              static len(a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                return Math.sqrt(x * x + y * y + z * z);
              }

              static lengthSqr(a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                return x * x + y * y + z * z;
              }

              static negate(out, a) {
                out.x = -a.x;
                out.y = -a.y;
                out.z = -a.z;
                return out;
              }

              static invert(out, a) {
                out.x = 1.0 / a.x;
                out.y = 1.0 / a.y;
                out.z = 1.0 / a.z;
                return out;
              }

              static invertSafe(out, a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;

                if (Math.abs(x) < EPSILON) {
                  out.x = 0;
                } else {
                  out.x = 1.0 / x;
                }

                if (Math.abs(y) < EPSILON) {
                  out.y = 0;
                } else {
                  out.y = 1.0 / y;
                }

                if (Math.abs(z) < EPSILON) {
                  out.z = 0;
                } else {
                  out.z = 1.0 / z;
                }

                return out;
              }

              static normalize(out, a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                let len = x * x + y * y + z * z;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  out.x = x * len;
                  out.y = y * len;
                  out.z = z * len;
                }

                return out;
              }

              static dot(a, b) {
                return a.x * b.x + a.y * b.y + a.z * b.z;
              }

              static cross(out, a, b) {
                const {
                  x: ax,
                  y: ay,
                  z: az
                } = a;
                const {
                  x: bx,
                  y: by,
                  z: bz
                } = b;
                out.x = ay * bz - az * by;
                out.y = az * bx - ax * bz;
                out.z = ax * by - ay * bx;
                return out;
              }

              static lerp(out, a, b, t) {
                out.x = a.x + t * (b.x - a.x);
                out.y = a.y + t * (b.y - a.y);
                out.z = a.z + t * (b.z - a.z);
                return out;
              }

              static random(out, scale) {
                scale = scale || 1.0;
                const phi = random() * 2.0 * Math.PI;
                const cosTheta = random() * 2 - 1;
                const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
                out.x = sinTheta * Math.cos(phi) * scale;
                out.y = sinTheta * Math.sin(phi) * scale;
                out.z = cosTheta * scale;
                return out;
              }

              static transformMat4(out, a, m) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                let rhw = m.m03 * x + m.m07 * y + m.m11 * z + m.m15;
                rhw = rhw ? Math.abs(1 / rhw) : 1;
                out.x = (m.m00 * x + m.m04 * y + m.m08 * z + m.m12) * rhw;
                out.y = (m.m01 * x + m.m05 * y + m.m09 * z + m.m13) * rhw;
                out.z = (m.m02 * x + m.m06 * y + m.m10 * z + m.m14) * rhw;
                return out;
              }

              static transformMat4Normal(out, a, m) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                let rhw = m.m03 * x + m.m07 * y + m.m11 * z;
                rhw = rhw ? Math.abs(1 / rhw) : 1;
                out.x = (m.m00 * x + m.m04 * y + m.m08 * z) * rhw;
                out.y = (m.m01 * x + m.m05 * y + m.m09 * z) * rhw;
                out.z = (m.m02 * x + m.m06 * y + m.m10 * z) * rhw;
                return out;
              }

              static transformMat3(out, a, m) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                out.x = x * m.m00 + y * m.m03 + z * m.m06;
                out.y = x * m.m01 + y * m.m04 + z * m.m07;
                out.z = x * m.m02 + y * m.m05 + z * m.m08;
                return out;
              }

              static transformAffine(out, v, m) {
                const x = v.x;
                const y = v.y;
                const z = v.z;
                out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12;
                out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13;
                out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14;
                return out;
              }

              static transformQuat(out, a, q) {
                const ix = q.w * a.x + q.y * a.z - q.z * a.y;
                const iy = q.w * a.y + q.z * a.x - q.x * a.z;
                const iz = q.w * a.z + q.x * a.y - q.y * a.x;
                const iw = -q.x * a.x - q.y * a.y - q.z * a.z;
                out.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
                out.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
                out.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
                return out;
              }

              static transformRTS(out, a, r, t, s) {
                const x = a.x * s.x;
                const y = a.y * s.y;
                const z = a.z * s.z;
                const ix = r.w * x + r.y * z - r.z * y;
                const iy = r.w * y + r.z * x - r.x * z;
                const iz = r.w * z + r.x * y - r.y * x;
                const iw = -r.x * x - r.y * y - r.z * z;
                out.x = ix * r.w + iw * -r.x + iy * -r.z - iz * -r.y + t.x;
                out.y = iy * r.w + iw * -r.y + iz * -r.x - ix * -r.z + t.y;
                out.z = iz * r.w + iw * -r.z + ix * -r.y - iy * -r.x + t.z;
                return out;
              }

              static transformInverseRTS(out, a, r, t, s) {
                const x = a.x - t.x;
                const y = a.y - t.y;
                const z = a.z - t.z;
                const ix = r.w * x - r.y * z + r.z * y;
                const iy = r.w * y - r.z * x + r.x * z;
                const iz = r.w * z - r.x * y + r.y * x;
                const iw = r.x * x + r.y * y + r.z * z;
                out.x = (ix * r.w + iw * r.x + iy * r.z - iz * r.y) / s.x;
                out.y = (iy * r.w + iw * r.y + iz * r.x - ix * r.z) / s.y;
                out.z = (iz * r.w + iw * r.z + ix * r.y - iy * r.x) / s.z;
                return out;
              }

              static rotateX(out, v, o, a) {
                const x = v.x - o.x;
                const y = v.y - o.y;
                const z = v.z - o.z;
                const cos = Math.cos(a);
                const sin = Math.sin(a);
                const rx = x;
                const ry = y * cos - z * sin;
                const rz = y * sin + z * cos;
                out.x = rx + o.x;
                out.y = ry + o.y;
                out.z = rz + o.z;
                return out;
              }

              static rotateY(out, v, o, a) {
                const x = v.x - o.x;
                const y = v.y - o.y;
                const z = v.z - o.z;
                const cos = Math.cos(a);
                const sin = Math.sin(a);
                const rx = z * sin + x * cos;
                const ry = y;
                const rz = z * cos - x * sin;
                out.x = rx + o.x;
                out.y = ry + o.y;
                out.z = rz + o.z;
                return out;
              }

              static rotateZ(out, v, o, a) {
                const x = v.x - o.x;
                const y = v.y - o.y;
                const z = v.z - o.z;
                const cos = Math.cos(a);
                const sin = Math.sin(a);
                const rx = x * cos - y * sin;
                const ry = x * sin + y * cos;
                const rz = z;
                out.x = rx + o.x;
                out.y = ry + o.y;
                out.z = rz + o.z;
                return out;
              }

              static toArray(out, v, ofs = 0) {
                out[ofs + 0] = v.x;
                out[ofs + 1] = v.y;
                out[ofs + 2] = v.z;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.x = arr[ofs + 0];
                out.y = arr[ofs + 1];
                out.z = arr[ofs + 2];
                return out;
              }

              static strictEquals(a, b) {
                return a.x === b.x && a.y === b.y && a.z === b.z;
              }

              static equals(a, b, epsilon = EPSILON) {
                const {
                  x: a0,
                  y: a1,
                  z: a2
                } = a;
                const {
                  x: b0,
                  y: b1,
                  z: b2
                } = b;
                return Math.abs(a0 - b0) <= epsilon * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= epsilon * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= epsilon * Math.max(1.0, Math.abs(a2), Math.abs(b2));
              }

              static angle(a, b) {
                Vec3.normalize(v3_1, a);
                Vec3.normalize(v3_2, b);
                const cosine = Vec3.dot(v3_1, v3_2);

                if (cosine > 1.0) {
                  return 0;
                }

                if (cosine < -1.0) {
                  return Math.PI;
                }

                return Math.acos(cosine);
              }

              static projectOnPlane(out, a, n) {
                return Vec3.subtract(out, a, Vec3.project(out, a, n));
              }

              static project(out, a, b) {
                const sqrLen = Vec3.lengthSqr(b);

                if (sqrLen < 0.000001) {
                  return Vec3.set(out, 0, 0, 0);
                } else {
                  return Vec3.multiplyScalar(out, b, Vec3.dot(a, b) / sqrLen);
                }
              }

              constructor(x, y, z) {
                super();

                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                }
              }

              clone() {
                return new Vec3(this.x, this.y, this.z);
              }

              set(x, y, z) {
                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z));
              }

              equals3f(x, y, z, epsilon = EPSILON) {
                return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y)) && Math.abs(this.z - z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(z));
              }

              strictEquals(other) {
                return this.x === other.x && this.y === other.y && this.z === other.z;
              }

              strictEquals3f(x, y, z) {
                return this.x === x && this.y === y && this.z === z;
              }

              toString() {
                return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)})`;
              }

              lerp(to, ratio) {
                this.x += ratio * (to.x - this.x);
                this.y += ratio * (to.y - this.y);
                this.z += ratio * (to.z - this.z);
                return this;
              }

              add(other) {
                this.x += other.x;
                this.y += other.y;
                this.z += other.z;
                return this;
              }

              add3f(x, y, z) {
                this.x += x;
                this.y += y;
                this.z += z;
                return this;
              }

              subtract(other) {
                this.x -= other.x;
                this.y -= other.y;
                this.z -= other.z;
                return this;
              }

              subtract3f(x, y, z) {
                this.x -= x;
                this.y -= y;
                this.z -= z;
                return this;
              }

              multiplyScalar(scalar) {
                if (typeof scalar === 'object') {
                  console.warn('should use Vec3.multiply for vector * vector operation');
                }

                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
                return this;
              }

              multiply(other) {
                if (typeof other !== 'object') {
                  console.warn('should use Vec3.scale for vector * scalar operation');
                }

                this.x *= other.x;
                this.y *= other.y;
                this.z *= other.z;
                return this;
              }

              multiply3f(x, y, z) {
                this.x *= x;
                this.y *= y;
                this.z *= z;
                return this;
              }

              divide(other) {
                this.x /= other.x;
                this.y /= other.y;
                this.z /= other.z;
                return this;
              }

              divide3f(x, y, z) {
                this.x /= x;
                this.y /= y;
                this.z /= z;
                return this;
              }

              negative() {
                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;
                return this;
              }

              clampf(minInclusive, maxInclusive) {
                this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
                this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
                this.z = clamp(this.z, minInclusive.z, maxInclusive.z);
                return this;
              }

              dot(other) {
                return this.x * other.x + this.y * other.y + this.z * other.z;
              }

              cross(other) {
                const {
                  x: ax,
                  y: ay,
                  z: az
                } = this;
                const {
                  x: bx,
                  y: by,
                  z: bz
                } = other;
                this.x = ay * bz - az * by;
                this.y = az * bx - ax * bz;
                this.z = ax * by - ay * bx;
                return this;
              }

              length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
              }

              lengthSqr() {
                return this.x * this.x + this.y * this.y + this.z * this.z;
              }

              normalize() {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                let len = x * x + y * y + z * z;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  this.x = x * len;
                  this.y = y * len;
                  this.z = z * len;
                }

                return this;
              }

              transformMat4(matrix) {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                let rhw = matrix.m03 * x + matrix.m07 * y + matrix.m11 * z + matrix.m15;
                rhw = rhw ? 1 / rhw : 1;
                this.x = (matrix.m00 * x + matrix.m04 * y + matrix.m08 * z + matrix.m12) * rhw;
                this.y = (matrix.m01 * x + matrix.m05 * y + matrix.m09 * z + matrix.m13) * rhw;
                this.z = (matrix.m02 * x + matrix.m06 * y + matrix.m10 * z + matrix.m14) * rhw;
                return this;
              }

            } exports('c', Vec3);
            Vec3.UNIT_X = Object.freeze(new Vec3(1, 0, 0));
            Vec3.UNIT_Y = Object.freeze(new Vec3(0, 1, 0));
            Vec3.UNIT_Z = Object.freeze(new Vec3(0, 0, 1));
            Vec3.RIGHT = Object.freeze(new Vec3(1, 0, 0));
            Vec3.UP = Object.freeze(new Vec3(0, 1, 0));
            Vec3.FORWARD = Object.freeze(new Vec3(0, 0, -1));
            Vec3.ZERO = Object.freeze(new Vec3(0, 0, 0));
            Vec3.ONE = Object.freeze(new Vec3(1, 1, 1));
            Vec3.NEG_ONE = Object.freeze(new Vec3(-1, -1, -1));
            const v3_1 = new Vec3();
            const v3_2 = new Vec3();
            CCClass.fastDefine('cc.Vec3', Vec3, {
              x: 0,
              y: 0,
              z: 0
            });
            legacyCC.Vec3 = Vec3;
            function v3(x, y, z) {
              return new Vec3(x, y, z);
            }
            legacyCC.v3 = v3;

            class Mat3 extends ValueType {
              static clone(a) {
                return new Mat3(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08);
              }

              static copy(out, a) {
                out.m00 = a.m00;
                out.m01 = a.m01;
                out.m02 = a.m02;
                out.m03 = a.m03;
                out.m04 = a.m04;
                out.m05 = a.m05;
                out.m06 = a.m06;
                out.m07 = a.m07;
                out.m08 = a.m08;
                return out;
              }

              static set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
                out.m00 = m00;
                out.m01 = m01;
                out.m02 = m02;
                out.m03 = m10;
                out.m04 = m11;
                out.m05 = m12;
                out.m06 = m20;
                out.m07 = m21;
                out.m08 = m22;
                return out;
              }

              static identity(out) {
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 1;
                out.m05 = 0;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 1;
                return out;
              }

              static transpose(out, a) {
                if (out === a) {
                  const a01 = a.m01;
                  const a02 = a.m02;
                  const a12 = a.m05;
                  out.m01 = a.m03;
                  out.m02 = a.m06;
                  out.m03 = a01;
                  out.m05 = a.m07;
                  out.m06 = a02;
                  out.m07 = a12;
                } else {
                  out.m00 = a.m00;
                  out.m01 = a.m03;
                  out.m02 = a.m06;
                  out.m03 = a.m01;
                  out.m04 = a.m04;
                  out.m05 = a.m07;
                  out.m06 = a.m02;
                  out.m07 = a.m05;
                  out.m08 = a.m08;
                }

                return out;
              }

              static invert(out, a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const b01 = a22 * a11 - a12 * a21;
                const b11 = -a22 * a10 + a12 * a20;
                const b21 = a21 * a10 - a11 * a20;
                let det = a00 * b01 + a01 * b11 + a02 * b21;

                if (det === 0) {
                  out.m00 = 0;
                  out.m01 = 0;
                  out.m02 = 0;
                  out.m03 = 0;
                  out.m04 = 0;
                  out.m05 = 0;
                  out.m06 = 0;
                  out.m07 = 0;
                  out.m08 = 0;
                  return out;
                }

                det = 1.0 / det;
                out.m00 = b01 * det;
                out.m01 = (-a22 * a01 + a02 * a21) * det;
                out.m02 = (a12 * a01 - a02 * a11) * det;
                out.m03 = b11 * det;
                out.m04 = (a22 * a00 - a02 * a20) * det;
                out.m05 = (-a12 * a00 + a02 * a10) * det;
                out.m06 = b21 * det;
                out.m07 = (-a21 * a00 + a01 * a20) * det;
                out.m08 = (a11 * a00 - a01 * a10) * det;
                return out;
              }

              static determinant(a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
              }

              static multiply(out, a, b) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const b00 = b.m00;
                const b01 = b.m01;
                const b02 = b.m02;
                const b10 = b.m03;
                const b11 = b.m04;
                const b12 = b.m05;
                const b20 = b.m06;
                const b21 = b.m07;
                const b22 = b.m08;
                out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
                out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
                out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
                out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
                out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
                out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
                out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
                out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
                out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
                return out;
              }

              static multiplyMat4(out, a, b) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const b00 = b.m00;
                const b01 = b.m01;
                const b02 = b.m02;
                const b10 = b.m04;
                const b11 = b.m05;
                const b12 = b.m06;
                const b20 = b.m08;
                const b21 = b.m09;
                const b22 = b.m10;
                out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
                out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
                out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
                out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
                out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
                out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
                out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
                out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
                out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
                return out;
              }

              static transform(out, a, v) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const x = v.x;
                const y = v.y;
                out.m00 = a00;
                out.m01 = a01;
                out.m02 = a02;
                out.m03 = a10;
                out.m04 = a11;
                out.m05 = a12;
                out.m06 = x * a00 + y * a10 + a20;
                out.m07 = x * a01 + y * a11 + a21;
                out.m08 = x * a02 + y * a12 + a22;
                return out;
              }

              static scale(out, a, v) {
                const x = v.x;
                const y = v.y;
                out.m00 = x * a.m00;
                out.m01 = x * a.m01;
                out.m02 = x * a.m02;
                out.m03 = y * a.m03;
                out.m04 = y * a.m04;
                out.m05 = y * a.m05;
                out.m06 = a.m06;
                out.m07 = a.m07;
                out.m08 = a.m08;
                return out;
              }

              static rotate(out, a, rad) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = c * a00 + s * a10;
                out.m01 = c * a01 + s * a11;
                out.m02 = c * a02 + s * a12;
                out.m03 = c * a10 - s * a00;
                out.m04 = c * a11 - s * a01;
                out.m05 = c * a12 - s * a02;
                out.m06 = a20;
                out.m07 = a21;
                out.m08 = a22;
                return out;
              }

              static fromMat4(out, a) {
                out.m00 = a.m00;
                out.m01 = a.m01;
                out.m02 = a.m02;
                out.m03 = a.m04;
                out.m04 = a.m05;
                out.m05 = a.m06;
                out.m06 = a.m08;
                out.m07 = a.m09;
                out.m08 = a.m10;
                return out;
              }

              static fromViewUp(out, view, up) {
                if (Vec3.lengthSqr(view) < EPSILON * EPSILON) {
                  Mat3.identity(out);
                  return out;
                }

                up = up || Vec3.UNIT_Y;
                Vec3.normalize(v3_1$1, Vec3.cross(v3_1$1, up, view));

                if (Vec3.lengthSqr(v3_1$1) < EPSILON * EPSILON) {
                  Mat3.identity(out);
                  return out;
                }

                Vec3.cross(v3_2$1, view, v3_1$1);
                Mat3.set(out, v3_1$1.x, v3_1$1.y, v3_1$1.z, v3_2$1.x, v3_2$1.y, v3_2$1.z, view.x, view.y, view.z);
                return out;
              }

              static fromTranslation(out, v) {
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 1;
                out.m05 = 0;
                out.m06 = v.x;
                out.m07 = v.y;
                out.m08 = 1;
                return out;
              }

              static fromScaling(out, v) {
                out.m00 = v.x;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = v.y;
                out.m05 = 0;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 1;
                return out;
              }

              static fromRotation(out, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = c;
                out.m01 = s;
                out.m02 = 0;
                out.m03 = -s;
                out.m04 = c;
                out.m05 = 0;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 1;
                return out;
              }

              static fromQuat(out, q) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const yx = y * x2;
                const yy = y * y2;
                const zx = z * x2;
                const zy = z * y2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                out.m00 = 1 - yy - zz;
                out.m03 = yx - wz;
                out.m06 = zx + wy;
                out.m01 = yx + wz;
                out.m04 = 1 - xx - zz;
                out.m07 = zy - wx;
                out.m02 = zx - wy;
                out.m05 = zy + wx;
                out.m08 = 1 - xx - yy;
                return out;
              }

              static inverseTransposeMat4(out, a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                if (!det) {
                  return null;
                }

                det = 1.0 / det;
                out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                out.m03 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                out.m04 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                out.m05 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                out.m06 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                out.m07 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                out.m08 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                return out;
              }

              static toArray(out, m, ofs = 0) {
                out[ofs + 0] = m.m00;
                out[ofs + 1] = m.m01;
                out[ofs + 2] = m.m02;
                out[ofs + 3] = m.m03;
                out[ofs + 4] = m.m04;
                out[ofs + 5] = m.m05;
                out[ofs + 6] = m.m06;
                out[ofs + 7] = m.m07;
                out[ofs + 8] = m.m08;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.m00 = arr[ofs + 0];
                out.m01 = arr[ofs + 1];
                out.m02 = arr[ofs + 2];
                out.m03 = arr[ofs + 3];
                out.m04 = arr[ofs + 4];
                out.m05 = arr[ofs + 5];
                out.m06 = arr[ofs + 6];
                out.m07 = arr[ofs + 7];
                out.m08 = arr[ofs + 8];
                return out;
              }

              static add(out, a, b) {
                out.m00 = a.m00 + b.m00;
                out.m01 = a.m01 + b.m01;
                out.m02 = a.m02 + b.m02;
                out.m03 = a.m03 + b.m03;
                out.m04 = a.m04 + b.m04;
                out.m05 = a.m05 + b.m05;
                out.m06 = a.m06 + b.m06;
                out.m07 = a.m07 + b.m07;
                out.m08 = a.m08 + b.m08;
                return out;
              }

              static subtract(out, a, b) {
                out.m00 = a.m00 - b.m00;
                out.m01 = a.m01 - b.m01;
                out.m02 = a.m02 - b.m02;
                out.m03 = a.m03 - b.m03;
                out.m04 = a.m04 - b.m04;
                out.m05 = a.m05 - b.m05;
                out.m06 = a.m06 - b.m06;
                out.m07 = a.m07 - b.m07;
                out.m08 = a.m08 - b.m08;
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.m00 = a.m00 * b;
                out.m01 = a.m01 * b;
                out.m02 = a.m02 * b;
                out.m03 = a.m03 * b;
                out.m04 = a.m04 * b;
                out.m05 = a.m05 * b;
                out.m06 = a.m06 * b;
                out.m07 = a.m07 * b;
                out.m08 = a.m08 * b;
                return out;
              }

              static multiplyScalarAndAdd(out, a, b, scale) {
                out.m00 = b.m00 * scale + a.m00;
                out.m01 = b.m01 * scale + a.m01;
                out.m02 = b.m02 * scale + a.m02;
                out.m03 = b.m03 * scale + a.m03;
                out.m04 = b.m04 * scale + a.m04;
                out.m05 = b.m05 * scale + a.m05;
                out.m06 = b.m06 * scale + a.m06;
                out.m07 = b.m07 * scale + a.m07;
                out.m08 = b.m08 * scale + a.m08;
                return out;
              }

              static strictEquals(a, b) {
                return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08));
              }

              constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 1, m05 = 0, m06 = 0, m07 = 0, m08 = 1) {
                super();

                if (typeof m00 === 'object') {
                  this.m00 = m00.m00;
                  this.m01 = m00.m01;
                  this.m02 = m00.m02;
                  this.m03 = m00.m03;
                  this.m04 = m00.m04;
                  this.m05 = m00.m05;
                  this.m06 = m00.m06;
                  this.m07 = m00.m07;
                  this.m08 = m00.m08;
                } else {
                  this.m00 = m00;
                  this.m01 = m01;
                  this.m02 = m02;
                  this.m03 = m03;
                  this.m04 = m04;
                  this.m05 = m05;
                  this.m06 = m06;
                  this.m07 = m07;
                  this.m08 = m08;
                }
              }

              clone() {
                const t = this;
                return new Mat3(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08);
              }

              set(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 1, m05 = 0, m06 = 0, m07 = 0, m08 = 1) {
                if (typeof m00 === 'object') {
                  this.m00 = m00.m00;
                  this.m01 = m00.m01;
                  this.m02 = m00.m02;
                  this.m03 = m00.m03;
                  this.m04 = m00.m04;
                  this.m05 = m00.m05;
                  this.m06 = m00.m06;
                  this.m07 = m00.m07;
                  this.m08 = m00.m08;
                } else {
                  this.m00 = m00;
                  this.m01 = m01;
                  this.m02 = m02;
                  this.m03 = m03;
                  this.m04 = m04;
                  this.m05 = m05;
                  this.m06 = m06;
                  this.m07 = m07;
                  this.m08 = m08;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08));
              }

              strictEquals(other) {
                return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08;
              }

              toString() {
                const t = this;
                return `[\n${t.m00}, ${t.m01}, ${t.m02},\n${t.m03},\n${t.m04}, ${t.m05},\n${t.m06}, ${t.m07},\n${t.m08}\n` + `]`;
              }

              identity() {
                this.m00 = 1;
                this.m01 = 0;
                this.m02 = 0;
                this.m03 = 0;
                this.m04 = 1;
                this.m05 = 0;
                this.m06 = 0;
                this.m07 = 0;
                this.m08 = 1;
                return this;
              }

              transpose() {
                const a01 = this.m01;
                const a02 = this.m02;
                const a12 = this.m05;
                this.m01 = this.m03;
                this.m02 = this.m06;
                this.m03 = a01;
                this.m05 = this.m07;
                this.m06 = a02;
                this.m07 = a12;
                return this;
              }

              invert() {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a10 = this.m03;
                const a11 = this.m04;
                const a12 = this.m05;
                const a20 = this.m06;
                const a21 = this.m07;
                const a22 = this.m08;
                const b01 = a22 * a11 - a12 * a21;
                const b11 = -a22 * a10 + a12 * a20;
                const b21 = a21 * a10 - a11 * a20;
                let det = a00 * b01 + a01 * b11 + a02 * b21;

                if (det === 0) {
                  this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
                  return this;
                }

                det = 1.0 / det;
                this.m00 = b01 * det;
                this.m01 = (-a22 * a01 + a02 * a21) * det;
                this.m02 = (a12 * a01 - a02 * a11) * det;
                this.m03 = b11 * det;
                this.m04 = (a22 * a00 - a02 * a20) * det;
                this.m05 = (-a12 * a00 + a02 * a10) * det;
                this.m06 = b21 * det;
                this.m07 = (-a21 * a00 + a01 * a20) * det;
                this.m08 = (a11 * a00 - a01 * a10) * det;
                return this;
              }

              determinant() {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a10 = this.m03;
                const a11 = this.m04;
                const a12 = this.m05;
                const a20 = this.m06;
                const a21 = this.m07;
                const a22 = this.m08;
                return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
              }

              add(mat) {
                this.m00 += mat.m00;
                this.m01 += mat.m01;
                this.m02 += mat.m02;
                this.m03 += mat.m03;
                this.m04 += mat.m04;
                this.m05 += mat.m05;
                this.m06 += mat.m06;
                this.m07 += mat.m07;
                this.m08 += mat.m08;
                return this;
              }

              subtract(mat) {
                this.m00 -= mat.m00;
                this.m01 -= mat.m01;
                this.m02 -= mat.m02;
                this.m03 -= mat.m03;
                this.m04 -= mat.m04;
                this.m05 -= mat.m05;
                this.m06 -= mat.m06;
                this.m07 -= mat.m07;
                this.m08 -= mat.m08;
                return this;
              }

              multiply(mat) {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a10 = this.m03;
                const a11 = this.m04;
                const a12 = this.m05;
                const a20 = this.m06;
                const a21 = this.m07;
                const a22 = this.m08;
                const b00 = mat.m00;
                const b01 = mat.m01;
                const b02 = mat.m02;
                const b10 = mat.m03;
                const b11 = mat.m04;
                const b12 = mat.m05;
                const b20 = mat.m06;
                const b21 = mat.m07;
                const b22 = mat.m08;
                this.m00 = b00 * a00 + b01 * a10 + b02 * a20;
                this.m01 = b00 * a01 + b01 * a11 + b02 * a21;
                this.m02 = b00 * a02 + b01 * a12 + b02 * a22;
                this.m03 = b10 * a00 + b11 * a10 + b12 * a20;
                this.m04 = b10 * a01 + b11 * a11 + b12 * a21;
                this.m05 = b10 * a02 + b11 * a12 + b12 * a22;
                this.m06 = b20 * a00 + b21 * a10 + b22 * a20;
                this.m07 = b20 * a01 + b21 * a11 + b22 * a21;
                this.m08 = b20 * a02 + b21 * a12 + b22 * a22;
                return this;
              }

              multiplyScalar(scalar) {
                this.m00 *= scalar;
                this.m01 *= scalar;
                this.m02 *= scalar;
                this.m03 *= scalar;
                this.m04 *= scalar;
                this.m05 *= scalar;
                this.m06 *= scalar;
                this.m07 *= scalar;
                this.m08 *= scalar;
                return this;
              }

              scale(vec) {
                const x = vec.x;
                const y = vec.y;
                this.m00 = x * this.m00;
                this.m01 = x * this.m01;
                this.m02 = x * this.m02;
                this.m03 = y * this.m03;
                this.m04 = y * this.m04;
                this.m05 = y * this.m05;
                this.m06 = this.m06;
                this.m07 = this.m07;
                this.m08 = this.m08;
                return this;
              }

              rotate(rad) {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a10 = this.m03;
                const a11 = this.m04;
                const a12 = this.m05;
                const a20 = this.m06;
                const a21 = this.m07;
                const a22 = this.m08;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                this.m00 = c * a00 + s * a10;
                this.m01 = c * a01 + s * a11;
                this.m02 = c * a02 + s * a12;
                this.m03 = c * a10 - s * a00;
                this.m04 = c * a11 - s * a01;
                this.m05 = c * a12 - s * a02;
                this.m06 = a20;
                this.m07 = a21;
                this.m08 = a22;
                return this;
              }

              fromQuat(q) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const yx = y * x2;
                const yy = y * y2;
                const zx = z * x2;
                const zy = z * y2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                this.m00 = 1 - yy - zz;
                this.m03 = yx - wz;
                this.m06 = zx + wy;
                this.m01 = yx + wz;
                this.m04 = 1 - xx - zz;
                this.m07 = zy - wx;
                this.m02 = zx - wy;
                this.m05 = zy + wx;
                this.m08 = 1 - xx - yy;
                return this;
              }

            } exports('M', Mat3);
            Mat3.IDENTITY = Object.freeze(new Mat3());
            const v3_1$1 = new Vec3();
            const v3_2$1 = new Vec3();
            CCClass.fastDefine('cc.Mat3', Mat3, {
              m00: 1,
              m01: 0,
              m02: 0,
              m03: 0,
              m04: 1,
              m05: 0,
              m06: 0,
              m07: 0,
              m08: 1
            });
            legacyCC.Mat3 = Mat3;

            class Quat extends ValueType {
              static clone(a) {
                return new Quat(a.x, a.y, a.z, a.w);
              }

              static copy(out, a) {
                out.x = a.x;
                out.y = a.y;
                out.z = a.z;
                out.w = a.w;
                return out;
              }

              static set(out, x, y, z, w) {
                out.x = x;
                out.y = y;
                out.z = z;
                out.w = w;
                return out;
              }

              static identity(out) {
                out.x = 0;
                out.y = 0;
                out.z = 0;
                out.w = 1;
                return out;
              }

              static rotationTo(out, a, b) {
                const dot = Vec3.dot(a, b);

                if (dot < -0.999999) {
                  Vec3.cross(v3_1$2, Vec3.UNIT_X, a);

                  if (v3_1$2.length() < 0.000001) {
                    Vec3.cross(v3_1$2, Vec3.UNIT_Y, a);
                  }

                  Vec3.normalize(v3_1$2, v3_1$2);
                  Quat.fromAxisAngle(out, v3_1$2, Math.PI);
                  return out;
                } else if (dot > 0.999999) {
                  out.x = 0;
                  out.y = 0;
                  out.z = 0;
                  out.w = 1;
                  return out;
                } else {
                  Vec3.cross(v3_1$2, a, b);
                  out.x = v3_1$2.x;
                  out.y = v3_1$2.y;
                  out.z = v3_1$2.z;
                  out.w = 1 + dot;
                  return Quat.normalize(out, out);
                }
              }

              static getAxisAngle(outAxis, q) {
                const rad = Math.acos(q.w) * 2.0;
                const s = Math.sin(rad / 2.0);

                if (s !== 0.0) {
                  outAxis.x = q.x / s;
                  outAxis.y = q.y / s;
                  outAxis.z = q.z / s;
                } else {
                  outAxis.x = 1;
                  outAxis.y = 0;
                  outAxis.z = 0;
                }

                return rad;
              }

              static multiply(out, a, b) {
                const x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;
                const y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;
                const z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;
                const w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;
                out.x = x;
                out.y = y;
                out.z = z;
                out.w = w;
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.x = a.x * b;
                out.y = a.y * b;
                out.z = a.z * b;
                out.w = a.w * b;
                return out;
              }

              static scaleAndAdd(out, a, b, scale) {
                out.x = a.x + b.x * scale;
                out.y = a.y + b.y * scale;
                out.z = a.z + b.z * scale;
                out.w = a.w + b.w * scale;
                return out;
              }

              static rotateX(out, a, rad) {
                rad *= 0.5;
                const bx = Math.sin(rad);
                const bw = Math.cos(rad);
                const {
                  x,
                  y,
                  z,
                  w
                } = a;
                out.x = x * bw + w * bx;
                out.y = y * bw + z * bx;
                out.z = z * bw - y * bx;
                out.w = w * bw - x * bx;
                return out;
              }

              static rotateY(out, a, rad) {
                rad *= 0.5;
                const by = Math.sin(rad);
                const bw = Math.cos(rad);
                const {
                  x,
                  y,
                  z,
                  w
                } = a;
                out.x = x * bw - z * by;
                out.y = y * bw + w * by;
                out.z = z * bw + x * by;
                out.w = w * bw - y * by;
                return out;
              }

              static rotateZ(out, a, rad) {
                rad *= 0.5;
                const bz = Math.sin(rad);
                const bw = Math.cos(rad);
                const {
                  x,
                  y,
                  z,
                  w
                } = a;
                out.x = x * bw + y * bz;
                out.y = y * bw - x * bz;
                out.z = z * bw + w * bz;
                out.w = w * bw - z * bz;
                return out;
              }

              static rotateAround(out, rot, axis, rad) {
                Quat.invert(qt_1, rot);
                Vec3.transformQuat(v3_1$2, axis, qt_1);
                Quat.fromAxisAngle(qt_1, v3_1$2, rad);
                Quat.multiply(out, rot, qt_1);
                return out;
              }

              static rotateAroundLocal(out, rot, axis, rad) {
                Quat.fromAxisAngle(qt_1, axis, rad);
                Quat.multiply(out, rot, qt_1);
                return out;
              }

              static calculateW(out, a) {
                out.x = a.x;
                out.y = a.y;
                out.z = a.z;
                out.w = Math.sqrt(Math.abs(1.0 - a.x * a.x - a.y * a.y - a.z * a.z));
                return out;
              }

              static dot(a, b) {
                return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
              }

              static lerp(out, a, b, t) {
                out.x = a.x + t * (b.x - a.x);
                out.y = a.y + t * (b.y - a.y);
                out.z = a.z + t * (b.z - a.z);
                out.w = a.w + t * (b.w - a.w);
                return out;
              }

              static slerp(out, a, b, t) {
                let scale0 = 0;
                let scale1 = 0;
                let bx = b.x;
                let by = b.y;
                let bz = b.z;
                let bw = b.w;
                let cosom = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;

                if (cosom < 0.0) {
                  cosom = -cosom;
                  bx = -bx;
                  by = -by;
                  bz = -bz;
                  bw = -bw;
                }

                if (1.0 - cosom > 0.000001) {
                  const omega = Math.acos(cosom);
                  const sinom = Math.sin(omega);
                  scale0 = Math.sin((1.0 - t) * omega) / sinom;
                  scale1 = Math.sin(t * omega) / sinom;
                } else {
                  scale0 = 1.0 - t;
                  scale1 = t;
                }

                out.x = scale0 * a.x + scale1 * bx;
                out.y = scale0 * a.y + scale1 * by;
                out.z = scale0 * a.z + scale1 * bz;
                out.w = scale0 * a.w + scale1 * bw;
                return out;
              }

              static sqlerp(out, a, b, c, d, t) {
                Quat.slerp(qt_1, a, d, t);
                Quat.slerp(qt_2, b, c, t);
                Quat.slerp(out, qt_1, qt_2, 2 * t * (1 - t));
                return out;
              }

              static invert(out, a) {
                const dot = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
                const invDot = dot ? 1.0 / dot : 0;
                out.x = -a.x * invDot;
                out.y = -a.y * invDot;
                out.z = -a.z * invDot;
                out.w = a.w * invDot;
                return out;
              }

              static conjugate(out, a) {
                out.x = -a.x;
                out.y = -a.y;
                out.z = -a.z;
                out.w = a.w;
                return out;
              }

              static len(a) {
                return Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
              }

              static lengthSqr(a) {
                return a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
              }

              static normalize(out, a) {
                let len = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  out.x = a.x * len;
                  out.y = a.y * len;
                  out.z = a.z * len;
                  out.w = a.w * len;
                }

                return out;
              }

              static fromAxes(out, xAxis, yAxis, zAxis) {
                Mat3.set(m3_1, xAxis.x, xAxis.y, xAxis.z, yAxis.x, yAxis.y, yAxis.z, zAxis.x, zAxis.y, zAxis.z);
                return Quat.normalize(out, Quat.fromMat3(out, m3_1));
              }

              static fromViewUp(out, view, up) {
                Mat3.fromViewUp(m3_1, view, up);
                return Quat.normalize(out, Quat.fromMat3(out, m3_1));
              }

              static fromAxisAngle(out, axis, rad) {
                rad *= 0.5;
                const s = Math.sin(rad);
                out.x = s * axis.x;
                out.y = s * axis.y;
                out.z = s * axis.z;
                out.w = Math.cos(rad);
                return out;
              }

              static fromMat3(out, m) {
                const {
                  m00,
                  m03: m01,
                  m06: m02,
                  m01: m10,
                  m04: m11,
                  m07: m12,
                  m02: m20,
                  m05: m21,
                  m08: m22
                } = m;
                const trace = m00 + m11 + m22;

                if (trace > 0) {
                  const s = 0.5 / Math.sqrt(trace + 1.0);
                  out.w = 0.25 / s;
                  out.x = (m21 - m12) * s;
                  out.y = (m02 - m20) * s;
                  out.z = (m10 - m01) * s;
                } else if (m00 > m11 && m00 > m22) {
                  const s = 2.0 * Math.sqrt(1.0 + m00 - m11 - m22);
                  out.w = (m21 - m12) / s;
                  out.x = 0.25 * s;
                  out.y = (m01 + m10) / s;
                  out.z = (m02 + m20) / s;
                } else if (m11 > m22) {
                  const s = 2.0 * Math.sqrt(1.0 + m11 - m00 - m22);
                  out.w = (m02 - m20) / s;
                  out.x = (m01 + m10) / s;
                  out.y = 0.25 * s;
                  out.z = (m12 + m21) / s;
                } else {
                  const s = 2.0 * Math.sqrt(1.0 + m22 - m00 - m11);
                  out.w = (m10 - m01) / s;
                  out.x = (m02 + m20) / s;
                  out.y = (m12 + m21) / s;
                  out.z = 0.25 * s;
                }

                return out;
              }

              static fromEuler(out, x, y, z) {
                x *= halfToRad;
                y *= halfToRad;
                z *= halfToRad;
                const sx = Math.sin(x);
                const cx = Math.cos(x);
                const sy = Math.sin(y);
                const cy = Math.cos(y);
                const sz = Math.sin(z);
                const cz = Math.cos(z);
                out.x = sx * cy * cz + cx * sy * sz;
                out.y = cx * sy * cz + sx * cy * sz;
                out.z = cx * cy * sz - sx * sy * cz;
                out.w = cx * cy * cz - sx * sy * sz;
                return out;
              }

              static fromAngleZ(out, z) {
                z *= halfToRad;
                out.x = out.y = 0;
                out.z = Math.sin(z);
                out.w = Math.cos(z);
                return out;
              }

              static toAxisX(out, q) {
                const fy = 2.0 * q.y;
                const fz = 2.0 * q.z;
                out.x = 1.0 - fy * q.y - fz * q.z;
                out.y = fy * q.x + fz * q.w;
                out.z = fz * q.x + fy * q.w;
                return out;
              }

              static toAxisY(out, q) {
                const fx = 2.0 * q.x;
                const fy = 2.0 * q.y;
                const fz = 2.0 * q.z;
                out.x = fy * q.x - fz * q.w;
                out.y = 1.0 - fx * q.x - fz * q.z;
                out.z = fz * q.y + fx * q.w;
                return out;
              }

              static toAxisZ(out, q) {
                const fx = 2.0 * q.x;
                const fy = 2.0 * q.y;
                const fz = 2.0 * q.z;
                out.x = fz * q.x - fy * q.w;
                out.y = fz * q.y - fx * q.w;
                out.z = 1.0 - fx * q.x - fy * q.y;
                return out;
              }

              static toEuler(out, q, outerZ) {
                const {
                  x,
                  y,
                  z,
                  w
                } = q;
                let bank = 0;
                let heading = 0;
                let attitude = 0;
                const test = x * y + z * w;

                if (test > 0.499999) {
                  bank = 0;
                  heading = toDegree(2 * Math.atan2(x, w));
                  attitude = 90;
                } else if (test < -0.499999) {
                  bank = 0;
                  heading = -toDegree(2 * Math.atan2(x, w));
                  attitude = -90;
                } else {
                  const sqx = x * x;
                  const sqy = y * y;
                  const sqz = z * z;
                  bank = toDegree(Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz));
                  heading = toDegree(Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz));
                  attitude = toDegree(Math.asin(2 * test));

                  if (outerZ) {
                    bank = -180 * Math.sign(bank + 1e-6) + bank;
                    heading = -180 * Math.sign(heading + 1e-6) + heading;
                    attitude = 180 * Math.sign(attitude + 1e-6) - attitude;
                  }
                }

                out.x = bank;
                out.y = heading;
                out.z = attitude;
                return out;
              }

              static toArray(out, q, ofs = 0) {
                out[ofs + 0] = q.x;
                out[ofs + 1] = q.y;
                out[ofs + 2] = q.z;
                out[ofs + 3] = q.w;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.x = arr[ofs + 0];
                out.y = arr[ofs + 1];
                out.z = arr[ofs + 2];
                out.w = arr[ofs + 3];
                return out;
              }

              static strictEquals(a, b) {
                return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1.0, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1.0, Math.abs(a.w), Math.abs(b.w));
              }

              constructor(x, y, z, w) {
                super();

                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                  this.w = x.w;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                  this.w = w !== null && w !== void 0 ? w : 1;
                }
              }

              clone() {
                return new Quat(this.x, this.y, this.z, this.w);
              }

              set(x, y, z, w) {
                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                  this.w = x.w;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                  this.w = w !== null && w !== void 0 ? w : 1;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z)) && Math.abs(this.w - other.w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(other.w));
              }

              strictEquals(other) {
                return other && this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
              }

              getEulerAngles(out) {
                return Quat.toEuler(out, this);
              }

              lerp(to, ratio) {
                this.x += ratio * (to.x - this.x);
                this.y += ratio * (to.y - this.y);
                this.z += ratio * (to.z - this.z);
                this.w += ratio * (to.w - this.w);
                return this;
              }

              slerp(to, ratio) {
                return Quat.slerp(this, this, to, ratio);
              }

              length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
              }

              lengthSqr() {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
              }

            } exports('Q', Quat);
            Quat.IDENTITY = Object.freeze(new Quat());
            const qt_1 = new Quat();
            const qt_2 = new Quat();
            const v3_1$2 = new Vec3();
            const m3_1 = new Mat3();
            const halfToRad = 0.5 * Math.PI / 180.0;
            CCClass.fastDefine('cc.Quat', Quat, {
              x: 0,
              y: 0,
              z: 0,
              w: 1
            });
            legacyCC.Quat = Quat;
            function quat(x = 0, y = 0, z = 0, w = 1) {
              return new Quat(x, y, z, w);
            }
            legacyCC.quat = quat;

            const preTransforms = exports('fG', Object.freeze([Object.freeze([1, 0, 0, 1]), Object.freeze([0, 1, -1, 0]), Object.freeze([-1, 0, 0, -1]), Object.freeze([0, -1, 1, 0])]));
            class Mat4 extends ValueType {
              static clone(a) {
                return new Mat4(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08, a.m09, a.m10, a.m11, a.m12, a.m13, a.m14, a.m15);
              }

              static copy(out, a) {
                out.m00 = a.m00;
                out.m01 = a.m01;
                out.m02 = a.m02;
                out.m03 = a.m03;
                out.m04 = a.m04;
                out.m05 = a.m05;
                out.m06 = a.m06;
                out.m07 = a.m07;
                out.m08 = a.m08;
                out.m09 = a.m09;
                out.m10 = a.m10;
                out.m11 = a.m11;
                out.m12 = a.m12;
                out.m13 = a.m13;
                out.m14 = a.m14;
                out.m15 = a.m15;
                return out;
              }

              static set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
                out.m00 = m00;
                out.m01 = m01;
                out.m02 = m02;
                out.m03 = m03;
                out.m04 = m10;
                out.m05 = m11;
                out.m06 = m12;
                out.m07 = m13;
                out.m08 = m20;
                out.m09 = m21;
                out.m10 = m22;
                out.m11 = m23;
                out.m12 = m30;
                out.m13 = m31;
                out.m14 = m32;
                out.m15 = m33;
                return out;
              }

              static identity(out) {
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = 1;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = 1;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static transpose(out, a) {
                if (out === a) {
                  const a01 = a.m01;
                  const a02 = a.m02;
                  const a03 = a.m03;
                  const a12 = a.m06;
                  const a13 = a.m07;
                  const a23 = a.m11;
                  out.m01 = a.m04;
                  out.m02 = a.m08;
                  out.m03 = a.m12;
                  out.m04 = a01;
                  out.m06 = a.m09;
                  out.m07 = a.m13;
                  out.m08 = a02;
                  out.m09 = a12;
                  out.m11 = a.m14;
                  out.m12 = a03;
                  out.m13 = a13;
                  out.m14 = a23;
                } else {
                  out.m00 = a.m00;
                  out.m01 = a.m04;
                  out.m02 = a.m08;
                  out.m03 = a.m12;
                  out.m04 = a.m01;
                  out.m05 = a.m05;
                  out.m06 = a.m09;
                  out.m07 = a.m13;
                  out.m08 = a.m02;
                  out.m09 = a.m06;
                  out.m10 = a.m10;
                  out.m11 = a.m14;
                  out.m12 = a.m03;
                  out.m13 = a.m07;
                  out.m14 = a.m11;
                  out.m15 = a.m15;
                }

                return out;
              }

              static invert(out, a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                if (det === 0) {
                  out.m00 = 0;
                  out.m01 = 0;
                  out.m02 = 0;
                  out.m03 = 0;
                  out.m04 = 0;
                  out.m05 = 0;
                  out.m06 = 0;
                  out.m07 = 0;
                  out.m08 = 0;
                  out.m09 = 0;
                  out.m10 = 0;
                  out.m11 = 0;
                  out.m12 = 0;
                  out.m13 = 0;
                  out.m14 = 0;
                  out.m15 = 0;
                  return out;
                }

                det = 1.0 / det;
                out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                out.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                out.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                out.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                out.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                out.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                out.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                out.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                out.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                out.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                out.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                out.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                out.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                out.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                return out;
              }

              static determinant(a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
              }

              static multiply(out, a, b) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                let b0 = b.m00;
                let b1 = b.m01;
                let b2 = b.m02;
                let b3 = b.m03;
                out.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = b.m04;
                b1 = b.m05;
                b2 = b.m06;
                b3 = b.m07;
                out.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = b.m08;
                b1 = b.m09;
                b2 = b.m10;
                b3 = b.m11;
                out.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = b.m12;
                b1 = b.m13;
                b2 = b.m14;
                b3 = b.m15;
                out.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                return out;
              }

              static transform(out, a, v) {
                const x = v.x;
                const y = v.y;
                const z = v.z;

                if (a === out) {
                  out.m12 = a.m00 * x + a.m04 * y + a.m08 * z + a.m12;
                  out.m13 = a.m01 * x + a.m05 * y + a.m09 * z + a.m13;
                  out.m14 = a.m02 * x + a.m06 * y + a.m10 * z + a.m14;
                  out.m15 = a.m03 * x + a.m07 * y + a.m11 * z + a.m15;
                } else {
                  const a00 = a.m00;
                  const a01 = a.m01;
                  const a02 = a.m02;
                  const a03 = a.m03;
                  const a10 = a.m04;
                  const a11 = a.m05;
                  const a12 = a.m06;
                  const a13 = a.m07;
                  const a20 = a.m08;
                  const a21 = a.m09;
                  const a22 = a.m10;
                  const a23 = a.m11;
                  const a30 = a.m12;
                  const a31 = a.m13;
                  const a32 = a.m14;
                  const a33 = a.m15;
                  out.m00 = a00;
                  out.m01 = a01;
                  out.m02 = a02;
                  out.m03 = a03;
                  out.m04 = a10;
                  out.m05 = a11;
                  out.m06 = a12;
                  out.m07 = a13;
                  out.m08 = a20;
                  out.m09 = a21;
                  out.m10 = a22;
                  out.m11 = a23;
                  out.m12 = a00 * x + a10 * y + a20 * z + a.m12;
                  out.m13 = a01 * x + a11 * y + a21 * z + a.m13;
                  out.m14 = a02 * x + a12 * y + a22 * z + a.m14;
                  out.m15 = a03 * x + a13 * y + a23 * z + a.m15;
                }

                return out;
              }

              static translate(out, a, v) {
                if (a === out) {
                  out.m12 += v.x;
                  out.m13 += v.y;
                  out.m14 += v.z;
                } else {
                  out.m00 = a.m00;
                  out.m01 = a.m01;
                  out.m02 = a.m02;
                  out.m03 = a.m03;
                  out.m04 = a.m04;
                  out.m05 = a.m05;
                  out.m06 = a.m06;
                  out.m07 = a.m07;
                  out.m08 = a.m08;
                  out.m09 = a.m09;
                  out.m10 = a.m10;
                  out.m11 = a.m11;
                  out.m12 += v.x;
                  out.m13 += v.y;
                  out.m14 += v.z;
                  out.m15 = a.m15;
                }

                return out;
              }

              static scale(out, a, v) {
                const x = v.x;
                const y = v.y;
                const z = v.z;
                out.m00 = a.m00 * x;
                out.m01 = a.m01 * x;
                out.m02 = a.m02 * x;
                out.m03 = a.m03 * x;
                out.m04 = a.m04 * y;
                out.m05 = a.m05 * y;
                out.m06 = a.m06 * y;
                out.m07 = a.m07 * y;
                out.m08 = a.m08 * z;
                out.m09 = a.m09 * z;
                out.m10 = a.m10 * z;
                out.m11 = a.m11 * z;
                out.m12 = a.m12;
                out.m13 = a.m13;
                out.m14 = a.m14;
                out.m15 = a.m15;
                return out;
              }

              static rotate(out, a, rad, axis) {
                let x = axis.x;
                let y = axis.y;
                let z = axis.z;
                let len = Math.sqrt(x * x + y * y + z * z);

                if (Math.abs(len) < EPSILON) {
                  return null;
                }

                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const t = 1 - c;
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const b00 = x * x * t + c;
                const b01 = y * x * t + z * s;
                const b02 = z * x * t - y * s;
                const b10 = x * y * t - z * s;
                const b11 = y * y * t + c;
                const b12 = z * y * t + x * s;
                const b20 = x * z * t + y * s;
                const b21 = y * z * t - x * s;
                const b22 = z * z * t + c;
                out.m00 = a00 * b00 + a10 * b01 + a20 * b02;
                out.m01 = a01 * b00 + a11 * b01 + a21 * b02;
                out.m02 = a02 * b00 + a12 * b01 + a22 * b02;
                out.m03 = a03 * b00 + a13 * b01 + a23 * b02;
                out.m04 = a00 * b10 + a10 * b11 + a20 * b12;
                out.m05 = a01 * b10 + a11 * b11 + a21 * b12;
                out.m06 = a02 * b10 + a12 * b11 + a22 * b12;
                out.m07 = a03 * b10 + a13 * b11 + a23 * b12;
                out.m08 = a00 * b20 + a10 * b21 + a20 * b22;
                out.m09 = a01 * b20 + a11 * b21 + a21 * b22;
                out.m10 = a02 * b20 + a12 * b21 + a22 * b22;
                out.m11 = a03 * b20 + a13 * b21 + a23 * b22;

                if (a !== out) {
                  out.m12 = a.m12;
                  out.m13 = a.m13;
                  out.m14 = a.m14;
                  out.m15 = a.m15;
                }

                return out;
              }

              static rotateX(out, a, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;

                if (a !== out) {
                  out.m00 = a.m00;
                  out.m01 = a.m01;
                  out.m02 = a.m02;
                  out.m03 = a.m03;
                  out.m12 = a.m12;
                  out.m13 = a.m13;
                  out.m14 = a.m14;
                  out.m15 = a.m15;
                }

                out.m04 = a10 * c + a20 * s;
                out.m05 = a11 * c + a21 * s;
                out.m06 = a12 * c + a22 * s;
                out.m07 = a13 * c + a23 * s;
                out.m08 = a20 * c - a10 * s;
                out.m09 = a21 * c - a11 * s;
                out.m10 = a22 * c - a12 * s;
                out.m11 = a23 * c - a13 * s;
                return out;
              }

              static rotateY(out, a, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;

                if (a !== out) {
                  out.m04 = a.m04;
                  out.m05 = a.m05;
                  out.m06 = a.m06;
                  out.m07 = a.m07;
                  out.m12 = a.m12;
                  out.m13 = a.m13;
                  out.m14 = a.m14;
                  out.m15 = a.m15;
                }

                out.m00 = a00 * c - a20 * s;
                out.m01 = a01 * c - a21 * s;
                out.m02 = a02 * c - a22 * s;
                out.m03 = a03 * c - a23 * s;
                out.m08 = a00 * s + a20 * c;
                out.m09 = a01 * s + a21 * c;
                out.m10 = a02 * s + a22 * c;
                out.m11 = a03 * s + a23 * c;
                return out;
              }

              static rotateZ(out, a, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;

                if (a !== out) {
                  out.m08 = a.m08;
                  out.m09 = a.m09;
                  out.m10 = a.m10;
                  out.m11 = a.m11;
                  out.m12 = a.m12;
                  out.m13 = a.m13;
                  out.m14 = a.m14;
                  out.m15 = a.m15;
                }

                out.m00 = a00 * c + a10 * s;
                out.m01 = a01 * c + a11 * s;
                out.m02 = a02 * c + a12 * s;
                out.m03 = a03 * c + a13 * s;
                out.m04 = a10 * c - a00 * s;
                out.m05 = a11 * c - a01 * s;
                out.m06 = a12 * c - a02 * s;
                out.m07 = a13 * c - a03 * s;
                return out;
              }

              static fromTranslation(out, v) {
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = 1;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = 1;
                out.m11 = 0;
                out.m12 = v.x;
                out.m13 = v.y;
                out.m14 = v.z;
                out.m15 = 1;
                return out;
              }

              static fromScaling(out, v) {
                out.m00 = v.x;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = v.y;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = v.z;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromRotation(out, rad, axis) {
                let x = axis.x;
                let y = axis.y;
                let z = axis.z;
                let len = Math.sqrt(x * x + y * y + z * z);

                if (Math.abs(len) < EPSILON) {
                  return null;
                }

                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const t = 1 - c;
                out.m00 = x * x * t + c;
                out.m01 = y * x * t + z * s;
                out.m02 = z * x * t - y * s;
                out.m03 = 0;
                out.m04 = x * y * t - z * s;
                out.m05 = y * y * t + c;
                out.m06 = z * y * t + x * s;
                out.m07 = 0;
                out.m08 = x * z * t + y * s;
                out.m09 = y * z * t - x * s;
                out.m10 = z * z * t + c;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromXRotation(out, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = c;
                out.m06 = s;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = -s;
                out.m10 = c;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromYRotation(out, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = c;
                out.m01 = 0;
                out.m02 = -s;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = 1;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = s;
                out.m09 = 0;
                out.m10 = c;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromZRotation(out, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = c;
                out.m01 = s;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = -s;
                out.m05 = c;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = 1;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromRT(out, q, v) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const xy = x * y2;
                const xz = x * z2;
                const yy = y * y2;
                const yz = y * z2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                out.m00 = 1 - (yy + zz);
                out.m01 = xy + wz;
                out.m02 = xz - wy;
                out.m03 = 0;
                out.m04 = xy - wz;
                out.m05 = 1 - (xx + zz);
                out.m06 = yz + wx;
                out.m07 = 0;
                out.m08 = xz + wy;
                out.m09 = yz - wx;
                out.m10 = 1 - (xx + yy);
                out.m11 = 0;
                out.m12 = v.x;
                out.m13 = v.y;
                out.m14 = v.z;
                out.m15 = 1;
                return out;
              }

              static getTranslation(out, mat) {
                out.x = mat.m12;
                out.y = mat.m13;
                out.z = mat.m14;
                return out;
              }

              static getScaling(out, mat) {
                const m00 = m3_1$1.m00 = mat.m00;
                const m01 = m3_1$1.m01 = mat.m01;
                const m02 = m3_1$1.m02 = mat.m02;
                const m04 = m3_1$1.m03 = mat.m04;
                const m05 = m3_1$1.m04 = mat.m05;
                const m06 = m3_1$1.m05 = mat.m06;
                const m08 = m3_1$1.m06 = mat.m08;
                const m09 = m3_1$1.m07 = mat.m09;
                const m10 = m3_1$1.m08 = mat.m10;
                out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
                out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
                out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10);

                if (Mat3.determinant(m3_1$1) < 0) {
                  out.x *= -1;
                }

                return out;
              }

              static getRotation(out, mat) {
                const trace = mat.m00 + mat.m05 + mat.m10;
                let S = 0;

                if (trace > 0) {
                  S = Math.sqrt(trace + 1.0) * 2;
                  out.w = 0.25 * S;
                  out.x = (mat.m06 - mat.m09) / S;
                  out.y = (mat.m08 - mat.m02) / S;
                  out.z = (mat.m01 - mat.m04) / S;
                } else if (mat.m00 > mat.m05 && mat.m00 > mat.m10) {
                  S = Math.sqrt(1.0 + mat.m00 - mat.m05 - mat.m10) * 2;
                  out.w = (mat.m06 - mat.m09) / S;
                  out.x = 0.25 * S;
                  out.y = (mat.m01 + mat.m04) / S;
                  out.z = (mat.m08 + mat.m02) / S;
                } else if (mat.m05 > mat.m10) {
                  S = Math.sqrt(1.0 + mat.m05 - mat.m00 - mat.m10) * 2;
                  out.w = (mat.m08 - mat.m02) / S;
                  out.x = (mat.m01 + mat.m04) / S;
                  out.y = 0.25 * S;
                  out.z = (mat.m06 + mat.m09) / S;
                } else {
                  S = Math.sqrt(1.0 + mat.m10 - mat.m00 - mat.m05) * 2;
                  out.w = (mat.m01 - mat.m04) / S;
                  out.x = (mat.m08 + mat.m02) / S;
                  out.y = (mat.m06 + mat.m09) / S;
                  out.z = 0.25 * S;
                }

                return out;
              }

              static toRTS(m, q, v, s) {
                s.x = Vec3.set(v3_1$3, m.m00, m.m01, m.m02).length();
                m3_1$1.m00 = m.m00 / s.x;
                m3_1$1.m01 = m.m01 / s.x;
                m3_1$1.m02 = m.m02 / s.x;
                s.y = Vec3.set(v3_1$3, m.m04, m.m05, m.m06).length();
                m3_1$1.m03 = m.m04 / s.y;
                m3_1$1.m04 = m.m05 / s.y;
                m3_1$1.m05 = m.m06 / s.y;
                s.z = Vec3.set(v3_1$3, m.m08, m.m09, m.m10).length();
                m3_1$1.m06 = m.m08 / s.z;
                m3_1$1.m07 = m.m09 / s.z;
                m3_1$1.m08 = m.m10 / s.z;
                const det = Mat3.determinant(m3_1$1);

                if (det < 0) {
                  s.x *= -1;
                  m3_1$1.m00 *= -1;
                  m3_1$1.m01 *= -1;
                  m3_1$1.m02 *= -1;
                }

                Quat.fromMat3(q, m3_1$1);
                Vec3.set(v, m.m12, m.m13, m.m14);
              }

              static fromRTS(out, q, v, s) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const xy = x * y2;
                const xz = x * z2;
                const yy = y * y2;
                const yz = y * z2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                const sx = s.x;
                const sy = s.y;
                const sz = s.z;
                out.m00 = (1 - (yy + zz)) * sx;
                out.m01 = (xy + wz) * sx;
                out.m02 = (xz - wy) * sx;
                out.m03 = 0;
                out.m04 = (xy - wz) * sy;
                out.m05 = (1 - (xx + zz)) * sy;
                out.m06 = (yz + wx) * sy;
                out.m07 = 0;
                out.m08 = (xz + wy) * sz;
                out.m09 = (yz - wx) * sz;
                out.m10 = (1 - (xx + yy)) * sz;
                out.m11 = 0;
                out.m12 = v.x;
                out.m13 = v.y;
                out.m14 = v.z;
                out.m15 = 1;
                return out;
              }

              static fromRTSOrigin(out, q, v, s, o) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const xy = x * y2;
                const xz = x * z2;
                const yy = y * y2;
                const yz = y * z2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                const sx = s.x;
                const sy = s.y;
                const sz = s.z;
                const ox = o.x;
                const oy = o.y;
                const oz = o.z;
                out.m00 = (1 - (yy + zz)) * sx;
                out.m01 = (xy + wz) * sx;
                out.m02 = (xz - wy) * sx;
                out.m03 = 0;
                out.m04 = (xy - wz) * sy;
                out.m05 = (1 - (xx + zz)) * sy;
                out.m06 = (yz + wx) * sy;
                out.m07 = 0;
                out.m08 = (xz + wy) * sz;
                out.m09 = (yz - wx) * sz;
                out.m10 = (1 - (xx + yy)) * sz;
                out.m11 = 0;
                out.m12 = v.x + ox - (out.m00 * ox + out.m04 * oy + out.m08 * oz);
                out.m13 = v.y + oy - (out.m01 * ox + out.m05 * oy + out.m09 * oz);
                out.m14 = v.z + oz - (out.m02 * ox + out.m06 * oy + out.m10 * oz);
                out.m15 = 1;
                return out;
              }

              static fromQuat(out, q) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const yx = y * x2;
                const yy = y * y2;
                const zx = z * x2;
                const zy = z * y2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                out.m00 = 1 - yy - zz;
                out.m01 = yx + wz;
                out.m02 = zx - wy;
                out.m03 = 0;
                out.m04 = yx - wz;
                out.m05 = 1 - xx - zz;
                out.m06 = zy + wx;
                out.m07 = 0;
                out.m08 = zx + wy;
                out.m09 = zy - wx;
                out.m10 = 1 - xx - yy;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static frustum(out, left, right, bottom, top, near, far) {
                const rl = 1 / (right - left);
                const tb = 1 / (top - bottom);
                const nf = 1 / (near - far);
                out.m00 = near * 2 * rl;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = near * 2 * tb;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = (right + left) * rl;
                out.m09 = (top + bottom) * tb;
                out.m10 = (far + near) * nf;
                out.m11 = -1;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = far * near * 2 * nf;
                out.m15 = 0;
                return out;
              }

              static perspective(out, fov, aspect, near, far, isFOVY = true, minClipZ = -1, projectionSignY = 1, orientation = 0) {
                const f = 1.0 / Math.tan(fov / 2);
                const nf = 1 / (near - far);
                const x = isFOVY ? f / aspect : f;
                const y = (isFOVY ? f : f * aspect) * projectionSignY;
                const preTransform = preTransforms[orientation];
                out.m00 = x * preTransform[0];
                out.m01 = x * preTransform[1];
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = y * preTransform[2];
                out.m05 = y * preTransform[3];
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = (far - minClipZ * near) * nf;
                out.m11 = -1;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = far * near * nf * (1 - minClipZ);
                out.m15 = 0;
                return out;
              }

              static ortho(out, left, right, bottom, top, near, far, minClipZ = -1, projectionSignY = 1, orientation = 0) {
                const lr = 1 / (left - right);
                const bt = 1 / (bottom - top) * projectionSignY;
                const nf = 1 / (near - far);
                const x = -2 * lr;
                const y = -2 * bt;
                const dx = (left + right) * lr;
                const dy = (top + bottom) * bt;
                const preTransform = preTransforms[orientation];
                out.m00 = x * preTransform[0];
                out.m01 = x * preTransform[1];
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = y * preTransform[2];
                out.m05 = y * preTransform[3];
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = nf * (1 - minClipZ);
                out.m11 = 0;
                out.m12 = dx * preTransform[0] + dy * preTransform[2];
                out.m13 = dx * preTransform[1] + dy * preTransform[3];
                out.m14 = (near - minClipZ * far) * nf;
                out.m15 = 1;
                return out;
              }

              static lookAt(out, eye, center, up) {
                const eyex = eye.x;
                const eyey = eye.y;
                const eyez = eye.z;
                const upx = up.x;
                const upy = up.y;
                const upz = up.z;
                const centerx = center.x;
                const centery = center.y;
                const centerz = center.z;
                let z0 = eyex - centerx;
                let z1 = eyey - centery;
                let z2 = eyez - centerz;
                let len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
                z0 *= len;
                z1 *= len;
                z2 *= len;
                let x0 = upy * z2 - upz * z1;
                let x1 = upz * z0 - upx * z2;
                let x2 = upx * z1 - upy * z0;
                len = 1 / Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
                x0 *= len;
                x1 *= len;
                x2 *= len;
                const y0 = z1 * x2 - z2 * x1;
                const y1 = z2 * x0 - z0 * x2;
                const y2 = z0 * x1 - z1 * x0;
                out.m00 = x0;
                out.m01 = y0;
                out.m02 = z0;
                out.m03 = 0;
                out.m04 = x1;
                out.m05 = y1;
                out.m06 = z1;
                out.m07 = 0;
                out.m08 = x2;
                out.m09 = y2;
                out.m10 = z2;
                out.m11 = 0;
                out.m12 = -(x0 * eyex + x1 * eyey + x2 * eyez);
                out.m13 = -(y0 * eyex + y1 * eyey + y2 * eyez);
                out.m14 = -(z0 * eyex + z1 * eyey + z2 * eyez);
                out.m15 = 1;
                return out;
              }

              static inverseTranspose(out, a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                if (!det) {
                  return null;
                }

                det = 1.0 / det;
                out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                out.m03 = 0;
                out.m04 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                out.m06 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                out.m07 = 0;
                out.m08 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                out.m09 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static toArray(out, m, ofs = 0) {
                out[ofs + 0] = m.m00;
                out[ofs + 1] = m.m01;
                out[ofs + 2] = m.m02;
                out[ofs + 3] = m.m03;
                out[ofs + 4] = m.m04;
                out[ofs + 5] = m.m05;
                out[ofs + 6] = m.m06;
                out[ofs + 7] = m.m07;
                out[ofs + 8] = m.m08;
                out[ofs + 9] = m.m09;
                out[ofs + 10] = m.m10;
                out[ofs + 11] = m.m11;
                out[ofs + 12] = m.m12;
                out[ofs + 13] = m.m13;
                out[ofs + 14] = m.m14;
                out[ofs + 15] = m.m15;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.m00 = arr[ofs + 0];
                out.m01 = arr[ofs + 1];
                out.m02 = arr[ofs + 2];
                out.m03 = arr[ofs + 3];
                out.m04 = arr[ofs + 4];
                out.m05 = arr[ofs + 5];
                out.m06 = arr[ofs + 6];
                out.m07 = arr[ofs + 7];
                out.m08 = arr[ofs + 8];
                out.m09 = arr[ofs + 9];
                out.m10 = arr[ofs + 10];
                out.m11 = arr[ofs + 11];
                out.m12 = arr[ofs + 12];
                out.m13 = arr[ofs + 13];
                out.m14 = arr[ofs + 14];
                out.m15 = arr[ofs + 15];
                return out;
              }

              static add(out, a, b) {
                out.m00 = a.m00 + b.m00;
                out.m01 = a.m01 + b.m01;
                out.m02 = a.m02 + b.m02;
                out.m03 = a.m03 + b.m03;
                out.m04 = a.m04 + b.m04;
                out.m05 = a.m05 + b.m05;
                out.m06 = a.m06 + b.m06;
                out.m07 = a.m07 + b.m07;
                out.m08 = a.m08 + b.m08;
                out.m09 = a.m09 + b.m09;
                out.m10 = a.m10 + b.m10;
                out.m11 = a.m11 + b.m11;
                out.m12 = a.m12 + b.m12;
                out.m13 = a.m13 + b.m13;
                out.m14 = a.m14 + b.m14;
                out.m15 = a.m15 + b.m15;
                return out;
              }

              static subtract(out, a, b) {
                out.m00 = a.m00 - b.m00;
                out.m01 = a.m01 - b.m01;
                out.m02 = a.m02 - b.m02;
                out.m03 = a.m03 - b.m03;
                out.m04 = a.m04 - b.m04;
                out.m05 = a.m05 - b.m05;
                out.m06 = a.m06 - b.m06;
                out.m07 = a.m07 - b.m07;
                out.m08 = a.m08 - b.m08;
                out.m09 = a.m09 - b.m09;
                out.m10 = a.m10 - b.m10;
                out.m11 = a.m11 - b.m11;
                out.m12 = a.m12 - b.m12;
                out.m13 = a.m13 - b.m13;
                out.m14 = a.m14 - b.m14;
                out.m15 = a.m15 - b.m15;
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.m00 = a.m00 * b;
                out.m01 = a.m01 * b;
                out.m02 = a.m02 * b;
                out.m03 = a.m03 * b;
                out.m04 = a.m04 * b;
                out.m05 = a.m05 * b;
                out.m06 = a.m06 * b;
                out.m07 = a.m07 * b;
                out.m08 = a.m08 * b;
                out.m09 = a.m09 * b;
                out.m10 = a.m10 * b;
                out.m11 = a.m11 * b;
                out.m12 = a.m12 * b;
                out.m13 = a.m13 * b;
                out.m14 = a.m14 * b;
                out.m15 = a.m15 * b;
                return out;
              }

              static multiplyScalarAndAdd(out, a, b, scale) {
                out.m00 = a.m00 + b.m00 * scale;
                out.m01 = a.m01 + b.m01 * scale;
                out.m02 = a.m02 + b.m02 * scale;
                out.m03 = a.m03 + b.m03 * scale;
                out.m04 = a.m04 + b.m04 * scale;
                out.m05 = a.m05 + b.m05 * scale;
                out.m06 = a.m06 + b.m06 * scale;
                out.m07 = a.m07 + b.m07 * scale;
                out.m08 = a.m08 + b.m08 * scale;
                out.m09 = a.m09 + b.m09 * scale;
                out.m10 = a.m10 + b.m10 * scale;
                out.m11 = a.m11 + b.m11 * scale;
                out.m12 = a.m12 + b.m12 * scale;
                out.m13 = a.m13 + b.m13 * scale;
                out.m14 = a.m14 + b.m14 * scale;
                out.m15 = a.m15 + b.m15 * scale;
                return out;
              }

              static strictEquals(a, b) {
                return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08 && a.m09 === b.m09 && a.m10 === b.m10 && a.m11 === b.m11 && a.m12 === b.m12 && a.m13 === b.m13 && a.m14 === b.m14 && a.m15 === b.m15;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08)) && Math.abs(a.m09 - b.m09) <= epsilon * Math.max(1.0, Math.abs(a.m09), Math.abs(b.m09)) && Math.abs(a.m10 - b.m10) <= epsilon * Math.max(1.0, Math.abs(a.m10), Math.abs(b.m10)) && Math.abs(a.m11 - b.m11) <= epsilon * Math.max(1.0, Math.abs(a.m11), Math.abs(b.m11)) && Math.abs(a.m12 - b.m12) <= epsilon * Math.max(1.0, Math.abs(a.m12), Math.abs(b.m12)) && Math.abs(a.m13 - b.m13) <= epsilon * Math.max(1.0, Math.abs(a.m13), Math.abs(b.m13)) && Math.abs(a.m14 - b.m14) <= epsilon * Math.max(1.0, Math.abs(a.m14), Math.abs(b.m14)) && Math.abs(a.m15 - b.m15) <= epsilon * Math.max(1.0, Math.abs(a.m15), Math.abs(b.m15));
              }

              constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 0, m05 = 1, m06 = 0, m07 = 0, m08 = 0, m09 = 0, m10 = 1, m11 = 0, m12 = 0, m13 = 0, m14 = 0, m15 = 1) {
                super();
                this.m00 = void 0;
                this.m01 = void 0;
                this.m02 = void 0;
                this.m03 = void 0;
                this.m04 = void 0;
                this.m05 = void 0;
                this.m06 = void 0;
                this.m07 = void 0;
                this.m08 = void 0;
                this.m09 = void 0;
                this.m10 = void 0;
                this.m11 = void 0;
                this.m12 = void 0;
                this.m13 = void 0;
                this.m14 = void 0;
                this.m15 = void 0;

                if (typeof m00 === 'object') {
                  this.m00 = m00.m00;
                  this.m01 = m00.m01;
                  this.m02 = m00.m02;
                  this.m03 = m00.m03;
                  this.m04 = m00.m04;
                  this.m05 = m00.m05;
                  this.m06 = m00.m06;
                  this.m07 = m00.m07;
                  this.m08 = m00.m08;
                  this.m09 = m00.m09;
                  this.m10 = m00.m10;
                  this.m11 = m00.m11;
                  this.m12 = m00.m12;
                  this.m13 = m00.m13;
                  this.m14 = m00.m14;
                  this.m15 = m00.m15;
                } else {
                  this.m00 = m00;
                  this.m01 = m01;
                  this.m02 = m02;
                  this.m03 = m03;
                  this.m04 = m04;
                  this.m05 = m05;
                  this.m06 = m06;
                  this.m07 = m07;
                  this.m08 = m08;
                  this.m09 = m09;
                  this.m10 = m10;
                  this.m11 = m11;
                  this.m12 = m12;
                  this.m13 = m13;
                  this.m14 = m14;
                  this.m15 = m15;
                }
              }

              clone() {
                return new Mat4(this.m00, this.m01, this.m02, this.m03, this.m04, this.m05, this.m06, this.m07, this.m08, this.m09, this.m10, this.m11, this.m12, this.m13, this.m14, this.m15);
              }

              set(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 0, m05 = 1, m06 = 0, m07 = 0, m08 = 0, m09 = 0, m10 = 1, m11 = 0, m12 = 0, m13 = 0, m14 = 0, m15 = 1) {
                if (typeof m00 === 'object') {
                  this.m01 = m00.m01;
                  this.m02 = m00.m02;
                  this.m03 = m00.m03;
                  this.m04 = m00.m04;
                  this.m05 = m00.m05;
                  this.m06 = m00.m06;
                  this.m07 = m00.m07;
                  this.m08 = m00.m08;
                  this.m09 = m00.m09;
                  this.m10 = m00.m10;
                  this.m11 = m00.m11;
                  this.m12 = m00.m12;
                  this.m13 = m00.m13;
                  this.m14 = m00.m14;
                  this.m15 = m00.m15;
                  this.m00 = m00.m00;
                } else {
                  this.m01 = m01;
                  this.m02 = m02;
                  this.m03 = m03;
                  this.m04 = m04;
                  this.m05 = m05;
                  this.m06 = m06;
                  this.m07 = m07;
                  this.m08 = m08;
                  this.m09 = m09;
                  this.m10 = m10;
                  this.m11 = m11;
                  this.m12 = m12;
                  this.m13 = m13;
                  this.m14 = m14;
                  this.m15 = m15;
                  this.m00 = m00;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08)) && Math.abs(this.m09 - other.m09) <= epsilon * Math.max(1.0, Math.abs(this.m09), Math.abs(other.m09)) && Math.abs(this.m10 - other.m10) <= epsilon * Math.max(1.0, Math.abs(this.m10), Math.abs(other.m10)) && Math.abs(this.m11 - other.m11) <= epsilon * Math.max(1.0, Math.abs(this.m11), Math.abs(other.m11)) && Math.abs(this.m12 - other.m12) <= epsilon * Math.max(1.0, Math.abs(this.m12), Math.abs(other.m12)) && Math.abs(this.m13 - other.m13) <= epsilon * Math.max(1.0, Math.abs(this.m13), Math.abs(other.m13)) && Math.abs(this.m14 - other.m14) <= epsilon * Math.max(1.0, Math.abs(this.m14), Math.abs(other.m14)) && Math.abs(this.m15 - other.m15) <= epsilon * Math.max(1.0, Math.abs(this.m15), Math.abs(other.m15));
              }

              strictEquals(other) {
                return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08 && this.m09 === other.m09 && this.m10 === other.m10 && this.m11 === other.m11 && this.m12 === other.m12 && this.m13 === other.m13 && this.m14 === other.m14 && this.m15 === other.m15;
              }

              toString() {
                return `[\n${this.m00}, ${this.m01}, ${this.m02}, ${this.m03},\n${this.m04}, ${this.m05}, ${this.m06}, ${this.m07},\n${this.m08}, ${this.m09}, ${this.m10}, ${this.m11},\n${this.m12}, ${this.m13}, ${this.m14}, ${this.m15}\n` + ']';
              }

              identity() {
                this.m00 = 1;
                this.m01 = 0;
                this.m02 = 0;
                this.m03 = 0;
                this.m04 = 0;
                this.m05 = 1;
                this.m06 = 0;
                this.m07 = 0;
                this.m08 = 0;
                this.m09 = 0;
                this.m10 = 1;
                this.m11 = 0;
                this.m12 = 0;
                this.m13 = 0;
                this.m14 = 0;
                this.m15 = 1;
                return this;
              }

              zero() {
                this.m00 = 0;
                this.m01 = 0;
                this.m02 = 0;
                this.m03 = 0;
                this.m04 = 0;
                this.m05 = 0;
                this.m06 = 0;
                this.m07 = 0;
                this.m08 = 0;
                this.m09 = 0;
                this.m10 = 0;
                this.m11 = 0;
                this.m12 = 0;
                this.m13 = 0;
                this.m14 = 0;
                this.m15 = 0;
                return this;
              }

              transpose() {
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a12 = this.m06;
                const a13 = this.m07;
                const a23 = this.m11;
                this.m01 = this.m04;
                this.m02 = this.m08;
                this.m03 = this.m12;
                this.m04 = a01;
                this.m06 = this.m09;
                this.m07 = this.m13;
                this.m08 = a02;
                this.m09 = a12;
                this.m11 = this.m14;
                this.m12 = a03;
                this.m13 = a13;
                this.m14 = a23;
                return this;
              }

              invert() {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a10 = this.m04;
                const a11 = this.m05;
                const a12 = this.m06;
                const a13 = this.m07;
                const a20 = this.m08;
                const a21 = this.m09;
                const a22 = this.m10;
                const a23 = this.m11;
                const a30 = this.m12;
                const a31 = this.m13;
                const a32 = this.m14;
                const a33 = this.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                if (det === 0) {
                  this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                  return this;
                }

                det = 1.0 / det;
                this.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                this.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                this.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                this.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                this.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                this.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                this.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                this.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                this.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                this.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                this.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                this.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                this.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                this.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                this.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                this.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                return this;
              }

              determinant() {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a10 = this.m04;
                const a11 = this.m05;
                const a12 = this.m06;
                const a13 = this.m07;
                const a20 = this.m08;
                const a21 = this.m09;
                const a22 = this.m10;
                const a23 = this.m11;
                const a30 = this.m12;
                const a31 = this.m13;
                const a32 = this.m14;
                const a33 = this.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
              }

              add(mat) {
                this.m00 += mat.m00;
                this.m01 += mat.m01;
                this.m02 += mat.m02;
                this.m03 += mat.m03;
                this.m04 += mat.m04;
                this.m05 += mat.m05;
                this.m06 += mat.m06;
                this.m07 += mat.m07;
                this.m08 += mat.m08;
                this.m09 += mat.m09;
                this.m10 += mat.m10;
                this.m11 += mat.m11;
                this.m12 += mat.m12;
                this.m13 += mat.m13;
                this.m14 += mat.m14;
                this.m15 += mat.m15;
                return this;
              }

              subtract(mat) {
                this.m00 -= mat.m00;
                this.m01 -= mat.m01;
                this.m02 -= mat.m02;
                this.m03 -= mat.m03;
                this.m04 -= mat.m04;
                this.m05 -= mat.m05;
                this.m06 -= mat.m06;
                this.m07 -= mat.m07;
                this.m08 -= mat.m08;
                this.m09 -= mat.m09;
                this.m10 -= mat.m10;
                this.m11 -= mat.m11;
                this.m12 -= mat.m12;
                this.m13 -= mat.m13;
                this.m14 -= mat.m14;
                this.m15 -= mat.m15;
                return this;
              }

              multiply(mat) {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a10 = this.m04;
                const a11 = this.m05;
                const a12 = this.m06;
                const a13 = this.m07;
                const a20 = this.m08;
                const a21 = this.m09;
                const a22 = this.m10;
                const a23 = this.m11;
                const a30 = this.m12;
                const a31 = this.m13;
                const a32 = this.m14;
                const a33 = this.m15;
                let b0 = mat.m00;
                let b1 = mat.m01;
                let b2 = mat.m02;
                let b3 = mat.m03;
                this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = mat.m04;
                b1 = mat.m05;
                b2 = mat.m06;
                b3 = mat.m07;
                this.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                this.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                this.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                this.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = mat.m08;
                b1 = mat.m09;
                b2 = mat.m10;
                b3 = mat.m11;
                this.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                this.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                this.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                this.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = mat.m12;
                b1 = mat.m13;
                b2 = mat.m14;
                b3 = mat.m15;
                this.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                this.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                this.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                this.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                return this;
              }

              multiplyScalar(scalar) {
                this.m00 *= scalar;
                this.m01 *= scalar;
                this.m02 *= scalar;
                this.m03 *= scalar;
                this.m04 *= scalar;
                this.m05 *= scalar;
                this.m06 *= scalar;
                this.m07 *= scalar;
                this.m08 *= scalar;
                this.m09 *= scalar;
                this.m10 *= scalar;
                this.m11 *= scalar;
                this.m12 *= scalar;
                this.m13 *= scalar;
                this.m14 *= scalar;
                this.m15 *= scalar;
                return this;
              }

              translate(vec) {
                this.m12 += vec.x;
                this.m13 += vec.y;
                this.m14 += vec.z;
                return this;
              }

              scale(vec) {
                const x = vec.x;
                const y = vec.y;
                const z = vec.z;
                this.m00 *= x;
                this.m01 *= x;
                this.m02 *= x;
                this.m03 *= x;
                this.m04 *= y;
                this.m05 *= y;
                this.m06 *= y;
                this.m07 *= y;
                this.m08 *= z;
                this.m09 *= z;
                this.m10 *= z;
                this.m11 *= z;
                return this;
              }

              rotate(rad, axis) {
                let x = axis.x;
                let y = axis.y;
                let z = axis.z;
                let len = Math.sqrt(x * x + y * y + z * z);

                if (Math.abs(len) < EPSILON) {
                  return null;
                }

                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const t = 1 - c;
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a10 = this.m04;
                const a11 = this.m05;
                const a12 = this.m06;
                const a13 = this.m07;
                const a20 = this.m08;
                const a21 = this.m09;
                const a22 = this.m10;
                const a23 = this.m11;
                const b00 = x * x * t + c;
                const b01 = y * x * t + z * s;
                const b02 = z * x * t - y * s;
                const b10 = x * y * t - z * s;
                const b11 = y * y * t + c;
                const b12 = z * y * t + x * s;
                const b20 = x * z * t + y * s;
                const b21 = y * z * t - x * s;
                const b22 = z * z * t + c;
                this.m00 = a00 * b00 + a10 * b01 + a20 * b02;
                this.m01 = a01 * b00 + a11 * b01 + a21 * b02;
                this.m02 = a02 * b00 + a12 * b01 + a22 * b02;
                this.m03 = a03 * b00 + a13 * b01 + a23 * b02;
                this.m04 = a00 * b10 + a10 * b11 + a20 * b12;
                this.m05 = a01 * b10 + a11 * b11 + a21 * b12;
                this.m06 = a02 * b10 + a12 * b11 + a22 * b12;
                this.m07 = a03 * b10 + a13 * b11 + a23 * b12;
                this.m08 = a00 * b20 + a10 * b21 + a20 * b22;
                this.m09 = a01 * b20 + a11 * b21 + a21 * b22;
                this.m10 = a02 * b20 + a12 * b21 + a22 * b22;
                this.m11 = a03 * b20 + a13 * b21 + a23 * b22;
                return this;
              }

              getTranslation(out) {
                out.x = this.m12;
                out.y = this.m13;
                out.z = this.m14;
                return out;
              }

              getScale(out) {
                const m00 = m3_1$1.m00 = this.m00;
                const m01 = m3_1$1.m01 = this.m01;
                const m02 = m3_1$1.m02 = this.m02;
                const m04 = m3_1$1.m03 = this.m04;
                const m05 = m3_1$1.m04 = this.m05;
                const m06 = m3_1$1.m05 = this.m06;
                const m08 = m3_1$1.m06 = this.m08;
                const m09 = m3_1$1.m07 = this.m09;
                const m10 = m3_1$1.m08 = this.m10;
                out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
                out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
                out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10);

                if (Mat3.determinant(m3_1$1) < 0) {
                  out.x *= -1;
                }

                return out;
              }

              getRotation(out) {
                const trace = this.m00 + this.m05 + this.m10;
                let S = 0;

                if (trace > 0) {
                  S = Math.sqrt(trace + 1.0) * 2;
                  out.w = 0.25 * S;
                  out.x = (this.m06 - this.m09) / S;
                  out.y = (this.m08 - this.m02) / S;
                  out.z = (this.m01 - this.m04) / S;
                } else if (this.m00 > this.m05 && this.m00 > this.m10) {
                  S = Math.sqrt(1.0 + this.m00 - this.m05 - this.m10) * 2;
                  out.w = (this.m06 - this.m09) / S;
                  out.x = 0.25 * S;
                  out.y = (this.m01 + this.m04) / S;
                  out.z = (this.m08 + this.m02) / S;
                } else if (this.m05 > this.m10) {
                  S = Math.sqrt(1.0 + this.m05 - this.m00 - this.m10) * 2;
                  out.w = (this.m08 - this.m02) / S;
                  out.x = (this.m01 + this.m04) / S;
                  out.y = 0.25 * S;
                  out.z = (this.m06 + this.m09) / S;
                } else {
                  S = Math.sqrt(1.0 + this.m10 - this.m00 - this.m05) * 2;
                  out.w = (this.m01 - this.m04) / S;
                  out.x = (this.m08 + this.m02) / S;
                  out.y = (this.m06 + this.m09) / S;
                  out.z = 0.25 * S;
                }

                return out;
              }

              fromRTS(q, v, s) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const xy = x * y2;
                const xz = x * z2;
                const yy = y * y2;
                const yz = y * z2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                const sx = s.x;
                const sy = s.y;
                const sz = s.z;
                this.m00 = (1 - (yy + zz)) * sx;
                this.m01 = (xy + wz) * sx;
                this.m02 = (xz - wy) * sx;
                this.m03 = 0;
                this.m04 = (xy - wz) * sy;
                this.m05 = (1 - (xx + zz)) * sy;
                this.m06 = (yz + wx) * sy;
                this.m07 = 0;
                this.m08 = (xz + wy) * sz;
                this.m09 = (yz - wx) * sz;
                this.m10 = (1 - (xx + yy)) * sz;
                this.m11 = 0;
                this.m12 = v.x;
                this.m13 = v.y;
                this.m14 = v.z;
                this.m15 = 1;
                return this;
              }

              fromQuat(q) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const yx = y * x2;
                const yy = y * y2;
                const zx = z * x2;
                const zy = z * y2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                this.m00 = 1 - yy - zz;
                this.m01 = yx + wz;
                this.m02 = zx - wy;
                this.m03 = 0;
                this.m04 = yx - wz;
                this.m05 = 1 - xx - zz;
                this.m06 = zy + wx;
                this.m07 = 0;
                this.m08 = zx + wy;
                this.m09 = zy - wx;
                this.m10 = 1 - xx - yy;
                this.m11 = 0;
                this.m12 = 0;
                this.m13 = 0;
                this.m14 = 0;
                this.m15 = 1;
                return this;
              }

            } exports('g', Mat4);
            Mat4.IDENTITY = Object.freeze(new Mat4());
            const v3_1$3 = new Vec3();
            const m3_1$1 = new Mat3();
            CCClass.fastDefine('cc.Mat4', Mat4, {
              m00: 1,
              m01: 0,
              m02: 0,
              m03: 0,
              m04: 0,
              m05: 1,
              m06: 0,
              m07: 0,
              m08: 0,
              m09: 0,
              m10: 1,
              m11: 0,
              m12: 0,
              m13: 0,
              m14: 0,
              m15: 1
            });
            legacyCC.Mat4 = Mat4;
            function mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
              return new Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
            }
            legacyCC.mat4 = mat4;

            class Vec2 extends ValueType {
              static clone(a) {
                return new Vec2(a.x, a.y);
              }

              static copy(out, a) {
                out.x = a.x;
                out.y = a.y;
                return out;
              }

              static set(out, x, y) {
                out.x = x;
                out.y = y;
                return out;
              }

              static add(out, a, b) {
                out.x = a.x + b.x;
                out.y = a.y + b.y;
                return out;
              }

              static subtract(out, a, b) {
                out.x = a.x - b.x;
                out.y = a.y - b.y;
                return out;
              }

              static multiply(out, a, b) {
                out.x = a.x * b.x;
                out.y = a.y * b.y;
                return out;
              }

              static divide(out, a, b) {
                out.x = a.x / b.x;
                out.y = a.y / b.y;
                return out;
              }

              static ceil(out, a) {
                out.x = Math.ceil(a.x);
                out.y = Math.ceil(a.y);
                return out;
              }

              static floor(out, a) {
                out.x = Math.floor(a.x);
                out.y = Math.floor(a.y);
                return out;
              }

              static min(out, a, b) {
                out.x = Math.min(a.x, b.x);
                out.y = Math.min(a.y, b.y);
                return out;
              }

              static max(out, a, b) {
                out.x = Math.max(a.x, b.x);
                out.y = Math.max(a.y, b.y);
                return out;
              }

              static round(out, a) {
                out.x = Math.round(a.x);
                out.y = Math.round(a.y);
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.x = a.x * b;
                out.y = a.y * b;
                return out;
              }

              static scaleAndAdd(out, a, b, scale) {
                out.x = a.x + b.x * scale;
                out.y = a.y + b.y * scale;
                return out;
              }

              static distance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                return Math.sqrt(x * x + y * y);
              }

              static squaredDistance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                return x * x + y * y;
              }

              static len(a) {
                const x = a.x;
                const y = a.y;
                return Math.sqrt(x * x + y * y);
              }

              static lengthSqr(a) {
                const x = a.x;
                const y = a.y;
                return x * x + y * y;
              }

              static negate(out, a) {
                out.x = -a.x;
                out.y = -a.y;
                return out;
              }

              static inverse(out, a) {
                out.x = 1.0 / a.x;
                out.y = 1.0 / a.y;
                return out;
              }

              static inverseSafe(out, a) {
                const x = a.x;
                const y = a.y;

                if (Math.abs(x) < EPSILON) {
                  out.x = 0;
                } else {
                  out.x = 1.0 / x;
                }

                if (Math.abs(y) < EPSILON) {
                  out.y = 0;
                } else {
                  out.y = 1.0 / y;
                }

                return out;
              }

              static normalize(out, a) {
                const x = a.x;
                const y = a.y;
                let len = x * x + y * y;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  out.x = x * len;
                  out.y = y * len;
                }

                return out;
              }

              static dot(a, b) {
                return a.x * b.x + a.y * b.y;
              }

              static cross(out, a, b) {
                if (out instanceof Vec3) {
                  out.x = out.y = 0;
                  out.z = a.x * b.y - a.y * b.x;
                  return out;
                } else {
                  return out.x * a.y - out.y * a.x;
                }
              }

              static lerp(out, a, b, t) {
                const x = a.x;
                const y = a.y;
                out.x = x + t * (b.x - x);
                out.y = y + t * (b.y - y);
                return out;
              }

              static random(out, scale) {
                scale = scale || 1.0;
                const r = random() * 2.0 * Math.PI;
                out.x = Math.cos(r) * scale;
                out.y = Math.sin(r) * scale;
                return out;
              }

              static transformMat3(out, a, m) {
                const x = a.x;
                const y = a.y;
                out.x = m.m00 * x + m.m03 * y + m.m06;
                out.y = m.m01 * x + m.m04 * y + m.m07;
                return out;
              }

              static transformMat4(out, a, m) {
                const x = a.x;
                const y = a.y;
                out.x = m.m00 * x + m.m04 * y + m.m12;
                out.y = m.m01 * x + m.m05 * y + m.m13;
                return out;
              }

              static str(a) {
                return `Vec2(${a.x}, ${a.y})`;
              }

              static toArray(out, v, ofs = 0) {
                out[ofs + 0] = v.x;
                out[ofs + 1] = v.y;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.x = arr[ofs + 0];
                out.y = arr[ofs + 1];
                return out;
              }

              static strictEquals(a, b) {
                return a.x === b.x && a.y === b.y;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y));
              }

              static angle(a, b) {
                Vec2.normalize(v2_1, a);
                Vec2.normalize(v2_2, b);
                const cosine = Vec2.dot(v2_1, v2_2);

                if (cosine > 1.0) {
                  return 0;
                }

                if (cosine < -1.0) {
                  return Math.PI;
                }

                return Math.acos(cosine);
              }

              constructor(x, y) {
                super();

                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                }
              }

              clone() {
                return new Vec2(this.x, this.y);
              }

              set(x, y) {
                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y));
              }

              equals2f(x, y, epsilon = EPSILON) {
                return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y));
              }

              strictEquals(other) {
                return other && this.x === other.x && this.y === other.y;
              }

              strictEquals2f(x, y) {
                return this.x === x && this.y === y;
              }

              toString() {
                return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)})`;
              }

              lerp(to, ratio) {
                const x = this.x;
                const y = this.y;
                this.x = x + ratio * (to.x - x);
                this.y = y + ratio * (to.y - y);
                return this;
              }

              clampf(minInclusive, maxInclusive) {
                this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
                this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
                return this;
              }

              add(other) {
                this.x += other.x;
                this.y += other.y;
                return this;
              }

              add2f(x, y) {
                this.x += x;
                this.y += y;
                return this;
              }

              subtract(other) {
                this.x -= other.x;
                this.y -= other.y;
                return this;
              }

              subtract2f(x, y) {
                this.x -= x;
                this.y -= y;
                return this;
              }

              multiplyScalar(scalar) {
                if (typeof scalar === 'object') {
                  console.warn('should use Vec2.multiply for vector * vector operation');
                }

                this.x *= scalar;
                this.y *= scalar;
                return this;
              }

              multiply(other) {
                if (typeof other !== 'object') {
                  console.warn('should use Vec2.scale for vector * scalar operation');
                }

                this.x *= other.x;
                this.y *= other.y;
                return this;
              }

              multiply2f(x, y) {
                this.x *= x;
                this.y *= y;
                return this;
              }

              divide(other) {
                this.x /= other.x;
                this.y /= other.y;
                return this;
              }

              divide2f(x, y) {
                this.x /= x;
                this.y /= y;
                return this;
              }

              negative() {
                this.x = -this.x;
                this.y = -this.y;
                return this;
              }

              dot(other) {
                return this.x * other.x + this.y * other.y;
              }

              cross(other) {
                return this.x * other.y - this.y * other.x;
              }

              length() {
                return Math.sqrt(this.x * this.x + this.y * this.y);
              }

              lengthSqr() {
                return this.x * this.x + this.y * this.y;
              }

              normalize() {
                const x = this.x;
                const y = this.y;
                let len = x * x + y * y;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  this.x *= len;
                  this.y *= len;
                }

                return this;
              }

              angle(other) {
                const magSqr1 = this.lengthSqr();
                const magSqr2 = other.lengthSqr();

                if (magSqr1 === 0 || magSqr2 === 0) {
                  console.warn('Can\'t get angle between zero vector');
                  return 0.0;
                }

                const dot = this.dot(other);
                let theta = dot / Math.sqrt(magSqr1 * magSqr2);
                theta = clamp(theta, -1.0, 1.0);
                return Math.acos(theta);
              }

              signAngle(other) {
                const angle = this.angle(other);
                return this.cross(other) < 0 ? -angle : angle;
              }

              rotate(radians) {
                const x = this.x;
                const y = this.y;
                const sin = Math.sin(radians);
                const cos = Math.cos(radians);
                this.x = cos * x - sin * y;
                this.y = sin * x + cos * y;
                return this;
              }

              project(other) {
                const scalar = this.dot(other) / other.dot(other);
                this.x = other.x * scalar;
                this.y = other.y * scalar;
                return this;
              }

              transformMat4(matrix) {
                const x = this.x;
                const y = this.y;
                this.x = matrix.m00 * x + matrix.m04 * y + matrix.m12;
                this.y = matrix.m01 * x + matrix.m05 * y + matrix.m13;
                return this;
              }

            } exports('a', Vec2);
            Vec2.ZERO = Object.freeze(new Vec2(0, 0));
            Vec2.ONE = Object.freeze(new Vec2(1, 1));
            Vec2.NEG_ONE = Object.freeze(new Vec2(-1, -1));
            Vec2.UNIT_X = Object.freeze(new Vec2(1, 0));
            Vec2.UNIT_Y = Object.freeze(new Vec2(0, 1));
            const v2_1 = new Vec2();
            const v2_2 = new Vec2();
            CCClass.fastDefine('cc.Vec2', Vec2, {
              x: 0,
              y: 0
            });
            legacyCC.Vec2 = Vec2;
            function v2(x, y) {
              return new Vec2(x, y);
            }
            legacyCC.v2 = v2;

            class Vec4 extends ValueType {
              static clone(a) {
                return new Vec4(a.x, a.y, a.z, a.w);
              }

              static copy(out, a) {
                out.x = a.x;
                out.y = a.y;
                out.z = a.z;
                out.w = a.w;
                return out;
              }

              static set(out, x, y, z, w) {
                out.x = x;
                out.y = y;
                out.z = z;
                out.w = w;
                return out;
              }

              static add(out, a, b) {
                out.x = a.x + b.x;
                out.y = a.y + b.y;
                out.z = a.z + b.z;
                out.w = a.w + b.w;
                return out;
              }

              static subtract(out, a, b) {
                out.x = a.x - b.x;
                out.y = a.y - b.y;
                out.z = a.z - b.z;
                out.w = a.w - b.w;
                return out;
              }

              static multiply(out, a, b) {
                out.x = a.x * b.x;
                out.y = a.y * b.y;
                out.z = a.z * b.z;
                out.w = a.w * b.w;
                return out;
              }

              static divide(out, a, b) {
                out.x = a.x / b.x;
                out.y = a.y / b.y;
                out.z = a.z / b.z;
                out.w = a.w / b.w;
                return out;
              }

              static ceil(out, a) {
                out.x = Math.ceil(a.x);
                out.y = Math.ceil(a.y);
                out.z = Math.ceil(a.z);
                out.w = Math.ceil(a.w);
                return out;
              }

              static floor(out, a) {
                out.x = Math.floor(a.x);
                out.y = Math.floor(a.y);
                out.z = Math.floor(a.z);
                out.w = Math.floor(a.w);
                return out;
              }

              static min(out, a, b) {
                out.x = Math.min(a.x, b.x);
                out.y = Math.min(a.y, b.y);
                out.z = Math.min(a.z, b.z);
                out.w = Math.min(a.w, b.w);
                return out;
              }

              static max(out, a, b) {
                out.x = Math.max(a.x, b.x);
                out.y = Math.max(a.y, b.y);
                out.z = Math.max(a.z, b.z);
                out.w = Math.max(a.w, b.w);
                return out;
              }

              static round(out, a) {
                out.x = Math.round(a.x);
                out.y = Math.round(a.y);
                out.z = Math.round(a.z);
                out.w = Math.round(a.w);
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.x = a.x * b;
                out.y = a.y * b;
                out.z = a.z * b;
                out.w = a.w * b;
                return out;
              }

              static scaleAndAdd(out, a, b, scale) {
                out.x = a.x + b.x * scale;
                out.y = a.y + b.y * scale;
                out.z = a.z + b.z * scale;
                out.w = a.w + b.w * scale;
                return out;
              }

              static distance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                const z = b.z - a.z;
                const w = b.w - a.w;
                return Math.sqrt(x * x + y * y + z * z + w * w);
              }

              static squaredDistance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                const z = b.z - a.z;
                const w = b.w - a.w;
                return x * x + y * y + z * z + w * w;
              }

              static len(a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;
                return Math.sqrt(x * x + y * y + z * z + w * w);
              }

              static lengthSqr(a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;
                return x * x + y * y + z * z + w * w;
              }

              static negate(out, a) {
                out.x = -a.x;
                out.y = -a.y;
                out.z = -a.z;
                out.w = -a.w;
                return out;
              }

              static inverse(out, a) {
                out.x = 1.0 / a.x;
                out.y = 1.0 / a.y;
                out.z = 1.0 / a.z;
                out.w = 1.0 / a.w;
                return out;
              }

              static inverseSafe(out, a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;

                if (Math.abs(x) < EPSILON) {
                  out.x = 0;
                } else {
                  out.x = 1.0 / x;
                }

                if (Math.abs(y) < EPSILON) {
                  out.y = 0;
                } else {
                  out.y = 1.0 / y;
                }

                if (Math.abs(z) < EPSILON) {
                  out.z = 0;
                } else {
                  out.z = 1.0 / z;
                }

                if (Math.abs(w) < EPSILON) {
                  out.w = 0;
                } else {
                  out.w = 1.0 / w;
                }

                return out;
              }

              static normalize(out, a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;
                let len = x * x + y * y + z * z + w * w;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  out.x = x * len;
                  out.y = y * len;
                  out.z = z * len;
                  out.w = w * len;
                }

                return out;
              }

              static dot(a, b) {
                return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
              }

              static lerp(out, a, b, t) {
                out.x = a.x + t * (b.x - a.x);
                out.y = a.y + t * (b.y - a.y);
                out.z = a.z + t * (b.z - a.z);
                out.w = a.w + t * (b.w - a.w);
                return out;
              }

              static random(out, scale) {
                scale = scale || 1.0;
                const phi = random() * 2.0 * Math.PI;
                const cosTheta = random() * 2 - 1;
                const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
                out.x = sinTheta * Math.cos(phi) * scale;
                out.y = sinTheta * Math.sin(phi) * scale;
                out.z = cosTheta * scale;
                out.w = 0;
                return out;
              }

              static transformMat4(out, a, m) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;
                out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;
                out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;
                out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;
                out.w = m.m03 * x + m.m07 * y + m.m11 * z + m.m15 * w;
                return out;
              }

              static transformAffine(out, v, m) {
                const x = v.x;
                const y = v.y;
                const z = v.z;
                const w = v.w;
                out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;
                out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;
                out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;
                out.w = v.w;
                return out;
              }

              static transformQuat(out, a, q) {
                const {
                  x,
                  y,
                  z
                } = a;
                const _x = q.x;
                const _y = q.y;
                const _z = q.z;
                const _w = q.w;
                const ix = _w * x + _y * z - _z * y;
                const iy = _w * y + _z * x - _x * z;
                const iz = _w * z + _x * y - _y * x;
                const iw = -_x * x - _y * y - _z * z;
                out.x = ix * _w + iw * -_x + iy * -_z - iz * -_y;
                out.y = iy * _w + iw * -_y + iz * -_x - ix * -_z;
                out.z = iz * _w + iw * -_z + ix * -_y - iy * -_x;
                out.w = a.w;
                return out;
              }

              static toArray(out, v, ofs = 0) {
                out[ofs + 0] = v.x;
                out[ofs + 1] = v.y;
                out[ofs + 2] = v.z;
                out[ofs + 3] = v.w;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.x = arr[ofs + 0];
                out.y = arr[ofs + 1];
                out.z = arr[ofs + 2];
                out.w = arr[ofs + 3];
                return out;
              }

              static strictEquals(a, b) {
                return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1.0, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1.0, Math.abs(a.w), Math.abs(b.w));
              }

              constructor(x, y, z, w) {
                super();

                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                  this.w = x.w;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                  this.w = w || 0;
                }
              }

              clone() {
                return new Vec4(this.x, this.y, this.z, this.w);
              }

              set(x, y, z, w) {
                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                  this.w = x.w;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                  this.w = w || 0;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z)) && Math.abs(this.w - other.w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(other.w));
              }

              equals4f(x, y, z, w, epsilon = EPSILON) {
                return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y)) && Math.abs(this.z - z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(z)) && Math.abs(this.w - w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(w));
              }

              strictEquals(other) {
                return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
              }

              strictEquals4f(x, y, z, w) {
                return this.x === x && this.y === y && this.z === z && this.w === w;
              }

              lerp(to, ratio) {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                this.x = x + ratio * (to.x - x);
                this.y = y + ratio * (to.y - y);
                this.z = z + ratio * (to.z - z);
                this.w = w + ratio * (to.w - w);
                return this;
              }

              toString() {
                return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)}, ${this.w.toFixed(2)})`;
              }

              clampf(minInclusive, maxInclusive) {
                this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
                this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
                this.z = clamp(this.z, minInclusive.z, maxInclusive.z);
                this.w = clamp(this.w, minInclusive.w, maxInclusive.w);
                return this;
              }

              add(other) {
                this.x += other.x;
                this.y += other.y;
                this.z += other.z;
                this.w += other.w;
                return this;
              }

              add4f(x, y, z, w) {
                this.x += x;
                this.y += y;
                this.z += z;
                this.w += w;
                return this;
              }

              subtract(other) {
                this.x -= other.x;
                this.y -= other.y;
                this.z -= other.z;
                this.w -= other.w;
                return this;
              }

              subtract4f(x, y, z, w) {
                this.x -= x;
                this.y -= y;
                this.z -= z;
                this.w -= w;
                return this;
              }

              multiplyScalar(scalar) {
                if (typeof scalar === 'object') {
                  console.warn('should use Vec4.multiply for vector * vector operation');
                }

                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
                this.w *= scalar;
                return this;
              }

              multiply(other) {
                if (typeof other !== 'object') {
                  console.warn('should use Vec4.scale for vector * scalar operation');
                }

                this.x *= other.x;
                this.y *= other.y;
                this.z *= other.z;
                this.w *= other.w;
                return this;
              }

              multiply4f(x, y, z, w) {
                this.x *= x;
                this.y *= y;
                this.z *= z;
                this.w *= w;
                return this;
              }

              divide(other) {
                this.x /= other.x;
                this.y /= other.y;
                this.z /= other.z;
                this.w /= other.w;
                return this;
              }

              divide4f(x, y, z, w) {
                this.x /= x;
                this.y /= y;
                this.z /= z;
                this.w /= w;
                return this;
              }

              negative() {
                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;
                this.w = -this.w;
                return this;
              }

              dot(vector) {
                return this.x * vector.x + this.y * vector.y + this.z * vector.z + this.w * vector.w;
              }

              cross(vector) {
                const {
                  x: ax,
                  y: ay,
                  z: az
                } = this;
                const {
                  x: bx,
                  y: by,
                  z: bz
                } = vector;
                this.x = ay * bz - az * by;
                this.y = az * bx - ax * bz;
                this.z = ax * by - ay * bx;
                return this;
              }

              length() {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                return Math.sqrt(x * x + y * y + z * z + w * w);
              }

              lengthSqr() {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                return x * x + y * y + z * z + w * w;
              }

              normalize() {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                let len = x * x + y * y + z * z + w * w;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  this.x = x * len;
                  this.y = y * len;
                  this.z = z * len;
                  this.w = w * len;
                }

                return this;
              }

              transformMat4(matrix) {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                this.x = matrix.m00 * x + matrix.m04 * y + matrix.m08 * z + matrix.m12 * w;
                this.y = matrix.m01 * x + matrix.m05 * y + matrix.m09 * z + matrix.m13 * w;
                this.z = matrix.m02 * x + matrix.m06 * y + matrix.m10 * z + matrix.m14 * w;
                this.w = matrix.m03 * x + matrix.m07 * y + matrix.m11 * z + matrix.m15 * w;
                return this;
              }

            } exports('e', Vec4);
            Vec4.ZERO = Object.freeze(new Vec4(0, 0, 0, 0));
            Vec4.ONE = Object.freeze(new Vec4(1, 1, 1, 1));
            Vec4.NEG_ONE = Object.freeze(new Vec4(-1, -1, -1, -1));
            CCClass.fastDefine('cc.Vec4', Vec4, {
              x: 0,
              y: 0,
              z: 0,
              w: 0
            });
            legacyCC.Vec4 = Vec4;
            function v4(x, y, z, w) {
              return new Vec4(x, y, z, w);
            }
            legacyCC.v4 = v4;

            replaceProperty(Vec2, 'Vec2', [{
              name: 'sub',
              newName: 'subtract',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'div',
              newName: 'divide',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'dist',
              newName: 'distance',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'sqrDist',
              newName: 'squaredDistance',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'mag',
              newName: 'len',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'sqrMag',
              newName: 'lengthSqr',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec2,
              targetName: 'Vec2'
            }]);
            replaceProperty(Vec2.prototype, 'Vec2', [{
              name: 'mag',
              newName: 'length',
              target: Vec2.prototype,
              targetName: 'Vec2'
            }, {
              name: 'magSqr',
              newName: 'lengthSqr',
              target: Vec2.prototype,
              targetName: 'Vec2'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec2.prototype,
              targetName: 'Vec2'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec2.prototype,
              targetName: 'Vec2'
            }]);
            replaceProperty(Vec3, 'Vec3', [{
              name: 'sub',
              newName: 'subtract',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'div',
              newName: 'divide',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'dist',
              newName: 'distance',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'sqrDist',
              newName: 'squaredDistance',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'mag',
              newName: 'len',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'sqrMag',
              newName: 'lengthSqr',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec3,
              targetName: 'Vec3'
            }]);
            replaceProperty(Vec3.prototype, 'Vec3', [{
              name: 'mag',
              newName: 'length',
              target: Vec3.prototype,
              targetName: 'Vec3'
            }, {
              name: 'magSqr',
              newName: 'lengthSqr',
              target: Vec3.prototype,
              targetName: 'Vec3'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec3.prototype,
              targetName: 'Vec3'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec3.prototype,
              targetName: 'Vec3'
            }]);
            replaceProperty(Vec4, 'Vec4', [{
              name: 'sub',
              newName: 'subtract',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'div',
              newName: 'divide',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'dist',
              newName: 'distance',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'sqrDist',
              newName: 'squaredDistance',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'mag',
              newName: 'len',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'sqrMag',
              newName: 'lengthSqr',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec4,
              targetName: 'Vec4'
            }]);
            replaceProperty(Vec4.prototype, 'Vec4', [{
              name: 'mag',
              newName: 'length',
              target: Vec4.prototype,
              targetName: 'Vec4'
            }, {
              name: 'magSqr',
              newName: 'lengthSqr',
              target: Vec4.prototype,
              targetName: 'Vec4'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec4.prototype,
              targetName: 'Vec4'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec4.prototype,
              targetName: 'Vec4'
            }]);
            replaceProperty(Quat, 'Quat', [{
              name: 'mag',
              newName: 'len',
              target: Quat,
              targetName: 'Quat'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Quat,
              targetName: 'Quat'
            }, {
              name: 'sqrMag',
              newName: 'lengthSqr',
              target: Quat,
              targetName: 'Quat'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Quat,
              targetName: 'Quat'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Quat,
              targetName: 'Quat'
            }]);
            replaceProperty(Quat.prototype, 'Quat', [{
              name: 'scale',
              newName: 'multiplyScalar',
              target: Quat.prototype,
              targetName: 'Quat'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Quat.prototype,
              targetName: 'Quat'
            }]);
            replaceProperty(Color, 'Color', [{
              name: 'sub',
              newName: 'subtract',
              target: Color,
              targetName: 'Color'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Color,
              targetName: 'Color'
            }, {
              name: 'div',
              newName: 'divide',
              target: Color,
              targetName: 'Color'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Color,
              targetName: 'Color'
            }, {
              name: 'fromHex',
              newName: 'fromHEX',

              customFunction(...args) {
                const arg1 = args[1].toString(16);
                return legacyCC.Color.fromHEX(args[0], arg1);
              }

            }]);
            replaceProperty(Mat3, 'Mat3', [{
              name: 'sub',
              newName: 'subtract',
              target: Mat3,
              targetName: 'Mat3'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Mat3,
              targetName: 'Mat3'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Mat3,
              targetName: 'Mat3'
            }, {
              name: 'transfrom',
              newName: 'transform',
              target: Mat3,
              targetName: 'Mat3'
            }]);
            replaceProperty(Mat3.prototype, 'Mat3', [{
              name: 'sub',
              newName: 'subtract',
              target: Mat3.prototype,
              targetName: 'Mat3'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Mat3.prototype,
              targetName: 'Mat3'
            }, {
              name: 'mulScalar',
              newName: 'multiplyScalar',
              target: Mat3.prototype,
              targetName: 'Mat3'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Mat3.prototype,
              targetName: 'Mat3'
            }]);
            replaceProperty(Mat4, 'Mat4', [{
              name: 'sub',
              newName: 'subtract',
              target: Mat4,
              targetName: 'Mat4'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Mat4,
              targetName: 'Mat4'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Mat4,
              targetName: 'Mat4'
            }]);
            replaceProperty(Mat4.prototype, 'Mat4', [{
              name: 'sub',
              newName: 'subtract',
              target: Mat4.prototype,
              targetName: 'Mat4'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Mat4.prototype,
              targetName: 'Mat4'
            }, {
              name: 'mulScalar',
              newName: 'multiplyScalar',
              target: Mat4.prototype,
              targetName: 'Mat4'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Mat4.prototype,
              targetName: 'Mat4'
            }]);

            class AffineTransform {
              static identity() {
                return new AffineTransform();
              }

              static clone(affineTransform) {
                return new AffineTransform(affineTransform.a, affineTransform.b, affineTransform.c, affineTransform.d, affineTransform.tx, affineTransform.ty);
              }

              static concat(out, t1, t2) {
                const a = t1.a;
                const b = t1.b;
                const c = t1.c;
                const d = t1.d;
                const tx = t1.tx;
                const ty = t1.ty;
                out.a = a * t2.a + b * t2.c;
                out.b = a * t2.b + b * t2.d;
                out.c = c * t2.a + d * t2.c;
                out.d = c * t2.b + d * t2.d;
                out.tx = tx * t2.a + ty * t2.c + t2.tx;
                out.ty = tx * t2.b + ty * t2.d + t2.ty;
              }

              static invert(out, t) {
                const determinant = 1 / (t.a * t.d - t.b * t.c);
                out.a = determinant * t.d;
                out.b = -determinant * t.b;
                out.c = -determinant * t.c;
                out.d = determinant * t.a;
                out.tx = determinant * (t.c * t.ty - t.d * t.tx);
                out.ty = determinant * (t.b * t.tx - t.a * t.ty);
              }

              static fromMat4(out, mat) {
                out.a = mat.m00;
                out.b = mat.m01;
                out.c = mat.m04;
                out.d = mat.m05;
                out.tx = mat.m12;
                out.ty = mat.m13;
              }

              static transformVec2(out, point, transOrY, t) {
                let x;
                let y;

                if (!t) {
                  t = transOrY;
                  x = point.x;
                  y = point.y;
                } else {
                  x = point;
                  y = transOrY;
                }

                out.x = t.a * x + t.c * y + t.tx;
                out.y = t.b * x + t.d * y + t.ty;
              }

              static transformSize(out, size, t) {
                out.width = t.a * size.width + t.c * size.height;
                out.height = t.b * size.width + t.d * size.height;
              }

              static transformRect(out, rect, t) {
                const or = rect.x + rect.width;
                const ot = rect.y + rect.height;
                const lbx = t.a * rect.x + t.c * rect.y + t.tx;
                const lby = t.b * rect.x + t.d * rect.y + t.ty;
                const rbx = t.a * or + t.c * rect.y + t.tx;
                const rby = t.b * or + t.d * rect.y + t.ty;
                const ltx = t.a * rect.x + t.c * ot + t.tx;
                const lty = t.b * rect.x + t.d * ot + t.ty;
                const rtx = t.a * or + t.c * ot + t.tx;
                const rty = t.b * or + t.d * ot + t.ty;
                const minX = Math.min(lbx, rbx, ltx, rtx);
                const maxX = Math.max(lbx, rbx, ltx, rtx);
                const minY = Math.min(lby, rby, lty, rty);
                const maxY = Math.max(lby, rby, lty, rty);
                out.x = minX;
                out.y = minY;
                out.width = maxX - minX;
                out.height = maxY - minY;
              }

              static transformObb(out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
                const tx = anAffineTransform.a * rect.x + anAffineTransform.c * rect.y + anAffineTransform.tx;
                const ty = anAffineTransform.b * rect.x + anAffineTransform.d * rect.y + anAffineTransform.ty;
                const xa = anAffineTransform.a * rect.width;
                const xb = anAffineTransform.b * rect.width;
                const yc = anAffineTransform.c * rect.height;
                const yd = anAffineTransform.d * rect.height;
                out_tl.x = tx;
                out_tl.y = ty;
                out_tr.x = xa + tx;
                out_tr.y = xb + ty;
                out_bl.x = yc + tx;
                out_bl.y = yd + ty;
                out_br.x = xa + yc + tx;
                out_br.y = xb + yd + ty;
              }

              constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {
                this.a = a;
                this.b = b;
                this.c = c;
                this.d = d;
                this.tx = tx;
                this.ty = ty;
              }

            } exports('A', AffineTransform);
            legacyCC.AffineTransform = AffineTransform;

            class Size extends ValueType {
              static lerp(out, from, to, ratio) {
                out.width = from.width + (to.width - from.width) * ratio;
                out.height = from.height + (to.height - from.height) * ratio;
                return out;
              }

              set x(val) {
                this.width = val;
              }

              get x() {
                return this.width;
              }

              set y(val) {
                this.height = val;
              }

              get y() {
                return this.height;
              }

              constructor(width, height) {
                super();

                if (width && typeof width === 'object') {
                  this.width = width.width;
                  this.height = width.height;
                } else {
                  this.width = width || 0;
                  this.height = height || 0;
                }
              }

              clone() {
                return new Size(this.width, this.height);
              }

              set(width, height) {
                if (width && typeof width === 'object') {
                  this.height = width.height;
                  this.width = width.width;
                } else {
                  this.width = width || 0;
                  this.height = height || 0;
                }

                return this;
              }

              equals(other) {
                return this.width === other.width && this.height === other.height;
              }

              lerp(to, ratio) {
                this.width += (to.width - this.width) * ratio;
                this.height += (to.height - this.height) * ratio;
                return this;
              }

              toString() {
                return `(${this.width.toFixed(2)}, ${this.height.toFixed(2)})`;
              }

            } exports('S', Size);
            Size.ZERO = Object.freeze(new Size(0, 0));
            Size.ONE = Object.freeze(new Size(1, 1));
            CCClass.fastDefine('cc.Size', Size, {
              width: 0,
              height: 0
            });
            function size(width = 0, height = 0) {
              return new Size(width, height);
            }
            legacyCC.size = size;
            legacyCC.Size = Size;

            class Rect extends ValueType {
              static fromMinMax(out, v1, v2) {
                const minX = Math.min(v1.x, v2.x);
                const minY = Math.min(v1.y, v2.y);
                const maxX = Math.max(v1.x, v2.x);
                const maxY = Math.max(v1.y, v2.y);
                out.x = minX;
                out.y = minY;
                out.width = maxX - minX;
                out.height = maxY - minY;
                return out;
              }

              static lerp(out, from, to, ratio) {
                const x = from.x;
                const y = from.y;
                const w = from.width;
                const h = from.height;
                out.x = x + (to.x - x) * ratio;
                out.y = y + (to.y - y) * ratio;
                out.width = w + (to.width - w) * ratio;
                out.height = h + (to.height - h) * ratio;
                return out;
              }

              static intersection(out, one, other) {
                const axMin = one.x;
                const ayMin = one.y;
                const axMax = one.x + one.width;
                const ayMax = one.y + one.height;
                const bxMin = other.x;
                const byMin = other.y;
                const bxMax = other.x + other.width;
                const byMax = other.y + other.height;
                out.x = Math.max(axMin, bxMin);
                out.y = Math.max(ayMin, byMin);
                out.width = Math.min(axMax, bxMax) - out.x;
                out.height = Math.min(ayMax, byMax) - out.y;
                return out;
              }

              static union(out, one, other) {
                const x = one.x;
                const y = one.y;
                const w = one.width;
                const h = one.height;
                const bx = other.x;
                const by = other.y;
                const bw = other.width;
                const bh = other.height;
                out.x = Math.min(x, bx);
                out.y = Math.min(y, by);
                out.width = Math.max(x + w, bx + bw) - out.x;
                out.height = Math.max(y + h, by + bh) - out.y;
                return out;
              }

              get xMin() {
                return this.x;
              }

              set xMin(value) {
                this.width += this.x - value;
                this.x = value;
              }

              get yMin() {
                return this.y;
              }

              set yMin(value) {
                this.height += this.y - value;
                this.y = value;
              }

              get xMax() {
                return this.x + this.width;
              }

              set xMax(value) {
                this.width = value - this.x;
              }

              get yMax() {
                return this.y + this.height;
              }

              set yMax(value) {
                this.height = value - this.y;
              }

              get center() {
                return new Vec2(this.x + this.width * 0.5, this.y + this.height * 0.5);
              }

              set center(value) {
                this.x = value.x - this.width * 0.5;
                this.y = value.y - this.height * 0.5;
              }

              get origin() {
                return new Vec2(this.x, this.y);
              }

              set origin(value) {
                this.x = value.x;
                this.y = value.y;
              }

              get size() {
                return new Size(this.width, this.height);
              }

              set size(value) {
                this.width = value.width;
                this.height = value.height;
              }

              set z(val) {
                this.width = val;
              }

              get z() {
                return this.width;
              }

              set w(val) {
                this.height = val;
              }

              get w() {
                return this.height;
              }

              constructor(x, y, width, height) {
                super();

                if (x && typeof x === 'object') {
                  this.y = x.y;
                  this.width = x.width;
                  this.height = x.height;
                  this.x = x.x;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.width = width || 0;
                  this.height = height || 0;
                }
              }

              clone() {
                return new Rect(this.x, this.y, this.width, this.height);
              }

              set(x, y, width, height) {
                if (x && typeof x === 'object') {
                  this.y = x.y;
                  this.width = x.width;
                  this.height = x.height;
                  this.x = x.x;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.width = width || 0;
                  this.height = height || 0;
                }

                return this;
              }

              equals(other) {
                return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
              }

              lerp(to, ratio) {
                const x = this.x;
                const y = this.y;
                const w = this.width;
                const h = this.height;
                this.x = x + (to.x - x) * ratio;
                this.y = y + (to.y - y) * ratio;
                this.width = w + (to.width - w) * ratio;
                this.height = h + (to.height - h) * ratio;
                return this;
              }

              toString() {
                return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.width.toFixed(2)}, ${this.height.toFixed(2)})`;
              }

              intersects(other) {
                const maxax = this.x + this.width;
                const maxay = this.y + this.height;
                const maxbx = other.x + other.width;
                const maxby = other.y + other.height;
                return !(maxax < other.x || maxbx < this.x || maxay < other.y || maxby < this.y);
              }

              contains(point) {
                return this.x <= point.x && this.x + this.width >= point.x && this.y <= point.y && this.y + this.height >= point.y;
              }

              containsRect(other) {
                return this.x <= other.x && this.x + this.width >= other.x + other.width && this.y <= other.y && this.y + this.height >= other.y + other.height;
              }

              transformMat4(mat) {
                const ol = this.x;
                const ob = this.y;
                const or = ol + this.width;
                const ot = ob + this.height;
                const lbx = mat.m00 * ol + mat.m04 * ob + mat.m12;
                const lby = mat.m01 * ol + mat.m05 * ob + mat.m13;
                const rbx = mat.m00 * or + mat.m04 * ob + mat.m12;
                const rby = mat.m01 * or + mat.m05 * ob + mat.m13;
                const ltx = mat.m00 * ol + mat.m04 * ot + mat.m12;
                const lty = mat.m01 * ol + mat.m05 * ot + mat.m13;
                const rtx = mat.m00 * or + mat.m04 * ot + mat.m12;
                const rty = mat.m01 * or + mat.m05 * ot + mat.m13;
                const minX = Math.min(lbx, rbx, ltx, rtx);
                const maxX = Math.max(lbx, rbx, ltx, rtx);
                const minY = Math.min(lby, rby, lty, rty);
                const maxY = Math.max(lby, rby, lty, rty);
                this.x = minX;
                this.y = minY;
                this.width = maxX - minX;
                this.height = maxY - minY;
                return this;
              }

              transformMat4ToPoints(mat, out_lb, out_lt, out_rt, out_rb) {
                const ol = this.x;
                const ob = this.y;
                const or = ol + this.width;
                const ot = ob + this.height;
                out_lb.x = mat.m00 * ol + mat.m04 * ob + mat.m12;
                out_lb.y = mat.m01 * ol + mat.m05 * ob + mat.m13;
                out_rb.x = mat.m00 * or + mat.m04 * ob + mat.m12;
                out_rb.y = mat.m01 * or + mat.m05 * ob + mat.m13;
                out_lt.x = mat.m00 * ol + mat.m04 * ot + mat.m12;
                out_lt.y = mat.m01 * ol + mat.m05 * ot + mat.m13;
                out_rt.x = mat.m00 * or + mat.m04 * ot + mat.m12;
                out_rt.y = mat.m01 * or + mat.m05 * ot + mat.m13;
              }

            } exports('R', Rect);
            CCClass.fastDefine('cc.Rect', Rect, {
              x: 0,
              y: 0,
              width: 0,
              height: 0
            });
            legacyCC.Rect = Rect;
            function rect(x = 0, y = 0, width = 0, height = 0) {
              return new Rect(x, y, width, height);
            }
            legacyCC.rect = rect;

            class GarbageCollectionManager {
              constructor() {
                this._finalizationRegistry =  null;
                this._gcObjects = new WeakMap();
              }

              registerGCObject(gcObject) {
                {
                  return gcObject;
                }
              }

              init() {}

              finalizationRegistryCallback(token) {
                const gcObject = this._gcObjects.get(token);

                if (gcObject) {
                  this._gcObjects.delete(token);

                  gcObject.destroy();
                }

                this._finalizationRegistry.unregister(token);
              }

              destroy() {}

            }

            const garbageCollectionManager = new GarbageCollectionManager();

            class GCObject {
              constructor() {
                return garbageCollectionManager.registerGCObject(this);
              }

              destroy() {}

            }

            const deepCopy = (target, source, Ctor) => {
              for (let i = 0; i < source.length; ++i) {
                if (target.length <= i) target.push(new Ctor());
                target[i].copy(source[i]);
              }

              target.length = source.length;
            };

            let ObjectType;

            (function (ObjectType) {
              ObjectType[ObjectType["UNKNOWN"] = 0] = "UNKNOWN";
              ObjectType[ObjectType["SWAPCHAIN"] = 1] = "SWAPCHAIN";
              ObjectType[ObjectType["BUFFER"] = 2] = "BUFFER";
              ObjectType[ObjectType["TEXTURE"] = 3] = "TEXTURE";
              ObjectType[ObjectType["RENDER_PASS"] = 4] = "RENDER_PASS";
              ObjectType[ObjectType["FRAMEBUFFER"] = 5] = "FRAMEBUFFER";
              ObjectType[ObjectType["SAMPLER"] = 6] = "SAMPLER";
              ObjectType[ObjectType["SHADER"] = 7] = "SHADER";
              ObjectType[ObjectType["DESCRIPTOR_SET_LAYOUT"] = 8] = "DESCRIPTOR_SET_LAYOUT";
              ObjectType[ObjectType["PIPELINE_LAYOUT"] = 9] = "PIPELINE_LAYOUT";
              ObjectType[ObjectType["PIPELINE_STATE"] = 10] = "PIPELINE_STATE";
              ObjectType[ObjectType["DESCRIPTOR_SET"] = 11] = "DESCRIPTOR_SET";
              ObjectType[ObjectType["INPUT_ASSEMBLER"] = 12] = "INPUT_ASSEMBLER";
              ObjectType[ObjectType["COMMAND_BUFFER"] = 13] = "COMMAND_BUFFER";
              ObjectType[ObjectType["QUEUE"] = 14] = "QUEUE";
              ObjectType[ObjectType["QUERY_POOL"] = 15] = "QUERY_POOL";
              ObjectType[ObjectType["GLOBAL_BARRIER"] = 16] = "GLOBAL_BARRIER";
              ObjectType[ObjectType["TEXTURE_BARRIER"] = 17] = "TEXTURE_BARRIER";
              ObjectType[ObjectType["BUFFER_BARRIER"] = 18] = "BUFFER_BARRIER";
              ObjectType[ObjectType["COUNT"] = 19] = "COUNT";
            })(ObjectType || (ObjectType = exports('O', {})));

            let Status;

            (function (Status) {
              Status[Status["UNREADY"] = 0] = "UNREADY";
              Status[Status["FAILED"] = 1] = "FAILED";
              Status[Status["SUCCESS"] = 2] = "SUCCESS";
            })(Status || (Status = exports('a3', {})));

            let API;

            (function (API) {
              API[API["UNKNOWN"] = 0] = "UNKNOWN";
              API[API["GLES2"] = 1] = "GLES2";
              API[API["GLES3"] = 2] = "GLES3";
              API[API["METAL"] = 3] = "METAL";
              API[API["VULKAN"] = 4] = "VULKAN";
              API[API["NVN"] = 5] = "NVN";
              API[API["WEBGL"] = 6] = "WEBGL";
              API[API["WEBGL2"] = 7] = "WEBGL2";
              API[API["WEBGPU"] = 8] = "WEBGPU";
            })(API || (API = exports('a4', {})));

            let SurfaceTransform;

            (function (SurfaceTransform) {
              SurfaceTransform[SurfaceTransform["IDENTITY"] = 0] = "IDENTITY";
              SurfaceTransform[SurfaceTransform["ROTATE_90"] = 1] = "ROTATE_90";
              SurfaceTransform[SurfaceTransform["ROTATE_180"] = 2] = "ROTATE_180";
              SurfaceTransform[SurfaceTransform["ROTATE_270"] = 3] = "ROTATE_270";
            })(SurfaceTransform || (SurfaceTransform = exports('X', {})));

            let Feature;

            (function (Feature) {
              Feature[Feature["ELEMENT_INDEX_UINT"] = 0] = "ELEMENT_INDEX_UINT";
              Feature[Feature["INSTANCED_ARRAYS"] = 1] = "INSTANCED_ARRAYS";
              Feature[Feature["MULTIPLE_RENDER_TARGETS"] = 2] = "MULTIPLE_RENDER_TARGETS";
              Feature[Feature["BLEND_MINMAX"] = 3] = "BLEND_MINMAX";
              Feature[Feature["COMPUTE_SHADER"] = 4] = "COMPUTE_SHADER";
              Feature[Feature["INPUT_ATTACHMENT_BENEFIT"] = 5] = "INPUT_ATTACHMENT_BENEFIT";
              Feature[Feature["COUNT"] = 6] = "COUNT";
            })(Feature || (Feature = exports('a5', {})));

            let Format;

            (function (Format) {
              Format[Format["UNKNOWN"] = 0] = "UNKNOWN";
              Format[Format["A8"] = 1] = "A8";
              Format[Format["L8"] = 2] = "L8";
              Format[Format["LA8"] = 3] = "LA8";
              Format[Format["R8"] = 4] = "R8";
              Format[Format["R8SN"] = 5] = "R8SN";
              Format[Format["R8UI"] = 6] = "R8UI";
              Format[Format["R8I"] = 7] = "R8I";
              Format[Format["R16F"] = 8] = "R16F";
              Format[Format["R16UI"] = 9] = "R16UI";
              Format[Format["R16I"] = 10] = "R16I";
              Format[Format["R32F"] = 11] = "R32F";
              Format[Format["R32UI"] = 12] = "R32UI";
              Format[Format["R32I"] = 13] = "R32I";
              Format[Format["RG8"] = 14] = "RG8";
              Format[Format["RG8SN"] = 15] = "RG8SN";
              Format[Format["RG8UI"] = 16] = "RG8UI";
              Format[Format["RG8I"] = 17] = "RG8I";
              Format[Format["RG16F"] = 18] = "RG16F";
              Format[Format["RG16UI"] = 19] = "RG16UI";
              Format[Format["RG16I"] = 20] = "RG16I";
              Format[Format["RG32F"] = 21] = "RG32F";
              Format[Format["RG32UI"] = 22] = "RG32UI";
              Format[Format["RG32I"] = 23] = "RG32I";
              Format[Format["RGB8"] = 24] = "RGB8";
              Format[Format["SRGB8"] = 25] = "SRGB8";
              Format[Format["RGB8SN"] = 26] = "RGB8SN";
              Format[Format["RGB8UI"] = 27] = "RGB8UI";
              Format[Format["RGB8I"] = 28] = "RGB8I";
              Format[Format["RGB16F"] = 29] = "RGB16F";
              Format[Format["RGB16UI"] = 30] = "RGB16UI";
              Format[Format["RGB16I"] = 31] = "RGB16I";
              Format[Format["RGB32F"] = 32] = "RGB32F";
              Format[Format["RGB32UI"] = 33] = "RGB32UI";
              Format[Format["RGB32I"] = 34] = "RGB32I";
              Format[Format["RGBA8"] = 35] = "RGBA8";
              Format[Format["BGRA8"] = 36] = "BGRA8";
              Format[Format["SRGB8_A8"] = 37] = "SRGB8_A8";
              Format[Format["RGBA8SN"] = 38] = "RGBA8SN";
              Format[Format["RGBA8UI"] = 39] = "RGBA8UI";
              Format[Format["RGBA8I"] = 40] = "RGBA8I";
              Format[Format["RGBA16F"] = 41] = "RGBA16F";
              Format[Format["RGBA16UI"] = 42] = "RGBA16UI";
              Format[Format["RGBA16I"] = 43] = "RGBA16I";
              Format[Format["RGBA32F"] = 44] = "RGBA32F";
              Format[Format["RGBA32UI"] = 45] = "RGBA32UI";
              Format[Format["RGBA32I"] = 46] = "RGBA32I";
              Format[Format["R5G6B5"] = 47] = "R5G6B5";
              Format[Format["R11G11B10F"] = 48] = "R11G11B10F";
              Format[Format["RGB5A1"] = 49] = "RGB5A1";
              Format[Format["RGBA4"] = 50] = "RGBA4";
              Format[Format["RGB10A2"] = 51] = "RGB10A2";
              Format[Format["RGB10A2UI"] = 52] = "RGB10A2UI";
              Format[Format["RGB9E5"] = 53] = "RGB9E5";
              Format[Format["DEPTH"] = 54] = "DEPTH";
              Format[Format["DEPTH_STENCIL"] = 55] = "DEPTH_STENCIL";
              Format[Format["BC1"] = 56] = "BC1";
              Format[Format["BC1_ALPHA"] = 57] = "BC1_ALPHA";
              Format[Format["BC1_SRGB"] = 58] = "BC1_SRGB";
              Format[Format["BC1_SRGB_ALPHA"] = 59] = "BC1_SRGB_ALPHA";
              Format[Format["BC2"] = 60] = "BC2";
              Format[Format["BC2_SRGB"] = 61] = "BC2_SRGB";
              Format[Format["BC3"] = 62] = "BC3";
              Format[Format["BC3_SRGB"] = 63] = "BC3_SRGB";
              Format[Format["BC4"] = 64] = "BC4";
              Format[Format["BC4_SNORM"] = 65] = "BC4_SNORM";
              Format[Format["BC5"] = 66] = "BC5";
              Format[Format["BC5_SNORM"] = 67] = "BC5_SNORM";
              Format[Format["BC6H_UF16"] = 68] = "BC6H_UF16";
              Format[Format["BC6H_SF16"] = 69] = "BC6H_SF16";
              Format[Format["BC7"] = 70] = "BC7";
              Format[Format["BC7_SRGB"] = 71] = "BC7_SRGB";
              Format[Format["ETC_RGB8"] = 72] = "ETC_RGB8";
              Format[Format["ETC2_RGB8"] = 73] = "ETC2_RGB8";
              Format[Format["ETC2_SRGB8"] = 74] = "ETC2_SRGB8";
              Format[Format["ETC2_RGB8_A1"] = 75] = "ETC2_RGB8_A1";
              Format[Format["ETC2_SRGB8_A1"] = 76] = "ETC2_SRGB8_A1";
              Format[Format["ETC2_RGBA8"] = 77] = "ETC2_RGBA8";
              Format[Format["ETC2_SRGB8_A8"] = 78] = "ETC2_SRGB8_A8";
              Format[Format["EAC_R11"] = 79] = "EAC_R11";
              Format[Format["EAC_R11SN"] = 80] = "EAC_R11SN";
              Format[Format["EAC_RG11"] = 81] = "EAC_RG11";
              Format[Format["EAC_RG11SN"] = 82] = "EAC_RG11SN";
              Format[Format["PVRTC_RGB2"] = 83] = "PVRTC_RGB2";
              Format[Format["PVRTC_RGBA2"] = 84] = "PVRTC_RGBA2";
              Format[Format["PVRTC_RGB4"] = 85] = "PVRTC_RGB4";
              Format[Format["PVRTC_RGBA4"] = 86] = "PVRTC_RGBA4";
              Format[Format["PVRTC2_2BPP"] = 87] = "PVRTC2_2BPP";
              Format[Format["PVRTC2_4BPP"] = 88] = "PVRTC2_4BPP";
              Format[Format["ASTC_RGBA_4X4"] = 89] = "ASTC_RGBA_4X4";
              Format[Format["ASTC_RGBA_5X4"] = 90] = "ASTC_RGBA_5X4";
              Format[Format["ASTC_RGBA_5X5"] = 91] = "ASTC_RGBA_5X5";
              Format[Format["ASTC_RGBA_6X5"] = 92] = "ASTC_RGBA_6X5";
              Format[Format["ASTC_RGBA_6X6"] = 93] = "ASTC_RGBA_6X6";
              Format[Format["ASTC_RGBA_8X5"] = 94] = "ASTC_RGBA_8X5";
              Format[Format["ASTC_RGBA_8X6"] = 95] = "ASTC_RGBA_8X6";
              Format[Format["ASTC_RGBA_8X8"] = 96] = "ASTC_RGBA_8X8";
              Format[Format["ASTC_RGBA_10X5"] = 97] = "ASTC_RGBA_10X5";
              Format[Format["ASTC_RGBA_10X6"] = 98] = "ASTC_RGBA_10X6";
              Format[Format["ASTC_RGBA_10X8"] = 99] = "ASTC_RGBA_10X8";
              Format[Format["ASTC_RGBA_10X10"] = 100] = "ASTC_RGBA_10X10";
              Format[Format["ASTC_RGBA_12X10"] = 101] = "ASTC_RGBA_12X10";
              Format[Format["ASTC_RGBA_12X12"] = 102] = "ASTC_RGBA_12X12";
              Format[Format["ASTC_SRGBA_4X4"] = 103] = "ASTC_SRGBA_4X4";
              Format[Format["ASTC_SRGBA_5X4"] = 104] = "ASTC_SRGBA_5X4";
              Format[Format["ASTC_SRGBA_5X5"] = 105] = "ASTC_SRGBA_5X5";
              Format[Format["ASTC_SRGBA_6X5"] = 106] = "ASTC_SRGBA_6X5";
              Format[Format["ASTC_SRGBA_6X6"] = 107] = "ASTC_SRGBA_6X6";
              Format[Format["ASTC_SRGBA_8X5"] = 108] = "ASTC_SRGBA_8X5";
              Format[Format["ASTC_SRGBA_8X6"] = 109] = "ASTC_SRGBA_8X6";
              Format[Format["ASTC_SRGBA_8X8"] = 110] = "ASTC_SRGBA_8X8";
              Format[Format["ASTC_SRGBA_10X5"] = 111] = "ASTC_SRGBA_10X5";
              Format[Format["ASTC_SRGBA_10X6"] = 112] = "ASTC_SRGBA_10X6";
              Format[Format["ASTC_SRGBA_10X8"] = 113] = "ASTC_SRGBA_10X8";
              Format[Format["ASTC_SRGBA_10X10"] = 114] = "ASTC_SRGBA_10X10";
              Format[Format["ASTC_SRGBA_12X10"] = 115] = "ASTC_SRGBA_12X10";
              Format[Format["ASTC_SRGBA_12X12"] = 116] = "ASTC_SRGBA_12X12";
              Format[Format["COUNT"] = 117] = "COUNT";
            })(Format || (Format = exports('a6', {})));

            let FormatType;

            (function (FormatType) {
              FormatType[FormatType["NONE"] = 0] = "NONE";
              FormatType[FormatType["UNORM"] = 1] = "UNORM";
              FormatType[FormatType["SNORM"] = 2] = "SNORM";
              FormatType[FormatType["UINT"] = 3] = "UINT";
              FormatType[FormatType["INT"] = 4] = "INT";
              FormatType[FormatType["UFLOAT"] = 5] = "UFLOAT";
              FormatType[FormatType["FLOAT"] = 6] = "FLOAT";
            })(FormatType || (FormatType = exports('a7', {})));

            let Type;

            (function (Type) {
              Type[Type["UNKNOWN"] = 0] = "UNKNOWN";
              Type[Type["BOOL"] = 1] = "BOOL";
              Type[Type["BOOL2"] = 2] = "BOOL2";
              Type[Type["BOOL3"] = 3] = "BOOL3";
              Type[Type["BOOL4"] = 4] = "BOOL4";
              Type[Type["INT"] = 5] = "INT";
              Type[Type["INT2"] = 6] = "INT2";
              Type[Type["INT3"] = 7] = "INT3";
              Type[Type["INT4"] = 8] = "INT4";
              Type[Type["UINT"] = 9] = "UINT";
              Type[Type["UINT2"] = 10] = "UINT2";
              Type[Type["UINT3"] = 11] = "UINT3";
              Type[Type["UINT4"] = 12] = "UINT4";
              Type[Type["FLOAT"] = 13] = "FLOAT";
              Type[Type["FLOAT2"] = 14] = "FLOAT2";
              Type[Type["FLOAT3"] = 15] = "FLOAT3";
              Type[Type["FLOAT4"] = 16] = "FLOAT4";
              Type[Type["MAT2"] = 17] = "MAT2";
              Type[Type["MAT2X3"] = 18] = "MAT2X3";
              Type[Type["MAT2X4"] = 19] = "MAT2X4";
              Type[Type["MAT3X2"] = 20] = "MAT3X2";
              Type[Type["MAT3"] = 21] = "MAT3";
              Type[Type["MAT3X4"] = 22] = "MAT3X4";
              Type[Type["MAT4X2"] = 23] = "MAT4X2";
              Type[Type["MAT4X3"] = 24] = "MAT4X3";
              Type[Type["MAT4"] = 25] = "MAT4";
              Type[Type["SAMPLER1D"] = 26] = "SAMPLER1D";
              Type[Type["SAMPLER1D_ARRAY"] = 27] = "SAMPLER1D_ARRAY";
              Type[Type["SAMPLER2D"] = 28] = "SAMPLER2D";
              Type[Type["SAMPLER2D_ARRAY"] = 29] = "SAMPLER2D_ARRAY";
              Type[Type["SAMPLER3D"] = 30] = "SAMPLER3D";
              Type[Type["SAMPLER_CUBE"] = 31] = "SAMPLER_CUBE";
              Type[Type["SAMPLER"] = 32] = "SAMPLER";
              Type[Type["TEXTURE1D"] = 33] = "TEXTURE1D";
              Type[Type["TEXTURE1D_ARRAY"] = 34] = "TEXTURE1D_ARRAY";
              Type[Type["TEXTURE2D"] = 35] = "TEXTURE2D";
              Type[Type["TEXTURE2D_ARRAY"] = 36] = "TEXTURE2D_ARRAY";
              Type[Type["TEXTURE3D"] = 37] = "TEXTURE3D";
              Type[Type["TEXTURE_CUBE"] = 38] = "TEXTURE_CUBE";
              Type[Type["IMAGE1D"] = 39] = "IMAGE1D";
              Type[Type["IMAGE1D_ARRAY"] = 40] = "IMAGE1D_ARRAY";
              Type[Type["IMAGE2D"] = 41] = "IMAGE2D";
              Type[Type["IMAGE2D_ARRAY"] = 42] = "IMAGE2D_ARRAY";
              Type[Type["IMAGE3D"] = 43] = "IMAGE3D";
              Type[Type["IMAGE_CUBE"] = 44] = "IMAGE_CUBE";
              Type[Type["SUBPASS_INPUT"] = 45] = "SUBPASS_INPUT";
              Type[Type["COUNT"] = 46] = "COUNT";
            })(Type || (Type = exports('a8', {})));

            let BufferUsageBit;

            (function (BufferUsageBit) {
              BufferUsageBit[BufferUsageBit["NONE"] = 0] = "NONE";
              BufferUsageBit[BufferUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
              BufferUsageBit[BufferUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
              BufferUsageBit[BufferUsageBit["INDEX"] = 4] = "INDEX";
              BufferUsageBit[BufferUsageBit["VERTEX"] = 8] = "VERTEX";
              BufferUsageBit[BufferUsageBit["UNIFORM"] = 16] = "UNIFORM";
              BufferUsageBit[BufferUsageBit["STORAGE"] = 32] = "STORAGE";
              BufferUsageBit[BufferUsageBit["INDIRECT"] = 64] = "INDIRECT";
            })(BufferUsageBit || (BufferUsageBit = exports('P', {})));

            let BufferFlagBit;

            (function (BufferFlagBit) {
              BufferFlagBit[BufferFlagBit["NONE"] = 0] = "NONE";
            })(BufferFlagBit || (BufferFlagBit = exports('U', {})));

            let MemoryAccessBit;

            (function (MemoryAccessBit) {
              MemoryAccessBit[MemoryAccessBit["NONE"] = 0] = "NONE";
              MemoryAccessBit[MemoryAccessBit["READ_ONLY"] = 1] = "READ_ONLY";
              MemoryAccessBit[MemoryAccessBit["WRITE_ONLY"] = 2] = "WRITE_ONLY";
              MemoryAccessBit[MemoryAccessBit["READ_WRITE"] = 3] = "READ_WRITE";
            })(MemoryAccessBit || (MemoryAccessBit = exports('a9', {})));

            let MemoryUsageBit;

            (function (MemoryUsageBit) {
              MemoryUsageBit[MemoryUsageBit["NONE"] = 0] = "NONE";
              MemoryUsageBit[MemoryUsageBit["DEVICE"] = 1] = "DEVICE";
              MemoryUsageBit[MemoryUsageBit["HOST"] = 2] = "HOST";
            })(MemoryUsageBit || (MemoryUsageBit = exports('T', {})));

            let TextureType;

            (function (TextureType) {
              TextureType[TextureType["TEX1D"] = 0] = "TEX1D";
              TextureType[TextureType["TEX2D"] = 1] = "TEX2D";
              TextureType[TextureType["TEX3D"] = 2] = "TEX3D";
              TextureType[TextureType["CUBE"] = 3] = "CUBE";
              TextureType[TextureType["TEX1D_ARRAY"] = 4] = "TEX1D_ARRAY";
              TextureType[TextureType["TEX2D_ARRAY"] = 5] = "TEX2D_ARRAY";
            })(TextureType || (TextureType = exports('aa', {})));

            let TextureUsageBit;

            (function (TextureUsageBit) {
              TextureUsageBit[TextureUsageBit["NONE"] = 0] = "NONE";
              TextureUsageBit[TextureUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
              TextureUsageBit[TextureUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
              TextureUsageBit[TextureUsageBit["SAMPLED"] = 4] = "SAMPLED";
              TextureUsageBit[TextureUsageBit["STORAGE"] = 8] = "STORAGE";
              TextureUsageBit[TextureUsageBit["COLOR_ATTACHMENT"] = 16] = "COLOR_ATTACHMENT";
              TextureUsageBit[TextureUsageBit["DEPTH_STENCIL_ATTACHMENT"] = 32] = "DEPTH_STENCIL_ATTACHMENT";
              TextureUsageBit[TextureUsageBit["INPUT_ATTACHMENT"] = 64] = "INPUT_ATTACHMENT";
            })(TextureUsageBit || (TextureUsageBit = exports('ab', {})));

            let TextureFlagBit;

            (function (TextureFlagBit) {
              TextureFlagBit[TextureFlagBit["NONE"] = 0] = "NONE";
              TextureFlagBit[TextureFlagBit["GEN_MIPMAP"] = 1] = "GEN_MIPMAP";
              TextureFlagBit[TextureFlagBit["GENERAL_LAYOUT"] = 2] = "GENERAL_LAYOUT";
            })(TextureFlagBit || (TextureFlagBit = exports('ac', {})));

            let FormatFeatureBit;

            (function (FormatFeatureBit) {
              FormatFeatureBit[FormatFeatureBit["NONE"] = 0] = "NONE";
              FormatFeatureBit[FormatFeatureBit["RENDER_TARGET"] = 1] = "RENDER_TARGET";
              FormatFeatureBit[FormatFeatureBit["SAMPLED_TEXTURE"] = 2] = "SAMPLED_TEXTURE";
              FormatFeatureBit[FormatFeatureBit["LINEAR_FILTER"] = 4] = "LINEAR_FILTER";
              FormatFeatureBit[FormatFeatureBit["STORAGE_TEXTURE"] = 8] = "STORAGE_TEXTURE";
              FormatFeatureBit[FormatFeatureBit["VERTEX_ATTRIBUTE"] = 16] = "VERTEX_ATTRIBUTE";
            })(FormatFeatureBit || (FormatFeatureBit = exports('ad', {})));

            let SampleCount;

            (function (SampleCount) {
              SampleCount[SampleCount["ONE"] = 0] = "ONE";
              SampleCount[SampleCount["MULTIPLE_PERFORMANCE"] = 1] = "MULTIPLE_PERFORMANCE";
              SampleCount[SampleCount["MULTIPLE_BALANCE"] = 2] = "MULTIPLE_BALANCE";
              SampleCount[SampleCount["MULTIPLE_QUALITY"] = 3] = "MULTIPLE_QUALITY";
            })(SampleCount || (SampleCount = exports('ae', {})));

            let VsyncMode;

            (function (VsyncMode) {
              VsyncMode[VsyncMode["OFF"] = 0] = "OFF";
              VsyncMode[VsyncMode["ON"] = 1] = "ON";
              VsyncMode[VsyncMode["RELAXED"] = 2] = "RELAXED";
              VsyncMode[VsyncMode["MAILBOX"] = 3] = "MAILBOX";
              VsyncMode[VsyncMode["HALF"] = 4] = "HALF";
            })(VsyncMode || (VsyncMode = exports('af', {})));

            let Filter;

            (function (Filter) {
              Filter[Filter["NONE"] = 0] = "NONE";
              Filter[Filter["POINT"] = 1] = "POINT";
              Filter[Filter["LINEAR"] = 2] = "LINEAR";
              Filter[Filter["ANISOTROPIC"] = 3] = "ANISOTROPIC";
            })(Filter || (Filter = exports('ag', {})));

            let Address;

            (function (Address) {
              Address[Address["WRAP"] = 0] = "WRAP";
              Address[Address["MIRROR"] = 1] = "MIRROR";
              Address[Address["CLAMP"] = 2] = "CLAMP";
              Address[Address["BORDER"] = 3] = "BORDER";
            })(Address || (Address = exports('ah', {})));

            let ComparisonFunc;

            (function (ComparisonFunc) {
              ComparisonFunc[ComparisonFunc["NEVER"] = 0] = "NEVER";
              ComparisonFunc[ComparisonFunc["LESS"] = 1] = "LESS";
              ComparisonFunc[ComparisonFunc["EQUAL"] = 2] = "EQUAL";
              ComparisonFunc[ComparisonFunc["LESS_EQUAL"] = 3] = "LESS_EQUAL";
              ComparisonFunc[ComparisonFunc["GREATER"] = 4] = "GREATER";
              ComparisonFunc[ComparisonFunc["NOT_EQUAL"] = 5] = "NOT_EQUAL";
              ComparisonFunc[ComparisonFunc["GREATER_EQUAL"] = 6] = "GREATER_EQUAL";
              ComparisonFunc[ComparisonFunc["ALWAYS"] = 7] = "ALWAYS";
            })(ComparisonFunc || (ComparisonFunc = exports('ai', {})));

            let StencilOp;

            (function (StencilOp) {
              StencilOp[StencilOp["ZERO"] = 0] = "ZERO";
              StencilOp[StencilOp["KEEP"] = 1] = "KEEP";
              StencilOp[StencilOp["REPLACE"] = 2] = "REPLACE";
              StencilOp[StencilOp["INCR"] = 3] = "INCR";
              StencilOp[StencilOp["DECR"] = 4] = "DECR";
              StencilOp[StencilOp["INVERT"] = 5] = "INVERT";
              StencilOp[StencilOp["INCR_WRAP"] = 6] = "INCR_WRAP";
              StencilOp[StencilOp["DECR_WRAP"] = 7] = "DECR_WRAP";
            })(StencilOp || (StencilOp = exports('aj', {})));

            let BlendFactor;

            (function (BlendFactor) {
              BlendFactor[BlendFactor["ZERO"] = 0] = "ZERO";
              BlendFactor[BlendFactor["ONE"] = 1] = "ONE";
              BlendFactor[BlendFactor["SRC_ALPHA"] = 2] = "SRC_ALPHA";
              BlendFactor[BlendFactor["DST_ALPHA"] = 3] = "DST_ALPHA";
              BlendFactor[BlendFactor["ONE_MINUS_SRC_ALPHA"] = 4] = "ONE_MINUS_SRC_ALPHA";
              BlendFactor[BlendFactor["ONE_MINUS_DST_ALPHA"] = 5] = "ONE_MINUS_DST_ALPHA";
              BlendFactor[BlendFactor["SRC_COLOR"] = 6] = "SRC_COLOR";
              BlendFactor[BlendFactor["DST_COLOR"] = 7] = "DST_COLOR";
              BlendFactor[BlendFactor["ONE_MINUS_SRC_COLOR"] = 8] = "ONE_MINUS_SRC_COLOR";
              BlendFactor[BlendFactor["ONE_MINUS_DST_COLOR"] = 9] = "ONE_MINUS_DST_COLOR";
              BlendFactor[BlendFactor["SRC_ALPHA_SATURATE"] = 10] = "SRC_ALPHA_SATURATE";
              BlendFactor[BlendFactor["CONSTANT_COLOR"] = 11] = "CONSTANT_COLOR";
              BlendFactor[BlendFactor["ONE_MINUS_CONSTANT_COLOR"] = 12] = "ONE_MINUS_CONSTANT_COLOR";
              BlendFactor[BlendFactor["CONSTANT_ALPHA"] = 13] = "CONSTANT_ALPHA";
              BlendFactor[BlendFactor["ONE_MINUS_CONSTANT_ALPHA"] = 14] = "ONE_MINUS_CONSTANT_ALPHA";
            })(BlendFactor || (BlendFactor = exports('ak', {})));

            let BlendOp;

            (function (BlendOp) {
              BlendOp[BlendOp["ADD"] = 0] = "ADD";
              BlendOp[BlendOp["SUB"] = 1] = "SUB";
              BlendOp[BlendOp["REV_SUB"] = 2] = "REV_SUB";
              BlendOp[BlendOp["MIN"] = 3] = "MIN";
              BlendOp[BlendOp["MAX"] = 4] = "MAX";
            })(BlendOp || (BlendOp = exports('al', {})));

            let ColorMask;

            (function (ColorMask) {
              ColorMask[ColorMask["NONE"] = 0] = "NONE";
              ColorMask[ColorMask["R"] = 1] = "R";
              ColorMask[ColorMask["G"] = 2] = "G";
              ColorMask[ColorMask["B"] = 4] = "B";
              ColorMask[ColorMask["A"] = 8] = "A";
              ColorMask[ColorMask["ALL"] = 15] = "ALL";
            })(ColorMask || (ColorMask = exports('am', {})));

            let ShaderStageFlagBit;

            (function (ShaderStageFlagBit) {
              ShaderStageFlagBit[ShaderStageFlagBit["NONE"] = 0] = "NONE";
              ShaderStageFlagBit[ShaderStageFlagBit["VERTEX"] = 1] = "VERTEX";
              ShaderStageFlagBit[ShaderStageFlagBit["CONTROL"] = 2] = "CONTROL";
              ShaderStageFlagBit[ShaderStageFlagBit["EVALUATION"] = 4] = "EVALUATION";
              ShaderStageFlagBit[ShaderStageFlagBit["GEOMETRY"] = 8] = "GEOMETRY";
              ShaderStageFlagBit[ShaderStageFlagBit["FRAGMENT"] = 16] = "FRAGMENT";
              ShaderStageFlagBit[ShaderStageFlagBit["COMPUTE"] = 32] = "COMPUTE";
              ShaderStageFlagBit[ShaderStageFlagBit["ALL"] = 63] = "ALL";
            })(ShaderStageFlagBit || (ShaderStageFlagBit = exports('an', {})));

            let LoadOp;

            (function (LoadOp) {
              LoadOp[LoadOp["LOAD"] = 0] = "LOAD";
              LoadOp[LoadOp["CLEAR"] = 1] = "CLEAR";
              LoadOp[LoadOp["DISCARD"] = 2] = "DISCARD";
            })(LoadOp || (LoadOp = exports('ao', {})));

            let StoreOp;

            (function (StoreOp) {
              StoreOp[StoreOp["STORE"] = 0] = "STORE";
              StoreOp[StoreOp["DISCARD"] = 1] = "DISCARD";
            })(StoreOp || (StoreOp = exports('ap', {})));

            let AccessFlagBit;

            (function (AccessFlagBit) {
              AccessFlagBit[AccessFlagBit["NONE"] = 0] = "NONE";
              AccessFlagBit[AccessFlagBit["INDIRECT_BUFFER"] = 1] = "INDIRECT_BUFFER";
              AccessFlagBit[AccessFlagBit["INDEX_BUFFER"] = 2] = "INDEX_BUFFER";
              AccessFlagBit[AccessFlagBit["VERTEX_BUFFER"] = 4] = "VERTEX_BUFFER";
              AccessFlagBit[AccessFlagBit["VERTEX_SHADER_READ_UNIFORM_BUFFER"] = 8] = "VERTEX_SHADER_READ_UNIFORM_BUFFER";
              AccessFlagBit[AccessFlagBit["VERTEX_SHADER_READ_TEXTURE"] = 16] = "VERTEX_SHADER_READ_TEXTURE";
              AccessFlagBit[AccessFlagBit["VERTEX_SHADER_READ_OTHER"] = 32] = "VERTEX_SHADER_READ_OTHER";
              AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_UNIFORM_BUFFER"] = 64] = "FRAGMENT_SHADER_READ_UNIFORM_BUFFER";
              AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_TEXTURE"] = 128] = "FRAGMENT_SHADER_READ_TEXTURE";
              AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT"] = 256] = "FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT";
              AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT"] = 512] = "FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT";
              AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_OTHER"] = 1024] = "FRAGMENT_SHADER_READ_OTHER";
              AccessFlagBit[AccessFlagBit["COLOR_ATTACHMENT_READ"] = 2048] = "COLOR_ATTACHMENT_READ";
              AccessFlagBit[AccessFlagBit["DEPTH_STENCIL_ATTACHMENT_READ"] = 4096] = "DEPTH_STENCIL_ATTACHMENT_READ";
              AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_READ_UNIFORM_BUFFER"] = 8192] = "COMPUTE_SHADER_READ_UNIFORM_BUFFER";
              AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_READ_TEXTURE"] = 16384] = "COMPUTE_SHADER_READ_TEXTURE";
              AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_READ_OTHER"] = 32768] = "COMPUTE_SHADER_READ_OTHER";
              AccessFlagBit[AccessFlagBit["TRANSFER_READ"] = 65536] = "TRANSFER_READ";
              AccessFlagBit[AccessFlagBit["HOST_READ"] = 131072] = "HOST_READ";
              AccessFlagBit[AccessFlagBit["PRESENT"] = 262144] = "PRESENT";
              AccessFlagBit[AccessFlagBit["VERTEX_SHADER_WRITE"] = 524288] = "VERTEX_SHADER_WRITE";
              AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_WRITE"] = 1048576] = "FRAGMENT_SHADER_WRITE";
              AccessFlagBit[AccessFlagBit["COLOR_ATTACHMENT_WRITE"] = 2097152] = "COLOR_ATTACHMENT_WRITE";
              AccessFlagBit[AccessFlagBit["DEPTH_STENCIL_ATTACHMENT_WRITE"] = 4194304] = "DEPTH_STENCIL_ATTACHMENT_WRITE";
              AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_WRITE"] = 8388608] = "COMPUTE_SHADER_WRITE";
              AccessFlagBit[AccessFlagBit["TRANSFER_WRITE"] = 16777216] = "TRANSFER_WRITE";
              AccessFlagBit[AccessFlagBit["HOST_PREINITIALIZED"] = 33554432] = "HOST_PREINITIALIZED";
              AccessFlagBit[AccessFlagBit["HOST_WRITE"] = 67108864] = "HOST_WRITE";
            })(AccessFlagBit || (AccessFlagBit = exports('aq', {})));

            let ResolveMode;

            (function (ResolveMode) {
              ResolveMode[ResolveMode["NONE"] = 0] = "NONE";
              ResolveMode[ResolveMode["SAMPLE_ZERO"] = 1] = "SAMPLE_ZERO";
              ResolveMode[ResolveMode["AVERAGE"] = 2] = "AVERAGE";
              ResolveMode[ResolveMode["MIN"] = 3] = "MIN";
              ResolveMode[ResolveMode["MAX"] = 4] = "MAX";
            })(ResolveMode || (ResolveMode = exports('ar', {})));

            let PipelineBindPoint;

            (function (PipelineBindPoint) {
              PipelineBindPoint[PipelineBindPoint["GRAPHICS"] = 0] = "GRAPHICS";
              PipelineBindPoint[PipelineBindPoint["COMPUTE"] = 1] = "COMPUTE";
              PipelineBindPoint[PipelineBindPoint["RAY_TRACING"] = 2] = "RAY_TRACING";
            })(PipelineBindPoint || (PipelineBindPoint = exports('as', {})));

            let PrimitiveMode;

            (function (PrimitiveMode) {
              PrimitiveMode[PrimitiveMode["POINT_LIST"] = 0] = "POINT_LIST";
              PrimitiveMode[PrimitiveMode["LINE_LIST"] = 1] = "LINE_LIST";
              PrimitiveMode[PrimitiveMode["LINE_STRIP"] = 2] = "LINE_STRIP";
              PrimitiveMode[PrimitiveMode["LINE_LOOP"] = 3] = "LINE_LOOP";
              PrimitiveMode[PrimitiveMode["LINE_LIST_ADJACENCY"] = 4] = "LINE_LIST_ADJACENCY";
              PrimitiveMode[PrimitiveMode["LINE_STRIP_ADJACENCY"] = 5] = "LINE_STRIP_ADJACENCY";
              PrimitiveMode[PrimitiveMode["ISO_LINE_LIST"] = 6] = "ISO_LINE_LIST";
              PrimitiveMode[PrimitiveMode["TRIANGLE_LIST"] = 7] = "TRIANGLE_LIST";
              PrimitiveMode[PrimitiveMode["TRIANGLE_STRIP"] = 8] = "TRIANGLE_STRIP";
              PrimitiveMode[PrimitiveMode["TRIANGLE_FAN"] = 9] = "TRIANGLE_FAN";
              PrimitiveMode[PrimitiveMode["TRIANGLE_LIST_ADJACENCY"] = 10] = "TRIANGLE_LIST_ADJACENCY";
              PrimitiveMode[PrimitiveMode["TRIANGLE_STRIP_ADJACENCY"] = 11] = "TRIANGLE_STRIP_ADJACENCY";
              PrimitiveMode[PrimitiveMode["TRIANGLE_PATCH_ADJACENCY"] = 12] = "TRIANGLE_PATCH_ADJACENCY";
              PrimitiveMode[PrimitiveMode["QUAD_PATCH_LIST"] = 13] = "QUAD_PATCH_LIST";
            })(PrimitiveMode || (PrimitiveMode = exports('at', {})));

            let PolygonMode;

            (function (PolygonMode) {
              PolygonMode[PolygonMode["FILL"] = 0] = "FILL";
              PolygonMode[PolygonMode["POINT"] = 1] = "POINT";
              PolygonMode[PolygonMode["LINE"] = 2] = "LINE";
            })(PolygonMode || (PolygonMode = exports('au', {})));

            let ShadeModel;

            (function (ShadeModel) {
              ShadeModel[ShadeModel["GOURAND"] = 0] = "GOURAND";
              ShadeModel[ShadeModel["FLAT"] = 1] = "FLAT";
            })(ShadeModel || (ShadeModel = exports('av', {})));

            let CullMode;

            (function (CullMode) {
              CullMode[CullMode["NONE"] = 0] = "NONE";
              CullMode[CullMode["FRONT"] = 1] = "FRONT";
              CullMode[CullMode["BACK"] = 2] = "BACK";
            })(CullMode || (CullMode = exports('aw', {})));

            let DynamicStateFlagBit;

            (function (DynamicStateFlagBit) {
              DynamicStateFlagBit[DynamicStateFlagBit["NONE"] = 0] = "NONE";
              DynamicStateFlagBit[DynamicStateFlagBit["LINE_WIDTH"] = 1] = "LINE_WIDTH";
              DynamicStateFlagBit[DynamicStateFlagBit["DEPTH_BIAS"] = 2] = "DEPTH_BIAS";
              DynamicStateFlagBit[DynamicStateFlagBit["BLEND_CONSTANTS"] = 4] = "BLEND_CONSTANTS";
              DynamicStateFlagBit[DynamicStateFlagBit["DEPTH_BOUNDS"] = 8] = "DEPTH_BOUNDS";
              DynamicStateFlagBit[DynamicStateFlagBit["STENCIL_WRITE_MASK"] = 16] = "STENCIL_WRITE_MASK";
              DynamicStateFlagBit[DynamicStateFlagBit["STENCIL_COMPARE_MASK"] = 32] = "STENCIL_COMPARE_MASK";
            })(DynamicStateFlagBit || (DynamicStateFlagBit = exports('ax', {})));

            let StencilFace;

            (function (StencilFace) {
              StencilFace[StencilFace["FRONT"] = 1] = "FRONT";
              StencilFace[StencilFace["BACK"] = 2] = "BACK";
              StencilFace[StencilFace["ALL"] = 3] = "ALL";
            })(StencilFace || (StencilFace = exports('ay', {})));

            let DescriptorType;

            (function (DescriptorType) {
              DescriptorType[DescriptorType["UNKNOWN"] = 0] = "UNKNOWN";
              DescriptorType[DescriptorType["UNIFORM_BUFFER"] = 1] = "UNIFORM_BUFFER";
              DescriptorType[DescriptorType["DYNAMIC_UNIFORM_BUFFER"] = 2] = "DYNAMIC_UNIFORM_BUFFER";
              DescriptorType[DescriptorType["STORAGE_BUFFER"] = 4] = "STORAGE_BUFFER";
              DescriptorType[DescriptorType["DYNAMIC_STORAGE_BUFFER"] = 8] = "DYNAMIC_STORAGE_BUFFER";
              DescriptorType[DescriptorType["SAMPLER_TEXTURE"] = 16] = "SAMPLER_TEXTURE";
              DescriptorType[DescriptorType["SAMPLER"] = 32] = "SAMPLER";
              DescriptorType[DescriptorType["TEXTURE"] = 64] = "TEXTURE";
              DescriptorType[DescriptorType["STORAGE_IMAGE"] = 128] = "STORAGE_IMAGE";
              DescriptorType[DescriptorType["INPUT_ATTACHMENT"] = 256] = "INPUT_ATTACHMENT";
            })(DescriptorType || (DescriptorType = exports('az', {})));

            let QueueType;

            (function (QueueType) {
              QueueType[QueueType["GRAPHICS"] = 0] = "GRAPHICS";
              QueueType[QueueType["COMPUTE"] = 1] = "COMPUTE";
              QueueType[QueueType["TRANSFER"] = 2] = "TRANSFER";
            })(QueueType || (QueueType = exports('Z', {})));

            let QueryType;

            (function (QueryType) {
              QueryType[QueryType["OCCLUSION"] = 0] = "OCCLUSION";
              QueryType[QueryType["PIPELINE_STATISTICS"] = 1] = "PIPELINE_STATISTICS";
              QueryType[QueryType["TIMESTAMP"] = 2] = "TIMESTAMP";
            })(QueryType || (QueryType = exports('aA', {})));

            let CommandBufferType;

            (function (CommandBufferType) {
              CommandBufferType[CommandBufferType["PRIMARY"] = 0] = "PRIMARY";
              CommandBufferType[CommandBufferType["SECONDARY"] = 1] = "SECONDARY";
            })(CommandBufferType || (CommandBufferType = exports('W', {})));

            let ClearFlagBit;

            (function (ClearFlagBit) {
              ClearFlagBit[ClearFlagBit["NONE"] = 0] = "NONE";
              ClearFlagBit[ClearFlagBit["COLOR"] = 1] = "COLOR";
              ClearFlagBit[ClearFlagBit["DEPTH"] = 2] = "DEPTH";
              ClearFlagBit[ClearFlagBit["STENCIL"] = 4] = "STENCIL";
              ClearFlagBit[ClearFlagBit["DEPTH_STENCIL"] = 6] = "DEPTH_STENCIL";
              ClearFlagBit[ClearFlagBit["ALL"] = 7] = "ALL";
            })(ClearFlagBit || (ClearFlagBit = exports('aB', {})));

            let BarrierType;

            (function (BarrierType) {
              BarrierType[BarrierType["FULL"] = 0] = "FULL";
              BarrierType[BarrierType["SPLIT_BEGIN"] = 1] = "SPLIT_BEGIN";
              BarrierType[BarrierType["SPLIT_END"] = 2] = "SPLIT_END";
            })(BarrierType || (BarrierType = exports('aC', {})));

            let PassType;

            (function (PassType) {
              PassType[PassType["RASTER"] = 0] = "RASTER";
              PassType[PassType["COMPUTE"] = 1] = "COMPUTE";
              PassType[PassType["COPY"] = 2] = "COPY";
              PassType[PassType["MOVE"] = 3] = "MOVE";
              PassType[PassType["RAYTRACE"] = 4] = "RAYTRACE";
              PassType[PassType["PRESENT"] = 5] = "PRESENT";
            })(PassType || (PassType = exports('aD', {})));

            class Size$1 {
              constructor(x = 0, y = 0, z = 0) {
                this.x = x;
                this.y = y;
                this.z = z;
              }

              copy(info) {
                this.x = info.x;
                this.y = info.y;
                this.z = info.z;
                return this;
              }

            } exports('aE', Size$1);
            class DeviceCaps {
              constructor(maxVertexAttributes = 0, maxVertexUniformVectors = 0, maxFragmentUniformVectors = 0, maxTextureUnits = 0, maxImageUnits = 0, maxVertexTextureUnits = 0, maxColorRenderTargets = 0, maxShaderStorageBufferBindings = 0, maxShaderStorageBlockSize = 0, maxUniformBufferBindings = 0, maxUniformBlockSize = 0, maxTextureSize = 0, maxCubeMapTextureSize = 0, uboOffsetAlignment = 1, maxComputeSharedMemorySize = 0, maxComputeWorkGroupInvocations = 0, maxComputeWorkGroupSize = new Size$1(), maxComputeWorkGroupCount = new Size$1(), supportQuery = false, clipSpaceMinZ = -1, screenSpaceSignY = 1, clipSpaceSignY = 1) {
                this.maxVertexAttributes = maxVertexAttributes;
                this.maxVertexUniformVectors = maxVertexUniformVectors;
                this.maxFragmentUniformVectors = maxFragmentUniformVectors;
                this.maxTextureUnits = maxTextureUnits;
                this.maxImageUnits = maxImageUnits;
                this.maxVertexTextureUnits = maxVertexTextureUnits;
                this.maxColorRenderTargets = maxColorRenderTargets;
                this.maxShaderStorageBufferBindings = maxShaderStorageBufferBindings;
                this.maxShaderStorageBlockSize = maxShaderStorageBlockSize;
                this.maxUniformBufferBindings = maxUniformBufferBindings;
                this.maxUniformBlockSize = maxUniformBlockSize;
                this.maxTextureSize = maxTextureSize;
                this.maxCubeMapTextureSize = maxCubeMapTextureSize;
                this.uboOffsetAlignment = uboOffsetAlignment;
                this.maxComputeSharedMemorySize = maxComputeSharedMemorySize;
                this.maxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations;
                this.maxComputeWorkGroupSize = maxComputeWorkGroupSize;
                this.maxComputeWorkGroupCount = maxComputeWorkGroupCount;
                this.supportQuery = supportQuery;
                this.clipSpaceMinZ = clipSpaceMinZ;
                this.screenSpaceSignY = screenSpaceSignY;
                this.clipSpaceSignY = clipSpaceSignY;
              }

              copy(info) {
                this.maxVertexAttributes = info.maxVertexAttributes;
                this.maxVertexUniformVectors = info.maxVertexUniformVectors;
                this.maxFragmentUniformVectors = info.maxFragmentUniformVectors;
                this.maxTextureUnits = info.maxTextureUnits;
                this.maxImageUnits = info.maxImageUnits;
                this.maxVertexTextureUnits = info.maxVertexTextureUnits;
                this.maxColorRenderTargets = info.maxColorRenderTargets;
                this.maxShaderStorageBufferBindings = info.maxShaderStorageBufferBindings;
                this.maxShaderStorageBlockSize = info.maxShaderStorageBlockSize;
                this.maxUniformBufferBindings = info.maxUniformBufferBindings;
                this.maxUniformBlockSize = info.maxUniformBlockSize;
                this.maxTextureSize = info.maxTextureSize;
                this.maxCubeMapTextureSize = info.maxCubeMapTextureSize;
                this.uboOffsetAlignment = info.uboOffsetAlignment;
                this.maxComputeSharedMemorySize = info.maxComputeSharedMemorySize;
                this.maxComputeWorkGroupInvocations = info.maxComputeWorkGroupInvocations;
                this.maxComputeWorkGroupSize.copy(info.maxComputeWorkGroupSize);
                this.maxComputeWorkGroupCount.copy(info.maxComputeWorkGroupCount);
                this.supportQuery = info.supportQuery;
                this.clipSpaceMinZ = info.clipSpaceMinZ;
                this.screenSpaceSignY = info.screenSpaceSignY;
                this.clipSpaceSignY = info.clipSpaceSignY;
                return this;
              }

            } exports('aF', DeviceCaps);
            class DeviceOptions {
              constructor(enableBarrierDeduce = true) {
                this.enableBarrierDeduce = enableBarrierDeduce;
              }

              copy(info) {
                this.enableBarrierDeduce = info.enableBarrierDeduce;
                return this;
              }

            } exports('aG', DeviceOptions);
            class Offset {
              constructor(x = 0, y = 0, z = 0) {
                this.x = x;
                this.y = y;
                this.z = z;
              }

              copy(info) {
                this.x = info.x;
                this.y = info.y;
                this.z = info.z;
                return this;
              }

            } exports('aH', Offset);
            class Rect$1 {
              constructor(x = 0, y = 0, width = 0, height = 0) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
              }

              copy(info) {
                this.x = info.x;
                this.y = info.y;
                this.width = info.width;
                this.height = info.height;
                return this;
              }

            } exports('aI', Rect$1);
            class Extent {
              constructor(width = 0, height = 0, depth = 1) {
                this.width = width;
                this.height = height;
                this.depth = depth;
              }

              copy(info) {
                this.width = info.width;
                this.height = info.height;
                this.depth = info.depth;
                return this;
              }

            } exports('aJ', Extent);
            class TextureSubresLayers {
              constructor(mipLevel = 0, baseArrayLayer = 0, layerCount = 1) {
                this.mipLevel = mipLevel;
                this.baseArrayLayer = baseArrayLayer;
                this.layerCount = layerCount;
              }

              copy(info) {
                this.mipLevel = info.mipLevel;
                this.baseArrayLayer = info.baseArrayLayer;
                this.layerCount = info.layerCount;
                return this;
              }

            } exports('aK', TextureSubresLayers);
            class TextureSubresRange {
              constructor(baseMipLevel = 0, levelCount = 1, baseArrayLayer = 0, layerCount = 1) {
                this.baseMipLevel = baseMipLevel;
                this.levelCount = levelCount;
                this.baseArrayLayer = baseArrayLayer;
                this.layerCount = layerCount;
              }

              copy(info) {
                this.baseMipLevel = info.baseMipLevel;
                this.levelCount = info.levelCount;
                this.baseArrayLayer = info.baseArrayLayer;
                this.layerCount = info.layerCount;
                return this;
              }

            } exports('aL', TextureSubresRange);
            class TextureCopy {
              constructor(srcSubres = new TextureSubresLayers(), srcOffset = new Offset(), dstSubres = new TextureSubresLayers(), dstOffset = new Offset(), extent = new Extent()) {
                this.srcSubres = srcSubres;
                this.srcOffset = srcOffset;
                this.dstSubres = dstSubres;
                this.dstOffset = dstOffset;
                this.extent = extent;
              }

              copy(info) {
                this.srcSubres.copy(info.srcSubres);
                this.srcOffset.copy(info.srcOffset);
                this.dstSubres.copy(info.dstSubres);
                this.dstOffset.copy(info.dstOffset);
                this.extent.copy(info.extent);
                return this;
              }

            } exports('aM', TextureCopy);
            class TextureBlit {
              constructor(srcSubres = new TextureSubresLayers(), srcOffset = new Offset(), srcExtent = new Extent(), dstSubres = new TextureSubresLayers(), dstOffset = new Offset(), dstExtent = new Extent()) {
                this.srcSubres = srcSubres;
                this.srcOffset = srcOffset;
                this.srcExtent = srcExtent;
                this.dstSubres = dstSubres;
                this.dstOffset = dstOffset;
                this.dstExtent = dstExtent;
              }

              copy(info) {
                this.srcSubres.copy(info.srcSubres);
                this.srcOffset.copy(info.srcOffset);
                this.srcExtent.copy(info.srcExtent);
                this.dstSubres.copy(info.dstSubres);
                this.dstOffset.copy(info.dstOffset);
                this.dstExtent.copy(info.dstExtent);
                return this;
              }

            } exports('aN', TextureBlit);
            class BufferTextureCopy {
              constructor(buffOffset = 0, buffStride = 0, buffTexHeight = 0, texOffset = new Offset(), texExtent = new Extent(), texSubres = new TextureSubresLayers()) {
                this.buffOffset = buffOffset;
                this.buffStride = buffStride;
                this.buffTexHeight = buffTexHeight;
                this.texOffset = texOffset;
                this.texExtent = texExtent;
                this.texSubres = texSubres;
              }

              copy(info) {
                this.buffOffset = info.buffOffset;
                this.buffStride = info.buffStride;
                this.buffTexHeight = info.buffTexHeight;
                this.texOffset.copy(info.texOffset);
                this.texExtent.copy(info.texExtent);
                this.texSubres.copy(info.texSubres);
                return this;
              }

            } exports('aO', BufferTextureCopy);
            class Viewport {
              constructor(left = 0, top = 0, width = 0, height = 0, minDepth = 0, maxDepth = 1) {
                this.left = left;
                this.top = top;
                this.width = width;
                this.height = height;
                this.minDepth = minDepth;
                this.maxDepth = maxDepth;
              }

              copy(info) {
                this.left = info.left;
                this.top = info.top;
                this.width = info.width;
                this.height = info.height;
                this.minDepth = info.minDepth;
                this.maxDepth = info.maxDepth;
                return this;
              }

            } exports('aP', Viewport);
            class Color$1 {
              constructor(x = 0, y = 0, z = 0, w = 0) {
                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;
              }

              copy(info) {
                this.x = info.x;
                this.y = info.y;
                this.z = info.z;
                this.w = info.w;
                return this;
              }

            } exports('aQ', Color$1);
            class BindingMappingInfo {
              constructor(maxBlockCounts = [0], maxSamplerTextureCounts = [0], maxSamplerCounts = [0], maxTextureCounts = [0], maxBufferCounts = [0], maxImageCounts = [0], maxSubpassInputCounts = [0], setIndices = [0]) {
                this.maxBlockCounts = maxBlockCounts;
                this.maxSamplerTextureCounts = maxSamplerTextureCounts;
                this.maxSamplerCounts = maxSamplerCounts;
                this.maxTextureCounts = maxTextureCounts;
                this.maxBufferCounts = maxBufferCounts;
                this.maxImageCounts = maxImageCounts;
                this.maxSubpassInputCounts = maxSubpassInputCounts;
                this.setIndices = setIndices;
              }

              copy(info) {
                this.maxBlockCounts = info.maxBlockCounts.slice();
                this.maxSamplerTextureCounts = info.maxSamplerTextureCounts.slice();
                this.maxSamplerCounts = info.maxSamplerCounts.slice();
                this.maxTextureCounts = info.maxTextureCounts.slice();
                this.maxBufferCounts = info.maxBufferCounts.slice();
                this.maxImageCounts = info.maxImageCounts.slice();
                this.maxSubpassInputCounts = info.maxSubpassInputCounts.slice();
                this.setIndices = info.setIndices.slice();
                return this;
              }

            } exports('aR', BindingMappingInfo);
            class SwapchainInfo {
              constructor(windowHandle = null, vsyncMode = VsyncMode.ON, width = 0, height = 0) {
                this.windowHandle = windowHandle;
                this.vsyncMode = vsyncMode;
                this.width = width;
                this.height = height;
              }

              copy(info) {
                this.windowHandle = info.windowHandle;
                this.vsyncMode = info.vsyncMode;
                this.width = info.width;
                this.height = info.height;
                return this;
              }

            } exports('aS', SwapchainInfo);
            class DeviceInfo {
              constructor(bindingMappingInfo = new BindingMappingInfo()) {
                this.bindingMappingInfo = bindingMappingInfo;
              }

              copy(info) {
                this.bindingMappingInfo.copy(info.bindingMappingInfo);
                return this;
              }

            } exports('aT', DeviceInfo);
            class BufferInfo {
              constructor(usage = BufferUsageBit.NONE, memUsage = MemoryUsageBit.NONE, size = 0, stride = 1, flags = BufferFlagBit.NONE) {
                this.usage = usage;
                this.memUsage = memUsage;
                this.size = size;
                this.stride = stride;
                this.flags = flags;
              }

              copy(info) {
                this.usage = info.usage;
                this.memUsage = info.memUsage;
                this.size = info.size;
                this.stride = info.stride;
                this.flags = info.flags;
                return this;
              }

            } exports('aU', BufferInfo);
            class BufferViewInfo {
              constructor(buffer = null, offset = 0, range = 0) {
                this.buffer = buffer;
                this.offset = offset;
                this.range = range;
              }

              copy(info) {
                this.buffer = info.buffer;
                this.offset = info.offset;
                this.range = info.range;
                return this;
              }

            } exports('aV', BufferViewInfo);
            class DrawInfo {
              constructor(vertexCount = 0, firstVertex = 0, indexCount = 0, firstIndex = 0, vertexOffset = 0, instanceCount = 0, firstInstance = 0) {
                this.vertexCount = vertexCount;
                this.firstVertex = firstVertex;
                this.indexCount = indexCount;
                this.firstIndex = firstIndex;
                this.vertexOffset = vertexOffset;
                this.instanceCount = instanceCount;
                this.firstInstance = firstInstance;
              }

              copy(info) {
                this.vertexCount = info.vertexCount;
                this.firstVertex = info.firstVertex;
                this.indexCount = info.indexCount;
                this.firstIndex = info.firstIndex;
                this.vertexOffset = info.vertexOffset;
                this.instanceCount = info.instanceCount;
                this.firstInstance = info.firstInstance;
                return this;
              }

            } exports('Y', DrawInfo);
            class DispatchInfo {
              constructor(groupCountX = 0, groupCountY = 0, groupCountZ = 0, indirectBuffer = null, indirectOffset = 0) {
                this.groupCountX = groupCountX;
                this.groupCountY = groupCountY;
                this.groupCountZ = groupCountZ;
                this.indirectBuffer = indirectBuffer;
                this.indirectOffset = indirectOffset;
              }

              copy(info) {
                this.groupCountX = info.groupCountX;
                this.groupCountY = info.groupCountY;
                this.groupCountZ = info.groupCountZ;
                this.indirectBuffer = info.indirectBuffer;
                this.indirectOffset = info.indirectOffset;
                return this;
              }

            } exports('aW', DispatchInfo);
            class IndirectBuffer {
              constructor(drawInfos = []) {
                this.drawInfos = drawInfos;
              }

              copy(info) {
                deepCopy(this.drawInfos, info.drawInfos, DrawInfo);
                return this;
              }

            } exports('aX', IndirectBuffer);
            class TextureInfo {
              constructor(type = TextureType.TEX2D, usage = TextureUsageBit.NONE, format = Format.UNKNOWN, width = 0, height = 0, flags = TextureFlagBit.NONE, layerCount = 1, levelCount = 1, samples = SampleCount.ONE, depth = 1, externalRes = 0) {
                this.type = type;
                this.usage = usage;
                this.format = format;
                this.width = width;
                this.height = height;
                this.flags = flags;
                this.layerCount = layerCount;
                this.levelCount = levelCount;
                this.samples = samples;
                this.depth = depth;
                this.externalRes = externalRes;
              }

              copy(info) {
                this.type = info.type;
                this.usage = info.usage;
                this.format = info.format;
                this.width = info.width;
                this.height = info.height;
                this.flags = info.flags;
                this.layerCount = info.layerCount;
                this.levelCount = info.levelCount;
                this.samples = info.samples;
                this.depth = info.depth;
                this.externalRes = info.externalRes;
                return this;
              }

            } exports('aY', TextureInfo);
            class TextureViewInfo {
              constructor(texture = null, type = TextureType.TEX2D, format = Format.UNKNOWN, baseLevel = 0, levelCount = 1, baseLayer = 0, layerCount = 1) {
                this.texture = texture;
                this.type = type;
                this.format = format;
                this.baseLevel = baseLevel;
                this.levelCount = levelCount;
                this.baseLayer = baseLayer;
                this.layerCount = layerCount;
              }

              copy(info) {
                this.texture = info.texture;
                this.type = info.type;
                this.format = info.format;
                this.baseLevel = info.baseLevel;
                this.levelCount = info.levelCount;
                this.baseLayer = info.baseLayer;
                this.layerCount = info.layerCount;
                return this;
              }

            } exports('aZ', TextureViewInfo);
            class SamplerInfo {
              constructor(minFilter = Filter.LINEAR, magFilter = Filter.LINEAR, mipFilter = Filter.NONE, addressU = Address.WRAP, addressV = Address.WRAP, addressW = Address.WRAP, maxAnisotropy = 0, cmpFunc = ComparisonFunc.ALWAYS) {
                this.minFilter = minFilter;
                this.magFilter = magFilter;
                this.mipFilter = mipFilter;
                this.addressU = addressU;
                this.addressV = addressV;
                this.addressW = addressW;
                this.maxAnisotropy = maxAnisotropy;
                this.cmpFunc = cmpFunc;
              }

              copy(info) {
                this.minFilter = info.minFilter;
                this.magFilter = info.magFilter;
                this.mipFilter = info.mipFilter;
                this.addressU = info.addressU;
                this.addressV = info.addressV;
                this.addressW = info.addressW;
                this.maxAnisotropy = info.maxAnisotropy;
                this.cmpFunc = info.cmpFunc;
                return this;
              }

            } exports('_', SamplerInfo);
            class Uniform {
              constructor(name = '', type = Type.UNKNOWN, count = 0) {
                this.name = name;
                this.type = type;
                this.count = count;
              }

              copy(info) {
                this.name = info.name;
                this.type = info.type;
                this.count = info.count;
                return this;
              }

            } exports('a_', Uniform);
            class UniformBlock {
              constructor(set = 0, binding = 0, name = '', members = [], count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.members = members;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                deepCopy(this.members, info.members, Uniform);
                this.count = info.count;
                return this;
              }

            } exports('a$', UniformBlock);
            class UniformSamplerTexture {
              constructor(set = 0, binding = 0, name = '', type = Type.UNKNOWN, count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.type = type;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.type = info.type;
                this.count = info.count;
                return this;
              }

            } exports('b0', UniformSamplerTexture);
            class UniformSampler {
              constructor(set = 0, binding = 0, name = '', count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.count = info.count;
                return this;
              }

            } exports('b1', UniformSampler);
            class UniformTexture {
              constructor(set = 0, binding = 0, name = '', type = Type.UNKNOWN, count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.type = type;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.type = info.type;
                this.count = info.count;
                return this;
              }

            } exports('b2', UniformTexture);
            class UniformStorageImage {
              constructor(set = 0, binding = 0, name = '', type = Type.UNKNOWN, count = 0, memoryAccess = MemoryAccessBit.READ_WRITE) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.type = type;
                this.count = count;
                this.memoryAccess = memoryAccess;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.type = info.type;
                this.count = info.count;
                this.memoryAccess = info.memoryAccess;
                return this;
              }

            } exports('b3', UniformStorageImage);
            class UniformStorageBuffer {
              constructor(set = 0, binding = 0, name = '', count = 0, memoryAccess = MemoryAccessBit.READ_WRITE) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.count = count;
                this.memoryAccess = memoryAccess;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.count = info.count;
                this.memoryAccess = info.memoryAccess;
                return this;
              }

            } exports('b4', UniformStorageBuffer);
            class UniformInputAttachment {
              constructor(set = 0, binding = 0, name = '', count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.count = info.count;
                return this;
              }

            } exports('b5', UniformInputAttachment);
            class ShaderStage {
              constructor(stage = ShaderStageFlagBit.NONE, source = '') {
                this.stage = stage;
                this.source = source;
              }

              copy(info) {
                this.stage = info.stage;
                this.source = info.source;
                return this;
              }

            } exports('b6', ShaderStage);
            class Attribute {
              constructor(name = '', format = Format.UNKNOWN, isNormalized = false, stream = 0, isInstanced = false, location = 0) {
                this.name = name;
                this.format = format;
                this.isNormalized = isNormalized;
                this.stream = stream;
                this.isInstanced = isInstanced;
                this.location = location;
              }

              copy(info) {
                this.name = info.name;
                this.format = info.format;
                this.isNormalized = info.isNormalized;
                this.stream = info.stream;
                this.isInstanced = info.isInstanced;
                this.location = info.location;
                return this;
              }

            } exports('b7', Attribute);
            class ShaderInfo {
              constructor(name = '', stages = [], attributes = [], blocks = [], buffers = [], samplerTextures = [], samplers = [], textures = [], images = [], subpassInputs = []) {
                this.name = name;
                this.stages = stages;
                this.attributes = attributes;
                this.blocks = blocks;
                this.buffers = buffers;
                this.samplerTextures = samplerTextures;
                this.samplers = samplers;
                this.textures = textures;
                this.images = images;
                this.subpassInputs = subpassInputs;
              }

              copy(info) {
                this.name = info.name;
                deepCopy(this.stages, info.stages, ShaderStage);
                deepCopy(this.attributes, info.attributes, Attribute);
                deepCopy(this.blocks, info.blocks, UniformBlock);
                deepCopy(this.buffers, info.buffers, UniformStorageBuffer);
                deepCopy(this.samplerTextures, info.samplerTextures, UniformSamplerTexture);
                deepCopy(this.samplers, info.samplers, UniformSampler);
                deepCopy(this.textures, info.textures, UniformTexture);
                deepCopy(this.images, info.images, UniformStorageImage);
                deepCopy(this.subpassInputs, info.subpassInputs, UniformInputAttachment);
                return this;
              }

            } exports('b8', ShaderInfo);
            class InputAssemblerInfo {
              constructor(attributes = [], vertexBuffers = [], indexBuffer = null, indirectBuffer = null) {
                this.attributes = attributes;
                this.vertexBuffers = vertexBuffers;
                this.indexBuffer = indexBuffer;
                this.indirectBuffer = indirectBuffer;
              }

              copy(info) {
                deepCopy(this.attributes, info.attributes, Attribute);
                this.vertexBuffers = info.vertexBuffers.slice();
                this.indexBuffer = info.indexBuffer;
                this.indirectBuffer = info.indirectBuffer;
                return this;
              }

            } exports('b9', InputAssemblerInfo);
            class ColorAttachment {
              constructor(format = Format.UNKNOWN, sampleCount = SampleCount.ONE, loadOp = LoadOp.CLEAR, storeOp = StoreOp.STORE, barrier = null, isGeneralLayout = false) {
                this.format = format;
                this.sampleCount = sampleCount;
                this.loadOp = loadOp;
                this.storeOp = storeOp;
                this.barrier = barrier;
                this.isGeneralLayout = isGeneralLayout;
              }

              copy(info) {
                this.format = info.format;
                this.sampleCount = info.sampleCount;
                this.loadOp = info.loadOp;
                this.storeOp = info.storeOp;
                this.barrier = info.barrier;
                this.isGeneralLayout = info.isGeneralLayout;
                return this;
              }

            } exports('ba', ColorAttachment);
            class DepthStencilAttachment {
              constructor(format = Format.UNKNOWN, sampleCount = SampleCount.ONE, depthLoadOp = LoadOp.CLEAR, depthStoreOp = StoreOp.STORE, stencilLoadOp = LoadOp.CLEAR, stencilStoreOp = StoreOp.STORE, barrier = null, isGeneralLayout = false) {
                this.format = format;
                this.sampleCount = sampleCount;
                this.depthLoadOp = depthLoadOp;
                this.depthStoreOp = depthStoreOp;
                this.stencilLoadOp = stencilLoadOp;
                this.stencilStoreOp = stencilStoreOp;
                this.barrier = barrier;
                this.isGeneralLayout = isGeneralLayout;
              }

              copy(info) {
                this.format = info.format;
                this.sampleCount = info.sampleCount;
                this.depthLoadOp = info.depthLoadOp;
                this.depthStoreOp = info.depthStoreOp;
                this.stencilLoadOp = info.stencilLoadOp;
                this.stencilStoreOp = info.stencilStoreOp;
                this.barrier = info.barrier;
                this.isGeneralLayout = info.isGeneralLayout;
                return this;
              }

            } exports('bb', DepthStencilAttachment);
            class SubpassInfo {
              constructor(inputs = [], colors = [], resolves = [], preserves = [], depthStencil = -1, depthStencilResolve = -1, depthResolveMode = ResolveMode.NONE, stencilResolveMode = ResolveMode.NONE) {
                this.inputs = inputs;
                this.colors = colors;
                this.resolves = resolves;
                this.preserves = preserves;
                this.depthStencil = depthStencil;
                this.depthStencilResolve = depthStencilResolve;
                this.depthResolveMode = depthResolveMode;
                this.stencilResolveMode = stencilResolveMode;
              }

              copy(info) {
                this.inputs = info.inputs.slice();
                this.colors = info.colors.slice();
                this.resolves = info.resolves.slice();
                this.preserves = info.preserves.slice();
                this.depthStencil = info.depthStencil;
                this.depthStencilResolve = info.depthStencilResolve;
                this.depthResolveMode = info.depthResolveMode;
                this.stencilResolveMode = info.stencilResolveMode;
                return this;
              }

            } exports('bc', SubpassInfo);
            class SubpassDependency {
              constructor(srcSubpass = 0, dstSubpass = 0, generalBarrier = null, bufferBarriers = null, buffers = null, bufferBarrierCount = 0, textureBarriers = null, textures = null, textureBarrierCount = 0) {
                this.srcSubpass = srcSubpass;
                this.dstSubpass = dstSubpass;
                this.generalBarrier = generalBarrier;
                this.bufferBarriers = bufferBarriers;
                this.buffers = buffers;
                this.bufferBarrierCount = bufferBarrierCount;
                this.textureBarriers = textureBarriers;
                this.textures = textures;
                this.textureBarrierCount = textureBarrierCount;
              }

              copy(info) {
                this.srcSubpass = info.srcSubpass;
                this.dstSubpass = info.dstSubpass;
                this.generalBarrier = info.generalBarrier;
                this.bufferBarriers = info.bufferBarriers;
                this.buffers = info.buffers;
                this.bufferBarrierCount = info.bufferBarrierCount;
                this.textureBarriers = info.textureBarriers;
                this.textures = info.textures;
                this.textureBarrierCount = info.textureBarrierCount;
                return this;
              }

            } exports('bd', SubpassDependency);
            class RenderPassInfo {
              constructor(colorAttachments = [], depthStencilAttachment = new DepthStencilAttachment(), subpasses = [], dependencies = []) {
                this.colorAttachments = colorAttachments;
                this.depthStencilAttachment = depthStencilAttachment;
                this.subpasses = subpasses;
                this.dependencies = dependencies;
              }

              copy(info) {
                deepCopy(this.colorAttachments, info.colorAttachments, ColorAttachment);
                this.depthStencilAttachment.copy(info.depthStencilAttachment);
                deepCopy(this.subpasses, info.subpasses, SubpassInfo);
                deepCopy(this.dependencies, info.dependencies, SubpassDependency);
                return this;
              }

            } exports('be', RenderPassInfo);
            class GeneralBarrierInfo {
              constructor(prevAccesses = AccessFlagBit.NONE, nextAccesses = AccessFlagBit.NONE, type = BarrierType.FULL) {
                this.prevAccesses = prevAccesses;
                this.nextAccesses = nextAccesses;
                this.type = type;
              }

              copy(info) {
                this.prevAccesses = info.prevAccesses;
                this.nextAccesses = info.nextAccesses;
                this.type = info.type;
                return this;
              }

            } exports('$', GeneralBarrierInfo);
            class TextureBarrierInfo {
              constructor(prevAccesses = AccessFlagBit.NONE, nextAccesses = AccessFlagBit.NONE, type = BarrierType.FULL, baseMipLevel = 0, levelCount = 1, baseSlice = 0, sliceCount = 1, discardContents = false, srcQueue = null, dstQueue = null) {
                this.prevAccesses = prevAccesses;
                this.nextAccesses = nextAccesses;
                this.type = type;
                this.baseMipLevel = baseMipLevel;
                this.levelCount = levelCount;
                this.baseSlice = baseSlice;
                this.sliceCount = sliceCount;
                this.discardContents = discardContents;
                this.srcQueue = srcQueue;
                this.dstQueue = dstQueue;
              }

              copy(info) {
                this.prevAccesses = info.prevAccesses;
                this.nextAccesses = info.nextAccesses;
                this.type = info.type;
                this.baseMipLevel = info.baseMipLevel;
                this.levelCount = info.levelCount;
                this.baseSlice = info.baseSlice;
                this.sliceCount = info.sliceCount;
                this.discardContents = info.discardContents;
                this.srcQueue = info.srcQueue;
                this.dstQueue = info.dstQueue;
                return this;
              }

            } exports('a0', TextureBarrierInfo);
            class BufferBarrierInfo {
              constructor(prevAccesses = AccessFlagBit.NONE, nextAccesses = AccessFlagBit.NONE, type = BarrierType.FULL, offset = 0, size = 0, discardContents = false, srcQueue = null, dstQueue = null) {
                this.prevAccesses = prevAccesses;
                this.nextAccesses = nextAccesses;
                this.type = type;
                this.offset = offset;
                this.size = size;
                this.discardContents = discardContents;
                this.srcQueue = srcQueue;
                this.dstQueue = dstQueue;
              }

              copy(info) {
                this.prevAccesses = info.prevAccesses;
                this.nextAccesses = info.nextAccesses;
                this.type = info.type;
                this.offset = info.offset;
                this.size = info.size;
                this.discardContents = info.discardContents;
                this.srcQueue = info.srcQueue;
                this.dstQueue = info.dstQueue;
                return this;
              }

            } exports('bf', BufferBarrierInfo);
            class FramebufferInfo {
              constructor(renderPass = null, colorTextures = [], depthStencilTexture = null) {
                this.renderPass = renderPass;
                this.colorTextures = colorTextures;
                this.depthStencilTexture = depthStencilTexture;
              }

              copy(info) {
                this.renderPass = info.renderPass;
                this.colorTextures = info.colorTextures.slice();
                this.depthStencilTexture = info.depthStencilTexture;
                return this;
              }

            } exports('bg', FramebufferInfo);
            class DescriptorSetLayoutBinding {
              constructor(binding = -1, descriptorType = DescriptorType.UNKNOWN, count = 0, stageFlags = ShaderStageFlagBit.NONE, immutableSamplers = []) {
                this.binding = binding;
                this.descriptorType = descriptorType;
                this.count = count;
                this.stageFlags = stageFlags;
                this.immutableSamplers = immutableSamplers;
              }

              copy(info) {
                this.binding = info.binding;
                this.descriptorType = info.descriptorType;
                this.count = info.count;
                this.stageFlags = info.stageFlags;
                this.immutableSamplers = info.immutableSamplers.slice();
                return this;
              }

            } exports('bh', DescriptorSetLayoutBinding);
            class DescriptorSetLayoutInfo {
              constructor(bindings = []) {
                this.bindings = bindings;
              }

              copy(info) {
                deepCopy(this.bindings, info.bindings, DescriptorSetLayoutBinding);
                return this;
              }

            } exports('bi', DescriptorSetLayoutInfo);
            class DescriptorSetInfo {
              constructor(layout = null) {
                this.layout = layout;
              }

              copy(info) {
                this.layout = info.layout;
                return this;
              }

            } exports('bj', DescriptorSetInfo);
            class PipelineLayoutInfo {
              constructor(setLayouts = []) {
                this.setLayouts = setLayouts;
              }

              copy(info) {
                this.setLayouts = info.setLayouts.slice();
                return this;
              }

            } exports('bk', PipelineLayoutInfo);
            class InputState {
              constructor(attributes = []) {
                this.attributes = attributes;
              }

              copy(info) {
                deepCopy(this.attributes, info.attributes, Attribute);
                return this;
              }

            } exports('bl', InputState);
            class CommandBufferInfo {
              constructor(queue = null, type = CommandBufferType.PRIMARY) {
                this.queue = queue;
                this.type = type;
              }

              copy(info) {
                this.queue = info.queue;
                this.type = info.type;
                return this;
              }

            } exports('bm', CommandBufferInfo);
            class QueueInfo {
              constructor(type = QueueType.GRAPHICS) {
                this.type = type;
              }

              copy(info) {
                this.type = info.type;
                return this;
              }

            } exports('bn', QueueInfo);
            class QueryPoolInfo {
              constructor(type = QueryType.OCCLUSION, maxQueryObjects = 32767, forceWait = true) {
                this.type = type;
                this.maxQueryObjects = maxQueryObjects;
                this.forceWait = forceWait;
              }

              copy(info) {
                this.type = info.type;
                this.maxQueryObjects = info.maxQueryObjects;
                this.forceWait = info.forceWait;
                return this;
              }

            } exports('bo', QueryPoolInfo);
            class FormatInfo {
              constructor(name = '', size = 0, count = 0, type = FormatType.NONE, hasAlpha = false, hasDepth = false, hasStencil = false, isCompressed = false) {
                this.name = name;
                this.size = size;
                this.count = count;
                this.type = type;
                this.hasAlpha = hasAlpha;
                this.hasDepth = hasDepth;
                this.hasStencil = hasStencil;
                this.isCompressed = isCompressed;
              }

            } exports('bp', FormatInfo);
            class MemoryStatus {
              constructor(bufferSize = 0, textureSize = 0) {
                this.bufferSize = bufferSize;
                this.textureSize = textureSize;
              }

              copy(info) {
                this.bufferSize = info.bufferSize;
                this.textureSize = info.textureSize;
                return this;
              }

            } exports('bq', MemoryStatus);
            class DynamicStencilStates {
              constructor(writeMask = 0, compareMask = 0, reference = 0) {
                this.writeMask = writeMask;
                this.compareMask = compareMask;
                this.reference = reference;
              }

              copy(info) {
                this.writeMask = info.writeMask;
                this.compareMask = info.compareMask;
                this.reference = info.reference;
                return this;
              }

            } exports('br', DynamicStencilStates);
            class DynamicStates {
              constructor(viewport = new Viewport(), scissor = new Rect$1(), blendConstant = new Color$1(), lineWidth = 1, depthBiasConstant = 0, depthBiasClamp = 0, depthBiasSlope = 0, depthMinBounds = 0, depthMaxBounds = 0, stencilStatesFront = new DynamicStencilStates(), stencilStatesBack = new DynamicStencilStates()) {
                this.viewport = viewport;
                this.scissor = scissor;
                this.blendConstant = blendConstant;
                this.lineWidth = lineWidth;
                this.depthBiasConstant = depthBiasConstant;
                this.depthBiasClamp = depthBiasClamp;
                this.depthBiasSlope = depthBiasSlope;
                this.depthMinBounds = depthMinBounds;
                this.depthMaxBounds = depthMaxBounds;
                this.stencilStatesFront = stencilStatesFront;
                this.stencilStatesBack = stencilStatesBack;
              }

              copy(info) {
                this.viewport.copy(info.viewport);
                this.scissor.copy(info.scissor);
                this.blendConstant.copy(info.blendConstant);
                this.lineWidth = info.lineWidth;
                this.depthBiasConstant = info.depthBiasConstant;
                this.depthBiasClamp = info.depthBiasClamp;
                this.depthBiasSlope = info.depthBiasSlope;
                this.depthMinBounds = info.depthMinBounds;
                this.depthMaxBounds = info.depthMaxBounds;
                this.stencilStatesFront.copy(info.stencilStatesFront);
                this.stencilStatesBack.copy(info.stencilStatesBack);
                return this;
              }

            } exports('bs', DynamicStates);
            class GFXObject extends GCObject {
              get objectType() {
                return this._objectType;
              }

              get objectID() {
                return this._objectID;
              }

              get typedID() {
                return this._typedID;
              }

              constructor(objectType) {
                super();
                this._objectType = ObjectType.UNKNOWN;
                this._objectID = 0;
                this._typedID = 0;
                this._objectType = objectType;
                this._objectID = GFXObject._idTable[ObjectType.UNKNOWN]++;
                this._typedID = GFXObject._idTable[objectType]++;
              }

            } exports('K', GFXObject);
            GFXObject._idTable = Array(ObjectType.COUNT).fill(1 << 16);
            let AttributeName;

            (function (AttributeName) {
              AttributeName["ATTR_POSITION"] = "a_position";
              AttributeName["ATTR_NORMAL"] = "a_normal";
              AttributeName["ATTR_TANGENT"] = "a_tangent";
              AttributeName["ATTR_BITANGENT"] = "a_bitangent";
              AttributeName["ATTR_WEIGHTS"] = "a_weights";
              AttributeName["ATTR_JOINTS"] = "a_joints";
              AttributeName["ATTR_COLOR"] = "a_color";
              AttributeName["ATTR_COLOR1"] = "a_color1";
              AttributeName["ATTR_COLOR2"] = "a_color2";
              AttributeName["ATTR_TEX_COORD"] = "a_texCoord";
              AttributeName["ATTR_TEX_COORD1"] = "a_texCoord1";
              AttributeName["ATTR_TEX_COORD2"] = "a_texCoord2";
              AttributeName["ATTR_TEX_COORD3"] = "a_texCoord3";
              AttributeName["ATTR_TEX_COORD4"] = "a_texCoord4";
              AttributeName["ATTR_TEX_COORD5"] = "a_texCoord5";
              AttributeName["ATTR_TEX_COORD6"] = "a_texCoord6";
              AttributeName["ATTR_TEX_COORD7"] = "a_texCoord7";
              AttributeName["ATTR_TEX_COORD8"] = "a_texCoord8";
              AttributeName["ATTR_BATCH_ID"] = "a_batch_id";
              AttributeName["ATTR_BATCH_UV"] = "a_batch_uv";
            })(AttributeName || (AttributeName = exports('bt', {})));

            const FormatInfos = exports('bu', Object.freeze([new FormatInfo('UNKNOWN', 0, 0, FormatType.NONE, false, false, false, false), new FormatInfo('A8', 1, 1, FormatType.UNORM, true, false, false, false), new FormatInfo('L8', 1, 1, FormatType.UNORM, false, false, false, false), new FormatInfo('LA8', 1, 2, FormatType.UNORM, true, false, false, false), new FormatInfo('R8', 1, 1, FormatType.UNORM, false, false, false, false), new FormatInfo('R8SN', 1, 1, FormatType.SNORM, false, false, false, false), new FormatInfo('R8UI', 1, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R8I', 1, 1, FormatType.INT, false, false, false, false), new FormatInfo('R16F', 2, 1, FormatType.FLOAT, false, false, false, false), new FormatInfo('R16UI', 2, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R16I', 2, 1, FormatType.INT, false, false, false, false), new FormatInfo('R32F', 4, 1, FormatType.FLOAT, false, false, false, false), new FormatInfo('R32UI', 4, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R32I', 4, 1, FormatType.INT, false, false, false, false), new FormatInfo('RG8', 2, 2, FormatType.UNORM, false, false, false, false), new FormatInfo('RG8SN', 2, 2, FormatType.SNORM, false, false, false, false), new FormatInfo('RG8UI', 2, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG8I', 2, 2, FormatType.INT, false, false, false, false), new FormatInfo('RG16F', 4, 2, FormatType.FLOAT, false, false, false, false), new FormatInfo('RG16UI', 4, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG16I', 4, 2, FormatType.INT, false, false, false, false), new FormatInfo('RG32F', 8, 2, FormatType.FLOAT, false, false, false, false), new FormatInfo('RG32UI', 8, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG32I', 8, 2, FormatType.INT, false, false, false, false), new FormatInfo('RGB8', 3, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('SRGB8', 3, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('RGB8SN', 3, 3, FormatType.SNORM, false, false, false, false), new FormatInfo('RGB8UI', 3, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB8I', 3, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGB16F', 6, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB16UI', 6, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB16I', 6, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGB32F', 12, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB32UI', 12, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB32I', 12, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGBA8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('BGRA8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('SRGB8_A8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGBA8SN', 4, 4, FormatType.SNORM, true, false, false, false), new FormatInfo('RGBA8UI', 4, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA8I', 4, 4, FormatType.INT, true, false, false, false), new FormatInfo('RGBA16F', 8, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('RGBA16UI', 8, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA16I', 8, 4, FormatType.INT, true, false, false, false), new FormatInfo('RGBA32F', 16, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('RGBA32UI', 16, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA32I', 16, 4, FormatType.INT, true, false, false, false), new FormatInfo('R5G6B5', 2, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('R11G11B10F', 4, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB5A1', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGBA4', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGB10A2', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGB10A2UI', 2, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGB9E5', 2, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('DEPTH', 4, 1, FormatType.FLOAT, false, true, false, false), new FormatInfo('DEPTH_STENCIL', 5, 2, FormatType.FLOAT, false, true, true, false), new FormatInfo('BC1', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('BC1_ALPHA', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC1_SRGB', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('BC1_SRGB_ALPHA', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC2', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC2_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC3', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC3_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC4', 1, 1, FormatType.UNORM, false, false, false, true), new FormatInfo('BC4_SNORM', 1, 1, FormatType.SNORM, false, false, false, true), new FormatInfo('BC5', 1, 2, FormatType.UNORM, false, false, false, true), new FormatInfo('BC5_SNORM', 1, 2, FormatType.SNORM, false, false, false, true), new FormatInfo('BC6H_UF16', 1, 3, FormatType.UFLOAT, false, false, false, true), new FormatInfo('BC6H_SF16', 1, 3, FormatType.FLOAT, false, false, false, true), new FormatInfo('BC7', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC7_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC_RGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_RGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_SRGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_RGB8_A1', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_SRGB8_A1', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_RGBA8', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_SRGB8_A8', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('EAC_R11', 1, 1, FormatType.UNORM, false, false, false, true), new FormatInfo('EAC_R11SN', 1, 1, FormatType.SNORM, false, false, false, true), new FormatInfo('EAC_RG11', 2, 2, FormatType.UNORM, false, false, false, true), new FormatInfo('EAC_RG11SN', 2, 2, FormatType.SNORM, false, false, false, true), new FormatInfo('PVRTC_RGB2', 2, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('PVRTC_RGBA2', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC_RGB4', 2, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('PVRTC_RGBA4', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC2_2BPP', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC2_4BPP', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_4x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_5x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_5x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_6x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_6x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_12x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_12x12', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_4x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_5x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_5x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_6x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_6x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_12x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_12x12', 1, 4, FormatType.UNORM, true, false, false, true)]));
            const DESCRIPTOR_BUFFER_TYPE = exports('L', DescriptorType.UNIFORM_BUFFER | DescriptorType.DYNAMIC_UNIFORM_BUFFER | DescriptorType.STORAGE_BUFFER | DescriptorType.DYNAMIC_STORAGE_BUFFER);
            const DESCRIPTOR_SAMPLER_TYPE = exports('N', DescriptorType.SAMPLER_TEXTURE | DescriptorType.SAMPLER | DescriptorType.TEXTURE | DescriptorType.STORAGE_IMAGE | DescriptorType.INPUT_ATTACHMENT);
            const DESCRIPTOR_DYNAMIC_TYPE = exports('bv', DescriptorType.DYNAMIC_STORAGE_BUFFER | DescriptorType.DYNAMIC_UNIFORM_BUFFER);
            const DRAW_INFO_SIZE = exports('bw', 28);
            function IsPowerOf2(x) {
              return x > 0 && (x & x - 1) === 0;
            }
            function FormatSize(format, width, height, depth) {
              if (!FormatInfos[format].isCompressed) {
                return width * height * depth * FormatInfos[format].size;
              } else {
                switch (format) {
                  case Format.BC1:
                  case Format.BC1_ALPHA:
                  case Format.BC1_SRGB:
                  case Format.BC1_SRGB_ALPHA:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

                  case Format.BC2:
                  case Format.BC2_SRGB:
                  case Format.BC3:
                  case Format.BC3_SRGB:
                  case Format.BC4:
                  case Format.BC4_SNORM:
                  case Format.BC6H_SF16:
                  case Format.BC6H_UF16:
                  case Format.BC7:
                  case Format.BC7_SRGB:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

                  case Format.BC5:
                  case Format.BC5_SNORM:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 32 * depth;

                  case Format.ETC_RGB8:
                  case Format.ETC2_RGB8:
                  case Format.ETC2_SRGB8:
                  case Format.ETC2_RGB8_A1:
                  case Format.EAC_R11:
                  case Format.EAC_R11SN:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

                  case Format.ETC2_RGBA8:
                  case Format.ETC2_SRGB8_A1:
                  case Format.EAC_RG11:
                  case Format.EAC_RG11SN:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

                  case Format.PVRTC_RGB2:
                  case Format.PVRTC_RGBA2:
                  case Format.PVRTC2_2BPP:
                    return Math.ceil(width / 8) * Math.ceil(height / 4) * 8 * depth;

                  case Format.PVRTC_RGB4:
                  case Format.PVRTC_RGBA4:
                  case Format.PVRTC2_4BPP:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

                  case Format.ASTC_RGBA_4X4:
                  case Format.ASTC_SRGBA_4X4:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

                  case Format.ASTC_RGBA_5X4:
                  case Format.ASTC_SRGBA_5X4:
                    return Math.ceil(width / 5) * Math.ceil(height / 4) * 16 * depth;

                  case Format.ASTC_RGBA_5X5:
                  case Format.ASTC_SRGBA_5X5:
                    return Math.ceil(width / 5) * Math.ceil(height / 5) * 16 * depth;

                  case Format.ASTC_RGBA_6X5:
                  case Format.ASTC_SRGBA_6X5:
                    return Math.ceil(width / 6) * Math.ceil(height / 5) * 16 * depth;

                  case Format.ASTC_RGBA_6X6:
                  case Format.ASTC_SRGBA_6X6:
                    return Math.ceil(width / 6) * Math.ceil(height / 6) * 16 * depth;

                  case Format.ASTC_RGBA_8X5:
                  case Format.ASTC_SRGBA_8X5:
                    return Math.ceil(width / 8) * Math.ceil(height / 5) * 16 * depth;

                  case Format.ASTC_RGBA_8X6:
                  case Format.ASTC_SRGBA_8X6:
                    return Math.ceil(width / 8) * Math.ceil(height / 6) * 16 * depth;

                  case Format.ASTC_RGBA_8X8:
                  case Format.ASTC_SRGBA_8X8:
                    return Math.ceil(width / 8) * Math.ceil(height / 8) * 16 * depth;

                  case Format.ASTC_RGBA_10X5:
                  case Format.ASTC_SRGBA_10X5:
                    return Math.ceil(width / 10) * Math.ceil(height / 5) * 16 * depth;

                  case Format.ASTC_RGBA_10X6:
                  case Format.ASTC_SRGBA_10X6:
                    return Math.ceil(width / 10) * Math.ceil(height / 6) * 16 * depth;

                  case Format.ASTC_RGBA_10X8:
                  case Format.ASTC_SRGBA_10X8:
                    return Math.ceil(width / 10) * Math.ceil(height / 8) * 16 * depth;

                  case Format.ASTC_RGBA_10X10:
                  case Format.ASTC_SRGBA_10X10:
                    return Math.ceil(width / 10) * Math.ceil(height / 10) * 16 * depth;

                  case Format.ASTC_RGBA_12X10:
                  case Format.ASTC_SRGBA_12X10:
                    return Math.ceil(width / 12) * Math.ceil(height / 10) * 16 * depth;

                  case Format.ASTC_RGBA_12X12:
                  case Format.ASTC_SRGBA_12X12:
                    return Math.ceil(width / 12) * Math.ceil(height / 12) * 16 * depth;

                  default:
                    {
                      return 0;
                    }
                }
              }
            }
            function FormatSurfaceSize(format, width, height, depth, mips) {
              let size = 0;

              for (let i = 0; i < mips; ++i) {
                size += FormatSize(format, width, height, depth);
                width = Math.max(width >> 1, 1);
                height = Math.max(height >> 1, 1);
              }

              return size;
            }
            const _type2size = [0, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 16, 24, 32, 24, 36, 48, 32, 48, 64, 4, 4, 4, 4, 4, 4];
            function GetTypeSize(type) {
              return _type2size[type] || 0;
            }
            function getTypedArrayConstructor(info) {
              if (info.isCompressed) {
                return Uint8Array;
              }

              const stride = info.size / info.count;

              switch (info.type) {
                case FormatType.UNORM:
                case FormatType.UINT:
                  {
                    switch (stride) {
                      case 1:
                        return Uint8Array;

                      case 2:
                        return Uint16Array;

                      case 4:
                        return Uint32Array;

                      default:
                        return Uint8Array;
                    }
                  }

                case FormatType.SNORM:
                case FormatType.INT:
                  {
                    switch (stride) {
                      case 1:
                        return Int8Array;

                      case 2:
                        return Int16Array;

                      case 4:
                        return Int32Array;

                      default:
                        return Int8Array;
                    }
                  }

                case FormatType.FLOAT:
                  {
                    return Float32Array;
                  }
              }

              return Float32Array;
            }
            function formatAlignment(format) {
              switch (format) {
                case Format.BC1:
                case Format.BC1_ALPHA:
                case Format.BC1_SRGB:
                case Format.BC1_SRGB_ALPHA:
                case Format.BC2:
                case Format.BC2_SRGB:
                case Format.BC3:
                case Format.BC3_SRGB:
                case Format.BC4:
                case Format.BC4_SNORM:
                case Format.BC6H_SF16:
                case Format.BC6H_UF16:
                case Format.BC7:
                case Format.BC7_SRGB:
                case Format.BC5:
                case Format.BC5_SNORM:
                case Format.ETC_RGB8:
                case Format.ETC2_RGB8:
                case Format.ETC2_SRGB8:
                case Format.ETC2_RGB8_A1:
                case Format.EAC_R11:
                case Format.EAC_R11SN:
                case Format.ETC2_RGBA8:
                case Format.ETC2_SRGB8_A1:
                case Format.EAC_RG11:
                case Format.EAC_RG11SN:
                  return {
                    width: 4,
                    height: 4
                  };

                case Format.PVRTC_RGB2:
                case Format.PVRTC_RGBA2:
                case Format.PVRTC2_2BPP:
                  return {
                    width: 8,
                    height: 4
                  };

                case Format.PVRTC_RGB4:
                case Format.PVRTC_RGBA4:
                case Format.PVRTC2_4BPP:
                  return {
                    width: 4,
                    height: 4
                  };

                case Format.ASTC_RGBA_4X4:
                case Format.ASTC_SRGBA_4X4:
                  return {
                    width: 4,
                    height: 4
                  };

                case Format.ASTC_RGBA_5X4:
                case Format.ASTC_SRGBA_5X4:
                  return {
                    width: 5,
                    height: 4
                  };

                case Format.ASTC_RGBA_5X5:
                case Format.ASTC_SRGBA_5X5:
                  return {
                    width: 5,
                    height: 5
                  };

                case Format.ASTC_RGBA_6X5:
                case Format.ASTC_SRGBA_6X5:
                  return {
                    width: 6,
                    height: 5
                  };

                case Format.ASTC_RGBA_6X6:
                case Format.ASTC_SRGBA_6X6:
                  return {
                    width: 6,
                    height: 6
                  };

                case Format.ASTC_RGBA_8X5:
                case Format.ASTC_SRGBA_8X5:
                  return {
                    width: 8,
                    height: 5
                  };

                case Format.ASTC_RGBA_8X6:
                case Format.ASTC_SRGBA_8X6:
                  return {
                    width: 8,
                    height: 6
                  };

                case Format.ASTC_RGBA_8X8:
                case Format.ASTC_SRGBA_8X8:
                  return {
                    width: 8,
                    height: 8
                  };

                case Format.ASTC_RGBA_10X5:
                case Format.ASTC_SRGBA_10X5:
                  return {
                    width: 10,
                    height: 5
                  };

                case Format.ASTC_RGBA_10X6:
                case Format.ASTC_SRGBA_10X6:
                  return {
                    width: 10,
                    height: 6
                  };

                case Format.ASTC_RGBA_10X8:
                case Format.ASTC_SRGBA_10X8:
                  return {
                    width: 10,
                    height: 8
                  };

                case Format.ASTC_RGBA_10X10:
                case Format.ASTC_SRGBA_10X10:
                  return {
                    width: 10,
                    height: 10
                  };

                case Format.ASTC_RGBA_12X10:
                case Format.ASTC_SRGBA_12X10:
                  return {
                    width: 12,
                    height: 10
                  };

                case Format.ASTC_RGBA_12X12:
                case Format.ASTC_SRGBA_12X12:
                  return {
                    width: 12,
                    height: 12
                  };

                default:
                  return {
                    width: 1,
                    height: 1
                  };
              }
            }
            function alignTo(size, alignment) {
              return Math.ceil(size / alignment) * alignment;
            }

            var defines = /*#__PURE__*/Object.freeze({
                __proto__: null,
                get ObjectType () { return ObjectType; },
                get Status () { return Status; },
                get API () { return API; },
                get SurfaceTransform () { return SurfaceTransform; },
                get Feature () { return Feature; },
                get Format () { return Format; },
                get FormatType () { return FormatType; },
                get Type () { return Type; },
                get BufferUsageBit () { return BufferUsageBit; },
                get BufferFlagBit () { return BufferFlagBit; },
                get MemoryAccessBit () { return MemoryAccessBit; },
                get MemoryUsageBit () { return MemoryUsageBit; },
                get TextureType () { return TextureType; },
                get TextureUsageBit () { return TextureUsageBit; },
                get TextureFlagBit () { return TextureFlagBit; },
                get FormatFeatureBit () { return FormatFeatureBit; },
                get SampleCount () { return SampleCount; },
                get VsyncMode () { return VsyncMode; },
                get Filter () { return Filter; },
                get Address () { return Address; },
                get ComparisonFunc () { return ComparisonFunc; },
                get StencilOp () { return StencilOp; },
                get BlendFactor () { return BlendFactor; },
                get BlendOp () { return BlendOp; },
                get ColorMask () { return ColorMask; },
                get ShaderStageFlagBit () { return ShaderStageFlagBit; },
                get LoadOp () { return LoadOp; },
                get StoreOp () { return StoreOp; },
                get AccessFlagBit () { return AccessFlagBit; },
                get ResolveMode () { return ResolveMode; },
                get PipelineBindPoint () { return PipelineBindPoint; },
                get PrimitiveMode () { return PrimitiveMode; },
                get PolygonMode () { return PolygonMode; },
                get ShadeModel () { return ShadeModel; },
                get CullMode () { return CullMode; },
                get DynamicStateFlagBit () { return DynamicStateFlagBit; },
                get StencilFace () { return StencilFace; },
                get DescriptorType () { return DescriptorType; },
                get QueueType () { return QueueType; },
                get QueryType () { return QueryType; },
                get CommandBufferType () { return CommandBufferType; },
                get ClearFlagBit () { return ClearFlagBit; },
                get BarrierType () { return BarrierType; },
                get PassType () { return PassType; },
                Size: Size$1,
                DeviceCaps: DeviceCaps,
                DeviceOptions: DeviceOptions,
                Offset: Offset,
                Rect: Rect$1,
                Extent: Extent,
                TextureSubresLayers: TextureSubresLayers,
                TextureSubresRange: TextureSubresRange,
                TextureCopy: TextureCopy,
                TextureBlit: TextureBlit,
                BufferTextureCopy: BufferTextureCopy,
                Viewport: Viewport,
                Color: Color$1,
                BindingMappingInfo: BindingMappingInfo,
                SwapchainInfo: SwapchainInfo,
                DeviceInfo: DeviceInfo,
                BufferInfo: BufferInfo,
                BufferViewInfo: BufferViewInfo,
                DrawInfo: DrawInfo,
                DispatchInfo: DispatchInfo,
                IndirectBuffer: IndirectBuffer,
                TextureInfo: TextureInfo,
                TextureViewInfo: TextureViewInfo,
                SamplerInfo: SamplerInfo,
                Uniform: Uniform,
                UniformBlock: UniformBlock,
                UniformSamplerTexture: UniformSamplerTexture,
                UniformSampler: UniformSampler,
                UniformTexture: UniformTexture,
                UniformStorageImage: UniformStorageImage,
                UniformStorageBuffer: UniformStorageBuffer,
                UniformInputAttachment: UniformInputAttachment,
                ShaderStage: ShaderStage,
                Attribute: Attribute,
                ShaderInfo: ShaderInfo,
                InputAssemblerInfo: InputAssemblerInfo,
                ColorAttachment: ColorAttachment,
                DepthStencilAttachment: DepthStencilAttachment,
                SubpassInfo: SubpassInfo,
                SubpassDependency: SubpassDependency,
                RenderPassInfo: RenderPassInfo,
                GeneralBarrierInfo: GeneralBarrierInfo,
                TextureBarrierInfo: TextureBarrierInfo,
                BufferBarrierInfo: BufferBarrierInfo,
                FramebufferInfo: FramebufferInfo,
                DescriptorSetLayoutBinding: DescriptorSetLayoutBinding,
                DescriptorSetLayoutInfo: DescriptorSetLayoutInfo,
                DescriptorSetInfo: DescriptorSetInfo,
                PipelineLayoutInfo: PipelineLayoutInfo,
                InputState: InputState,
                CommandBufferInfo: CommandBufferInfo,
                QueueInfo: QueueInfo,
                QueryPoolInfo: QueryPoolInfo,
                FormatInfo: FormatInfo,
                MemoryStatus: MemoryStatus,
                DynamicStencilStates: DynamicStencilStates,
                DynamicStates: DynamicStates,
                GFXObject: GFXObject,
                get AttributeName () { return AttributeName; },
                FormatInfos: FormatInfos,
                DESCRIPTOR_BUFFER_TYPE: DESCRIPTOR_BUFFER_TYPE,
                DESCRIPTOR_SAMPLER_TYPE: DESCRIPTOR_SAMPLER_TYPE,
                DESCRIPTOR_DYNAMIC_TYPE: DESCRIPTOR_DYNAMIC_TYPE,
                DRAW_INFO_SIZE: DRAW_INFO_SIZE,
                IsPowerOf2: IsPowerOf2,
                FormatSize: FormatSize,
                FormatSurfaceSize: FormatSurfaceSize,
                GetTypeSize: GetTypeSize,
                getTypedArrayConstructor: getTypedArrayConstructor,
                formatAlignment: formatAlignment,
                alignTo: alignTo
            });

            class RasterizerState {
              constructor(isDiscard = false, polygonMode = PolygonMode.FILL, shadeModel = ShadeModel.GOURAND, cullMode = CullMode.BACK, isFrontFaceCCW = true, depthBiasEnabled = false, depthBias = 0, depthBiasClamp = 0.0, depthBiasSlop = 0.0, isDepthClip = true, isMultisample = false, lineWidth = 1.0) {
                this._nativeObj = void 0;
                this._isDiscard = false;
                this._polygonMode = PolygonMode.FILL;
                this._shadeModel = ShadeModel.GOURAND;
                this._cullMode = CullMode.BACK;
                this._isFrontFaceCCW = true;
                this._depthBiasEnabled = false;
                this._depthBias = 0;
                this._depthBiasClamp = 0.0;
                this._depthBiasSlop = 0.0;
                this._isDepthClip = true;
                this._isMultisample = false;
                this._lineWidth = 1.0;
                this._nativeObj = new gfx.RasterizerState();
                this.assignProperties(isDiscard, polygonMode, shadeModel, cullMode, isFrontFaceCCW, depthBiasEnabled, depthBias, depthBiasClamp, depthBiasSlop, isDepthClip, isMultisample, lineWidth);
              }

              get native() {
                return this._nativeObj;
              }

              get isDiscard() {
                return this._isDiscard;
              }

              set isDiscard(val) {
                this._isDiscard = val;
                this._nativeObj.isDiscard = val;
              }

              get polygonMode() {
                return this._polygonMode;
              }

              set polygonMode(val) {
                this._polygonMode = val;
                this._nativeObj.polygonMode = val;
              }

              get shadeModel() {
                return this._shadeModel;
              }

              set shadeModel(val) {
                this._shadeModel = val;
                this._nativeObj.shadeModel = val;
              }

              get cullMode() {
                return this._cullMode;
              }

              set cullMode(val) {
                this._cullMode = val;
                this._nativeObj.cullMode = val;
              }

              get isFrontFaceCCW() {
                return this._isFrontFaceCCW;
              }

              set isFrontFaceCCW(val) {
                this._isFrontFaceCCW = val;
                this._nativeObj.isFrontFaceCCW = val;
              }

              get depthBiasEnabled() {
                return this._depthBiasEnabled;
              }

              set depthBiasEnabled(val) {
                this._depthBiasEnabled = val;
                this._nativeObj.depthBiasEnabled = val;
              }

              get depthBias() {
                return this._depthBias;
              }

              set depthBias(val) {
                this._depthBias = val;
                this._nativeObj.depthBias = val;
              }

              get depthBiasClamp() {
                return this._depthBiasClamp;
              }

              set depthBiasClamp(val) {
                this._depthBiasClamp = val;
                this._nativeObj.depthBiasClamp = val;
              }

              get depthBiasSlop() {
                return this._depthBiasSlop;
              }

              set depthBiasSlop(val) {
                this._depthBiasSlop = val;
                this._nativeObj.depthBiasSlop = val;
              }

              get isDepthClip() {
                return this._isDepthClip;
              }

              set isDepthClip(val) {
                this._isDepthClip = val;
                this._nativeObj.isDepthClip = val;
              }

              get isMultisample() {
                return this._isMultisample;
              }

              set isMultisample(val) {
                this._isMultisample = val;
                this._nativeObj.isMultisample = val;
              }

              get lineWidth() {
                return this._lineWidth;
              }

              set lineWidth(val) {
                this._lineWidth = val;
                this._nativeObj.lineWidth = val;
              }

              reset() {
                this.assignProperties(false, PolygonMode.FILL, ShadeModel.GOURAND, CullMode.BACK, true, false, 0, 0.0, 0.0, true, false, 1.0);
              }

              assign(rs) {
                if (!rs) return;
                this.assignProperties(rs.isDiscard, rs.polygonMode, rs.shadeModel, rs.cullMode, rs.isFrontFaceCCW, rs.depthBiasEnabled, rs.depthBias, rs.depthBiasClamp, rs.depthBiasSlop, rs.isDepthClip, rs.isMultisample, rs.lineWidth);
              }

              destroy() {
                this._nativeObj = null;
              }

              assignProperties(isDiscard, polygonMode, shadeModel, cullMode, isFrontFaceCCW, depthBiasEnabled, depthBias, depthBiasClamp, depthBiasSlop, isDepthClip, isMultisample, lineWidth) {
                if (isDiscard !== undefined) this.isDiscard = isDiscard;
                if (polygonMode !== undefined) this.polygonMode = polygonMode;
                if (shadeModel !== undefined) this.shadeModel = shadeModel;
                if (cullMode !== undefined) this.cullMode = cullMode;
                if (isFrontFaceCCW !== undefined) this.isFrontFaceCCW = isFrontFaceCCW;
                if (depthBiasEnabled !== undefined) this.depthBiasEnabled = depthBiasEnabled;
                if (depthBias !== undefined) this.depthBias = depthBias;
                if (depthBiasClamp !== undefined) this.depthBiasClamp = depthBiasClamp;
                if (depthBiasSlop !== undefined) this.depthBiasSlop = depthBiasSlop;
                if (isDepthClip !== undefined) this.isDepthClip = isDepthClip;
                if (isMultisample !== undefined) this.isMultisample = isMultisample;
                if (lineWidth !== undefined) this.lineWidth = lineWidth;
              }

            } exports('bF', RasterizerState);
            class DepthStencilState {
              constructor(depthTest = true, depthWrite = true, depthFunc = ComparisonFunc.LESS, stencilTestFront = false, stencilFuncFront = ComparisonFunc.ALWAYS, stencilReadMaskFront = 0xffff, stencilWriteMaskFront = 0xffff, stencilFailOpFront = StencilOp.KEEP, stencilZFailOpFront = StencilOp.KEEP, stencilPassOpFront = StencilOp.KEEP, stencilRefFront = 1, stencilTestBack = false, stencilFuncBack = ComparisonFunc.ALWAYS, stencilReadMaskBack = 0xffff, stencilWriteMaskBack = 0xffff, stencilFailOpBack = StencilOp.KEEP, stencilZFailOpBack = StencilOp.KEEP, stencilPassOpBack = StencilOp.KEEP, stencilRefBack = 1) {
                this._nativeObj = void 0;
                this._depthTest = true;
                this._depthWrite = true;
                this._depthFunc = ComparisonFunc.LESS;
                this._stencilTestFront = false;
                this._stencilFuncFront = ComparisonFunc.ALWAYS;
                this._stencilReadMaskFront = 0xffff;
                this._stencilWriteMaskFront = 0xffff;
                this._stencilFailOpFront = StencilOp.KEEP;
                this._stencilZFailOpFront = StencilOp.KEEP;
                this._stencilPassOpFront = StencilOp.KEEP;
                this._stencilRefFront = 1;
                this._stencilTestBack = false;
                this._stencilFuncBack = ComparisonFunc.ALWAYS;
                this._stencilReadMaskBack = 0xffff;
                this._stencilWriteMaskBack = 0xffff;
                this._stencilFailOpBack = StencilOp.KEEP;
                this._stencilZFailOpBack = StencilOp.KEEP;
                this._stencilPassOpBack = StencilOp.KEEP;
                this._stencilRefBack = 1;
                this._nativeObj = new gfx.DepthStencilState();
                this.assignProperties(depthTest, depthWrite, depthFunc, stencilTestFront, stencilFuncFront, stencilReadMaskFront, stencilWriteMaskFront, stencilFailOpFront, stencilZFailOpFront, stencilPassOpFront, stencilRefFront, stencilTestBack, stencilFuncBack, stencilReadMaskBack, stencilWriteMaskBack, stencilFailOpBack, stencilZFailOpBack, stencilPassOpBack, stencilRefBack);
              }

              get native() {
                return this._nativeObj;
              }

              get depthTest() {
                return this._depthTest;
              }

              set depthTest(val) {
                this._depthTest = val;
                this._nativeObj.depthTest = val;
              }

              get depthWrite() {
                return this._depthWrite;
              }

              set depthWrite(val) {
                this._depthWrite = val;
                this._nativeObj.depthWrite = val;
              }

              get depthFunc() {
                return this._depthFunc;
              }

              set depthFunc(val) {
                this._depthFunc = val;
                this._nativeObj.depthFunc = val;
              }

              get stencilTestFront() {
                return this._stencilTestFront;
              }

              set stencilTestFront(val) {
                this._stencilTestFront = val;
                this._nativeObj.stencilTestFront = val;
              }

              get stencilFuncFront() {
                return this._stencilFuncFront;
              }

              set stencilFuncFront(val) {
                this._stencilFuncFront = val;
                this._nativeObj.stencilFuncFront = val;
              }

              get stencilReadMaskFront() {
                return this._stencilReadMaskFront;
              }

              set stencilReadMaskFront(val) {
                this._stencilReadMaskFront = val;
                this._nativeObj.stencilReadMaskFront = val;
              }

              get stencilWriteMaskFront() {
                return this._stencilWriteMaskFront;
              }

              set stencilWriteMaskFront(val) {
                this._stencilWriteMaskFront = val;
                this._nativeObj.stencilWriteMaskFront = val;
              }

              get stencilFailOpFront() {
                return this._stencilFailOpFront;
              }

              set stencilFailOpFront(val) {
                this._stencilFailOpFront = val;
                this._nativeObj.stencilFailOpFront = val;
              }

              get stencilZFailOpFront() {
                return this._stencilZFailOpFront;
              }

              set stencilZFailOpFront(val) {
                this._stencilZFailOpFront = val;
                this._nativeObj.stencilZFailOpFront = val;
              }

              get stencilPassOpFront() {
                return this._stencilPassOpFront;
              }

              set stencilPassOpFront(val) {
                this._stencilPassOpFront = val;
                this._nativeObj.stencilPassOpFront = val;
              }

              get stencilRefFront() {
                return this._stencilRefFront;
              }

              set stencilRefFront(val) {
                this._stencilRefFront = val;
                this._nativeObj.stencilRefFront = val;
              }

              get stencilTestBack() {
                return this._stencilTestBack;
              }

              set stencilTestBack(val) {
                this._stencilTestBack = val;
                this._nativeObj.stencilTestBack = val;
              }

              get stencilFuncBack() {
                return this._stencilFuncBack;
              }

              set stencilFuncBack(val) {
                this._stencilFuncBack = val;
                this._nativeObj.stencilFuncBack = val;
              }

              get stencilReadMaskBack() {
                return this._stencilReadMaskBack;
              }

              set stencilReadMaskBack(val) {
                this._stencilReadMaskBack = val;
                this._nativeObj.stencilReadMaskBack = val;
              }

              get stencilWriteMaskBack() {
                return this._stencilWriteMaskBack;
              }

              set stencilWriteMaskBack(val) {
                this._stencilWriteMaskBack = val;
                this._nativeObj.stencilWriteMaskBack = val;
              }

              get stencilFailOpBack() {
                return this._stencilFailOpBack;
              }

              set stencilFailOpBack(val) {
                this._stencilFailOpBack = val;
                this._nativeObj.stencilFailOpBack = val;
              }

              get stencilZFailOpBack() {
                return this._stencilZFailOpBack;
              }

              set stencilZFailOpBack(val) {
                this._stencilZFailOpBack = val;
                this._nativeObj.stencilZFailOpBack = val;
              }

              get stencilPassOpBack() {
                return this._stencilPassOpBack;
              }

              set stencilPassOpBack(val) {
                this._stencilPassOpBack = val;
                this._nativeObj.stencilPassOpBack = val;
              }

              get stencilRefBack() {
                return this._stencilRefBack;
              }

              set stencilRefBack(val) {
                this._stencilRefBack = val;
                this._nativeObj.stencilRefBack = val;
              }

              reset() {
                this.assignProperties(true, true, ComparisonFunc.LESS, false, ComparisonFunc.ALWAYS, 0xffff, 0xffff, StencilOp.KEEP, StencilOp.KEEP, StencilOp.KEEP, 1, false, ComparisonFunc.ALWAYS, 0xffff, 0xffff, StencilOp.KEEP, StencilOp.KEEP, StencilOp.KEEP, 1);
              }

              assign(dss) {
                if (!dss) return;
                this.assignProperties(dss.depthTest, dss.depthWrite, dss.depthFunc, dss.stencilTestFront, dss.stencilFuncFront, dss.stencilReadMaskFront, dss.stencilWriteMaskFront, dss.stencilFailOpFront, dss.stencilZFailOpFront, dss.stencilPassOpFront, dss.stencilRefFront, dss.stencilTestBack, dss.stencilFuncBack, dss.stencilReadMaskBack, dss.stencilWriteMaskBack, dss.stencilFailOpBack, dss.stencilZFailOpBack, dss.stencilPassOpBack, dss.stencilRefBack);
              }

              destroy() {
                this._nativeObj = null;
              }

              assignProperties(depthTest, depthWrite, depthFunc, stencilTestFront, stencilFuncFront, stencilReadMaskFront, stencilWriteMaskFront, stencilFailOpFront, stencilZFailOpFront, stencilPassOpFront, stencilRefFront, stencilTestBack, stencilFuncBack, stencilReadMaskBack, stencilWriteMaskBack, stencilFailOpBack, stencilZFailOpBack, stencilPassOpBack, stencilRefBack) {
                if (depthTest !== undefined) this.depthTest = depthTest;
                if (depthWrite !== undefined) this.depthWrite = depthWrite;
                if (depthFunc !== undefined) this.depthFunc = depthFunc;
                if (stencilTestFront !== undefined) this.stencilTestFront = stencilTestFront;
                if (stencilFuncFront !== undefined) this.stencilFuncFront = stencilFuncFront;
                if (stencilReadMaskFront !== undefined) this.stencilReadMaskFront = stencilReadMaskFront;
                if (stencilWriteMaskFront !== undefined) this.stencilWriteMaskFront = stencilWriteMaskFront;
                if (stencilFailOpFront !== undefined) this.stencilFailOpFront = stencilFailOpFront;
                if (stencilZFailOpFront !== undefined) this.stencilZFailOpFront = stencilZFailOpFront;
                if (stencilPassOpFront !== undefined) this.stencilPassOpFront = stencilPassOpFront;
                if (stencilRefFront !== undefined) this.stencilRefFront = stencilRefFront;
                if (stencilTestBack !== undefined) this.stencilTestBack = stencilTestBack;
                if (stencilFuncBack !== undefined) this.stencilFuncBack = stencilFuncBack;
                if (stencilReadMaskBack !== undefined) this.stencilReadMaskBack = stencilReadMaskBack;
                if (stencilWriteMaskBack !== undefined) this.stencilWriteMaskBack = stencilWriteMaskBack;
                if (stencilFailOpBack !== undefined) this.stencilFailOpBack = stencilFailOpBack;
                if (stencilZFailOpBack !== undefined) this.stencilZFailOpBack = stencilZFailOpBack;
                if (stencilPassOpBack !== undefined) this.stencilPassOpBack = stencilPassOpBack;
                if (stencilRefBack !== undefined) this.stencilRefBack = stencilRefBack;
              }

            } exports('bG', DepthStencilState);
            class BlendTarget {
              get native() {
                return this._nativeObj;
              }

              constructor(blend = false, blendSrc = BlendFactor.ONE, blendDst = BlendFactor.ZERO, blendEq = BlendOp.ADD, blendSrcAlpha = BlendFactor.ONE, blendDstAlpha = BlendFactor.ZERO, blendAlphaEq = BlendOp.ADD, blendColorMask = ColorMask.ALL) {
                this._nativeObj = void 0;
                this._blend = false;
                this._blendSrc = BlendFactor.ONE;
                this._blendDst = BlendFactor.ZERO;
                this._blendEq = BlendOp.ADD;
                this._blendSrcAlpha = BlendFactor.ONE;
                this._blendDstAlpha = BlendFactor.ZERO;
                this._blendAlphaEq = BlendOp.ADD;
                this._blendColorMask = ColorMask.ALL;
                this._nativeObj = new gfx.BlendTarget();
                this.assignProperties(blend, blendSrc, blendDst, blendEq, blendSrcAlpha, blendDstAlpha, blendAlphaEq, blendColorMask);
              }

              get blend() {
                return this._blend;
              }

              set blend(val) {
                this._blend = val;
                this._nativeObj.blend = val;
              }

              get blendSrc() {
                return this._blendSrc;
              }

              set blendSrc(val) {
                this._blendSrc = val;
                this._nativeObj.blendSrc = val;
              }

              get blendDst() {
                return this._blendDst;
              }

              set blendDst(val) {
                this._blendDst = val;
                this._nativeObj.blendDst = val;
              }

              get blendEq() {
                return this._blendEq;
              }

              set blendEq(val) {
                this._blendEq = val;
                this._nativeObj.blendEq = val;
              }

              get blendSrcAlpha() {
                return this._blendSrcAlpha;
              }

              set blendSrcAlpha(val) {
                this._blendSrcAlpha = val;
                this._nativeObj.blendSrcAlpha = val;
              }

              get blendDstAlpha() {
                return this._blendDstAlpha;
              }

              set blendDstAlpha(val) {
                this._blendDstAlpha = val;
                this._nativeObj.blendDstAlpha = val;
              }

              get blendAlphaEq() {
                return this._blendAlphaEq;
              }

              set blendAlphaEq(val) {
                this._blendAlphaEq = val;
                this._nativeObj.blendAlphaEq = val;
              }

              get blendColorMask() {
                return this._blendColorMask;
              }

              set blendColorMask(val) {
                this._blendColorMask = val;
                this._nativeObj.blendColorMask = val;
              }

              reset() {
                this.assignProperties(false, BlendFactor.ONE, BlendFactor.ZERO, BlendOp.ADD, BlendFactor.ONE, BlendFactor.ZERO, BlendOp.ADD, ColorMask.ALL);
              }

              destroy() {
                this._nativeObj = null;
              }

              assign(target) {
                if (!target) return;
                this.assignProperties(target.blend, target.blendSrc, target.blendDst, target.blendEq, target.blendSrcAlpha, target.blendDstAlpha, target.blendAlphaEq, target.blendColorMask);
              }

              assignProperties(blend, blendSrc, blendDst, blendEq, blendSrcAlpha, blendDstAlpha, blendAlphaEq, blendColorMask) {
                if (blend !== undefined) this.blend = blend;
                if (blendSrc !== undefined) this.blendSrc = blendSrc;
                if (blendDst !== undefined) this.blendDst = blendDst;
                if (blendEq !== undefined) this.blendEq = blendEq;
                if (blendSrcAlpha !== undefined) this.blendSrcAlpha = blendSrcAlpha;
                if (blendDstAlpha !== undefined) this.blendDstAlpha = blendDstAlpha;
                if (blendAlphaEq !== undefined) this.blendAlphaEq = blendAlphaEq;
                if (blendColorMask !== undefined) this.blendColorMask = blendColorMask;
              }

            } exports('bH', BlendTarget);

            function watchArrayElementsField(self, list, eleField, cachedFieldName, callback) {
              for (let i = 0, l = list.length; i < l; i++) {
                let ele = list[i];
                let originField = ele[eleField][cachedFieldName] || ele[eleField];
                ele[eleField] = new Proxy(originField, {
                  get: (originTarget, key) => {
                    if (key === cachedFieldName) {
                      return originTarget;
                    }

                    return Reflect.get(originTarget, key);
                  },
                  set: (originTarget, prop, value) => {
                    Reflect.set(originTarget, prop, value);
                    callback(self, i, originTarget, prop, value);
                    return true;
                  }
                });
              }
            }

            class BlendState {
              _setTargets(targets) {
                this.targets = targets;
                const CACHED_FIELD_NAME = `$__nativeObj`;

                this._syncTargetsToNativeObj(CACHED_FIELD_NAME);

                watchArrayElementsField(this, this.targets, "_nativeObj", CACHED_FIELD_NAME, (self, _idx, _originTarget, _prop, _value) => {
                  self._syncTargetsToNativeObj(CACHED_FIELD_NAME);
                });
              }

              _syncTargetsToNativeObj(cachedFieldName) {
                const nativeTars = this.targets.map(target => {
                  return target.native[cachedFieldName] || target.native;
                });
                this._nativeObj.targets = nativeTars;
              }

              get native() {
                return this._nativeObj;
              }

              constructor(isA2C = false, isIndepend = false, blendColor = new Color$1(), targets = [new BlendTarget()]) {
                this.targets = void 0;
                this._blendColor = void 0;
                this._nativeObj = void 0;
                this._isA2C = false;
                this._isIndepend = false;
                this._nativeObj = new gfx.BlendState();

                this._setTargets(targets);

                this.blendColor = blendColor;
                this.isA2c = isA2C;
                this.isIndepend = isIndepend;
              }

              get isA2c() {
                return this._isA2C;
              }

              set isA2c(val) {
                this._isA2C = val;
                this._nativeObj.isA2C = val;
              }

              get isIndepend() {
                return this._isIndepend;
              }

              set isIndepend(val) {
                this._isIndepend = val;
                this._nativeObj.isIndepend = val;
              }

              get blendColor() {
                return this._blendColor;
              }

              set blendColor(color) {
                this._blendColor = color;
                this._nativeObj.blendColor = color;
              }

              setTarget(index, target) {
                let tg = this.targets[index];

                if (!tg) {
                  tg = this.targets[index] = new BlendTarget();
                }

                tg.assign(target);

                this._setTargets(this.targets);
              }

              reset() {
                this.isA2c = false;
                this.isIndepend = false;
                this.blendColor = new Color$1(0, 0, 0, 0);
                const targets = this.targets;

                for (let i = 1, len = targets.length; i < len; ++i) {
                  targets[i].destroy();
                }

                targets.length = 1;
                targets[0].reset();

                this._setTargets(targets);
              }

              destroy() {
                for (let i = 0, len = this.targets.length; i < len; ++i) {
                  this.targets[i].destroy();
                }

                this.targets = null;
                this._nativeObj = null;
              }

            } exports('bI', BlendState);
            const PipelineState = exports('bJ', gfx.PipelineState);
            const PipelineStateInfo = exports('bK', gfx.PipelineStateInfo);

            class Device {
              constructor() {
                this._gfxAPI = API.UNKNOWN;
                this._renderer = '';
                this._vendor = '';
                this._features = new Array(Feature.COUNT);
                this._formatFeatures = new Array(Format.COUNT);
                this._queue = null;
                this._cmdBuff = null;
                this._numDrawCalls = 0;
                this._numInstances = 0;
                this._numTris = 0;
                this._memoryStatus = new MemoryStatus();
                this._caps = new DeviceCaps();
                this._bindingMappingInfo = new BindingMappingInfo();
                this._samplers = new Map();
                this._generalBarrierss = new Map();
                this._textureBarriers = new Map();
                this._bufferBarriers = new Map();
              }

              get gfxAPI() {
                return this._gfxAPI;
              }

              get queue() {
                return this._queue;
              }

              get commandBuffer() {
                return this._cmdBuff;
              }

              get renderer() {
                return this._renderer;
              }

              get vendor() {
                return this._vendor;
              }

              get numDrawCalls() {
                return this._numDrawCalls;
              }

              get numInstances() {
                return this._numInstances;
              }

              get numTris() {
                return this._numTris;
              }

              get memoryStatus() {
                return this._memoryStatus;
              }

              get capabilities() {
                return this._caps;
              }

              get bindingMappingInfo() {
                return this._bindingMappingInfo;
              }

              hasFeature(feature) {
                return this._features[feature];
              }

              getFormatFeatures(format) {
                return this._formatFeatures[format];
              }

            } exports('bE', Device);
            Device.canvas = void 0;

            class Texture extends GFXObject {
              get type() {
                return this._info.type;
              }

              get usage() {
                return this._info.usage;
              }

              get format() {
                return this._info.format;
              }

              get width() {
                return this._info.width;
              }

              get height() {
                return this._info.height;
              }

              get depth() {
                return this._info.depth;
              }

              get layerCount() {
                return this._info.layerCount;
              }

              get levelCount() {
                return this._info.levelCount;
              }

              get samples() {
                return this._info.samples;
              }

              get flags() {
                return this._info.flags;
              }

              get size() {
                return this._size;
              }

              get info() {
                return this._info;
              }

              get viewInfo() {
                return this._viewInfo;
              }

              get isTextureView() {
                return this._isTextureView;
              }

              constructor() {
                super(ObjectType.TEXTURE);
                this._info = new TextureInfo();
                this._viewInfo = new TextureViewInfo();
                this._isPowerOf2 = false;
                this._isTextureView = false;
                this._size = 0;
              }

              static getLevelCount(width, height) {
                return Math.floor(Math.log2(Math.max(width, height)));
              }

            } exports('bL', Texture);

            class ContainerManager {
              constructor() {
                this._pools = [];
                this._lastShrinkPassed = 0;
                this.shrinkTimeSpan = 5;
              }

              addContainer(pool) {
                if (pool._poolHandle !== -1) return;
                pool._poolHandle = this._pools.length;

                this._pools.push(pool);
              }

              removeContainer(pool) {
                if (pool._poolHandle === -1) return;
                this._pools[this._pools.length - 1]._poolHandle = pool._poolHandle;
                fastRemoveAt(this._pools, pool._poolHandle);
                pool._poolHandle = -1;
              }

              tryShrink() {
                for (let i = 0; i < this._pools.length; i++) {
                  this._pools[i].tryShrink();
                }
              }

              update(dt) {
                this._lastShrinkPassed += dt;

                if (this._lastShrinkPassed > this.shrinkTimeSpan) {
                  this.tryShrink();
                  this._lastShrinkPassed -= this.shrinkTimeSpan;
                }
              }

            }

            const containerManager = new ContainerManager();

            class ScalableContainer {
              constructor() {
                this._poolHandle = -1;
                containerManager.addContainer(this);
              }

              destroy() {
                containerManager.removeContainer(this);
              }

            } exports('a1', ScalableContainer);

            class Pool$1 extends ScalableContainer {
              constructor(ctor, elementsPerBatch, dtor) {
                super();
                this._ctor = void 0;
                this._elementsPerBatch = void 0;
                this._nextAvail = void 0;
                this._freepool = [];
                this._dtor = void 0;
                this._ctor = ctor;
                this._dtor = dtor || null;
                this._elementsPerBatch = Math.max(elementsPerBatch, 1);
                this._nextAvail = this._elementsPerBatch - 1;

                for (let i = 0; i < this._elementsPerBatch; ++i) {
                  this._freepool.push(ctor());
                }
              }

              alloc() {
                if (this._nextAvail < 0) {
                  this._freepool.length = this._elementsPerBatch;

                  for (let i = 0; i < this._elementsPerBatch; i++) {
                    this._freepool[i] = this._ctor();
                  }

                  this._nextAvail = this._elementsPerBatch - 1;
                }

                return this._freepool[this._nextAvail--];
              }

              free(obj) {
                this._freepool[++this._nextAvail] = obj;
              }

              freeArray(objs) {
                this._freepool.length = this._nextAvail + 1;
                Array.prototype.push.apply(this._freepool, objs);
                this._nextAvail += objs.length;
              }

              tryShrink() {
                if (this._nextAvail >> 1 > this._elementsPerBatch) {
                  if (this._dtor) {
                    for (let i = this._nextAvail >> 1; i <= this._nextAvail; i++) {
                      this._dtor(this._freepool[i]);
                    }
                  }

                  this._freepool.length = this._nextAvail >> 1;
                  this._nextAvail = this._freepool.length - 1;
                }
              }

              destroy() {
                const dtor = arguments.length > 0 ? arguments[0] : null;

                if (dtor) {
                  warnID(14100);
                }

                const readDtor = dtor || this._dtor;

                if (readDtor) {
                  for (let i = 0; i <= this._nextAvail; i++) {
                    readDtor(this._freepool[i]);
                  }
                }

                this._freepool.length = 0;
                this._nextAvail = -1;
                super.destroy();
              }

            } exports('a2', Pool$1);

            const editorExtrasTag = exports('gl', '__editorExtras__');

            const Destroyed = 1 << 0;
            const ToDestroy = 1 << 2;
            const DontSave = 1 << 3;
            const EditorOnly = 1 << 4;
            const Dirty = 1 << 5;
            const DontDestroy = 1 << 6;
            const Destroying = 1 << 7;
            const Deactivating = 1 << 8;
            const LockedInEditor = 1 << 9;
            const HideInHierarchy = 1 << 10;
            const IsOnEnableCalled = 1 << 11;
            const IsEditorOnEnableCalled = 1 << 12;
            const IsPreloadStarted = 1 << 13;
            const IsOnLoadCalled = 1 << 14;
            const IsOnLoadStarted = 1 << 15;
            const IsStartCalled = 1 << 16;
            const IsRotationLocked = 1 << 17;
            const IsScaleLocked = 1 << 18;
            const IsAnchorLocked = 1 << 19;
            const IsSizeLocked = 1 << 20;
            const IsPositionLocked = 1 << 21;
            const IsReplicated = 1 << 22;
            const PersistentMask = ~(ToDestroy | Dirty | Destroying | DontDestroy | Deactivating | IsPreloadStarted | IsOnLoadStarted | IsOnLoadCalled | IsStartCalled | IsOnEnableCalled | IsEditorOnEnableCalled | IsRotationLocked | IsScaleLocked | IsAnchorLocked | IsSizeLocked | IsPositionLocked);
            const AllHideMasks = DontSave | EditorOnly | LockedInEditor | HideInHierarchy;
            const objectsToDestroy = [];

            function compileDestruct(obj, ctor) {
              const shouldSkipId = obj instanceof legacyCC._BaseNode || obj instanceof legacyCC.Component;
              const idToSkip = shouldSkipId ? '_id' : null;
              let key;
              const propsToReset = {};

              for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                  if (key === idToSkip) {
                    continue;
                  }

                  switch (typeof obj[key]) {
                    case 'string':
                      propsToReset[key] = '';
                      break;

                    case 'object':
                    case 'function':
                      propsToReset[key] = null;
                      break;
                  }
                }
              }

              if (CCClass._isCCClass(ctor)) {
                const attrs = legacyCC.Class.Attr.getClassAttrs(ctor);
                const propList = ctor.__props__;

                for (let i = 0; i < propList.length; i++) {
                  key = propList[i];
                  const attrKey = `${key}`;

                  if (attrKey in attrs) {
                    if (shouldSkipId && key === '_id') {
                      continue;
                    }

                    switch (typeof attrs[attrKey]) {
                      case 'string':
                        propsToReset[key] = '';
                        break;

                      case 'object':
                      case 'function':
                        propsToReset[key] = null;
                        break;

                      case 'undefined':
                        propsToReset[key] = undefined;
                        break;
                    }
                  }
                }
              }

              {
                let func = '';

                for (key in propsToReset) {
                  let statement;

                  if (CCClass.IDENTIFIER_RE.test(key)) {
                    statement = `o.${key}=`;
                  } else {
                    statement = `o[${CCClass.escapeForJS(key)}]=`;
                  }

                  let val = propsToReset[key];

                  if (val === '') {
                    val = '""';
                  }

                  func += `${statement + val};\n`;
                }

                return Function('o', func);
              }
            }

            class CCObject {
              static _deferredDestroy() {
                const deleteCount = objectsToDestroy.length;

                for (let i = 0; i < deleteCount; ++i) {
                  const obj = objectsToDestroy[i];

                  if (!(obj._objFlags & Destroyed)) {
                    obj._destroyImmediate();
                  }
                }

                if (deleteCount === objectsToDestroy.length) {
                  objectsToDestroy.length = 0;
                } else {
                  objectsToDestroy.splice(0, deleteCount);
                }
              }

              constructor(name = '') {
                this._objFlags = void 0;
                this._name = void 0;
                this._name = name;
                this._objFlags = 0;
              }

              get name() {
                return this._name;
              }

              set name(value) {
                this._name = value;
              }

              set hideFlags(hideFlags) {
                const flags = hideFlags & CCObject.Flags.AllHideMasks;
                this._objFlags = this._objFlags & ~CCObject.Flags.AllHideMasks | flags;
              }

              get hideFlags() {
                return this._objFlags & CCObject.Flags.AllHideMasks;
              }

              set replicated(value) {
                if (value) {
                  this._objFlags |= IsReplicated;
                } else {
                  this._objFlags &= ~IsReplicated;
                }
              }

              get replicated() {
                return !!(this._objFlags & IsReplicated);
              }

              get isValid() {
                return !(this._objFlags & Destroyed);
              }

              destroy() {
                if (this._objFlags & Destroyed) {
                  warnID(5000);
                  return false;
                }

                if (this._objFlags & ToDestroy) {
                  return false;
                }

                this._objFlags |= ToDestroy;
                objectsToDestroy.push(this);

                {
                  this._destroy();
                }

                return true;
              }

              _destruct() {
                const ctor = this.constructor;
                let destruct = ctor.__destruct__;

                if (!destruct) {
                  destruct = compileDestruct(this, ctor);
                  value(ctor, '__destruct__', destruct, true);
                }

                destruct(this);
              }

              _destroyImmediate() {
                if (this._objFlags & Destroyed) {
                  errorID(5000);
                  return;
                }

                if (this._onPreDestroy) {
                  this._onPreDestroy();
                }

                {
                  this._destruct();
                }

                this._objFlags |= Destroyed;
              }

            } exports('eh', CCObject);

            const prototype = CCObject.prototype;

            prototype._deserialize = null;
            prototype._onPreDestroy = null;
            CCClass.fastDefine('cc.Object', CCObject, {
              _name: '',
              _objFlags: 0,
              [editorExtrasTag]: {}
            });
            CCClass.Attr.setClassAttr(CCObject, editorExtrasTag, 'editorOnly', true);
            CCClass.Attr.setClassAttr(CCObject, 'replicated', 'visible', false);
            value(CCObject, 'Flags', {
              Destroyed,
              DontSave,
              EditorOnly,
              Dirty,
              DontDestroy,
              PersistentMask,
              Destroying,
              Deactivating,
              LockedInEditor,
              HideInHierarchy,
              AllHideMasks,
              IsPreloadStarted,
              IsOnLoadStarted,
              IsOnLoadCalled,
              IsOnEnableCalled,
              IsStartCalled,
              IsEditorOnEnableCalled,
              IsPositionLocked,
              IsRotationLocked,
              IsScaleLocked,
              IsAnchorLocked,
              IsSizeLocked
            });
            function isCCObject(object) {
              return object instanceof CCObject;
            }
            function isValid(value, strictMode) {
              if (typeof value === 'object') {
                return !!value && !(value._objFlags & (strictMode ? Destroyed | ToDestroy : Destroyed));
              } else {
                return typeof value !== 'undefined';
              }
            }
            legacyCC.isValid = isValid;

            {
              copyAllProperties(CCObject, jsb.CCObject, ['prototype', 'length', 'name']);
              copyAllProperties(CCObject.prototype, jsb.CCObject.prototype, ['constructor', 'name', 'hideFlags', 'replicated', 'isValid']);
              CCObject = exports('eh', jsb.CCObject);
            }

            legacyCC.Object = CCObject;

            const fastRemoveAt$1 = array.fastRemoveAt;

            function empty() {}

            class CallbackInfo {
              constructor() {
                this.callback = empty;
                this.target = undefined;
                this.once = false;
              }

              set(callback, target, once) {
                this.callback = callback || empty;
                this.target = target;
                this.once = !!once;
              }

              reset() {
                this.target = undefined;
                this.callback = empty;
                this.once = false;
              }

              check() {
                if (isCCObject(this.target) && !isValid(this.target, true)) {
                  return false;
                } else {
                  return true;
                }
              }

            }

            const callbackInfoPool = new Pool$1(() => new CallbackInfo(), 32);
            class CallbackList {
              constructor() {
                this.callbackInfos = [];
                this.isInvoking = false;
                this.containCanceled = false;
              }

              removeByCallback(cb) {
                for (let i = 0; i < this.callbackInfos.length; ++i) {
                  const info = this.callbackInfos[i];

                  if (info && info.callback === cb) {
                    info.reset();
                    callbackInfoPool.free(info);
                    fastRemoveAt$1(this.callbackInfos, i);
                    --i;
                  }
                }
              }

              removeByTarget(target) {
                for (let i = 0; i < this.callbackInfos.length; ++i) {
                  const info = this.callbackInfos[i];

                  if (info && info.target === target) {
                    info.reset();
                    callbackInfoPool.free(info);
                    fastRemoveAt$1(this.callbackInfos, i);
                    --i;
                  }
                }
              }

              cancel(index) {
                const info = this.callbackInfos[index];

                if (info) {
                  info.reset();

                  if (this.isInvoking) {
                    this.callbackInfos[index] = null;
                  } else {
                    fastRemoveAt$1(this.callbackInfos, index);
                  }

                  callbackInfoPool.free(info);
                }

                this.containCanceled = true;
              }

              cancelAll() {
                for (let i = 0; i < this.callbackInfos.length; i++) {
                  const info = this.callbackInfos[i];

                  if (info) {
                    info.reset();
                    callbackInfoPool.free(info);
                    this.callbackInfos[i] = null;
                  }
                }

                this.containCanceled = true;
              }

              purgeCanceled() {
                for (let i = this.callbackInfos.length - 1; i >= 0; --i) {
                  const info = this.callbackInfos[i];

                  if (!info) {
                    fastRemoveAt$1(this.callbackInfos, i);
                  }
                }

                this.containCanceled = false;
              }

              clear() {
                this.cancelAll();
                this.callbackInfos.length = 0;
                this.isInvoking = false;
                this.containCanceled = false;
              }

            }
            const MAX_SIZE = 16;
            const callbackListPool = new Pool$1(() => new CallbackList(), MAX_SIZE);
            class CallbacksInvoker {
              constructor() {
                this._callbackTable = createMap(true);
                this._offCallback = void 0;
              }

              on(key, callback, target, once) {
                if (!this.hasEventListener(key, callback, target)) {
                  let list = this._callbackTable[key];

                  if (!list) {
                    list = this._callbackTable[key] = callbackListPool.alloc();
                  }

                  const info = callbackInfoPool.alloc();
                  info.set(callback, target, once);
                  list.callbackInfos.push(info);
                }

                return callback;
              }

              hasEventListener(key, callback, target) {
                const list = this._callbackTable && this._callbackTable[key];

                if (!list) {
                  return false;
                }

                const infos = list.callbackInfos;

                if (!callback) {
                  if (list.isInvoking) {
                    for (let i = 0; i < infos.length; ++i) {
                      if (infos[i]) {
                        return true;
                      }
                    }

                    return false;
                  } else {
                    return infos.length > 0;
                  }
                }

                for (let i = 0; i < infos.length; ++i) {
                  const info = infos[i];

                  if (info && info.check() && info.callback === callback && info.target === target) {
                    return true;
                  }
                }

                return false;
              }

              removeAll(keyOrTarget) {
                const type = typeof keyOrTarget;

                if (type === 'string' || type === 'number') {
                  const list = this._callbackTable && this._callbackTable[keyOrTarget];

                  if (list) {
                    if (list.isInvoking) {
                      list.cancelAll();
                    } else {
                      list.clear();
                      callbackListPool.free(list);
                      delete this._callbackTable[keyOrTarget];
                    }
                  }
                } else if (keyOrTarget) {
                  for (const key in this._callbackTable) {
                    const list = this._callbackTable[key];

                    if (list.isInvoking) {
                      const infos = list.callbackInfos;

                      for (let i = 0; i < infos.length; ++i) {
                        const info = infos[i];

                        if (info && info.target === keyOrTarget) {
                          list.cancel(i);
                        }
                      }
                    } else {
                      list.removeByTarget(keyOrTarget);
                    }
                  }
                }
              }

              off(key, callback, target) {
                var _this$_offCallback;

                const list = this._callbackTable && this._callbackTable[key];

                if (list) {
                  const infos = list.callbackInfos;

                  if (callback) {
                    for (let i = 0; i < infos.length; ++i) {
                      const info = infos[i];

                      if (info && info.callback === callback && info.target === target) {
                        list.cancel(i);
                        break;
                      }
                    }
                  } else {
                    this.removeAll(key);
                  }
                }

                (_this$_offCallback = this._offCallback) === null || _this$_offCallback === void 0 ? void 0 : _this$_offCallback.call(this);
              }

              emit(key, arg0, arg1, arg2, arg3, arg4) {
                const list = this._callbackTable && this._callbackTable[key];

                if (list) {
                  const rootInvoker = !list.isInvoking;
                  list.isInvoking = true;
                  const infos = list.callbackInfos;

                  for (let i = 0, len = infos.length; i < len; ++i) {
                    const info = infos[i];

                    if (info) {
                      const callback = info.callback;
                      const target = info.target;

                      if (info.once) {
                        this.off(key, callback, target);
                      }

                      if (!info.check()) {
                        this.off(key, callback, target);
                      } else if (target) {
                        callback.call(target, arg0, arg1, arg2, arg3, arg4);
                      } else {
                        callback(arg0, arg1, arg2, arg3, arg4);
                      }
                    }
                  }

                  if (rootInvoker) {
                    list.isInvoking = false;

                    if (list.containCanceled) {
                      list.purgeCanceled();
                    }
                  }
                }
              }

              clear() {
                for (const key in this._callbackTable) {
                  const list = this._callbackTable[key];

                  if (list) {
                    list.clear();
                    callbackListPool.free(list);
                    delete this._callbackTable[key];
                  }
                }
              }

              _registerOffCallback(cb) {
                this._offCallback = cb;
              }

            }

            function Eventify(base) {
              class Eventified extends base {
                constructor(...args) {
                  super(...args);
                  this._callbackTable = createMap(true);
                }

                once(type, callback, target) {
                  return this.on(type, callback, target, true);
                }

                targetOff(typeOrTarget) {
                  this.removeAll(typeOrTarget);
                }

              }

              const callbacksInvokerPrototype = CallbacksInvoker.prototype;
              const propertyKeys = Object.getOwnPropertyNames(callbacksInvokerPrototype).concat(Object.getOwnPropertySymbols(callbacksInvokerPrototype));

              for (let iPropertyKey = 0; iPropertyKey < propertyKeys.length; ++iPropertyKey) {
                const propertyKey = propertyKeys[iPropertyKey];

                if (!(propertyKey in Eventified.prototype)) {
                  const propertyDescriptor = Object.getOwnPropertyDescriptor(callbacksInvokerPrototype, propertyKey);

                  if (propertyDescriptor) {
                    Object.defineProperty(Eventified.prototype, propertyKey, propertyDescriptor);
                  }
                }
              }

              return Eventified;
            }

            class Empty {}

            const EventTarget = exports('f3', Eventify(Empty));
            legacyCC.EventTarget = EventTarget;

            class AsyncDelegate {
              constructor() {
                this._delegates = [];
              }

              add(callback) {
                if (!this._delegates.includes(callback)) {
                  this._delegates.push(callback);
                }
              }

              hasListener(callback) {
                return this._delegates.includes(callback);
              }

              remove(callback) {
                js.array.fastRemove(this._delegates, callback);
              }

              dispatch(...args) {
                return Promise.all(this._delegates.map(func => func(...arguments)).filter(Boolean));
              }

            } exports('go', AsyncDelegate);

            let BrowserType;

            (function (BrowserType) {
              BrowserType["UNKNOWN"] = "unknown";
              BrowserType["WECHAT"] = "wechat";
              BrowserType["ANDROID"] = "androidbrowser";
              BrowserType["IE"] = "ie";
              BrowserType["EDGE"] = "edge";
              BrowserType["QQ"] = "qqbrowser";
              BrowserType["MOBILE_QQ"] = "mqqbrowser";
              BrowserType["UC"] = "ucbrowser";
              BrowserType["UCBS"] = "ucbs";
              BrowserType["BROWSER_360"] = "360browser";
              BrowserType["BAIDU_APP"] = "baiduboxapp";
              BrowserType["BAIDU"] = "baidubrowser";
              BrowserType["MAXTHON"] = "maxthon";
              BrowserType["OPERA"] = "opera";
              BrowserType["OUPENG"] = "oupeng";
              BrowserType["MIUI"] = "miuibrowser";
              BrowserType["FIREFOX"] = "firefox";
              BrowserType["SAFARI"] = "safari";
              BrowserType["CHROME"] = "chrome";
              BrowserType["LIEBAO"] = "liebao";
              BrowserType["QZONE"] = "qzone";
              BrowserType["SOUGOU"] = "sogou";
              BrowserType["HUAWEI"] = "huawei";
            })(BrowserType || (BrowserType = exports('fm', {})));

            let Language;

            (function (Language) {
              Language["UNKNOWN"] = "unknown";
              Language["ENGLISH"] = "en";
              Language["CHINESE"] = "zh";
              Language["FRENCH"] = "fr";
              Language["ITALIAN"] = "it";
              Language["GERMAN"] = "de";
              Language["SPANISH"] = "es";
              Language["DUTCH"] = "du";
              Language["RUSSIAN"] = "ru";
              Language["KOREAN"] = "ko";
              Language["JAPANESE"] = "ja";
              Language["HUNGARIAN"] = "hu";
              Language["PORTUGUESE"] = "pt";
              Language["ARABIC"] = "ar";
              Language["NORWEGIAN"] = "no";
              Language["POLISH"] = "pl";
              Language["TURKISH"] = "tr";
              Language["UKRAINIAN"] = "uk";
              Language["ROMANIAN"] = "ro";
              Language["BULGARIAN"] = "bg";
            })(Language || (Language = {}));

            let NetworkType;

            (function (NetworkType) {
              NetworkType[NetworkType["NONE"] = 0] = "NONE";
              NetworkType[NetworkType["LAN"] = 1] = "LAN";
              NetworkType[NetworkType["WWAN"] = 2] = "WWAN";
            })(NetworkType || (NetworkType = {}));

            let OS;

            (function (OS) {
              OS["UNKNOWN"] = "Unknown";
              OS["IOS"] = "iOS";
              OS["ANDROID"] = "Android";
              OS["WINDOWS"] = "Windows";
              OS["LINUX"] = "Linux";
              OS["OSX"] = "OS X";
              OS["OHOS"] = "OHOS";
            })(OS || (OS = exports('fl', {})));

            let Platform;

            (function (Platform) {
              Platform["UNKNOWN"] = "UNKNOWN";
              Platform["EDITOR_PAGE"] = "EDITOR_PAGE";
              Platform["EDITOR_CORE"] = "EDITOR_CORE";
              Platform["MOBILE_BROWSER"] = "MOBILE_BROWSER";
              Platform["DESKTOP_BROWSER"] = "DESKTOP_BROWSER";
              Platform["WIN32"] = "WIN32";
              Platform["ANDROID"] = "ANDROID";
              Platform["IOS"] = "IOS";
              Platform["MACOS"] = "MACOS";
              Platform["OHOS"] = "OHOS";
              Platform["WECHAT_GAME"] = "WECHAT_GAME";
              Platform["BAIDU_MINI_GAME"] = "BAIDU_MINI_GAME";
              Platform["XIAOMI_QUICK_GAME"] = "XIAOMI_QUICK_GAME";
              Platform["ALIPAY_MINI_GAME"] = "ALIPAY_MINI_GAME";
              Platform["BYTEDANCE_MINI_GAME"] = "BYTEDANCE_MINI_GAME";
              Platform["OPPO_MINI_GAME"] = "OPPO_MINI_GAME";
              Platform["VIVO_MINI_GAME"] = "VIVO_MINI_GAME";
              Platform["HUAWEI_QUICK_GAME"] = "HUAWEI_QUICK_GAME";
              Platform["COCOSPLAY"] = "COCOSPLAY";
              Platform["LINKSURE_MINI_GAME"] = "LINKSURE_MINI_GAME";
              Platform["QTT_MINI_GAME"] = "QTT_MINI_GAME";
            })(Platform || (Platform = exports('f5', {})));

            let Feature$1;

            (function (Feature) {
              Feature["WEBP"] = "WEBP";
              Feature["IMAGE_BITMAP"] = "IMAGE_BITMAP";
              Feature["WEB_VIEW"] = "WEB_VIEW";
              Feature["VIDEO_PLAYER"] = "VIDEO_PLAYER";
              Feature["SAFE_AREA"] = "SAFE_AREA";
              Feature["INPUT_TOUCH"] = "INPUT_TOUCH";
              Feature["EVENT_KEYBOARD"] = "EVENT_KEYBOARD";
              Feature["EVENT_MOUSE"] = "EVENT_MOUSE";
              Feature["EVENT_TOUCH"] = "EVENT_TOUCH";
              Feature["EVENT_ACCELEROMETER"] = "EVENT_ACCELEROMETER";
              Feature["EVENT_GAMEPAD"] = "EVENT_GAMEPAD";
              Feature["EVENT_HANDLE"] = "EVENT_HANDLE";
              Feature["EVENT_HMD"] = "EVENT_HMD";
            })(Feature$1 || (Feature$1 = {}));

            const networkTypeMap = {
              0: NetworkType.NONE,
              1: NetworkType.LAN,
              2: NetworkType.WWAN
            };
            const platformMap = {
              0: Platform.WIN32,
              2: Platform.MACOS,
              3: Platform.ANDROID,
              4: Platform.IOS,
              5: Platform.IOS,
              6: Platform.OHOS
            };

            class SystemInfo extends EventTarget {
              get networkType() {
                return networkTypeMap[jsb.device.getNetworkType()];
              }

              constructor() {
                super();
                this.isNative = void 0;
                this.isBrowser = void 0;
                this.isMobile = void 0;
                this.isLittleEndian = void 0;
                this.platform = void 0;
                this.language = void 0;
                this.nativeLanguage = void 0;
                this.os = void 0;
                this.osVersion = void 0;
                this.osMainVersion = void 0;
                this.browserType = void 0;
                this.browserVersion = void 0;
                this.isXR = void 0;
                this._featureMap = void 0;
                this.isNative = true;
                this.isBrowser = false;
                this.platform = platformMap[__getPlatform()];
                this.isMobile = this.platform === Platform.ANDROID || this.platform === Platform.IOS || this.platform === Platform.OHOS;

                this.isLittleEndian = (() => {
                  const buffer = new ArrayBuffer(2);
                  new DataView(buffer).setInt16(0, 256, true);
                  return new Int16Array(buffer)[0] === 256;
                })();

                const currLanguage = __getCurrentLanguageCode();

                this.nativeLanguage = currLanguage ? currLanguage.toLowerCase() : Language.UNKNOWN;
                this.language = __getCurrentLanguage();
                this.os = __getOS();
                this.osVersion = __getOSVersion();
                this.osMainVersion = parseInt(this.osVersion);
                this.browserType = BrowserType.UNKNOWN;
                this.browserVersion = '';
                this.isXR = typeof xr !== 'undefined';
                this._featureMap = {
                  [Feature$1.WEBP]: true,
                  [Feature$1.IMAGE_BITMAP]: false,
                  [Feature$1.WEB_VIEW]: this.isMobile,
                  [Feature$1.VIDEO_PLAYER]: this.isMobile,
                  [Feature$1.SAFE_AREA]: this.isMobile,
                  [Feature$1.INPUT_TOUCH]: this.isMobile,
                  [Feature$1.EVENT_KEYBOARD]: true,
                  [Feature$1.EVENT_MOUSE]: !this.isMobile,
                  [Feature$1.EVENT_TOUCH]: true,
                  [Feature$1.EVENT_ACCELEROMETER]: this.isMobile,
                  [Feature$1.EVENT_GAMEPAD]: true,
                  [Feature$1.EVENT_HANDLE]: this.isXR,
                  [Feature$1.EVENT_HMD]: this.isXR
                };

                this._registerEvent();
              }

              _registerEvent() {
                jsb.onPause = () => {
                  this.emit('hide');
                };

                jsb.onResume = () => {
                  this.emit('show');
                };

                jsb.onClose = () => {
                  this.emit('close');
                };
              }

              hasFeature(feature) {
                return this._featureMap[feature];
              }

              getBatteryLevel() {
                return jsb.device.getBatteryLevel();
              }

              triggerGC() {
                jsb.garbageCollect();
              }

              openURL(url) {
                jsb.openURL(url);
              }

              now() {
                if (Date.now) {
                  return Date.now();
                }

                return +new Date();
              }

              restartJSVM() {
                __restartVM();
              }

              close() {
                __close();
              }

            }

            const systemInfo = exports('f4', new SystemInfo());

            const _PORTRAIT = 1;

            const _PORTRAIT_UPSIDE_DOWN = _PORTRAIT << 1;

            const _LEFT = _PORTRAIT << 2;

            const _RIGHT = _PORTRAIT << 3;

            const _LANDSCAPE = _LEFT | _RIGHT;

            const _AUTO = _PORTRAIT | _LANDSCAPE;

            let Orientation;

            (function (Orientation) {
              Orientation[Orientation["PORTRAIT"] = _PORTRAIT] = "PORTRAIT";
              Orientation[Orientation["PORTRAIT_UPSIDE_DOWN"] = _PORTRAIT_UPSIDE_DOWN] = "PORTRAIT_UPSIDE_DOWN";
              Orientation[Orientation["LANDSCAPE_LEFT"] = _LEFT] = "LANDSCAPE_LEFT";
              Orientation[Orientation["LANDSCAPE_RIGHT"] = _RIGHT] = "LANDSCAPE_RIGHT";
              Orientation[Orientation["LANDSCAPE"] = _LANDSCAPE] = "LANDSCAPE";
              Orientation[Orientation["AUTO"] = _AUTO] = "AUTO";
            })(Orientation || (Orientation = {}));

            const orientationMap = {
              0: Orientation.PORTRAIT,
              '-90': Orientation.LANDSCAPE_LEFT,
              90: Orientation.LANDSCAPE_RIGHT,
              180: Orientation.PORTRAIT_UPSIDE_DOWN
            };

            class ScreenAdapter extends EventTarget {
              get supportFullScreen() {
                return false;
              }

              get isFullScreen() {
                return false;
              }

              get devicePixelRatio() {
                return jsb.device.getDevicePixelRatio() || 1;
              }

              get windowSize() {
                const dpr = this.devicePixelRatio;
                const roundWidth = Math.round(window.innerWidth);
                const roundHeight = Math.round(window.innerHeight);
                return new Size(roundWidth * dpr, roundHeight * dpr);
              }

              set windowSize(size) {
                console.warn('Setting window size is not supported yet.');
              }

              get resolution() {
                const windowSize = this.windowSize;
                const resolutionScale = this.resolutionScale;
                return new Size(windowSize.width * resolutionScale, windowSize.height * resolutionScale);
              }

              get resolutionScale() {
                return this._resolutionScale;
              }

              set resolutionScale(v) {
                var _this$_cbToUpdateFram;

                if (v === this._resolutionScale) {
                  return;
                }

                this._resolutionScale = v;
                (_this$_cbToUpdateFram = this._cbToUpdateFrameBuffer) === null || _this$_cbToUpdateFram === void 0 ? void 0 : _this$_cbToUpdateFram.call(this);
              }

              get orientation() {
                return orientationMap[jsb.device.getDeviceOrientation()];
              }

              set orientation(value) {
                console.warn('Setting orientation is not supported yet.');
              }

              get safeAreaEdge() {
                const nativeSafeArea = jsb.device.getSafeAreaEdge();
                const dpr = this.devicePixelRatio;
                let topEdge = nativeSafeArea.x * dpr;
                let bottomEdge = nativeSafeArea.z * dpr;
                let leftEdge = nativeSafeArea.y * dpr;
                let rightEdge = nativeSafeArea.w * dpr;
                const orientation = this.orientation;

                if (orientation === Orientation.PORTRAIT) {
                  if (topEdge < bottomEdge) {
                    topEdge = bottomEdge;
                  } else {
                    bottomEdge = topEdge;
                  }
                } else if (leftEdge < rightEdge) {
                  leftEdge = rightEdge;
                } else {
                  rightEdge = leftEdge;
                }

                return {
                  top: topEdge,
                  bottom: bottomEdge,
                  left: leftEdge,
                  right: rightEdge
                };
              }

              get isProportionalToFrame() {
                return this._isProportionalToFrame;
              }

              set isProportionalToFrame(v) {}

              constructor() {
                super();
                this.isFrameRotated = false;
                this.handleResizeEvent = true;
                this._cbToUpdateFrameBuffer = void 0;
                this._resolutionScale = 1;
                this._isProportionalToFrame = false;

                this._registerEvent();
              }

              init(options, cbToRebuildFrameBuffer) {
                this._cbToUpdateFrameBuffer = cbToRebuildFrameBuffer;

                this._cbToUpdateFrameBuffer();
              }

              requestFullScreen() {
                return Promise.reject(new Error('request fullscreen has not been supported yet on this platform.'));
              }

              exitFullScreen() {
                return Promise.reject(new Error('exit fullscreen has not been supported yet on this platform.'));
              }

              _registerEvent() {
                jsb.onResize = size => {
                  if (size.width === 0 || size.height === 0) return;
                  size.width /= this.devicePixelRatio;
                  size.height /= this.devicePixelRatio;
                  window.resize(size.width, size.height);
                  this.emit('window-resize');
                };

                jsb.onOrientationChanged = event => {
                  this.emit('orientation-change');
                };
              }

            }

            const screenAdapter = exports('fU', new ScreenAdapter());

            class Screen {
              init() {
                var _settings$querySettin, _settings$querySettin2;

                const exactFitScreen = (_settings$querySettin = settings.querySettings(Settings.Category.SCREEN, 'exactFitScreen')) !== null && _settings$querySettin !== void 0 ? _settings$querySettin : true;
                const orientation = (_settings$querySettin2 = settings.querySettings(Settings.Category.SCREEN, 'orientation')) !== null && _settings$querySettin2 !== void 0 ? _settings$querySettin2 : 'auto';
                screenAdapter.init({
                  exactFitScreen,
                  configOrientation: orientation
                }, () => {
                  var _director$root;

                  const director = legacyCC.director;

                  if (!((_director$root = director.root) === null || _director$root === void 0 ? void 0 : _director$root.pipeline)) {
                    warnID(1220);
                    return;
                  }

                  director.root.pipeline.shadingScale = screenAdapter.resolutionScale;
                });
              }

              get devicePixelRatio() {
                return screenAdapter.devicePixelRatio;
              }

              get windowSize() {
                return screenAdapter.windowSize;
              }

              set windowSize(size) {
                screenAdapter.windowSize = size;
              }

              get resolution() {
                return screenAdapter.resolution;
              }

              get supportsFullScreen() {
                return screenAdapter.supportFullScreen;
              }

              fullScreen() {
                return screenAdapter.isFullScreen;
              }

              requestFullScreen(element, onFullScreenChange, onFullScreenError) {
                if (arguments.length > 0) {
                  warnID(1400, 'screen.requestFullScreen(element, onFullScreenChange?, onFullScreenError?)', 'screen.requestFullScreen(): Promise');
                }

                return screenAdapter.requestFullScreen().then(() => {
                  onFullScreenChange === null || onFullScreenChange === void 0 ? void 0 : onFullScreenChange();
                }).catch(err => {
                  console.error(err);
                  onFullScreenError === null || onFullScreenError === void 0 ? void 0 : onFullScreenError();
                });
              }

              exitFullScreen() {
                return screenAdapter.exitFullScreen();
              }

              autoFullScreen(element, onFullScreenChange) {
                var _this$requestFullScre;

                (_this$requestFullScre = this.requestFullScreen(element, onFullScreenChange)) === null || _this$requestFullScre === void 0 ? void 0 : _this$requestFullScre.catch(e => {});
              }

              disableAutoFullScreen(element) {}

            }

            const screen = exports('ek', new Screen());
            legacyCC.screen = screen;

            const sys = exports('du', {
              Feature: Feature$1,

              hasFeature(feature) {
                return systemInfo.hasFeature(feature);
              },

              NetworkType,
              Language,
              OS,
              Platform,
              BrowserType,
              isNative: systemInfo.isNative,
              isBrowser: systemInfo.isBrowser,
              isMobile: systemInfo.isMobile,
              isLittleEndian: systemInfo.isLittleEndian,
              platform: systemInfo.platform,
              language: systemInfo.language,
              languageCode: systemInfo.nativeLanguage,
              os: systemInfo.os,
              osVersion: systemInfo.osVersion,
              osMainVersion: systemInfo.osMainVersion,
              browserType: systemInfo.browserType,
              browserVersion: systemInfo.browserVersion,
              isXR: systemInfo.isXR,
              windowPixelResolution: screen.windowSize,
              capabilities: {
                canvas: true,
                opengl: true,
                webp: systemInfo.hasFeature(Feature$1.WEBP),
                imageBitmap: systemInfo.hasFeature(Feature$1.IMAGE_BITMAP),
                touches: systemInfo.hasFeature(Feature$1.INPUT_TOUCH),
                mouse: systemInfo.hasFeature(Feature$1.EVENT_MOUSE),
                keyboard: systemInfo.hasFeature(Feature$1.EVENT_KEYBOARD),
                accelerometer: systemInfo.hasFeature(Feature$1.EVENT_ACCELEROMETER)
              },
              localStorage: {},

              getNetworkType() {
                return systemInfo.networkType;
              },

              getBatteryLevel() {
                return systemInfo.getBatteryLevel();
              },

              garbageCollect() {
                systemInfo.triggerGC();
              },

              isObjectValid(obj) {
                if (obj === null || obj === undefined) {
                  return false;
                }

                return true;
              },

              dump() {
                let str = '';
                str += `isMobile : ${this.isMobile}\r\n`;
                str += `language : ${this.language}\r\n`;
                str += `browserType : ${this.browserType}\r\n`;
                str += `browserVersion : ${this.browserVersion}\r\n`;
                str += `capabilities : ${JSON.stringify(this.capabilities)}\r\n`;
                str += `os : ${this.os}\r\n`;
                str += `osVersion : ${this.osVersion}\r\n`;
                str += `platform : ${this.platform}\r\n`;
                str += `Using ${legacyCC.game.renderType === legacyCC.game.RENDER_TYPE_WEBGL ? 'WEBGL' : 'CANVAS'} renderer.\r\n`;
                log(str);
              },

              openURL(url) {
                systemInfo.openURL(url);
              },

              init() {
                try {
                  let localStorage = sys.localStorage = window.localStorage;
                  localStorage.setItem('storage', '');
                  localStorage.removeItem('storage');
                  localStorage = null;
                } catch (e) {
                  const warn = function () {
                    warnID(5200);
                  };

                  this.localStorage = {
                    getItem: warn,
                    setItem: warn,
                    clear: warn,
                    removeItem: warn
                  };
                }

                {
                  this.__isWebIOS14OrIPadOS14Env = (sys.os === OS.IOS || sys.os === OS.OSX) && systemInfo.isBrowser && /(OS 14)|(Version\/14)/.test(window.navigator.userAgent);
                }
              },

              now() {
                return systemInfo.now();
              },

              restartVM() {
                systemInfo.restartJSVM();
              },

              getSafeAreaRect() {
                const locView = legacyCC.view;
                const edge = screenAdapter.safeAreaEdge;
                const windowSize = screenAdapter.windowSize;
                const leftBottom = new Vec2(edge.left, edge.bottom);
                const rightTop = new Vec2(windowSize.width - edge.right, windowSize.height - edge.top);

                locView._convertToUISpace(leftBottom);

                locView._convertToUISpace(rightTop);

                const x = leftBottom.x;
                const y = leftBottom.y;
                const width = rightTop.x - leftBottom.x;
                const height = rightTop.y - leftBottom.y;
                return new Rect(x, y, width, height);
              }

            });
            legacyCC.sys = sys;

            let LegacyRenderMode;

            (function (LegacyRenderMode) {
              LegacyRenderMode[LegacyRenderMode["AUTO"] = 0] = "AUTO";
              LegacyRenderMode[LegacyRenderMode["CANVAS"] = 1] = "CANVAS";
              LegacyRenderMode[LegacyRenderMode["WEBGL"] = 2] = "WEBGL";
              LegacyRenderMode[LegacyRenderMode["HEADLESS"] = 3] = "HEADLESS";
            })(LegacyRenderMode || (LegacyRenderMode = exports('bM', {})));

            let RenderType;

            (function (RenderType) {
              RenderType[RenderType["UNKNOWN"] = -1] = "UNKNOWN";
              RenderType[RenderType["CANVAS"] = 0] = "CANVAS";
              RenderType[RenderType["WEBGL"] = 1] = "WEBGL";
              RenderType[RenderType["OPENGL"] = 2] = "OPENGL";
              RenderType[RenderType["HEADLESS"] = 3] = "HEADLESS";
            })(RenderType || (RenderType = exports('bN', {})));

            class DeviceManager {
              constructor() {
                this.initialized = false;
                this._canvas = null;
                this._renderType = RenderType.UNKNOWN;
              }

              get gfxDevice() {
                return this._gfxDevice;
              }

              get swapchain() {
                return this._swapchain;
              }

              init(canvas, bindingMappingInfo) {
                if (this.initialized) {
                  return;
                }

                const renderMode = settings.querySettings(Settings.Category.RENDERING, 'renderMode');
                this._canvas = canvas;
                this._renderType = this._determineRenderType(renderMode);

                if (this._renderType === RenderType.WEBGL) {
                  const deviceInfo = new DeviceInfo(bindingMappingInfo);

                  if ( window.gfx) {
                    this._gfxDevice = gfx.DeviceManager.create(deviceInfo);
                  } else {
                    let useWebGL2 = !!window.WebGL2RenderingContext;
                    const userAgent = window.navigator.userAgent.toLowerCase();

                    if (userAgent.indexOf('safari') !== -1 && userAgent.indexOf('chrome') === -1 || sys.browserType === BrowserType.UC) {
                        useWebGL2 = false;
                      }

                    const deviceCtors = [];

                    if (useWebGL2 && legacyCC.WebGL2Device) {
                      deviceCtors.push(legacyCC.WebGL2Device);
                    }

                    if (legacyCC.WebGLDevice) {
                      deviceCtors.push(legacyCC.WebGLDevice);
                    }

                    if (legacyCC.EmptyDevice) {
                      deviceCtors.push(legacyCC.EmptyDevice);
                    }

                    Device.canvas = canvas;

                    for (let i = 0; i < deviceCtors.length; i++) {
                      this._gfxDevice = new deviceCtors[i]();

                      if (this._gfxDevice.initialize(deviceInfo)) {
                        break;
                      }
                    }
                  }
                } else if (this._renderType === RenderType.HEADLESS && legacyCC.EmptyDevice) {
                  this._gfxDevice = new legacyCC.EmptyDevice();

                  this._gfxDevice.initialize(new DeviceInfo(bindingMappingInfo));
                }

                if (!this._gfxDevice) {
                  error('can not support canvas rendering in 3D');
                  this._renderType = RenderType.UNKNOWN;
                  return;
                }

                const swapchainInfo = new SwapchainInfo(this._canvas);
                const windowSize = screen.windowSize;
                swapchainInfo.width = windowSize.width;
                swapchainInfo.height = windowSize.height;
                this._swapchain = this._gfxDevice.createSwapchain(swapchainInfo);

                if (this._canvas) {
                  this._canvas.oncontextmenu = () => false;
                }
              }

              _determineRenderType(renderMode) {
                if (typeof renderMode !== 'number' || renderMode > RenderType.HEADLESS || renderMode < LegacyRenderMode.AUTO) {
                  renderMode = LegacyRenderMode.AUTO;
                }

                let renderType = RenderType.CANVAS;
                let supportRender = false;

                if (renderMode === LegacyRenderMode.CANVAS) {
                  renderType = RenderType.CANVAS;
                  supportRender = true;
                } else if (renderMode === LegacyRenderMode.AUTO || renderMode === LegacyRenderMode.WEBGL) {
                  renderType = RenderType.WEBGL;
                  supportRender = true;
                } else if (renderMode === LegacyRenderMode.HEADLESS) {
                  renderType = RenderType.HEADLESS;
                  supportRender = true;
                }

                if (!supportRender) {
                  throw new Error(getError(3820, renderMode));
                }

                return renderType;
              }

            } exports('bO', DeviceManager);
            const deviceManager = exports('bP', new DeviceManager());

            const polyfills = {
              GFXDevice: true,
              GFXBuffer: true,
              GFXTexture: true,
              GFXSampler: true,
              GFXShader: true,
              GFXInputAssembler: true,
              GFXRenderPass: true,
              GFXFramebuffer: true,
              GFXPipelineState: true,
              GFXCommandBuffer: true,
              GFXQueue: true,
              GFXObjectType: true,
              GFXObject: false,
              GFXAttributeName: true,
              GFXType: true,
              GFXFormat: true,
              GFXBufferUsageBit: true,
              GFXMemoryUsageBit: true,
              GFXBufferFlagBit: true,
              GFXBufferAccessBit: 'MemoryAccessBit',
              GFXPrimitiveMode: true,
              GFXPolygonMode: true,
              GFXShadeModel: true,
              GFXCullMode: true,
              GFXComparisonFunc: true,
              GFXStencilOp: true,
              GFXBlendOp: true,
              GFXBlendFactor: true,
              GFXColorMask: true,
              GFXFilter: true,
              GFXAddress: true,
              GFXTextureType: true,
              GFXTextureUsageBit: true,
              GFXSampleCount: true,
              GFXTextureFlagBit: true,
              GFXShaderStageFlagBit: true,
              GFXDescriptorType: true,
              GFXCommandBufferType: true,
              GFXLoadOp: true,
              GFXStoreOp: true,
              GFXPipelineBindPoint: true,
              GFXDynamicStateFlagBit: true,
              GFXStencilFace: true,
              GFXQueueType: true,
              GFXRect: true,
              GFXViewport: true,
              GFXColor: true,
              GFXClearFlag: true,
              GFXOffset: true,
              GFXExtent: true,
              GFXTextureSubres: 'TextureSubresLayers',
              GFXTextureCopy: true,
              GFXBufferTextureCopy: true,
              GFXFormatType: true,
              GFXFormatInfo: true,
              GFXMemoryStatus: true,
              GFXFormatInfos: true,
              GFXFormatSize: true,
              GFXFormatSurfaceSize: true,
              GFXGetTypeSize: true,
              getTypedArrayConstructor: false
            };

            for (const name in polyfills) {
              let newName = polyfills[name];

              if (newName === true) {
                newName = name.slice(3);
              } else if (newName === false) {
                newName = name;
              }

              replaceProperty(legacyCC, 'cc', [{
                name,
                newName,
                target: legacyCC.gfx,
                targetName: 'cc.gfx'
              }]);
            }

            removeProperty(legacyCC, 'cc', [{
              name: 'GFX_MAX_VERTEX_ATTRIBUTES'
            }, {
              name: 'GFX_MAX_TEXTURE_UNITS'
            }, {
              name: 'GFX_MAX_ATTACHMENTS'
            }, {
              name: 'GFX_MAX_BUFFER_BINDINGS'
            }, {
              name: 'GFXTextureLayout'
            }]);

            const polyfillCC = Object.assign({}, defines);
            polyfillCC.Device = gfx.Device;
            polyfillCC.Swapchain = gfx.Swapchain;
            polyfillCC.Buffer = gfx.Buffer;
            polyfillCC.Texture = gfx.Texture;
            polyfillCC.Sampler = gfx.Sampler;
            polyfillCC.Shader = gfx.Shader;
            polyfillCC.InputAssembler = gfx.InputAssembler;
            polyfillCC.RenderPass = gfx.RenderPass;
            polyfillCC.Framebuffer = gfx.Framebuffer;
            polyfillCC.DescriptorSet = gfx.DescriptorSet;
            polyfillCC.DescriptorSetLayout = gfx.DescriptorSetLayout;
            polyfillCC.PipelineLayout = gfx.PipelineLayout;
            polyfillCC.PipelineState = gfx.PipelineState;
            polyfillCC.CommandBuffer = gfx.CommandBuffer;
            polyfillCC.Queue = gfx.Queue;
            legacyCC.gfx = polyfillCC;
            polyfillCC.BlendTarget = BlendTarget;
            polyfillCC.BlendState = BlendState;
            polyfillCC.RasterizerState = RasterizerState;
            polyfillCC.DepthStencilState = DepthStencilState;
            polyfillCC.PipelineStateInfo = PipelineStateInfo;

            const X = new Vec3();
            const Y = new Vec3();
            const Z = new Vec3();
            const d = new Vec3();
            const min$1 = new Vec3();
            const max$1 = new Vec3();
            const u = new Array(3);
            const e = new Array(3);
            function point_plane(point, plane_) {
              return Vec3.dot(plane_.n, point) - plane_.d;
            }
            function pt_point_plane(out, point, plane_) {
              const t = point_plane(point, plane_);
              return Vec3.subtract(out, point, Vec3.multiplyScalar(out, plane_.n, t));
            }
            function pt_point_aabb(out, point, aabb_) {
              Vec3.copy(out, point);
              Vec3.subtract(min$1, aabb_.center, aabb_.halfExtents);
              Vec3.add(max$1, aabb_.center, aabb_.halfExtents);
              out.x = out.x < min$1.x ? min$1.x : out.x;
              out.y = out.y < min$1.y ? min$1.y : out.y;
              out.z = out.z < min$1.z ? min$1.z : out.z;
              out.x = out.x > max$1.x ? max$1.x : out.x;
              out.y = out.y > max$1.y ? max$1.y : out.y;
              out.z = out.z > max$1.z ? max$1.z : out.z;
              return out;
            }
            function pt_point_obb(out, point, obb_) {
              Vec3.set(X, obb_.orientation.m00, obb_.orientation.m01, obb_.orientation.m02);
              Vec3.set(Y, obb_.orientation.m03, obb_.orientation.m04, obb_.orientation.m05);
              Vec3.set(Z, obb_.orientation.m06, obb_.orientation.m07, obb_.orientation.m08);
              u[0] = X;
              u[1] = Y;
              u[2] = Z;
              e[0] = obb_.halfExtents.x;
              e[1] = obb_.halfExtents.y;
              e[2] = obb_.halfExtents.z;
              Vec3.subtract(d, point, obb_.center);
              Vec3.set(out, obb_.center.x, obb_.center.y, obb_.center.z);

              for (let i = 0; i < 3; i++) {
                let dist = Vec3.dot(d, u[i]);

                if (dist > e[i]) {
                  dist = e[i];
                }

                if (dist < -e[i]) {
                  dist = -e[i];
                }

                out.x += dist * u[i].x;
                out.y += dist * u[i].y;
                out.z += dist * u[i].z;
              }

              return out;
            }
            function pt_point_line(out, point, linePointA, linePointB) {
              Vec3.subtract(X, linePointA, linePointB);
              const dir = X;
              const dirSquaredLength = Vec3.lengthSqr(dir);

              if (dirSquaredLength == 0) {
                Vec3.copy(out, linePointA);
              } else {
                Vec3.subtract(X, point, linePointA);
                const t = Vec3.dot(X, dir) / dirSquaredLength;

                if (t < 0) {
                  Vec3.copy(out, linePointA);
                } else if (t > 1) {
                  Vec3.copy(out, linePointB);
                } else {
                  Vec3.scaleAndAdd(out, linePointA, dir, t);
                }
              }
            }

            var distance = /*#__PURE__*/Object.freeze({
                __proto__: null,
                point_plane: point_plane,
                pt_point_plane: pt_point_plane,
                pt_point_aabb: pt_point_aabb,
                pt_point_obb: pt_point_obb,
                pt_point_line: pt_point_line
            });
            exports('bQ', distance);

            var enums = exports('bR', {
              SHAPE_RAY: 1 << 0,
              SHAPE_LINE: 1 << 1,
              SHAPE_SPHERE: 1 << 2,
              SHAPE_AABB: 1 << 3,
              SHAPE_OBB: 1 << 4,
              SHAPE_PLANE: 1 << 5,
              SHAPE_TRIANGLE: 1 << 6,
              SHAPE_FRUSTUM: 1 << 7,
              SHAPE_FRUSTUM_ACCURATE: 1 << 8,
              SHAPE_CAPSULE: 1 << 9,
              SHAPE_SPLINE: 1 << 10
            });

            class Line {
              static create(sx, sy, sz, ex, ey, ez) {
                return new Line(sx, sy, sz, ex, ey, ez);
              }

              static clone(a) {
                return new Line(a.s.x, a.s.y, a.s.z, a.e.x, a.e.y, a.e.z);
              }

              static copy(out, a) {
                Vec3.copy(out.s, a.s);
                Vec3.copy(out.e, a.e);
                return out;
              }

              static fromPoints(out, start, end) {
                Vec3.copy(out.s, start);
                Vec3.copy(out.e, end);
                return out;
              }

              static set(out, sx, sy, sz, ex, ey, ez) {
                out.s.x = sx;
                out.s.y = sy;
                out.s.z = sz;
                out.e.x = ex;
                out.e.y = ey;
                out.e.z = ez;
                return out;
              }

              static len(a) {
                return Vec3.distance(a.s, a.e);
              }

              get type() {
                return this._type;
              }

              constructor(sx = 0, sy = 0, sz = 0, ex = 0, ey = 0, ez = -1) {
                this.s = void 0;
                this.e = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_LINE;
                this.s = new Vec3(sx, sy, sz);
                this.e = new Vec3(ex, ey, ez);
              }

              length() {
                return Vec3.distance(this.s, this.e);
              }

            } exports('bT', Line);

            class Ray {
              static create(ox = 0, oy = 0, oz = 0, dx = 0, dy = 0, dz = 1) {
                return new Ray(ox, oy, oz, dx, dy, dz);
              }

              static clone(a) {
                return new Ray(a.o.x, a.o.y, a.o.z, a.d.x, a.d.y, a.d.z);
              }

              static copy(out, a) {
                Vec3.copy(out.o, a.o);
                Vec3.copy(out.d, a.d);
                return out;
              }

              static fromPoints(out, origin, target) {
                Vec3.copy(out.o, origin);
                Vec3.normalize(out.d, Vec3.subtract(out.d, target, origin));
                return out;
              }

              static set(out, ox, oy, oz, dx, dy, dz) {
                out.o.x = ox;
                out.o.y = oy;
                out.o.z = oz;
                out.d.x = dx;
                out.d.y = dy;
                out.d.z = dz;
                return out;
              }

              get type() {
                return this._type;
              }

              constructor(ox = 0, oy = 0, oz = 0, dx = 0, dy = 0, dz = -1) {
                this.o = void 0;
                this.d = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_RAY;
                this.o = new Vec3(ox, oy, oz);
                this.d = new Vec3(dx, dy, dz);
              }

              computeHit(out, distance) {
                Vec3.normalize(out, this.d);
                Vec3.scaleAndAdd(out, this.o, out, distance);
              }

            } exports('bV', Ray);

            const _v3_tmp = new Vec3();

            const _offset = new Vec3();

            const _min = new Vec3();

            const _max = new Vec3();

            function maxComponent(v) {
              return Math.max(Math.max(v.x, v.y), v.z);
            }

            class Sphere {
              static create(cx, cy, cz, r) {
                return new Sphere(cx, cy, cz, r);
              }

              static clone(p) {
                return new Sphere(p.center.x, p.center.y, p.center.z, p.radius);
              }

              static copy(out, p) {
                Vec3.copy(out.center, p.center);
                out.radius = p.radius;
                return out;
              }

              static fromPoints(out, minPos, maxPos) {
                Vec3.multiplyScalar(out.center, Vec3.add(_v3_tmp, minPos, maxPos), 0.5);
                out.radius = Vec3.subtract(_v3_tmp, maxPos, minPos).length() * 0.5;
                return out;
              }

              static set(out, cx, cy, cz, r) {
                out.center.x = cx;
                out.center.y = cy;
                out.center.z = cz;
                out.radius = r;
                return out;
              }

              get center() {
                return this._center;
              }

              set center(val) {
                this._center = val;
              }

              get radius() {
                return this._radius;
              }

              set radius(val) {
                this._radius = val;
              }

              get type() {
                return this._type;
              }

              constructor(cx = 0, cy = 0, cz = 0, r = 1) {
                this._center = new Vec3(0, 0, 0);
                this._radius = 0;
                this._type = void 0;
                this._type = enums.SHAPE_SPHERE;
                this._center = new Vec3(cx, cy, cz);
                this._radius = r;
              }

              destroy() {}

              clone() {
                return Sphere.clone(this);
              }

              copy(a) {
                return Sphere.copy(this, a);
              }

              getBoundary(minPos, maxPos) {
                Vec3.set(minPos, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);
                Vec3.set(maxPos, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);
              }

              transform(m, pos, rot, scale, out) {
                Vec3.transformMat4(out.center, this.center, m);
                out.radius = this.radius * maxComponent(scale);
              }

              translateAndRotate(m, rot, out) {
                Vec3.transformMat4(out.center, this.center, m);
              }

              setScale(scale, out) {
                out.radius = this.radius * maxComponent(scale);
              }

              mergePoint(point) {
                if (this.radius < 0.0) {
                  this.center.set(point);
                  this.radius = 0.0;
                }

                Vec3.subtract(_offset, point, this.center);

                const dist = _offset.length();

                if (dist > this.radius) {
                  const half = (dist - this.radius) * 0.5;
                  this.radius += half;
                  Vec3.multiplyScalar(_offset, _offset, half / dist);
                  Vec3.add(this.center, this.center, _offset);
                }
              }

              mergePoints(points) {
                const length = points.length;
                if (length < 1) return;
                this.radius = -1.0;

                for (let i = 0; i < length; i++) {
                  this.mergePoint(points[i]);
                }
              }

              mergeAABB(a) {
                a.getBoundary(_min, _max);
                this.mergePoint(_min);
                this.mergePoint(_max);
              }

            } exports('bX', Sphere);

            class Triangle {
              static create(ax = 1, ay = 0, az = 0, bx = 0, by = 0, bz = 0, cx = 0, cy = 0, cz = 1) {
                return new Triangle(ax, ay, az, bx, by, bz, cx, cy, cz);
              }

              static clone(t) {
                return new Triangle(t.a.x, t.a.y, t.a.z, t.b.x, t.b.y, t.b.z, t.c.x, t.c.y, t.c.z);
              }

              static copy(out, t) {
                Vec3.copy(out.a, t.a);
                Vec3.copy(out.b, t.b);
                Vec3.copy(out.c, t.c);
                return out;
              }

              static fromPoints(out, a, b, c) {
                Vec3.copy(out.a, a);
                Vec3.copy(out.b, b);
                Vec3.copy(out.c, c);
                return out;
              }

              static set(out, ax, ay, az, bx, by, bz, cx, cy, cz) {
                out.a.x = ax;
                out.a.y = ay;
                out.a.z = az;
                out.b.x = bx;
                out.b.y = by;
                out.b.z = bz;
                out.c.x = cx;
                out.c.y = cy;
                out.c.z = cz;
                return out;
              }

              get type() {
                return this._type;
              }

              constructor(ax = 0, ay = 0, az = 0, bx = 1, by = 0, bz = 0, cx = 0, cy = 1, cz = 0) {
                this.a = void 0;
                this.b = void 0;
                this.c = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_TRIANGLE;
                this.a = new Vec3(ax, ay, az);
                this.b = new Vec3(bx, by, bz);
                this.c = new Vec3(cx, cy, cz);
              }

            } exports('bW', Triangle);

            let ERaycastMode;

            (function (ERaycastMode) {
              ERaycastMode[ERaycastMode["ALL"] = 0] = "ALL";
              ERaycastMode[ERaycastMode["CLOSEST"] = 1] = "CLOSEST";
              ERaycastMode[ERaycastMode["ANY"] = 2] = "ANY";
            })(ERaycastMode || (ERaycastMode = exports('c4', {})));

            const rayPlane = function () {
              const pt = new Vec3(0, 0, 0);
              return function (ray, plane) {
                const denom = Vec3.dot(ray.d, plane.n);

                if (Math.abs(denom) < Number.EPSILON) {
                  return 0;
                }

                Vec3.multiplyScalar(pt, plane.n, plane.d);
                const t = Vec3.dot(Vec3.subtract(pt, pt, ray.o), plane.n) / denom;

                if (t < 0) {
                  return 0;
                }

                return t;
              };
            }();

            const rayTriangle = function () {
              const ab = new Vec3(0, 0, 0);
              const ac = new Vec3(0, 0, 0);
              const pvec = new Vec3(0, 0, 0);
              const tvec = new Vec3(0, 0, 0);
              const qvec = new Vec3(0, 0, 0);
              return function (ray, triangle, doubleSided) {
                Vec3.subtract(ab, triangle.b, triangle.a);
                Vec3.subtract(ac, triangle.c, triangle.a);
                Vec3.cross(pvec, ray.d, ac);
                const det = Vec3.dot(ab, pvec);

                if (det < Number.EPSILON && (!doubleSided || det > -Number.EPSILON)) {
                  return 0;
                }

                const inv_det = 1 / det;
                Vec3.subtract(tvec, ray.o, triangle.a);
                const u = Vec3.dot(tvec, pvec) * inv_det;

                if (u < 0 || u > 1) {
                  return 0;
                }

                Vec3.cross(qvec, tvec, ab);
                const v = Vec3.dot(ray.d, qvec) * inv_det;

                if (v < 0 || u + v > 1) {
                  return 0;
                }

                const t = Vec3.dot(ac, qvec) * inv_det;
                return t < 0 ? 0 : t;
              };
            }();

            const raySphere = function () {
              const e = new Vec3(0, 0, 0);
              return function (ray, sphere) {
                const r = sphere.radius;
                const c = sphere.center;
                const o = ray.o;
                const d = ray.d;
                const rSq = r * r;
                Vec3.subtract(e, c, o);
                const eSq = e.lengthSqr();
                const aLength = Vec3.dot(e, d);
                const fSq = rSq - (eSq - aLength * aLength);

                if (fSq < 0) {
                  return 0;
                }

                const f = Math.sqrt(fSq);
                const t = eSq < rSq ? aLength + f : aLength - f;

                if (t < 0) {
                  return 0;
                }

                return t;
              };
            }();

            const rayAABB = function () {
              const min = new Vec3();
              const max = new Vec3();
              return function (ray, aabb) {
                Vec3.subtract(min, aabb.center, aabb.halfExtents);
                Vec3.add(max, aabb.center, aabb.halfExtents);
                return rayAABB2(ray, min, max);
              };
            }();

            function rayAABB2(ray, min, max) {
              const o = ray.o;
              const d = ray.d;
              const ix = 1 / d.x;
              const iy = 1 / d.y;
              const iz = 1 / d.z;
              const t1 = (min.x - o.x) * ix;
              const t2 = (max.x - o.x) * ix;
              const t3 = (min.y - o.y) * iy;
              const t4 = (max.y - o.y) * iy;
              const t5 = (min.z - o.z) * iz;
              const t6 = (max.z - o.z) * iz;
              const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
              const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6));

              if (tmax < 0 || tmin > tmax) {
                return 0;
              }

              return tmin > 0 ? tmin : tmax;
            }

            const rayOBB = function () {
              let center = new Vec3();
              let o = new Vec3();
              let d = new Vec3();
              const X = new Vec3();
              const Y = new Vec3();
              const Z = new Vec3();
              const p = new Vec3();
              const size = new Array(3);
              const f = new Array(3);
              const e = new Array(3);
              const t = new Array(6);
              return function (ray, obb) {
                size[0] = obb.halfExtents.x;
                size[1] = obb.halfExtents.y;
                size[2] = obb.halfExtents.z;
                center = obb.center;
                o = ray.o;
                d = ray.d;
                Vec3.set(X, obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);
                Vec3.set(Y, obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);
                Vec3.set(Z, obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);
                Vec3.subtract(p, center, o);
                f[0] = Vec3.dot(X, d);
                f[1] = Vec3.dot(Y, d);
                f[2] = Vec3.dot(Z, d);
                e[0] = Vec3.dot(X, p);
                e[1] = Vec3.dot(Y, p);
                e[2] = Vec3.dot(Z, p);

                for (let i = 0; i < 3; ++i) {
                  if (f[i] === 0) {
                    if (-e[i] - size[i] > 0 || -e[i] + size[i] < 0) {
                      return 0;
                    }

                    f[i] = 0.0000001;
                  }

                  t[i * 2 + 0] = (e[i] + size[i]) / f[i];
                  t[i * 2 + 1] = (e[i] - size[i]) / f[i];
                }

                const tmin = Math.max(Math.max(Math.min(t[0], t[1]), Math.min(t[2], t[3])), Math.min(t[4], t[5]));
                const tmax = Math.min(Math.min(Math.max(t[0], t[1]), Math.max(t[2], t[3])), Math.max(t[4], t[5]));

                if (tmax < 0 || tmin > tmax) {
                  return 0;
                }

                return tmin > 0 ? tmin : tmax;
              };
            }();

            const rayCapsule = function () {
              const v3_0 = new Vec3();
              const v3_1 = new Vec3();
              const v3_2 = new Vec3();
              const v3_3 = new Vec3();
              const v3_4 = new Vec3();
              const v3_5 = new Vec3();
              const v3_6 = new Vec3();
              const sphere_0 = new Sphere();
              return function (ray, capsule) {
                const radiusSqr = capsule.radius * capsule.radius;
                const vRayNorm = Vec3.normalize(v3_0, ray.d);
                const A = capsule.ellipseCenter0;
                const B = capsule.ellipseCenter1;
                const BA = Vec3.subtract(v3_1, B, A);

                if (BA.equals(Vec3.ZERO)) {
                  sphere_0.radius = capsule.radius;
                  sphere_0.center.set(capsule.ellipseCenter0);
                  return intersect.raySphere(ray, sphere_0);
                }

                const O = ray.o;
                const OA = Vec3.subtract(v3_2, O, A);
                const VxBA = Vec3.cross(v3_3, vRayNorm, BA);
                const a = VxBA.lengthSqr();

                if (a === 0) {
                  sphere_0.radius = capsule.radius;
                  const BO = Vec3.subtract(v3_4, B, O);

                  if (OA.lengthSqr() < BO.lengthSqr()) {
                    sphere_0.center.set(capsule.ellipseCenter0);
                  } else {
                    sphere_0.center.set(capsule.ellipseCenter1);
                  }

                  return intersect.raySphere(ray, sphere_0);
                }

                const OAxBA = Vec3.cross(v3_4, OA, BA);
                const ab2 = BA.lengthSqr();
                const b = 2 * Vec3.dot(VxBA, OAxBA);
                const c = OAxBA.lengthSqr() - radiusSqr * ab2;
                const d = b * b - 4 * a * c;

                if (d < 0) {
                  return 0;
                }

                const t = (-b - Math.sqrt(d)) / (2 * a);

                if (t < 0) {
                  sphere_0.radius = capsule.radius;
                  const BO = Vec3.subtract(v3_5, B, O);

                  if (OA.lengthSqr() < BO.lengthSqr()) {
                    sphere_0.center.set(capsule.ellipseCenter0);
                  } else {
                    sphere_0.center.set(capsule.ellipseCenter1);
                  }

                  return intersect.raySphere(ray, sphere_0);
                } else {
                  const iPos = Vec3.scaleAndAdd(v3_5, ray.o, vRayNorm, t);
                  const iPosLen = Vec3.subtract(v3_6, iPos, A);
                  const tLimit = Vec3.dot(iPosLen, BA) / ab2;

                  if (tLimit >= 0 && tLimit <= 1) {
                    return t;
                  } else if (tLimit < 0) {
                    sphere_0.radius = capsule.radius;
                    sphere_0.center.set(capsule.ellipseCenter0);
                    return intersect.raySphere(ray, sphere_0);
                  } else if (tLimit > 1) {
                    sphere_0.radius = capsule.radius;
                    sphere_0.center.set(capsule.ellipseCenter1);
                    return intersect.raySphere(ray, sphere_0);
                  } else {
                    return 0;
                  }
                }
              };
            }();

            const raySubMesh = function () {
              const tri = Triangle.create();
              const deOpt = {
                distance: Infinity,
                doubleSided: false,
                mode: ERaycastMode.ANY
              };
              let minDis = 0;

              const fillResult = (m, d, i0, i1, i2, r) => {
                if (m === ERaycastMode.CLOSEST) {
                  if (minDis > d || minDis === 0) {
                    minDis = d;

                    if (r) {
                      if (r.length === 0) {
                        r.push({
                          distance: d,
                          vertexIndex0: i0 / 3,
                          vertexIndex1: i1 / 3,
                          vertexIndex2: i2 / 3
                        });
                      } else {
                        r[0].distance = d;
                        r[0].vertexIndex0 = i0 / 3;
                        r[0].vertexIndex1 = i1 / 3;
                        r[0].vertexIndex2 = i2 / 3;
                      }
                    }
                  }
                } else {
                  minDis = d;
                  if (r) r.push({
                    distance: d,
                    vertexIndex0: i0 / 3,
                    vertexIndex1: i1 / 3,
                    vertexIndex2: i2 / 3
                  });
                }
              };

              const narrowphase = (vb, ib, pm, ray, opt) => {
                if (pm === PrimitiveMode.TRIANGLE_LIST) {
                  const cnt = ib.length;

                  for (let j = 0; j < cnt; j += 3) {
                    const i0 = ib[j] * 3;
                    const i1 = ib[j + 1] * 3;
                    const i2 = ib[j + 2] * 3;
                    Vec3.set(tri.a, vb[i0], vb[i0 + 1], vb[i0 + 2]);
                    Vec3.set(tri.b, vb[i1], vb[i1 + 1], vb[i1 + 2]);
                    Vec3.set(tri.c, vb[i2], vb[i2 + 1], vb[i2 + 2]);
                    const dist = intersect.rayTriangle(ray, tri, opt.doubleSided);
                    if (dist === 0 || dist > opt.distance) continue;
                    fillResult(opt.mode, dist, i0, i1, i2, opt.result);
                    if (opt.mode === ERaycastMode.ANY) return dist;
                  }
                } else if (pm === PrimitiveMode.TRIANGLE_STRIP) {
                  const cnt = ib.length - 2;
                  let rev = 0;

                  for (let j = 0; j < cnt; j += 1) {
                    const i0 = ib[j - rev] * 3;
                    const i1 = ib[j + rev + 1] * 3;
                    const i2 = ib[j + 2] * 3;
                    Vec3.set(tri.a, vb[i0], vb[i0 + 1], vb[i0 + 2]);
                    Vec3.set(tri.b, vb[i1], vb[i1 + 1], vb[i1 + 2]);
                    Vec3.set(tri.c, vb[i2], vb[i2 + 1], vb[i2 + 2]);
                    rev = ~rev;
                    const dist = intersect.rayTriangle(ray, tri, opt.doubleSided);
                    if (dist === 0 || dist > opt.distance) continue;
                    fillResult(opt.mode, dist, i0, i1, i2, opt.result);
                    if (opt.mode === ERaycastMode.ANY) return dist;
                  }
                } else if (pm === PrimitiveMode.TRIANGLE_FAN) {
                  const cnt = ib.length - 1;
                  const i0 = ib[0] * 3;
                  Vec3.set(tri.a, vb[i0], vb[i0 + 1], vb[i0 + 2]);

                  for (let j = 1; j < cnt; j += 1) {
                    const i1 = ib[j] * 3;
                    const i2 = ib[j + 1] * 3;
                    Vec3.set(tri.b, vb[i1], vb[i1 + 1], vb[i1 + 2]);
                    Vec3.set(tri.c, vb[i2], vb[i2 + 1], vb[i2 + 2]);
                    const dist = intersect.rayTriangle(ray, tri, opt.doubleSided);
                    if (dist === 0 || dist > opt.distance) continue;
                    fillResult(opt.mode, dist, i0, i1, i2, opt.result);
                    if (opt.mode === ERaycastMode.ANY) return dist;
                  }
                }

                return minDis;
              };

              return function (ray, submesh, options) {
                minDis = 0;
                if (submesh.geometricInfo.positions.length === 0) return minDis;
                const opt = options === undefined ? deOpt : options;
                const min = submesh.geometricInfo.boundingBox.min;
                const max = submesh.geometricInfo.boundingBox.max;

                if (rayAABB2(ray, min, max)) {
                  const pm = submesh.primitiveMode;
                  const {
                    positions: vb,
                    indices: ib
                  } = submesh.geometricInfo;
                  narrowphase(vb, ib, pm, ray, opt);
                }

                return minDis;
              };
            }();

            const rayMesh = function () {
              let minDis = 0;
              const deOpt = {
                distance: Infinity,
                doubleSided: false,
                mode: ERaycastMode.ANY
              };
              return function (ray, mesh, options) {
                minDis = 0;
                const opt = options === undefined ? deOpt : options;
                const length = mesh.renderingSubMeshes.length;
                const min = mesh.struct.minPosition;
                const max = mesh.struct.maxPosition;
                if (min && max && !rayAABB2(ray, min, max)) return minDis;

                for (let i = 0; i < length; i++) {
                  const sm = mesh.renderingSubMeshes[i];
                  const dis = raySubMesh(ray, sm, opt);

                  if (dis) {
                    if (opt.mode === ERaycastMode.CLOSEST) {
                      if (minDis === 0 || minDis > dis) {
                        minDis = dis;
                        if (opt.subIndices) opt.subIndices[0] = i;
                      }
                    } else {
                      minDis = dis;
                      if (opt.subIndices) opt.subIndices.push(i);

                      if (opt.mode === ERaycastMode.ANY) {
                        return dis;
                      }
                    }
                  }
                }

                if (minDis && opt.mode === ERaycastMode.CLOSEST) {
                  if (opt.result) {
                    opt.result[0].distance = minDis;
                    opt.result.length = 1;
                  }

                  if (opt.subIndices) opt.subIndices.length = 1;
                }

                return minDis;
              };
            }();

            const rayModel = function () {
              let minDis = 0;
              const deOpt = {
                distance: Infinity,
                doubleSided: false,
                mode: ERaycastMode.ANY
              };
              const modelRay = new Ray();
              const m4 = new Mat4();
              return function (r, model, options) {
                minDis = 0;
                const opt = options === undefined ? deOpt : options;
                const wb = model.worldBounds;
                if (wb && !rayAABB(r, wb)) return minDis;
                Ray.copy(modelRay, r);

                if (model.node) {
                  Mat4.invert(m4, model.node.getWorldMatrix(m4));
                  Vec3.transformMat4(modelRay.o, r.o, m4);
                  Vec3.transformMat4Normal(modelRay.d, r.d, m4);
                }

                const subModels = model.subModels;

                for (let i = 0; i < subModels.length; i++) {
                  const subMesh = subModels[i].subMesh;
                  const dis = raySubMesh(modelRay, subMesh, opt);

                  if (dis) {
                    if (opt.mode === ERaycastMode.CLOSEST) {
                      if (minDis === 0 || minDis > dis) {
                        minDis = dis;
                        if (opt.subIndices) opt.subIndices[0] = i;
                      }
                    } else {
                      minDis = dis;
                      if (opt.subIndices) opt.subIndices.push(i);

                      if (opt.mode === ERaycastMode.ANY) {
                        return dis;
                      }
                    }
                  }
                }

                if (minDis && opt.mode === ERaycastMode.CLOSEST) {
                  if (opt.result) {
                    opt.result[0].distance = minDis;
                    opt.result.length = 1;
                  }

                  if (opt.subIndices) opt.subIndices.length = 1;
                }

                return minDis;
              };
            }();

            const linePlane = function () {
              const ab = new Vec3(0, 0, 0);
              return function (line, plane) {
                Vec3.subtract(ab, line.e, line.s);
                const t = (plane.d - Vec3.dot(line.s, plane.n)) / Vec3.dot(ab, plane.n);

                if (t < 0 || t > 1) {
                  return 0;
                }

                return t;
              };
            }();

            const lineTriangle = function () {
              const ab = new Vec3(0, 0, 0);
              const ac = new Vec3(0, 0, 0);
              const qp = new Vec3(0, 0, 0);
              const ap = new Vec3(0, 0, 0);
              const n = new Vec3(0, 0, 0);
              const e = new Vec3(0, 0, 0);
              return function (line, triangle, outPt) {
                Vec3.subtract(ab, triangle.b, triangle.a);
                Vec3.subtract(ac, triangle.c, triangle.a);
                Vec3.subtract(qp, line.s, line.e);
                Vec3.cross(n, ab, ac);
                const det = Vec3.dot(qp, n);

                if (det <= 0.0) {
                  return 0;
                }

                Vec3.subtract(ap, line.s, triangle.a);
                const t = Vec3.dot(ap, n);

                if (t < 0 || t > det) {
                  return 0;
                }

                Vec3.cross(e, qp, ap);
                let v = Vec3.dot(ac, e);

                if (v < 0 || v > det) {
                  return 0;
                }

                let w = -Vec3.dot(ab, e);

                if (w < 0.0 || v + w > det) {
                  return 0;
                }

                if (outPt) {
                  const invDet = 1.0 / det;
                  v *= invDet;
                  w *= invDet;
                  const u = 1.0 - v - w;
                  Vec3.set(outPt, triangle.a.x * u + triangle.b.x * v + triangle.c.x * w, triangle.a.y * u + triangle.b.y * v + triangle.c.y * w, triangle.a.z * u + triangle.b.z * v + triangle.c.z * w);
                }

                return 1;
              };
            }();

            const r_t = new Ray();

            function lineAABB(line, aabb) {
              r_t.o.set(line.s);
              Vec3.subtract(r_t.d, line.e, line.s);
              r_t.d.normalize();
              const min = rayAABB(r_t, aabb);
              const len = line.length();

              if (min <= len) {
                return min;
              } else {
                return 0;
              }
            }

            function lineOBB(line, obb) {
              r_t.o.set(line.s);
              Vec3.subtract(r_t.d, line.e, line.s);
              r_t.d.normalize();
              const min = rayOBB(r_t, obb);
              const len = line.length();

              if (min <= len) {
                return min;
              } else {
                return 0;
              }
            }

            function lineSphere(line, sphere) {
              r_t.o.set(line.s);
              Vec3.subtract(r_t.d, line.e, line.s);
              r_t.d.normalize();
              const min = raySphere(r_t, sphere);
              const len = line.length();

              if (min <= len) {
                return min;
              } else {
                return 0;
              }
            }

            const aabbWithAABB = function () {
              const aMin = new Vec3();
              const aMax = new Vec3();
              const bMin = new Vec3();
              const bMax = new Vec3();
              return function (aabb1, aabb2) {
                Vec3.subtract(aMin, aabb1.center, aabb1.halfExtents);
                Vec3.add(aMax, aabb1.center, aabb1.halfExtents);
                Vec3.subtract(bMin, aabb2.center, aabb2.halfExtents);
                Vec3.add(bMax, aabb2.center, aabb2.halfExtents);
                return aMin.x <= bMax.x && aMax.x >= bMin.x && aMin.y <= bMax.y && aMax.y >= bMin.y && aMin.z <= bMax.z && aMax.z >= bMin.z;
              };
            }();

            function getAABBVertices(min, max, out) {
              Vec3.set(out[0], min.x, max.y, max.z);
              Vec3.set(out[1], min.x, max.y, min.z);
              Vec3.set(out[2], min.x, min.y, max.z);
              Vec3.set(out[3], min.x, min.y, min.z);
              Vec3.set(out[4], max.x, max.y, max.z);
              Vec3.set(out[5], max.x, max.y, min.z);
              Vec3.set(out[6], max.x, min.y, max.z);
              Vec3.set(out[7], max.x, min.y, min.z);
            }

            function getOBBVertices(c, e, a1, a2, a3, out) {
              Vec3.set(out[0], c.x + a1.x * e.x + a2.x * e.y + a3.x * e.z, c.y + a1.y * e.x + a2.y * e.y + a3.y * e.z, c.z + a1.z * e.x + a2.z * e.y + a3.z * e.z);
              Vec3.set(out[1], c.x - a1.x * e.x + a2.x * e.y + a3.x * e.z, c.y - a1.y * e.x + a2.y * e.y + a3.y * e.z, c.z - a1.z * e.x + a2.z * e.y + a3.z * e.z);
              Vec3.set(out[2], c.x + a1.x * e.x - a2.x * e.y + a3.x * e.z, c.y + a1.y * e.x - a2.y * e.y + a3.y * e.z, c.z + a1.z * e.x - a2.z * e.y + a3.z * e.z);
              Vec3.set(out[3], c.x + a1.x * e.x + a2.x * e.y - a3.x * e.z, c.y + a1.y * e.x + a2.y * e.y - a3.y * e.z, c.z + a1.z * e.x + a2.z * e.y - a3.z * e.z);
              Vec3.set(out[4], c.x - a1.x * e.x - a2.x * e.y - a3.x * e.z, c.y - a1.y * e.x - a2.y * e.y - a3.y * e.z, c.z - a1.z * e.x - a2.z * e.y - a3.z * e.z);
              Vec3.set(out[5], c.x + a1.x * e.x - a2.x * e.y - a3.x * e.z, c.y + a1.y * e.x - a2.y * e.y - a3.y * e.z, c.z + a1.z * e.x - a2.z * e.y - a3.z * e.z);
              Vec3.set(out[6], c.x - a1.x * e.x + a2.x * e.y - a3.x * e.z, c.y - a1.y * e.x + a2.y * e.y - a3.y * e.z, c.z - a1.z * e.x + a2.z * e.y - a3.z * e.z);
              Vec3.set(out[7], c.x - a1.x * e.x - a2.x * e.y + a3.x * e.z, c.y - a1.y * e.x - a2.y * e.y + a3.y * e.z, c.z - a1.z * e.x - a2.z * e.y + a3.z * e.z);
            }

            function getInterval(vertices, axis) {
              let min = Vec3.dot(axis, vertices[0]);
              let max = min;

              for (let i = 1; i < 8; ++i) {
                const projection = Vec3.dot(axis, vertices[i]);
                min = projection < min ? projection : min;
                max = projection > max ? projection : max;
              }

              return [min, max];
            }

            const aabbWithOBB = function () {
              const test = new Array(15);

              for (let i = 0; i < 15; i++) {
                test[i] = new Vec3(0, 0, 0);
              }

              const vertices = new Array(8);
              const vertices2 = new Array(8);

              for (let i = 0; i < 8; i++) {
                vertices[i] = new Vec3(0, 0, 0);
                vertices2[i] = new Vec3(0, 0, 0);
              }

              const min = new Vec3();
              const max = new Vec3();
              return function (aabb, obb) {
                Vec3.set(test[0], 1, 0, 0);
                Vec3.set(test[1], 0, 1, 0);
                Vec3.set(test[2], 0, 0, 1);
                Vec3.set(test[3], obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);
                Vec3.set(test[4], obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);
                Vec3.set(test[5], obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);

                for (let i = 0; i < 3; ++i) {
                  Vec3.cross(test[6 + i * 3 + 0], test[i], test[3]);
                  Vec3.cross(test[6 + i * 3 + 1], test[i], test[4]);
                  Vec3.cross(test[6 + i * 3 + 1], test[i], test[5]);
                }

                Vec3.subtract(min, aabb.center, aabb.halfExtents);
                Vec3.add(max, aabb.center, aabb.halfExtents);
                getAABBVertices(min, max, vertices);
                getOBBVertices(obb.center, obb.halfExtents, test[3], test[4], test[5], vertices2);

                for (let j = 0; j < 15; ++j) {
                  const a = getInterval(vertices, test[j]);
                  const b = getInterval(vertices2, test[j]);

                  if (b[0] > a[1] || a[0] > b[1]) {
                    return 0;
                  }
                }

                return 1;
              };
            }();

            const aabbPlane = function (aabb, plane) {
              const r = aabb.halfExtents.x * Math.abs(plane.n.x) + aabb.halfExtents.y * Math.abs(plane.n.y) + aabb.halfExtents.z * Math.abs(plane.n.z);
              const dot = Vec3.dot(plane.n, aabb.center);

              if (dot + r < plane.d) {
                return -1;
              } else if (dot - r > plane.d) {
                return 0;
              }

              return 1;
            };

            const aabbFrustum = function (aabb, frustum) {
              for (let i = 0; i < frustum.planes.length; i++) {
                if (aabbPlane(aabb, frustum.planes[i]) === -1) {
                  return 0;
                }
              }

              return 1;
            };

            const aabbFrustumCompletelyInside = function (aabb, frustum) {
              for (let i = 0; i < frustum.planes.length; i++) {
                if (aabbPlane(aabb, frustum.planes[i]) !== 0) {
                  return 0;
                }
              }

              return 1;
            };

            const aabbFrustumAccurate = function () {
              const tmp = new Array(8);
              let out1 = 0;
              let out2 = 0;

              for (let i = 0; i < tmp.length; i++) {
                tmp[i] = new Vec3(0, 0, 0);
              }

              return function (aabb, frustum) {
                let result = 0;
                let intersects = false;

                for (let i = 0; i < frustum.planes.length; i++) {
                  result = aabbPlane(aabb, frustum.planes[i]);
                  if (result === -1) return 0;else if (result === 1) {
                      intersects = true;
                    }
                }

                if (!intersects) {
                  return 1;
                }

                for (let i = 0; i < frustum.vertices.length; i++) {
                  Vec3.subtract(tmp[i], frustum.vertices[i], aabb.center);
                }

                out1 = 0, out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  if (tmp[i].x > aabb.halfExtents.x) {
                    out1++;
                  } else if (tmp[i].x < -aabb.halfExtents.x) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                out1 = 0;
                out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  if (tmp[i].y > aabb.halfExtents.y) {
                    out1++;
                  } else if (tmp[i].y < -aabb.halfExtents.y) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                out1 = 0;
                out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  if (tmp[i].z > aabb.halfExtents.z) {
                    out1++;
                  } else if (tmp[i].z < -aabb.halfExtents.z) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                return 1;
              };
            }();

            const obbPoint = function () {
              const tmp = new Vec3(0, 0, 0);
              const m3 = new Mat3();

              const lessThan = function (a, b) {
                return Math.abs(a.x) < b.x && Math.abs(a.y) < b.y && Math.abs(a.z) < b.z;
              };

              return function (obb, point) {
                Vec3.subtract(tmp, point, obb.center);
                Vec3.transformMat3(tmp, tmp, Mat3.transpose(m3, obb.orientation));
                return lessThan(tmp, obb.halfExtents);
              };
            }();

            const obbPlane = function () {
              const absDot = function (n, x, y, z) {
                return Math.abs(n.x * x + n.y * y + n.z * z);
              };

              return function (obb, plane) {
                const r = obb.halfExtents.x * absDot(plane.n, obb.orientation.m00, obb.orientation.m01, obb.orientation.m02) + obb.halfExtents.y * absDot(plane.n, obb.orientation.m03, obb.orientation.m04, obb.orientation.m05) + obb.halfExtents.z * absDot(plane.n, obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);
                const dot = Vec3.dot(plane.n, obb.center);

                if (dot + r < plane.d) {
                  return -1;
                } else if (dot - r > plane.d) {
                  return 0;
                }

                return 1;
              };
            }();

            const obbFrustum = function (obb, frustum) {
              for (let i = 0; i < frustum.planes.length; i++) {
                if (obbPlane(obb, frustum.planes[i]) === -1) {
                  return 0;
                }
              }

              return 1;
            };

            const obbFrustumAccurate = function () {
              const tmp = new Array(8);
              let dist = 0;
              let out1 = 0;
              let out2 = 0;

              for (let i = 0; i < tmp.length; i++) {
                tmp[i] = new Vec3(0, 0, 0);
              }

              const dot = function (n, x, y, z) {
                return n.x * x + n.y * y + n.z * z;
              };

              return function (obb, frustum) {
                let result = 0;
                let intersects = false;

                for (let i = 0; i < frustum.planes.length; i++) {
                  result = obbPlane(obb, frustum.planes[i]);
                  if (result === -1) return 0;else if (result === 1) {
                      intersects = true;
                    }
                }

                if (!intersects) {
                  return 1;
                }

                for (let i = 0; i < frustum.vertices.length; i++) {
                  Vec3.subtract(tmp[i], frustum.vertices[i], obb.center);
                }

                out1 = 0, out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  dist = dot(tmp[i], obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);

                  if (dist > obb.halfExtents.x) {
                    out1++;
                  } else if (dist < -obb.halfExtents.x) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                out1 = 0;
                out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  dist = dot(tmp[i], obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);

                  if (dist > obb.halfExtents.y) {
                    out1++;
                  } else if (dist < -obb.halfExtents.y) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                out1 = 0;
                out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  dist = dot(tmp[i], obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);

                  if (dist > obb.halfExtents.z) {
                    out1++;
                  } else if (dist < -obb.halfExtents.z) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                return 1;
              };
            }();

            const obbWithOBB = function () {
              const test = new Array(15);

              for (let i = 0; i < 15; i++) {
                test[i] = new Vec3(0, 0, 0);
              }

              const vertices = new Array(8);
              const vertices2 = new Array(8);

              for (let i = 0; i < 8; i++) {
                vertices[i] = new Vec3(0, 0, 0);
                vertices2[i] = new Vec3(0, 0, 0);
              }

              return function (obb1, obb2) {
                Vec3.set(test[0], obb1.orientation.m00, obb1.orientation.m01, obb1.orientation.m02);
                Vec3.set(test[1], obb1.orientation.m03, obb1.orientation.m04, obb1.orientation.m05);
                Vec3.set(test[2], obb1.orientation.m06, obb1.orientation.m07, obb1.orientation.m08);
                Vec3.set(test[3], obb2.orientation.m00, obb2.orientation.m01, obb2.orientation.m02);
                Vec3.set(test[4], obb2.orientation.m03, obb2.orientation.m04, obb2.orientation.m05);
                Vec3.set(test[5], obb2.orientation.m06, obb2.orientation.m07, obb2.orientation.m08);

                for (let i = 0; i < 3; ++i) {
                  Vec3.cross(test[6 + i * 3 + 0], test[i], test[3]);
                  Vec3.cross(test[6 + i * 3 + 1], test[i], test[4]);
                  Vec3.cross(test[6 + i * 3 + 2], test[i], test[5]);
                }

                getOBBVertices(obb1.center, obb1.halfExtents, test[0], test[1], test[2], vertices);
                getOBBVertices(obb2.center, obb2.halfExtents, test[3], test[4], test[5], vertices2);

                for (let i = 0; i < 15; ++i) {
                  const a = getInterval(vertices, test[i]);
                  const b = getInterval(vertices2, test[i]);

                  if (b[0] > a[1] || a[0] > b[1]) {
                    return 0;
                  }
                }

                return 1;
              };
            }();

            const obbCapsule = function () {
              const sphere_0 = new Sphere();
              const v3_0 = new Vec3();
              const v3_1 = new Vec3();
              const v3_2 = new Vec3();
              const v3_verts8 = new Array(8);

              for (let i = 0; i < 8; i++) {
                v3_verts8[i] = new Vec3();
              }

              const v3_axis8 = new Array(8);

              for (let i = 0; i < 8; i++) {
                v3_axis8[i] = new Vec3();
              }

              return function (obb, capsule) {
                const h = Vec3.squaredDistance(capsule.ellipseCenter0, capsule.ellipseCenter1);

                if (h === 0) {
                  sphere_0.radius = capsule.radius;
                  sphere_0.center.set(capsule.ellipseCenter0);
                  return intersect.sphereOBB(sphere_0, obb);
                } else {
                  v3_0.x = obb.orientation.m00;
                  v3_0.y = obb.orientation.m01;
                  v3_0.z = obb.orientation.m02;
                  v3_1.x = obb.orientation.m03;
                  v3_1.y = obb.orientation.m04;
                  v3_1.z = obb.orientation.m05;
                  v3_2.x = obb.orientation.m06;
                  v3_2.y = obb.orientation.m07;
                  v3_2.z = obb.orientation.m08;
                  getOBBVertices(obb.center, obb.halfExtents, v3_0, v3_1, v3_2, v3_verts8);
                  const axes = v3_axis8;
                  const a0 = Vec3.copy(axes[0], v3_0);
                  const a1 = Vec3.copy(axes[1], v3_1);
                  const a2 = Vec3.copy(axes[2], v3_2);
                  const C = Vec3.subtract(axes[3], capsule.center, obb.center);
                  C.normalize();
                  const B = Vec3.subtract(axes[4], capsule.ellipseCenter0, capsule.ellipseCenter1);
                  B.normalize();
                  Vec3.cross(axes[5], a0, B);
                  Vec3.cross(axes[6], a1, B);
                  Vec3.cross(axes[7], a2, B);

                  for (let i = 0; i < 8; ++i) {
                    const a = getInterval(v3_verts8, axes[i]);
                    const d0 = Vec3.dot(axes[i], capsule.ellipseCenter0);
                    const d1 = Vec3.dot(axes[i], capsule.ellipseCenter1);
                    const max_d = Math.max(d0, d1);
                    const min_d = Math.min(d0, d1);
                    const d_min = min_d - capsule.radius;
                    const d_max = max_d + capsule.radius;

                    if (d_min > a[1] || a[0] > d_max) {
                      return 0;
                    }
                  }

                  return 1;
                }
              };
            }();

            const spherePlane = function (sphere, plane) {
              const dot = Vec3.dot(plane.n, sphere.center);
              const r = sphere.radius * plane.n.length();

              if (dot + r < plane.d) {
                return -1;
              } else if (dot - r > plane.d) {
                return 0;
              }

              return 1;
            };

            const sphereFrustum = function (sphere, frustum) {
              for (let i = 0; i < frustum.planes.length; i++) {
                if (spherePlane(sphere, frustum.planes[i]) === -1) {
                  return 0;
                }
              }

              return 1;
            };

            const sphereFrustumAccurate = function () {
              const pt = new Vec3(0, 0, 0);
              const map = [1, -1, 1, -1, 1, -1];
              return function (sphere, frustum) {
                for (let i = 0; i < 6; i++) {
                  const plane = frustum.planes[i];
                  const r = sphere.radius;
                  const c = sphere.center;
                  const n = plane.n;
                  const d = plane.d;
                  const dot = Vec3.dot(n, c);
                  if (dot + r < d) return 0;else if (dot - r > d) {
                      continue;
                    }
                  Vec3.add(pt, c, Vec3.multiplyScalar(pt, n, r));

                  for (let j = 0; j < 6; j++) {
                    if (j === i || j === i + map[i]) {
                      continue;
                    }

                    const test = frustum.planes[j];

                    if (Vec3.dot(test.n, pt) < test.d) {
                      return 0;
                    }
                  }
                }

                return 1;
              };
            }();

            const sphereWithSphere = function (sphere0, sphere1) {
              const r = sphere0.radius + sphere1.radius;
              return Vec3.squaredDistance(sphere0.center, sphere1.center) < r * r;
            };

            const sphereAABB = function () {
              const pt = new Vec3();
              return function (sphere, aabb) {
                pt_point_aabb(pt, sphere.center, aabb);
                return Vec3.squaredDistance(sphere.center, pt) < sphere.radius * sphere.radius;
              };
            }();

            const sphereOBB = function () {
              const pt = new Vec3();
              return function (sphere, obb) {
                pt_point_obb(pt, sphere.center, obb);
                return Vec3.squaredDistance(sphere.center, pt) < sphere.radius * sphere.radius;
              };
            }();

            const sphereCapsule = function () {
              const v3_0 = new Vec3();
              const v3_1 = new Vec3();
              return function (sphere, capsule) {
                const r = sphere.radius + capsule.radius;
                const squaredR = r * r;
                const h = Vec3.squaredDistance(capsule.ellipseCenter0, capsule.ellipseCenter1);

                if (h === 0) {
                  return Vec3.squaredDistance(sphere.center, capsule.center) < squaredR;
                } else {
                  Vec3.subtract(v3_0, sphere.center, capsule.ellipseCenter0);
                  Vec3.subtract(v3_1, capsule.ellipseCenter1, capsule.ellipseCenter0);
                  const t = Vec3.dot(v3_0, v3_1) / h;

                  if (t < 0) {
                    return Vec3.squaredDistance(sphere.center, capsule.ellipseCenter0) < squaredR;
                  } else if (t > 1) {
                    return Vec3.squaredDistance(sphere.center, capsule.ellipseCenter1) < squaredR;
                  } else {
                    Vec3.scaleAndAdd(v3_0, capsule.ellipseCenter0, v3_1, t);
                    return Vec3.squaredDistance(sphere.center, v3_0) < squaredR;
                  }
                }
              };
            }();

            const capsuleWithCapsule = function () {
              const v3_0 = new Vec3();
              const v3_1 = new Vec3();
              const v3_2 = new Vec3();
              const v3_3 = new Vec3();
              const v3_4 = new Vec3();
              const v3_5 = new Vec3();
              return function capsuleWithCapsule(capsuleA, capsuleB) {
                const u = Vec3.subtract(v3_0, capsuleA.ellipseCenter1, capsuleA.ellipseCenter0);
                const v = Vec3.subtract(v3_1, capsuleB.ellipseCenter1, capsuleB.ellipseCenter0);
                const w = Vec3.subtract(v3_2, capsuleA.ellipseCenter0, capsuleB.ellipseCenter0);
                const a = Vec3.dot(u, u);
                const b = Vec3.dot(u, v);
                const c = Vec3.dot(v, v);
                const d = Vec3.dot(u, w);
                const e = Vec3.dot(v, w);
                const D = a * c - b * b;
                let sN;
                let sD = D;
                let tN;
                let tD = D;

                if (D < EPSILON) {
                  sN = 0.0;
                  sD = 1.0;
                  tN = e;
                  tD = c;
                } else {
                  sN = b * e - c * d;
                  tN = a * e - b * d;

                  if (sN < 0.0) {
                    sN = 0.0;
                    tN = e;
                    tD = c;
                  } else if (sN > sD) {
                    sN = sD;
                    tN = e + b;
                    tD = c;
                  }
                }

                if (tN < 0.0) {
                  tN = 0.0;

                  if (-d < 0.0) {
                    sN = 0.0;
                  } else if (-d > a) {
                    sN = sD;
                  } else {
                    sN = -d;
                    sD = a;
                  }
                } else if (tN > tD) {
                  tN = tD;

                  if (-d + b < 0.0) {
                    sN = 0;
                  } else if (-d + b > a) {
                    sN = sD;
                  } else {
                    sN = -d + b;
                    sD = a;
                  }
                }

                const sc = Math.abs(sN) < EPSILON ? 0.0 : sN / sD;
                const tc = Math.abs(tN) < EPSILON ? 0.0 : tN / tD;
                const dP = v3_3;
                dP.set(w);
                dP.add(Vec3.multiplyScalar(v3_4, u, sc));
                dP.subtract(Vec3.multiplyScalar(v3_5, v, tc));
                const radius = capsuleA.radius + capsuleB.radius;
                return dP.lengthSqr() < radius * radius;
              };
            }();

            const intersect = exports('bS', {
              raySphere,
              rayAABB,
              rayOBB,
              rayPlane,
              rayTriangle,
              rayCapsule,
              raySubMesh,
              rayMesh,
              rayModel,
              lineSphere,
              lineAABB,
              lineOBB,
              linePlane,
              lineTriangle,
              sphereWithSphere,
              sphereAABB,
              sphereOBB,
              spherePlane,
              sphereFrustum,
              sphereFrustumAccurate,
              sphereCapsule,
              aabbWithAABB,
              aabbWithOBB,
              aabbPlane,
              aabbFrustum,
              aabbFrustumAccurate,
              obbWithOBB,
              obbPlane,
              obbFrustum,
              obbFrustumAccurate,
              obbPoint,
              obbCapsule,
              aabbFrustumCompletelyInside,
              capsuleWithCapsule,

              resolve(g1, g2, outPt = null) {
                const type1 = g1._type;
                const type2 = g2._type;
                const resolver = this[type1 | type2];
                return type1 < type2 ? resolver(g1, g2, outPt) : resolver(g2, g1, outPt);
              }

            });
            intersect[enums.SHAPE_RAY | enums.SHAPE_SPHERE] = raySphere;
            intersect[enums.SHAPE_RAY | enums.SHAPE_AABB] = rayAABB;
            intersect[enums.SHAPE_RAY | enums.SHAPE_OBB] = rayOBB;
            intersect[enums.SHAPE_RAY | enums.SHAPE_PLANE] = rayPlane;
            intersect[enums.SHAPE_RAY | enums.SHAPE_TRIANGLE] = rayTriangle;
            intersect[enums.SHAPE_RAY | enums.SHAPE_CAPSULE] = rayCapsule;
            intersect[enums.SHAPE_LINE | enums.SHAPE_SPHERE] = lineSphere;
            intersect[enums.SHAPE_LINE | enums.SHAPE_AABB] = lineAABB;
            intersect[enums.SHAPE_LINE | enums.SHAPE_OBB] = lineOBB;
            intersect[enums.SHAPE_LINE | enums.SHAPE_PLANE] = linePlane;
            intersect[enums.SHAPE_LINE | enums.SHAPE_TRIANGLE] = lineTriangle;
            intersect[enums.SHAPE_SPHERE] = sphereWithSphere;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_AABB] = sphereAABB;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_OBB] = sphereOBB;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_PLANE] = spherePlane;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_FRUSTUM] = sphereFrustum;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_FRUSTUM_ACCURATE] = sphereFrustumAccurate;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_CAPSULE] = sphereCapsule;
            intersect[enums.SHAPE_AABB] = aabbWithAABB;
            intersect[enums.SHAPE_AABB | enums.SHAPE_OBB] = aabbWithOBB;
            intersect[enums.SHAPE_AABB | enums.SHAPE_PLANE] = aabbPlane;
            intersect[enums.SHAPE_AABB | enums.SHAPE_FRUSTUM] = aabbFrustum;
            intersect[enums.SHAPE_AABB | enums.SHAPE_FRUSTUM_ACCURATE] = aabbFrustumAccurate;
            intersect[enums.SHAPE_OBB] = obbWithOBB;
            intersect[enums.SHAPE_OBB | enums.SHAPE_PLANE] = obbPlane;
            intersect[enums.SHAPE_OBB | enums.SHAPE_FRUSTUM] = obbFrustum;
            intersect[enums.SHAPE_OBB | enums.SHAPE_FRUSTUM_ACCURATE] = obbFrustumAccurate;
            intersect[enums.SHAPE_OBB | enums.SHAPE_CAPSULE] = obbCapsule;
            intersect[enums.SHAPE_CAPSULE] = capsuleWithCapsule;

            replaceProperty(Line.prototype, 'line', [{
              name: 'mag',
              newName: 'len'
            }, {
              name: 'magnitude',
              newName: 'len'
            }]);
            removeProperty(intersect, 'intersect', [{
              name: 'line_quad'
            }]);

            const v1 = new Vec3(0, 0, 0);
            const v2$1 = new Vec3(0, 0, 0);
            const temp_mat = legacyCC.mat4();
            const temp_vec4 = legacyCC.v4();
            class Plane {
              static create(nx, ny, nz, d) {
                return new Plane(nx, ny, nz, d);
              }

              static clone(p) {
                return new Plane(p.n.x, p.n.y, p.n.z, p.d);
              }

              static copy(out, p) {
                Vec3.copy(out.n, p.n);
                out.d = p.d;
                return out;
              }

              static fromPoints(out, a, b, c) {
                Vec3.subtract(v1, b, a);
                Vec3.subtract(v2$1, c, a);
                Vec3.normalize(out.n, Vec3.cross(out.n, v1, v2$1));
                out.d = Vec3.dot(out.n, a);
                return out;
              }

              static set(out, nx, ny, nz, d) {
                out.n.x = nx;
                out.n.y = ny;
                out.n.z = nz;
                out.d = d;
                return out;
              }

              static fromNormalAndPoint(out, normal, point) {
                Vec3.copy(out.n, normal);
                out.d = Vec3.dot(normal, point);
                return out;
              }

              static normalize(out, a) {
                const len = a.n.length();
                Vec3.normalize(out.n, a.n);

                if (len > 0) {
                  out.d = a.d / len;
                }

                return out;
              }

              get type() {
                return this._type;
              }

              set x(val) {
                this.n.x = val;
              }

              get x() {
                return this.n.x;
              }

              set y(val) {
                this.n.y = val;
              }

              get y() {
                return this.n.y;
              }

              set z(val) {
                this.n.z = val;
              }

              get z() {
                return this.n.z;
              }

              set w(val) {
                this.d = val;
              }

              get w() {
                return this.d;
              }

              constructor(nx = 0, ny = 1, nz = 0, d = 0) {
                this.n = void 0;
                this.d = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_PLANE;
                this.n = new Vec3(nx, ny, nz);
                this.d = d;
              }

              transform(mat) {
                Mat4.invert(temp_mat, mat);
                Mat4.transpose(temp_mat, temp_mat);
                Vec4.set(temp_vec4, this.n.x, this.n.y, this.n.z, this.d);
                Vec4.transformMat4(temp_vec4, temp_vec4, temp_mat);
                Vec3.set(this.n, temp_vec4.x, temp_vec4.y, temp_vec4.z);
                this.d = temp_vec4.w;
              }

            } exports('bU', Plane);

            const _v3_tmp$1 = new Vec3();

            const _v3_tmp2 = new Vec3();

            const _v3_tmp3 = new Vec3();

            const _v3_tmp4 = new Vec3();

            const _m3_tmp = new Mat3();

            const transform_extent_m4 = (out, extent, m4) => {
              _m3_tmp.m00 = Math.abs(m4.m00);
              _m3_tmp.m01 = Math.abs(m4.m01);
              _m3_tmp.m02 = Math.abs(m4.m02);
              _m3_tmp.m03 = Math.abs(m4.m04);
              _m3_tmp.m04 = Math.abs(m4.m05);
              _m3_tmp.m05 = Math.abs(m4.m06);
              _m3_tmp.m06 = Math.abs(m4.m08);
              _m3_tmp.m07 = Math.abs(m4.m09);
              _m3_tmp.m08 = Math.abs(m4.m10);
              Vec3.transformMat3(out, extent, _m3_tmp);
            };

            class AABB {
              static create(px, py, pz, hw, hh, hl) {
                return new AABB(px, py, pz, hw, hh, hl);
              }

              static clone(a) {
                return new AABB(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z);
              }

              static copy(out, a) {
                Vec3.copy(out.center, a.center);
                Vec3.copy(out.halfExtents, a.halfExtents);
                return out;
              }

              static fromPoints(out, minPos, maxPos) {
                Vec3.add(_v3_tmp$1, maxPos, minPos);
                Vec3.subtract(_v3_tmp2, maxPos, minPos);
                Vec3.multiplyScalar(out.center, _v3_tmp$1, 0.5);
                Vec3.multiplyScalar(out.halfExtents, _v3_tmp2, 0.5);
                return out;
              }

              static set(out, px, py, pz, hw, hh, hl) {
                out.center.set(px, py, pz);
                out.halfExtents.set(hw, hh, hl);
                return out;
              }

              static merge(out, a, b) {
                Vec3.subtract(_v3_tmp$1, a.center, a.halfExtents);
                Vec3.subtract(_v3_tmp2, b.center, b.halfExtents);
                Vec3.add(_v3_tmp3, a.center, a.halfExtents);
                Vec3.add(_v3_tmp4, b.center, b.halfExtents);
                Vec3.max(_v3_tmp4, _v3_tmp3, _v3_tmp4);
                Vec3.min(_v3_tmp3, _v3_tmp$1, _v3_tmp2);
                return AABB.fromPoints(out, _v3_tmp3, _v3_tmp4);
              }

              static toBoundingSphere(out, a) {
                out.center.set(a.center);
                out.radius = a.halfExtents.length();
                return out;
              }

              static transform(out, a, matrix) {
                Vec3.transformMat4(out.center, a.center, matrix);
                transform_extent_m4(out.halfExtents, a.halfExtents, matrix);
                return out;
              }

              get type() {
                return this._type;
              }

              constructor(px = 0, py = 0, pz = 0, hw = 1, hh = 1, hl = 1) {
                this.center = void 0;
                this.halfExtents = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_AABB;
                this.center = new Vec3(px, py, pz);
                this.halfExtents = new Vec3(hw, hh, hl);
              }

              getBoundary(minPos, maxPos) {
                Vec3.subtract(minPos, this.center, this.halfExtents);
                Vec3.add(maxPos, this.center, this.halfExtents);
              }

              transform(m, pos, rot, scale, out) {
                Vec3.transformMat4(out.center, this.center, m);
                transform_extent_m4(out.halfExtents, this.halfExtents, m);
              }

              clone() {
                return AABB.clone(this);
              }

              copy(a) {
                return AABB.copy(this, a);
              }

              mergePoint(point) {
                this.getBoundary(_v3_tmp$1, _v3_tmp2);

                if (point.x < _v3_tmp$1.x) {
                  _v3_tmp$1.x = point.x;
                }

                if (point.y < _v3_tmp$1.y) {
                  _v3_tmp$1.y = point.y;
                }

                if (point.z < _v3_tmp$1.z) {
                  _v3_tmp$1.z = point.z;
                }

                if (point.x > _v3_tmp2.x) {
                  _v3_tmp2.x = point.x;
                }

                if (point.y > _v3_tmp2.y) {
                  _v3_tmp2.y = point.y;
                }

                if (point.z > _v3_tmp2.z) {
                  _v3_tmp2.z = point.z;
                }

                Vec3.add(_v3_tmp3, _v3_tmp$1, _v3_tmp2);
                this.center.set(Vec3.multiplyScalar(_v3_tmp3, _v3_tmp3, 0.5));
                this.halfExtents.set(_v3_tmp2.x - _v3_tmp3.x, _v3_tmp2.y - _v3_tmp3.y, _v3_tmp2.z - _v3_tmp3.z);
              }

              mergePoints(points) {
                if (points.length < 1) {
                  return;
                }

                for (let i = 0; i < points.length; i++) {
                  this.mergePoint(points[i]);
                }
              }

              mergeFrustum(frustum) {
                return this.mergePoints(frustum.vertices);
              }

            } exports('bY', AABB);

            const _v3_tmp$2 = new Vec3();

            const _v3_tmp2$1 = new Vec3();

            const _m3_tmp$1 = new Mat3();

            const transform_extent_m3 = (out, extent, m3) => {
              _m3_tmp$1.m00 = Math.abs(m3.m00);
              _m3_tmp$1.m01 = Math.abs(m3.m01);
              _m3_tmp$1.m02 = Math.abs(m3.m02);
              _m3_tmp$1.m03 = Math.abs(m3.m03);
              _m3_tmp$1.m04 = Math.abs(m3.m04);
              _m3_tmp$1.m05 = Math.abs(m3.m05);
              _m3_tmp$1.m06 = Math.abs(m3.m06);
              _m3_tmp$1.m07 = Math.abs(m3.m07);
              _m3_tmp$1.m08 = Math.abs(m3.m08);
              Vec3.transformMat3(out, extent, _m3_tmp$1);
            };

            class OBB {
              static create(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
                return new OBB(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
              }

              static clone(a) {
                return new OBB(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z, a.orientation.m00, a.orientation.m01, a.orientation.m02, a.orientation.m03, a.orientation.m04, a.orientation.m05, a.orientation.m06, a.orientation.m07, a.orientation.m08);
              }

              static copy(out, a) {
                Vec3.copy(out.center, a.center);
                Vec3.copy(out.halfExtents, a.halfExtents);
                Mat3.copy(out.orientation, a.orientation);
                return out;
              }

              static fromPoints(out, minPos, maxPos) {
                Vec3.multiplyScalar(out.center, Vec3.add(_v3_tmp$2, minPos, maxPos), 0.5);
                Vec3.multiplyScalar(out.halfExtents, Vec3.subtract(_v3_tmp2$1, maxPos, minPos), 0.5);
                Mat3.identity(out.orientation);
                return out;
              }

              static set(out, cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
                Vec3.set(out.center, cx, cy, cz);
                Vec3.set(out.halfExtents, hw, hh, hl);
                Mat3.set(out.orientation, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
                return out;
              }

              get type() {
                return this._type;
              }

              constructor(cx = 0, cy = 0, cz = 0, hw = 1, hh = 1, hl = 1, ox_1 = 1, ox_2 = 0, ox_3 = 0, oy_1 = 0, oy_2 = 1, oy_3 = 0, oz_1 = 0, oz_2 = 0, oz_3 = 1) {
                this.center = void 0;
                this.halfExtents = void 0;
                this.orientation = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_OBB;
                this.center = new Vec3(cx, cy, cz);
                this.halfExtents = new Vec3(hw, hh, hl);
                this.orientation = new Mat3(ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
              }

              getBoundary(minPos, maxPos) {
                transform_extent_m3(_v3_tmp$2, this.halfExtents, this.orientation);
                Vec3.subtract(minPos, this.center, _v3_tmp$2);
                Vec3.add(maxPos, this.center, _v3_tmp$2);
              }

              transform(m, pos, rot, scale, out) {
                Vec3.transformMat4(out.center, this.center, m);
                Mat3.fromQuat(out.orientation, rot);
                Vec3.multiply(out.halfExtents, this.halfExtents, scale);
              }

              translateAndRotate(m, rot, out) {
                Vec3.transformMat4(out.center, this.center, m);
                Mat3.fromQuat(out.orientation, rot);
              }

              setScale(scale, out) {
                Vec3.multiply(out.halfExtents, this.halfExtents, scale);
              }

            } exports('bZ', OBB);

            class Capsule {
              get type() {
                return this._type;
              }

              constructor(radius = 0.5, halfHeight = 0.5, axis = 1) {
                this._type = void 0;
                this.radius = void 0;
                this.halfHeight = void 0;
                this.axis = void 0;
                this.center = void 0;
                this.rotation = void 0;
                this.ellipseCenter0 = void 0;
                this.ellipseCenter1 = void 0;
                this._type = enums.SHAPE_CAPSULE;
                this.radius = radius;
                this.halfHeight = halfHeight;
                this.axis = axis;
                this.center = new Vec3();
                this.rotation = new Quat();
                this.ellipseCenter0 = new Vec3(0, halfHeight, 0);
                this.ellipseCenter1 = new Vec3(0, -halfHeight, 0);
                this.updateCache();
              }

              transform(m, pos, rot, scale, out) {
                const ws = scale;
                const s = absMaxComponent(ws);
                out.radius = this.radius * Math.abs(s);
                const halfTotalWorldHeight = (this.halfHeight + this.radius) * Math.abs(ws.y);
                let halfWorldHeight = halfTotalWorldHeight - out.radius;
                if (halfWorldHeight < 0) halfWorldHeight = 0;
                out.halfHeight = halfWorldHeight;
                Vec3.transformMat4(out.center, this.center, m);
                Quat.multiply(out.rotation, this.rotation, rot);
                out.updateCache();
              }

              updateCache() {
                this.updateLocalCenter();
                Vec3.transformQuat(this.ellipseCenter0, this.ellipseCenter0, this.rotation);
                Vec3.transformQuat(this.ellipseCenter1, this.ellipseCenter1, this.rotation);
                this.ellipseCenter0.add(this.center);
                this.ellipseCenter1.add(this.center);
              }

              updateLocalCenter() {
                const halfHeight = this.halfHeight;
                const axis = this.axis;

                switch (axis) {
                  case 0:
                    this.ellipseCenter0.set(halfHeight, 0, 0);
                    this.ellipseCenter1.set(-halfHeight, 0, 0);
                    break;

                  case 1:
                    this.ellipseCenter0.set(0, halfHeight, 0);
                    this.ellipseCenter1.set(0, -halfHeight, 0);
                    break;

                  case 2:
                    this.ellipseCenter0.set(0, 0, halfHeight);
                    this.ellipseCenter1.set(0, 0, -halfHeight);
                    break;
                }
              }

            } exports('b_', Capsule);

            const _v = new Array(8);

            _v[0] = new Vec3(1, 1, 1);
            _v[1] = new Vec3(-1, 1, 1);
            _v[2] = new Vec3(-1, -1, 1);
            _v[3] = new Vec3(1, -1, 1);
            _v[4] = new Vec3(1, 1, -1);
            _v[5] = new Vec3(-1, 1, -1);
            _v[6] = new Vec3(-1, -1, -1);
            _v[7] = new Vec3(1, -1, -1);

            const _nearTemp = new Vec3();

            const _farTemp = new Vec3();

            const _temp_v3 = new Vec3();

            class Frustum {
              static createFromAABB(out, aabb) {
                const vec3_min = new Vec3();
                const vec3_max = new Vec3();
                Vec3.subtract(vec3_min, aabb.center, aabb.halfExtents);
                Vec3.add(vec3_max, aabb.center, aabb.halfExtents);
                out.vertices[0].set(vec3_min.x, vec3_max.y, vec3_min.z);
                out.vertices[1].set(vec3_max.x, vec3_max.y, vec3_min.z);
                out.vertices[2].set(vec3_max.x, vec3_min.y, vec3_min.z);
                out.vertices[3].set(vec3_min.x, vec3_min.y, vec3_min.z);
                out.vertices[4].set(vec3_min.x, vec3_max.y, vec3_max.z);
                out.vertices[5].set(vec3_max.x, vec3_max.y, vec3_max.z);
                out.vertices[6].set(vec3_max.x, vec3_min.y, vec3_max.z);
                out.vertices[7].set(vec3_min.x, vec3_min.y, vec3_max.z);

                if (out._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
                  return out;
                }

                out.updatePlanes();
                return out;
              }

              static split(out, camera, m, start, end) {
                const h = Math.tan(camera.fov * 0.5);
                const w = h * camera.aspect;

                _nearTemp.set(start * w, start * h, start);

                _farTemp.set(end * w, end * h, end);

                const vertexes = out.vertices;

                _temp_v3.set(_nearTemp.x, _nearTemp.y, _nearTemp.z);

                Vec3.transformMat4(vertexes[0], _temp_v3, m);

                _temp_v3.set(-_nearTemp.x, _nearTemp.y, _nearTemp.z);

                Vec3.transformMat4(vertexes[1], _temp_v3, m);

                _temp_v3.set(-_nearTemp.x, -_nearTemp.y, _nearTemp.z);

                Vec3.transformMat4(vertexes[2], _temp_v3, m);

                _temp_v3.set(_nearTemp.x, -_nearTemp.y, _nearTemp.z);

                Vec3.transformMat4(vertexes[3], _temp_v3, m);

                _temp_v3.set(_farTemp.x, _farTemp.y, _farTemp.z);

                Vec3.transformMat4(vertexes[4], _temp_v3, m);

                _temp_v3.set(-_farTemp.x, _farTemp.y, _farTemp.z);

                Vec3.transformMat4(vertexes[5], _temp_v3, m);

                _temp_v3.set(-_farTemp.x, -_farTemp.y, _farTemp.z);

                Vec3.transformMat4(vertexes[6], _temp_v3, m);

                _temp_v3.set(_farTemp.x, -_farTemp.y, _farTemp.z);

                Vec3.transformMat4(vertexes[7], _temp_v3, m);
                out.updatePlanes();
                return out;
              }

              static create() {
                return new Frustum();
              }

              static clone(f) {
                return Frustum.copy(new Frustum(), f);
              }

              static copy(out, f) {
                out._type = f.type;

                for (let i = 0; i < 6; ++i) {
                  Plane.copy(out.planes[i], f.planes[i]);
                }

                for (let i = 0; i < 8; ++i) {
                  Vec3.copy(out.vertices[i], f.vertices[i]);
                }

                return out;
              }

              set accurate(b) {
                this._type = b ? enums.SHAPE_FRUSTUM_ACCURATE : enums.SHAPE_FRUSTUM;
              }

              get type() {
                return this._type;
              }

              constructor() {
                this.planes = void 0;
                this.vertices = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_FRUSTUM;
                this.planes = new Array(6);

                for (let i = 0; i < 6; ++i) {
                  this.planes[i] = Plane.create(0, 0, 0, 0);
                }

                this.vertices = new Array(8);

                for (let i = 0; i < 8; ++i) {
                  this.vertices[i] = new Vec3();
                }
              }

              update(m, inv) {
                Vec3.set(this.planes[0].n, m.m03 + m.m00, m.m07 + m.m04, m.m11 + m.m08);
                this.planes[0].d = -(m.m15 + m.m12);
                Vec3.set(this.planes[1].n, m.m03 - m.m00, m.m07 - m.m04, m.m11 - m.m08);
                this.planes[1].d = -(m.m15 - m.m12);
                Vec3.set(this.planes[2].n, m.m03 + m.m01, m.m07 + m.m05, m.m11 + m.m09);
                this.planes[2].d = -(m.m15 + m.m13);
                Vec3.set(this.planes[3].n, m.m03 - m.m01, m.m07 - m.m05, m.m11 - m.m09);
                this.planes[3].d = -(m.m15 - m.m13);
                Vec3.set(this.planes[4].n, m.m03 + m.m02, m.m07 + m.m06, m.m11 + m.m10);
                this.planes[4].d = -(m.m15 + m.m14);
                Vec3.set(this.planes[5].n, m.m03 - m.m02, m.m07 - m.m06, m.m11 - m.m10);
                this.planes[5].d = -(m.m15 - m.m14);

                if (this._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
                  return;
                }

                for (let i = 0; i < 6; i++) {
                  const pl = this.planes[i];
                  const invDist = 1 / pl.n.length();
                  Vec3.multiplyScalar(pl.n, pl.n, invDist);
                  pl.d *= invDist;
                }

                for (let i = 0; i < 8; i++) {
                  Vec3.transformMat4(this.vertices[i], _v[i], inv);
                }
              }

              transform(mat) {
                if (this._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
                  return;
                }

                for (let i = 0; i < 8; i++) {
                  Vec3.transformMat4(this.vertices[i], this.vertices[i], mat);
                }

                this.updatePlanes();
              }

              zero() {
                for (let i = 0; i < 8; i++) {
                  this.vertices[i].set(0.0, 0.0, 0.0);
                }

                this.updatePlanes();
              }

              updatePlanes() {
                Plane.fromPoints(this.planes[0], this.vertices[1], this.vertices[6], this.vertices[5]);
                Plane.fromPoints(this.planes[1], this.vertices[3], this.vertices[4], this.vertices[7]);
                Plane.fromPoints(this.planes[2], this.vertices[6], this.vertices[3], this.vertices[7]);
                Plane.fromPoints(this.planes[3], this.vertices[0], this.vertices[5], this.vertices[4]);
                Plane.fromPoints(this.planes[4], this.vertices[2], this.vertices[0], this.vertices[3]);
                Plane.fromPoints(this.planes[5], this.vertices[7], this.vertices[5], this.vertices[6]);
              }

            } exports('b$', Frustum);

            Frustum.createOrtho = (() => (out, width, height, near, far, transform) => {
              const halfWidth = width / 2;
              const halfHeight = height / 2;
              Vec3.set(_temp_v3, halfWidth, halfHeight, -near);
              Vec3.transformMat4(out.vertices[0], _temp_v3, transform);
              Vec3.set(_temp_v3, -halfWidth, halfHeight, -near);
              Vec3.transformMat4(out.vertices[1], _temp_v3, transform);
              Vec3.set(_temp_v3, -halfWidth, -halfHeight, -near);
              Vec3.transformMat4(out.vertices[2], _temp_v3, transform);
              Vec3.set(_temp_v3, halfWidth, -halfHeight, -near);
              Vec3.transformMat4(out.vertices[3], _temp_v3, transform);
              Vec3.set(_temp_v3, halfWidth, halfHeight, -far);
              Vec3.transformMat4(out.vertices[4], _temp_v3, transform);
              Vec3.set(_temp_v3, -halfWidth, halfHeight, -far);
              Vec3.transformMat4(out.vertices[5], _temp_v3, transform);
              Vec3.set(_temp_v3, -halfWidth, -halfHeight, -far);
              Vec3.transformMat4(out.vertices[6], _temp_v3, transform);
              Vec3.set(_temp_v3, halfWidth, -halfHeight, -far);
              Vec3.transformMat4(out.vertices[7], _temp_v3, transform);
              Plane.fromPoints(out.planes[0], out.vertices[1], out.vertices[6], out.vertices[5]);
              Plane.fromPoints(out.planes[1], out.vertices[3], out.vertices[4], out.vertices[7]);
              Plane.fromPoints(out.planes[2], out.vertices[6], out.vertices[3], out.vertices[7]);
              Plane.fromPoints(out.planes[3], out.vertices[0], out.vertices[5], out.vertices[4]);
              Plane.fromPoints(out.planes[4], out.vertices[2], out.vertices[0], out.vertices[3]);
              Plane.fromPoints(out.planes[5], out.vertices[7], out.vertices[5], out.vertices[6]);
            })();

            let WrapModeMask;

            (function (WrapModeMask) {
              WrapModeMask[WrapModeMask["Default"] = 0] = "Default";
              WrapModeMask[WrapModeMask["Normal"] = 1] = "Normal";
              WrapModeMask[WrapModeMask["Loop"] = 2] = "Loop";
              WrapModeMask[WrapModeMask["ShouldWrap"] = 4] = "ShouldWrap";
              WrapModeMask[WrapModeMask["Clamp"] = 8] = "Clamp";
              WrapModeMask[WrapModeMask["PingPong"] = 22] = "PingPong";
              WrapModeMask[WrapModeMask["Reverse"] = 36] = "Reverse";
            })(WrapModeMask || (WrapModeMask = exports('eF', {})));

            let WrapMode;

            (function (WrapMode) {
              WrapMode[WrapMode["Default"] = WrapModeMask.Default] = "Default";
              WrapMode[WrapMode["Normal"] = WrapModeMask.Normal] = "Normal";
              WrapMode[WrapMode["Reverse"] = WrapModeMask.Reverse] = "Reverse";
              WrapMode[WrapMode["Loop"] = WrapModeMask.Loop] = "Loop";
              WrapMode[WrapMode["LoopReverse"] = WrapModeMask.Loop | WrapModeMask.Reverse] = "LoopReverse";
              WrapMode[WrapMode["PingPong"] = WrapModeMask.PingPong] = "PingPong";
              WrapMode[WrapMode["PingPongReverse"] = WrapModeMask.PingPong | WrapModeMask.Reverse] = "PingPongReverse";
            })(WrapMode || (WrapMode = exports('eG', {})));

            ccenum(WrapMode);
            class WrappedInfo {
              constructor(info) {
                this.ratio = 0;
                this.time = 0;
                this.direction = 1;
                this.stopped = true;
                this.iterations = 0;
                this.frameIndex = undefined;

                if (info) {
                  this.set(info);
                }
              }

              set(info) {
                this.ratio = info.ratio;
                this.time = info.time;
                this.direction = info.direction;
                this.stopped = info.stopped;
                this.iterations = info.iterations;
                this.frameIndex = info.frameIndex;
              }

            } exports('eH', WrappedInfo);
            function isLerpable(object) {
              return typeof object.lerp === 'function';
            }

            function binarySearchEpsilon(array, value, EPSILON = 1e-6) {
              let low = 0;
              let high = array.length - 1;
              let middle = high >>> 1;

              for (; low <= high; middle = low + high >>> 1) {
                const test = array[middle];

                if (test > value + EPSILON) {
                  high = middle - 1;
                } else if (test < value - EPSILON) {
                  low = middle + 1;
                } else {
                  return middle;
                }
              }

              return ~low;
            }

            let _Symbol$iterator;
            _Symbol$iterator = Symbol.iterator;
            class KeyframeCurve {
              constructor() {
                this._times = [];
                this._values = [];
              }

              get keyFramesCount() {
                return this._times.length;
              }

              get rangeMin() {
                return this._times[0];
              }

              get rangeMax() {
                return this._times[this._values.length - 1];
              }

              [_Symbol$iterator]() {
                let index = 0;
                return {
                  next: () => {
                    if (index >= this._times.length) {
                      return {
                        done: true,
                        value: undefined
                      };
                    } else {
                      const value = [this._times[index], this._values[index]];
                      ++index;
                      return {
                        done: false,
                        value
                      };
                    }
                  }
                };
              }

              keyframes() {
                return this;
              }

              times() {
                return this._times;
              }

              values() {
                return this._values;
              }

              getKeyframeTime(index) {
                return this._times[index];
              }

              getKeyframeValue(index) {
                return this._values[index];
              }

              addKeyFrame(time, keyframeValue) {
                return this._insertNewKeyframe(time, keyframeValue);
              }

              removeKeyframe(index) {
                this._times.splice(index, 1);

                this._values.splice(index, 1);
              }

              indexOfKeyframe(time) {
                return binarySearchEpsilon(this._times, time);
              }

              updateTime(index, time) {
                const value = this._values[index];
                this.removeKeyframe(index);

                this._insertNewKeyframe(time, value);
              }

              assignSorted(times, values) {
                if (values !== undefined) {
                  assertIsTrue(Array.isArray(times));
                  this.setKeyframes(times.slice(), values.slice());
                } else {
                  const keyframes = Array.from(times);
                  this.setKeyframes(keyframes.map(([time]) => time), keyframes.map(([, value]) => value));
                }
              }

              clear() {
                this._times.length = 0;
                this._values.length = 0;
              }

              searchKeyframe(time) {
                return binarySearchEpsilon(this._times, time);
              }

              setKeyframes(times, values) {
                assertIsTrue(times.length === values.length);
                assertIsTrue(isSorted(times));
                this._times = times;
                this._values = values;
              }

              _insertNewKeyframe(time, value) {
                const times = this._times;
                const values = this._values;
                const nFrames = times.length;
                const index = binarySearchEpsilon(times, time);

                if (index >= 0) {
                  return index;
                }

                const iNext = ~index;

                if (iNext === 0) {
                  times.unshift(time);
                  values.unshift(value);
                } else if (iNext === nFrames) {
                  times.push(time);
                  values.push(value);
                } else {
                  assertIsTrue(nFrames > 1);
                  times.splice(iNext - 1, 0, time);
                  values.splice(iNext - 1, 0, value);
                }

                return iNext;
              }

            }
            CCClass.fastDefine('cc.KeyframeCurve', KeyframeCurve, {
              _times: [],
              _values: []
            });

            function isSorted(values) {
              return values.every((value, index, array) => index === 0 || value > array[index - 1] || approx(value, array[index - 1], 1e-6));
            }

            let RealInterpolationMode;

            (function (RealInterpolationMode) {
              RealInterpolationMode[RealInterpolationMode["LINEAR"] = 0] = "LINEAR";
              RealInterpolationMode[RealInterpolationMode["CONSTANT"] = 1] = "CONSTANT";
              RealInterpolationMode[RealInterpolationMode["CUBIC"] = 2] = "CUBIC";
            })(RealInterpolationMode || (RealInterpolationMode = exports('eZ', {})));

            let ExtrapolationMode;

            (function (ExtrapolationMode) {
              ExtrapolationMode[ExtrapolationMode["LINEAR"] = 0] = "LINEAR";
              ExtrapolationMode[ExtrapolationMode["CLAMP"] = 1] = "CLAMP";
              ExtrapolationMode[ExtrapolationMode["LOOP"] = 2] = "LOOP";
              ExtrapolationMode[ExtrapolationMode["PING_PONG"] = 3] = "PING_PONG";
            })(ExtrapolationMode || (ExtrapolationMode = exports('h4', {})));

            let TangentWeightMode;

            (function (TangentWeightMode) {
              TangentWeightMode[TangentWeightMode["NONE"] = 0] = "NONE";
              TangentWeightMode[TangentWeightMode["LEFT"] = 1] = "LEFT";
              TangentWeightMode[TangentWeightMode["RIGHT"] = 2] = "RIGHT";
              TangentWeightMode[TangentWeightMode["BOTH"] = 3] = "BOTH";
            })(TangentWeightMode || (TangentWeightMode = exports('e_', {})));

            function solveCubic(coeff0, coeff1, coeff2, coeff3, solutions) {
              const a = coeff2 / coeff3;
              const b = coeff1 / coeff3;
              const c = coeff0 / coeff3;
              const sqrA = a * a;
              const p = 1.0 / 3.0 * (-1.0 / 3 * sqrA + b);
              const q = 1.0 / 2.0 * (2.0 / 27.0 * a * sqrA - 1.0 / 3 * a * b + c);
              const cubicP = p * p * p;
              const d = q * q + cubicP;
              let nSolutions = 0;

              if (isZero(d)) {
                if (isZero(q)) {
                  solutions[0] = 0;
                  return 1;
                } else {
                  const u = Math.cbrt(-q);
                  solutions[0] = 2 * u;
                  solutions[1] = -u;
                  return 2;
                }
              } else if (d < 0) {
                const phi = 1.0 / 3 * Math.acos(-q / Math.sqrt(-cubicP));
                const t = 2 * Math.sqrt(-p);
                solutions[0] = t * Math.cos(phi);
                solutions[1] = -t * Math.cos(phi + Math.PI / 3);
                solutions[2] = -t * Math.cos(phi - Math.PI / 3);
                nSolutions = 3;
              } else {
                const sqrtD = Math.sqrt(d);
                const u = Math.cbrt(sqrtD - q);
                const v = -Math.cbrt(sqrtD + q);
                solutions[0] = u + v;
                nSolutions = 1;
              }

              const sub = 1.0 / 3 * a;

              for (let i = 0; i < nSolutions; ++i) {
                solutions[i] -= sub;
              }

              return nSolutions;
            }
            const EQN_EPS = 1e-9;

            function isZero(x) {
              return x > -EQN_EPS && x < EQN_EPS;
            }

            function _initializerDefineProperty(target, property, descriptor, context) {
              if (!descriptor) return;
              Object.defineProperty(target, property, {
                enumerable: descriptor.enumerable,
                configurable: descriptor.configurable,
                writable: descriptor.writable,
                value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
              });
            }

            function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
              var desc = {};
              Object.keys(descriptor).forEach(function (key) {
                desc[key] = descriptor[key];
              });
              desc.enumerable = !!desc.enumerable;
              desc.configurable = !!desc.configurable;

              if ('value' in desc || desc.initializer) {
                desc.writable = true;
              }

              desc = decorators.slice().reverse().reduce(function (desc, decorator) {
                return decorator(target, property, desc) || desc;
              }, desc);

              if (context && desc.initializer !== void 0) {
                desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
                desc.initializer = undefined;
              }

              if (desc.initializer === void 0) {
                Object.defineProperty(target, property, desc);
                desc = null;
              }

              return desc;
            }

            const emptyDecorator = () => {};
            const emptyDecoratorFn = () => emptyDecorator;
            const emptySmartClassDecorator = makeSmartClassDecorator(() => {});
            function makeSmartClassDecorator(decorate) {
              return proxyFn;

              function proxyFn(target) {
                if (typeof target === 'function') {
                  return decorate(target);
                } else {
                  return function (constructor) {
                    return decorate(constructor, target);
                  };
                }
              }
            }

            function writeEditorClassProperty(constructor, propertyName, value) {
              const cache = getClassCache(constructor);

              if (cache) {
                const proto = getSubDict(cache, 'proto');
                getSubDict(proto, 'editor')[propertyName] = value;
              }
            }

            function makeEditorClassDecoratorFn(propertyName) {
              return value => constructor => {
                writeEditorClassProperty(constructor, propertyName, value);
              };
            }
            const CACHE_KEY = '__ccclassCache__';
            function getClassCache(ctor, decoratorName) {

              return getSubDict(ctor, CACHE_KEY);
            }
            function getSubDict(obj, key) {
              return obj[key] || (obj[key] = {});
            }

            const ccclass = exports('dw', makeSmartClassDecorator((constructor, name) => {
              let base = js.getSuper(constructor);

              if (base === Object) {
                base = null;
              }

              const proto = {
                name,
                extends: base,
                ctor: constructor
              };
              const cache = constructor[CACHE_KEY];

              if (cache) {
                const decoratedProto = cache.proto;

                if (decoratedProto) {
                  js.mixin(proto, decoratedProto);
                }

                constructor[CACHE_KEY] = undefined;
              }

              const res = CCClass(proto);

              return res;
            }));

            const requireComponent = exports('d$', makeEditorClassDecoratorFn('requireComponent'));
            const executionOrder = exports('dT', makeEditorClassDecoratorFn('executionOrder'));
            const disallowMultiple = exports('dP',  emptySmartClassDecorator);
            const allowReplicated = ctor => {
              CCClass.Attr.setClassAttr(ctor, 'replicated', 'visible', true);
            };

            function property(target, propertyKey, descriptor) {
              let options = null;

              function normalized(target, propertyKey, descriptor) {
                const classStash = getOrCreateClassStash(target);
                const propertyStash = getOrCreateEmptyPropertyStash(target, propertyKey);
                const classConstructor = target.constructor;
                mergePropertyOptions(classStash, propertyStash, classConstructor, propertyKey, options, descriptor);
              }

              if (target === undefined) {
                return property({
                  type: undefined
                });
              } else if (typeof propertyKey === 'undefined') {
                options = target;
                return normalized;
              } else {
                normalized(target, propertyKey, descriptor);
                return undefined;
              }
            }

            function getOrCreateClassStash(target) {
              const cache = getClassCache(target.constructor);
              return cache;
            }

            function getOrCreateEmptyPropertyStash(target, propertyKey) {
              var _ref, _properties$_ref;

              const classStash = getClassCache(target.constructor);
              const ccclassProto = getSubDict(classStash, 'proto');
              const properties = getSubDict(ccclassProto, 'properties');
              const propertyStash = (_properties$_ref = properties[_ref = propertyKey]) !== null && _properties$_ref !== void 0 ? _properties$_ref : properties[_ref] = {};
              return propertyStash;
            }

            function getOrCreatePropertyStash(target, propertyKey, descriptor) {
              var _ref2, _properties$_ref2;

              const classStash = getClassCache(target.constructor);
              const ccclassProto = getSubDict(classStash, 'proto');
              const properties = getSubDict(ccclassProto, 'properties');
              const propertyStash = (_properties$_ref2 = properties[_ref2 = propertyKey]) !== null && _properties$_ref2 !== void 0 ? _properties$_ref2 : properties[_ref2] = {};
              propertyStash.__internalFlags |= PropertyStashInternalFlag.STANDALONE;

              if (descriptor && (descriptor.get || descriptor.set)) {
                if (descriptor.get) {
                  propertyStash.get = descriptor.get;
                }

                if (descriptor.set) {
                  propertyStash.set = descriptor.set;
                }
              } else {
                setDefaultValue(classStash, propertyStash, target.constructor);
              }

              return propertyStash;
            }

            function mergePropertyOptions(cache, propertyStash, ctor, propertyKey, options, descriptor) {
              let fullOptions;
              const isGetset = descriptor && (descriptor.get || descriptor.set);

              if (options) {
                fullOptions = getFullFormOfProperty(options, isGetset);
              }

              const propertyRecord = js.mixin(propertyStash, fullOptions || options || {});

              if (isGetset) {

                if (descriptor.get) {
                  propertyRecord.get = descriptor.get;
                }

                if (descriptor.set) {
                  propertyRecord.set = descriptor.set;
                }
              }
            }

            function setDefaultValue(classStash, propertyStash, classConstructor, propertyKey, descriptor) {
              {
                return;
              }
            }

            const sMetadataTag = Symbol('cc:SerializationMetadata');
            function getSerializationMetadata(constructor) {
              return constructor[sMetadataTag];
            }
            function getOrCreateSerializationMetadata(constructor) {
              var _ref, _ref$sMetadataTag;

              return (_ref$sMetadataTag = (_ref = constructor)[sMetadataTag]) !== null && _ref$sMetadataTag !== void 0 ? _ref$sMetadataTag : _ref[sMetadataTag] = {};
            }

            const serializable = exports('dC', (target, propertyKey, descriptor) => {
              const propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptor);
              setImplicitSerializable(propertyStash);
            });
            function formerlySerializedAs(name) {
              return (target, propertyKey, descriptor) => {
                const propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptor);
                propertyStash.formerlySerializedAs = name;
                setImplicitSerializable(propertyStash);
              };
            }
            const editorOnly = exports('g2', (target, propertyKey, descriptor) => {
              const propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptor);
              propertyStash.editorOnly = true;
              setImplicitSerializable(propertyStash);
            });

            function setImplicitSerializable(propertyStash) {
              propertyStash.__internalFlags |= PropertyStashInternalFlag.IMPLICIT_SERIALIZABLE;
            }

            const uniquelyReferenced = exports('eJ',  emptyDecorator );

            const executeInEditMode = exports('dQ',  emptySmartClassDecorator);
            const menu = exports('dU',  emptyDecoratorFn);
            const playOnFocus = exports('fx',  emptySmartClassDecorator);
            const inspector =  emptyDecoratorFn;
            const icon =  emptyDecoratorFn;
            const help = exports('dS',  emptyDecoratorFn);
            const editable = exports('dD',  emptyDecorator );
            const visible = exports('e0',  emptyDecoratorFn );
            const readOnly = exports('fF',  emptyDecorator );
            const displayName = exports('e1',  emptyDecoratorFn );
            const tooltip = exports('dW',  emptyDecoratorFn );
            const range = exports('ec',  emptyDecoratorFn );
            const rangeMin = exports('fR',  emptyDecoratorFn );
            const rangeMax = exports('fS',  emptyDecoratorFn );
            const rangeStep = exports('fu',  emptyDecoratorFn );
            const slide = exports('ee',  emptyDecorator );
            const displayOrder = exports('dV',  emptyDecoratorFn );
            const radian = exports('fr',  emptyDecorator );
            const multiline = exports('e5',  emptyDecorator );
            const disallowAnimation = exports('d_',  emptyDecorator );

            const integer = type(CCInteger);
            const float = exports('eL', type(CCFloat));
            const boolean = type(CCBoolean);
            const string = exports('dH', type(CCString));
            function type(type) {
              return property({
                type
              });
            }

            const override = exports('dG', (target, propertyKey, descriptor) => {
              const propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptor);
              propertyStash.override = true;
            });

            class Empty$1 {}

            const EditorExtendable = exports('eE', editorExtendableInternal());
            assertIsTrue(editorExtrasTag === '__editorExtras__', 'editorExtrasTag needs to be updated.');

            function editorExtendableInternal(Base, className) {
              {
                return Base !== null && Base !== void 0 ? Base : Empty$1;
              }
            }

            var _decorator = /*#__PURE__*/Object.freeze({
                __proto__: null,
                uniquelyReferenced: uniquelyReferenced,
                ccclass: ccclass,
                property: property,
                requireComponent: requireComponent,
                executionOrder: executionOrder,
                disallowMultiple: disallowMultiple,
                allowReplicated: allowReplicated,
                executeInEditMode: executeInEditMode,
                menu: menu,
                playOnFocus: playOnFocus,
                inspector: inspector,
                icon: icon,
                help: help,
                type: type,
                integer: integer,
                float: float,
                boolean: boolean,
                string: string
            });
            exports('fD', _decorator);

            function applyMixins(derivedCtor, baseCtors) {
              baseCtors.forEach(baseCtor => {
                Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
                  if (name !== 'constructor') {
                    Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));
                  }
                });
              });
            }

            class Cache {
              constructor(map) {
                this._map = null;
                this._count = 0;

                if (map) {
                  this._map = map;
                  this._count = Object.keys(map).length;
                } else {
                  this._map = js.createMap(true);
                  this._count = 0;
                }
              }

              add(key, val) {
                if (!(key in this._map)) {
                  this._count++;
                }

                return this._map[key] = val;
              }

              get(key) {
                return this._map[key];
              }

              has(key) {
                return key in this._map;
              }

              remove(key) {
                const out = this._map[key];

                if (key in this._map) {
                  delete this._map[key];
                  this._count--;
                }

                return out;
              }

              clear() {
                if (this._count !== 0) {
                  this._map = js.createMap(true);
                  this._count = 0;
                }
              }

              forEach(func) {
                for (const key in this._map) {
                  func(this._map[key], key);
                }
              }

              find(predicate) {
                for (const key in this._map) {
                  if (predicate(this._map[key], key)) {
                    return this._map[key];
                  }
                }

                return null;
              }

              get count() {
                return this._count;
              }

              destroy() {
                this._map = null;
              }

            } exports('cV', Cache);

            class Pipeline {
              constructor(name, funcs) {
                this.id = Pipeline._pipelineId++;
                this.name = '';
                this.pipes = [];
                this.name = name;

                for (let i = 0, l = funcs.length; i < l; i++) {
                  this.pipes.push(funcs[i]);
                }
              }

              insert(func, index) {
                if (index > this.pipes.length) {
                  warnID(4921);
                  return this;
                }

                this.pipes.splice(index, 0, func);
                return this;
              }

              append(func) {
                this.pipes.push(func);
                return this;
              }

              remove(index) {
                this.pipes.splice(index, 1);
                return this;
              }

              sync(task) {
                const pipes = this.pipes;

                if (pipes.length === 0) {
                  return null;
                }

                task.isFinish = false;

                for (let i = 0, l = pipes.length; i < l;) {
                  const pipe = pipes[i];
                  const result = pipe(task);

                  if (result) {
                    task.isFinish = true;
                    return result;
                  }

                  i++;

                  if (i !== l) {
                    task.input = task.output;
                    task.output = null;
                  }
                }

                task.isFinish = true;
                return task.output;
              }

              async(task) {
                const pipes = this.pipes;

                if (pipes.length === 0) {
                  return;
                }

                task.isFinish = false;

                this._flow(0, task);
              }

              _flow(index, task) {
                const pipe = this.pipes[index];
                pipe(task, result => {
                  if (result) {
                    task.isFinish = true;
                    task.dispatch('complete', result);
                  } else {
                    index++;

                    if (index < this.pipes.length) {
                      task.input = task.output;
                      task.output = null;

                      this._flow(index, task);
                    } else {
                      task.isFinish = true;
                      task.dispatch('complete', result, task.output);
                    }
                  }
                });
              }

            }
            Pipeline._pipelineId = 0;

            const assets = exports('cU',  new Cache());
            const files = new Cache();
            const parsed = new Cache();
            const bundles = exports('db', new Cache());
            const pipeline = new Pipeline('normal load', []);
            const fetchPipeline = new Pipeline('fetch', []);
            const transformPipeline = new Pipeline('transform url', []);
            const references =  null;
            let RequestType;

            (function (RequestType) {
              RequestType["UUID"] = "uuid";
              RequestType["PATH"] = "path";
              RequestType["DIR"] = "dir";
              RequestType["URL"] = "url";
              RequestType["SCENE"] = "scene";
            })(RequestType || (RequestType = {}));

            const presets = {
              default: {
                priority: 0
              },
              preload: {
                maxConcurrency: 6,
                maxRequestsPerFrame: 2,
                priority: -1
              },
              scene: {
                maxConcurrency: 20,
                maxRequestsPerFrame: 20,
                priority: 1
              },
              bundle: {
                maxConcurrency: 20,
                maxRequestsPerFrame: 20,
                priority: 2
              },
              remote: {
                maxRetryCount: 4
              }
            };
            let BuiltinBundleName;

            (function (BuiltinBundleName) {
              BuiltinBundleName["INTERNAL"] = "internal";
              BuiltinBundleName["RESOURCES"] = "resources";
              BuiltinBundleName["MAIN"] = "main";
              BuiltinBundleName["START_SCENE"] = "start-scene";
            })(BuiltinBundleName || (BuiltinBundleName = exports('d2', {})));

            class Task {
              static create(options) {
                let out;

                if (Task._deadPool.length !== 0) {
                  out = Task._deadPool.pop();
                  out.set(options);
                } else {
                  out = new Task(options);
                }

                return out;
              }

              constructor(options) {
                this.id = Task._taskId++;
                this.onComplete = null;
                this.onProgress = null;
                this.onError = null;
                this.source = null;
                this.output = null;
                this.input = null;
                this.progress = null;
                this.options = null;
                this.isFinish = true;
                this.set(options);
              }

              set(options = Object.create(null)) {
                this.onComplete = options.onComplete || null;
                this.onProgress = options.onProgress || null;
                this.onError = options.onError || null;
                this.source = this.input = options.input;
                this.output = null;
                this.progress = options.progress;
                this.options = options.options || Object.create(null);
              }

              dispatch(event, param1, param2, param3, param4) {
                switch (event) {
                  case 'complete':
                    if (this.onComplete) {
                      this.onComplete(param1, param2);
                    }

                    break;

                  case 'progress':
                    if (this.onProgress) {
                      this.onProgress(param1, param2, param3, param4);
                    }

                    break;

                  case 'error':
                    if (this.onError) {
                      this.onError(param1, param2, param3, param4);
                    }

                    break;

                  default:
                    {
                      const str = `on${event[0].toUpperCase()}${event.substr(1)}`;

                      if (typeof this[str] === 'function') {
                        this[str](param1, param2, param3, param4);
                      }

                      break;
                    }
                }
              }

              recycle() {
                if (Task._deadPool.length === Task.MAX_DEAD_NUM) {
                  return;
                }

                this.onComplete = null;
                this.onProgress = null;
                this.onError = null;
                this.source = this.output = this.input = null;
                this.progress = null;
                this.options = null;

                Task._deadPool.push(this);
              }

            }
            Task.MAX_DEAD_NUM = 500;
            Task._taskId = 0;
            Task._deadPool = [];

            const HexChars = '0123456789abcdef'.split('');
            const _t = ['', '', '', ''];

            const UuidTemplate = _t.concat(_t, '-', _t, '-', _t, '-', _t, '-', _t, _t, _t);

            const Indices = UuidTemplate.map((x, i) => x === '-' ? NaN : i).filter(isFinite);
            function decodeUuid(base64) {
              const strs = base64.split('@');
              const uuid = strs[0];

              if (uuid.length !== 22) {
                return base64;
              }

              UuidTemplate[0] = base64[0];
              UuidTemplate[1] = base64[1];

              for (let i = 2, j = 2; i < 22; i += 2) {
                const lhs = BASE64_VALUES[base64.charCodeAt(i)];
                const rhs = BASE64_VALUES[base64.charCodeAt(i + 1)];
                UuidTemplate[Indices[j++]] = HexChars[lhs >> 2];
                UuidTemplate[Indices[j++]] = HexChars[(lhs & 3) << 2 | rhs >> 4];
                UuidTemplate[Indices[j++]] = HexChars[rhs & 0xF];
              }

              return base64.replace(uuid, UuidTemplate.join(''));
            }

            const _uuidRegex = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-@]{8,}).*/;
            function getUuidFromURL(url) {
              const matches = _uuidRegex.exec(url);

              if (matches) {
                return matches[1];
              }

              return '';
            }
            function getUrlWithUuid(uuid, options) {
              options = options || Object.create(null);
              options.__isNative__ = options.isNative;

              if (options.nativeExt) {
                options.ext = options.nativeExt;
              }

              const bundle = bundles.find(b => !!b.getAssetInfo(uuid));

              if (bundle) {
                options.bundle = bundle.name;
              }

              return transform(uuid, options);
            }
            function isScene(asset) {
              return !!asset && (asset instanceof legacyCC.SceneAsset || asset instanceof legacyCC.Scene);
            }
            function normalize(url) {
              if (url) {
                if (url.charCodeAt(0) === 46 && url.charCodeAt(1) === 47) {
                  url = url.slice(2);
                } else if (url.charCodeAt(0) === 47) {
                  url = url.slice(1);
                }
              }

              return url;
            }
            function transform(input, options) {
              const subTask = Task.create({
                input,
                options
              });
              const urls = [];

              try {
                const result = transformPipeline.sync(subTask);

                for (const requestItem of result) {
                  const url = requestItem.url;
                  requestItem.recycle();
                  urls.push(url);
                }
              } catch (e) {
                for (const item of subTask.output) {
                  item.recycle();
                }

                error(e.message, e.stack);
              }

              subTask.recycle();
              return urls.length > 1 ? urls : urls[0];
            }

            var helper = /*#__PURE__*/Object.freeze({
                __proto__: null,
                getUuidFromURL: getUuidFromURL,
                getUrlWithUuid: getUrlWithUuid,
                isScene: isScene,
                normalize: normalize,
                transform: transform,
                decodeUuid: decodeUuid
            });

            const EXTNAME_RE = /(\.[^\.\/\?\\]*)(\?.*)?$/;
            const DIRNAME_RE = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
            const NORMALIZE_RE = /[^\.\/]+\/\.\.\//;
            function join(...segments) {
              let result = '';

              for (const segment of segments) {
                result = (result + (result === '' ? '' : '/') + segment).replace(/(\/|\\\\)$/, '');
              }

              return result;
            }
            function extname(path) {
              const temp = EXTNAME_RE.exec(path);
              return temp ? temp[1] : '';
            }
            function mainFileName(fileName) {
              if (fileName) {
                const idx = fileName.lastIndexOf('.');

                if (idx !== -1) {
                  return fileName.substring(0, idx);
                }
              }

              return fileName;
            }
            function basename(path, extName) {
              const index = path.indexOf('?');

              if (index > 0) {
                path = path.substring(0, index);
              }

              const reg = /(\/|\\)([^\/\\]+)$/g;
              const result = reg.exec(path.replace(/(\/|\\)$/, ''));

              if (!result) {
                return path;
              }

              const baseName = result[2];

              if (extName && path.substring(path.length - extName.length).toLowerCase() === extName.toLowerCase()) {
                return baseName.substring(0, baseName.length - extName.length);
              }

              return baseName;
            }
            function dirname(path) {
              const temp = DIRNAME_RE.exec(path);
              return temp ? temp[2] : '';
            }
            function changeExtname(path, extName) {
              extName = extName || '';
              let index = path.indexOf('?');
              let tempStr = '';

              if (index > 0) {
                tempStr = path.substring(index);
                path = path.substring(0, index);
              }

              index = path.lastIndexOf('.');

              if (index < 0) {
                return path + extName + tempStr;
              }

              return path.substring(0, index) + extName + tempStr;
            }
            function changeBasename(path, baseName, isSameExt) {
              if (baseName.indexOf('.') === 0) {
                return changeExtname(path, baseName);
              }

              let index = path.indexOf('?');
              let tempStr = '';
              const ext = isSameExt ? extname(path) : '';

              if (index > 0) {
                tempStr = path.substring(index);
                path = path.substring(0, index);
              }

              index = path.lastIndexOf('/');
              index = index <= 0 ? 0 : index + 1;
              return path.substring(0, index) + baseName + ext + tempStr;
            }
            function _normalize(url) {
              let oldUrl = url = String(url);

              do {
                oldUrl = url;
                url = url.replace(NORMALIZE_RE, '');
              } while (oldUrl.length !== url.length);

              return url;
            }
            function stripSep(path) {
              return path.replace(/[\/\\]$/, '');
            }
            function getSeperator() {
              return systemInfo.os === OS.WINDOWS ? '\\' : '/';
            }

            var path = /*#__PURE__*/Object.freeze({
                __proto__: null,
                join: join,
                extname: extname,
                mainFileName: mainFileName,
                basename: basename,
                dirname: dirname,
                changeExtname: changeExtname,
                changeBasename: changeBasename,
                _normalize: _normalize,
                stripSep: stripSep,
                getSeperator: getSeperator
            });
            exports('g9', path);

            function syncNodeValues(node) {
              const lpos = node._lpos;
              node.setPositionForJS(lpos.x, lpos.y, lpos.z);
              const lscale = node._lscale;
              node.setScaleForJS(lscale.x, lscale.y, lscale.z);
              const lrot = node._lrot;
              node.setRotationForJS(lrot.x, lrot.y, lrot.z, lrot.w);
              const euler = node._euler;
              node.setRotationFromEulerForJS(euler.x, euler.y, euler.z);
            }
            function updateChildrenForDeserialize(node) {
              if (!node) {
                return;
              }

              const children = node._children;

              if (!children) {
                return;
              }

              const len = children.length;

              if (!len) {
                return;
              }

              node._setChildren(children);

              for (let i = 0; i < len; ++i) {
                const child = children[i];
                updateChildrenForDeserialize(child);
              }
            }
            function ExtraEventMethods() {}

            ExtraEventMethods.prototype.once = function once(type, callback, target) {
              return this.on(type, callback, target, true);
            };

            ExtraEventMethods.prototype.targetOff = function targetOff(typeOrTarget) {
              this.removeAll(typeOrTarget);
            };

            applyMixins(jsb.Asset, [CallbacksInvoker, ExtraEventMethods]);
            const assetProto = jsb.Asset.prototype;

            assetProto._ctor = function () {
              this._ref = 0;
              this.__nativeRefs = {};
              this.__jsb_ref_id = undefined;
              this._iN$t = null;
              this.__editorExtras__ = {
                editorOnly: true
              };
              this._callbackTable = createMap(true);
              this._file = null;
            };

            Object.defineProperty(assetProto, '_nativeAsset', {
              get() {
                return this._file;
              },

              set(obj) {
                this._file = obj;
              }

            });
            Object.defineProperty(assetProto, 'nativeUrl', {
              get() {
                if (!this._nativeUrl) {
                  if (!this._native) return '';
                  const name = this._native;

                  if (name.charCodeAt(0) === 47) {
                    return name.slice(1);
                  }

                  if (name.charCodeAt(0) === 46) {
                    this._nativeUrl = getUrlWithUuid(this._uuid, {
                      nativeExt: name,
                      isNative: true
                    });
                  } else {
                    this._nativeUrl = getUrlWithUuid(this._uuid, {
                      __nativeName__: name,
                      nativeExt: extname(name),
                      isNative: true
                    });
                  }
                }

                return this._nativeUrl;
              }

            });
            Object.defineProperty(assetProto, 'refCount', {
              configurable: true,
              enumerable: true,

              get() {
                return this._ref;
              }

            });

            assetProto.addRef = function () {
              this._ref++;
              this.addAssetRef();
              return this;
            };

            assetProto.decRef = function (autoRelease = true) {
              this.decAssetRef();

              if (this._ref > 0) {
                this._ref--;
              }

              if (autoRelease) {
                legacyCC.assetManager._releaseManager.tryRelease(this);
              }

              return this;
            };

            assetProto.toString = function () {
              return this.nativeUrl;
            };

            assetProto.createNode = null;
            const Asset = exports('cX', jsb.Asset);
            legacyCC.Asset = jsb.Asset;
            const AssetProto = Asset.prototype;
            serializable(AssetProto, '_native');

            const _nativeAssetDescriptor = Object.getOwnPropertyDescriptor(AssetProto, '_nativeAsset');

            property(AssetProto, '_nativeAsset', _nativeAssetDescriptor);
            ccclass('cc.Asset')(Asset);

            var _dec, _class, _dec2, _class2, _dec3, _class3;
            let Script = exports('gu', (_dec = ccclass('cc.Script'), _dec(_class = class Script extends Asset {}) || _class));
            legacyCC._Script = Script;
            let JavaScript = exports('gv', (_dec2 = ccclass('cc.JavaScript'), _dec2(_class2 = class JavaScript extends Script {}) || _class2));
            legacyCC._JavaScript = JavaScript;
            let TypeScript = exports('gw', (_dec3 = ccclass('cc.TypeScript'), _dec3(_class3 = class TypeScript extends Script {}) || _class3));
            legacyCC._TypeScript = TypeScript;

            var _dec$1, _dec2$1, _dec3$1, _dec4, _dec5, _class$1, _class2$1, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;
            let EventHandler = exports('fQ', (_dec$1 = ccclass('cc.ClickEvent'), _dec2$1 = tooltip(), _dec3$1 = tooltip(), _dec4 = tooltip(), _dec5 = tooltip(), _dec$1(_class$1 = (_class2$1 = (_temp = class EventHandler {
              constructor() {
                _initializerDefineProperty(this, "target", _descriptor, this);

                _initializerDefineProperty(this, "component", _descriptor2, this);

                _initializerDefineProperty(this, "_componentId", _descriptor3, this);

                _initializerDefineProperty(this, "handler", _descriptor4, this);

                _initializerDefineProperty(this, "customEventData", _descriptor5, this);
              }

              get _componentName() {
                this._genCompIdIfNeeded();

                return this._compId2Name(this._componentId);
              }

              set _componentName(value) {
                this._componentId = this._compName2Id(value);
              }

              static emitEvents(events, ...args) {
                for (let i = 0, l = events.length; i < l; i++) {
                  const event = events[i];

                  if (!(event instanceof EventHandler)) {
                    continue;
                  }

                  event.emit(args);
                }
              }

              emit(params) {
                const target = this.target;

                if (!legacyCC.isValid(target)) {
                  return;
                }

                this._genCompIdIfNeeded();

                const compType = legacyCC.js.getClassById(this._componentId);
                const comp = target.getComponent(compType);

                if (!legacyCC.isValid(comp)) {
                  return;
                }

                const handler = comp[this.handler];

                if (typeof handler !== 'function') {
                  return;
                }

                if (this.customEventData != null && this.customEventData !== '') {
                  params = params.slice();
                  params.push(this.customEventData);
                }

                handler.apply(comp, params);
              }

              _compName2Id(compName) {
                const comp = legacyCC.js.getClassByName(compName);
                return legacyCC.js.getClassId(comp);
              }

              _compId2Name(compId) {
                const comp = legacyCC.js.getClassById(compId);
                return legacyCC.js.getClassName(comp);
              }

              _genCompIdIfNeeded() {
                if (!this._componentId) {
                  this._componentName = this.component;
                  this.component = '';
                }
              }

            }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2$1.prototype, "target", [serializable, _dec2$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor2 = _applyDecoratedDescriptor(_class2$1.prototype, "component", [serializable, editable, _dec3$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor3 = _applyDecoratedDescriptor(_class2$1.prototype, "_componentId", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor4 = _applyDecoratedDescriptor(_class2$1.prototype, "handler", [serializable, editable, _dec4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor5 = _applyDecoratedDescriptor(_class2$1.prototype, "customEventData", [serializable, editable, _dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            })), _class2$1)) || _class$1));

            var _dec$2, _dec2$2, _dec3$2, _dec4$1, _class$2, _class2$2, _descriptor$1, _descriptor2$1, _descriptor3$1, _class3$1, _temp$1;
            const idGenerator = new IDGenerator('Comp');
            const IsOnLoadCalled$1 = CCObject.Flags.IsOnLoadCalled;
            const NullNode = null;
            let Component = exports('dX', (_dec$2 = ccclass('cc.Component'), _dec2$2 = displayName(), _dec3$2 = type(Script), _dec4$1 = tooltip(), _dec$2(_class$2 = (_class2$2 = (_temp$1 = _class3$1 = class Component extends CCObject {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "node", _descriptor$1, this);

                _initializerDefineProperty(this, "_enabled", _descriptor2$1, this);

                _initializerDefineProperty(this, "__prefab", _descriptor3$1, this);

                this._sceneGetter = null;
                this._id = idGenerator.getNewId();
              }

              get name() {
                if (this._name) {
                  return this._name;
                }

                let className = getClassName(this);
                const trimLeft = className.lastIndexOf('.');

                if (trimLeft >= 0) {
                  className = className.slice(trimLeft + 1);
                }

                if (this.node) {
                  return `${this.node.name}<${className}>`;
                } else {
                  return className;
                }
              }

              set name(value) {
                this._name = value;
              }

              get uuid() {
                return this._id;
              }

              get __scriptAsset() {
                return null;
              }

              get enabled() {
                return this._enabled;
              }

              set enabled(value) {
                if (this._enabled !== value) {
                  this._enabled = value;

                  if (this.node.activeInHierarchy) {
                    const compScheduler = legacyCC.director._compScheduler;

                    if (value) {
                      compScheduler.enableComp(this);
                    } else {
                      compScheduler.disableComp(this);
                    }
                  }
                }
              }

              get enabledInHierarchy() {
                return this._enabled && this.node && this.node.activeInHierarchy;
              }

              get _isOnLoadCalled() {
                return this._objFlags & IsOnLoadCalled$1;
              }

              _getRenderScene() {
                if (this._sceneGetter) {
                  return this._sceneGetter();
                }

                return this.node.scene.renderScene;
              }

              addComponent(typeOrClassName) {
                return this.node.addComponent(typeOrClassName);
              }

              getComponent(typeOrClassName) {
                return this.node.getComponent(typeOrClassName);
              }

              getComponents(typeOrClassName) {
                return this.node.getComponents(typeOrClassName);
              }

              getComponentInChildren(typeOrClassName) {
                return this.node.getComponentInChildren(typeOrClassName);
              }

              getComponentsInChildren(typeOrClassName) {
                return this.node.getComponentsInChildren(typeOrClassName);
              }

              destroy() {

                if (super.destroy()) {
                  if (this._enabled && this.node.activeInHierarchy) {
                    legacyCC.director._compScheduler.disableComp(this);
                  }

                  return true;
                }

                return false;
              }

              _onPreDestroy() {
                this.unscheduleAllCallbacks();

                legacyCC.director._nodeActivator.destroyComp(this);

                this.node._removeComponent(this);
              }

              _instantiate(cloned) {
                if (!cloned) {
                  cloned = legacyCC.instantiate._clone(this, this);
                }

                if (cloned) {
                  cloned.node = NullNode;
                }

                return cloned;
              }

              schedule(callback, interval = 0, repeat = legacyCC.macro.REPEAT_FOREVER, delay = 0) {
                assertID(callback, 1619);
                interval = interval || 0;
                assertID(interval >= 0, 1620);
                repeat = Number.isNaN(repeat) ? legacyCC.macro.REPEAT_FOREVER : repeat;
                delay = delay || 0;
                const scheduler = legacyCC.director.getScheduler();
                const paused = scheduler.isTargetPaused(this);
                scheduler.schedule(callback, this, interval, repeat, delay, paused);
              }

              scheduleOnce(callback, delay = 0) {
                this.schedule(callback, 0, 0, delay);
              }

              unschedule(callback_fn) {
                if (!callback_fn) {
                  return;
                }

                legacyCC.director.getScheduler().unschedule(callback_fn, this);
              }

              unscheduleAllCallbacks() {
                legacyCC.director.getScheduler().unscheduleAllForTarget(this);
              }

            }, _class3$1.EventHandler = EventHandler, _class3$1.system = null, _temp$1), (_applyDecoratedDescriptor(_class2$2.prototype, "__scriptAsset", [_dec2$2, _dec3$2, _dec4$1, disallowAnimation], Object.getOwnPropertyDescriptor(_class2$2.prototype, "__scriptAsset"), _class2$2.prototype), _descriptor$1 = _applyDecoratedDescriptor(_class2$2.prototype, "node", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return NullNode;
              }
            }), _descriptor2$1 = _applyDecoratedDescriptor(_class2$2.prototype, "_enabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return true;
              }
            }), _descriptor3$1 = _applyDecoratedDescriptor(_class2$2.prototype, "__prefab", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$2)) || _class$2));
            const proto = Component.prototype;
            proto.update = null;
            proto.lateUpdate = null;
            proto.__preload = null;
            proto.onLoad = null;
            proto.start = null;
            proto.onEnable = null;
            proto.onDisable = null;
            proto.onDestroy = null;
            proto.onFocusInEditor = null;
            proto.onLostFocusInEditor = null;
            proto.resetInEditor = null;
            proto._getLocalBounds = null;
            proto.onRestore = null;
            Component._requireComponent = null;
            Component._executionOrder = 0;

            value(Component, '_registerEditorProps', (cls, props) => {
              let reqComp = props.requireComponent;

              if (reqComp) {
                if (Array.isArray(reqComp)) {
                  reqComp = reqComp.filter(Boolean);
                }

                cls._requireComponent = reqComp;
              }

              const order = props.executionOrder;

              if (order && typeof order === 'number') {
                cls._executionOrder = order;
              }
            });
            legacyCC.Component = Component;

            var _dec$3, _dec2$3, _class$3, _class2$3, _descriptor$2, _temp$2;
            let MissingScript = exports('h3', (_dec$3 = ccclass('cc.MissingScript'), _dec2$3 = inspector(), _dec$3(_class$3 = _dec2$3(_class$3 = (_class2$3 = (_temp$2 = class MissingScript extends Component {
              static safeFindClass(id) {
                const cls = getClassById(id);

                if (cls) {
                  return cls;
                }

                legacyCC.deserialize.reportMissingClass(id);
                return undefined;
              }

              constructor() {
                super();

                _initializerDefineProperty(this, "_$erialized", _descriptor$2, this);
              }

              onLoad() {
                warnID(4600, this.node.name);
              }

            }, _temp$2), (_descriptor$2 = _applyDecoratedDescriptor(_class2$3.prototype, "_$erialized", [serializable, editorOnly], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$3)) || _class$3) || _class$3));
            legacyCC._MissingScript = MissingScript;

            try {
              const props = MissingScript.__values__;

              if (props.length === 0 || props[props.length - 1] !== '_$erialized') {
                error(`The '_$erialized' prop in MissingScript is missing. Please contact jare.`);
                error(`    Error props: ['${props}']`);
              }
            } catch (e) {
              error(`Error when checking MissingScript 5, ${e}`);
            }

            const serializeTag = exports('gn', Symbol('[[Serialize]]'));
            const deserializeTag = exports('gm', Symbol('[[Deserialize]]'));

            const VERSION = 1;
            const MAGIC = 0x4E4F4343;
            const CHUNK_ALIGN_AS = 8;
            class CCON {
              constructor(document, chunks) {
                this._document = void 0;
                this._chunks = void 0;
                this._document = document;
                this._chunks = chunks;
              }

              get document() {
                return this._document;
              }

              get chunks() {
                return this._chunks;
              }

            }
            function parseCCONJson(json) {
              const cconPreface = json;
              return {
                chunks: cconPreface.chunks,
                document: cconPreface.document
              };
            }
            function decodeCCONBinary(bytes) {
              if (bytes.length < 16) {
                throw new InvalidCCONError(getError(13102));
              }

              const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
              const magic = dataView.getUint32(0, true);

              if (magic !== MAGIC) {
                throw new InvalidCCONError(getError(13100));
              }

              const version = dataView.getUint32(4, true);

              if (version !== VERSION) {
                throw new InvalidCCONError(getError(13101, version));
              }

              const dataByteLength = dataView.getUint32(8, true);

              if (dataByteLength !== dataView.byteLength) {
                throw new InvalidCCONError(getError(13102));
              }

              let chunksStart = 12;
              const jsonDataLength = dataView.getUint32(chunksStart, true);
              chunksStart += 4;
              const jsonData = new Uint8Array(dataView.buffer, chunksStart + dataView.byteOffset, jsonDataLength);
              chunksStart += jsonDataLength;
              const jsonString = decodeJson(jsonData);
              let json;

              try {
                json = JSON.parse(jsonString);
              } catch (err) {
                throw new InvalidCCONError(err);
              }

              const chunks = [];

              while (chunksStart < dataView.byteLength) {
                if (chunksStart % CHUNK_ALIGN_AS !== 0) {
                  const padding = CHUNK_ALIGN_AS - chunksStart % CHUNK_ALIGN_AS;
                  chunksStart += padding;
                }

                const chunkDataLength = dataView.getUint32(chunksStart, true);
                chunksStart += 4;
                chunks.push(new Uint8Array(dataView.buffer, chunksStart + dataView.byteOffset, chunkDataLength));
                chunksStart += chunkDataLength;
              }

              if (chunksStart !== dataView.byteLength) {
                throw new InvalidCCONError(getError(13102));
              }

              return new CCON(json, chunks);
            }

            function decodeJson(data) {
              if (typeof TextDecoder !== 'undefined') {
                return new TextDecoder().decode(data);
              } else if ('Buffer' in globalThis) {
                const {
                  Buffer
                } = globalThis;
                return Buffer.from(data.buffer, data.byteOffset, data.byteLength).toString();
              } else {
                throw new Error(getError(13104));
              }
            }

            class InvalidCCONError extends Error {}
            legacyCC.internal.parseCCONJson = parseCCONJson;
            legacyCC.internal.decodeCCONBinary = decodeCCONBinary;
            legacyCC.internal.CCON = CCON;

            function compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, assumeHavePropIfIsValue) {
              if (defaultValue instanceof legacyCC.ValueType) {
                if (!assumeHavePropIfIsValue) {
                  sources.push('if(prop){');
                }

                const ctorCode = getClassName(defaultValue);
                sources.push(`s._deserializeFastDefinedObject(o${accessorToSet},prop,${ctorCode});`);

                if (!assumeHavePropIfIsValue) {
                  sources.push(`}else o${accessorToSet}=null;`);
                }
              } else {
                sources.push(`
if (prop) {
    s._deserializeAndAssignField(o, prop, ${propNameLiteralToSet});
} else {
    o${accessorToSet}=null;
}
`);
              }
            }

            const compileDeserialize =  compileDeserializeJIT ;
            const DELIMITER = DELIMETER;
            const POSTFIX_TYPE = `${DELIMITER}type`;
            const POSTFIX_DEFAULT = `${DELIMITER}default`;
            const POSTFIX_FORMERLY_SERIALIZED_AS = `${DELIMITER}formerlySerializedAs`;

            function compileDeserializeJIT(self, klass) {
              const attrs = getClassAttrs(klass);
              const props = klass.__values__;
              const sources = ['var prop;'];
              const fastMode = BUILTIN_CLASSID_RE.test(getClassId(klass));

              for (let p = 0; p < props.length; p++) {
                const propName = props[p];

                let accessorToSet;
                let propNameLiteralToSet;

                if (CCClass.IDENTIFIER_RE.test(propName)) {
                  propNameLiteralToSet = `"${propName}"`;
                  accessorToSet = `.${propName}`;
                } else {
                  propNameLiteralToSet = CCClass.escapeForJS(propName);
                  accessorToSet = `[${propNameLiteralToSet}]`;
                }

                let accessorToGet = accessorToSet;

                if (attrs[propName + POSTFIX_FORMERLY_SERIALIZED_AS]) {
                  const propNameToRead = attrs[propName + POSTFIX_FORMERLY_SERIALIZED_AS];

                  if (CCClass.IDENTIFIER_RE.test(propNameToRead)) {
                    accessorToGet = `.${propNameToRead}`;
                  } else {
                    accessorToGet = `[${CCClass.escapeForJS(propNameToRead)}]`;
                  }
                }

                sources.push(`prop=d${accessorToGet};`);
                sources.push(`if(typeof ${ '(prop)' }!=="undefined"){`);
                const defaultValue = CCClass.getDefault(attrs[propName + POSTFIX_DEFAULT]);
                const userType = attrs[propName + POSTFIX_TYPE];

                if (fastMode && (defaultValue !== undefined || userType)) {
                  let isPrimitiveType;

                  if (defaultValue === undefined) {
                    isPrimitiveType = userType instanceof PrimitiveType || userType === ENUM_TAG || userType === BITMASK_TAG;
                  } else {
                    const defaultType = typeof defaultValue;
                    isPrimitiveType = defaultType === 'string' || defaultType === 'number' || defaultType === 'boolean';
                  }

                  if (isPrimitiveType) {
                    sources.push(`o${accessorToSet}=prop;`);
                  } else {
                    compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, true);
                  }
                } else {
                  sources.push(`${`if(typeof ${ '(prop)' }!=="object"){` + 'o'}${accessorToSet}=prop;` + `}else{`);
                  compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, false);
                  sources.push('}');
                }

                sources.push('}');
              }

              if (legacyCC.js.isChildClassOf(klass, legacyCC._BaseNode) || legacyCC.js.isChildClassOf(klass, legacyCC.Component)) {
                {
                  sources.push('d._id&&(o._id=d._id);');
                }
              }

              if (props[props.length - 1] === '_$erialized') {
                sources.push('o._$erialized=JSON.parse(JSON.stringify(d));');
                sources.push('s._fillPlainObject(o._$erialized,d);');
              }

              return Function('s', 'o', 'd', 'k', sources.join(''));
            }

            class DeserializerPool extends Pool {
              constructor() {
                super(deserializer => {
                  deserializer.clear();
                }, 1);
              }

              get(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly) {
                const cache = this._get();

                if (cache) {
                  cache.reset(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly);
                  return cache;
                } else {
                  return new _Deserializer(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly);
                }
              }

            }

            class _Deserializer {
              constructor(result, classFinder, reportMissingClass, customEnv, ignoreEditorOnly) {
                this.deserializedList = void 0;
                this.deserializedData = void 0;
                this._ignoreEditorOnly = void 0;
                this.result = result;
                this.customEnv = customEnv;
                this.deserializedList = [];
                this.deserializedData = null;
                this._classFinder = classFinder;
                this._reportMissingClass = reportMissingClass;
                this._onDereferenced = classFinder === null || classFinder === void 0 ? void 0 : classFinder.onDereferenced;
              }

              reset(result, classFinder, reportMissingClass, customEnv, ignoreEditorOnly) {
                this.result = result;
                this.customEnv = customEnv;
                this._classFinder = classFinder;
                this._reportMissingClass = reportMissingClass;
                this._onDereferenced = classFinder === null || classFinder === void 0 ? void 0 : classFinder.onDereferenced;
              }

              clear() {
                this.result = null;
                this.customEnv = null;
                this.deserializedList.length = 0;
                this.deserializedData = null;
                this._classFinder = null;
                this._reportMissingClass = null;
                this._onDereferenced = null;
              }

              deserialize(serializedData) {
                let fromCCON = false;
                let jsonObj;

                if (serializedData instanceof CCON) {
                  fromCCON = true;
                  jsonObj = serializedData.document;

                  if (serializedData.chunks.length > 0) {
                    assertIsTrue(serializedData.chunks.length === 1);
                    this._mainBinChunk = serializedData.chunks[0];
                  }
                } else {
                  jsonObj = serializedData;
                }

                this._serializedData = jsonObj;
                this._context = {
                  fromCCON
                };
                const serializedRootObject = Array.isArray(jsonObj) ? jsonObj[0] : jsonObj;

                {
                  this.deserializedData = this._deserializeObject(serializedRootObject, 0);
                }

                this._serializedData = undefined;
                this._mainBinChunk = undefined;
                this._context = undefined;
                return this.deserializedData;
              }

              _deserializeObject(serialized, globalIndex, owner, propName) {
                switch (serialized.__type__) {
                  case 'TypedArray':
                    return this._deserializeTypedArrayView(serialized);

                  case 'TypedArrayRef':
                    return this._deserializeTypedArrayViewRef(serialized);

                  default:
                    if (serialized.__type__) {
                      return this._deserializeTypeTaggedObject(serialized, globalIndex, owner, propName);
                    } else if (!Array.isArray(serialized)) {
                      return this._deserializePlainObject(serialized);
                    } else {
                      return this._deserializeArray(serialized);
                    }

                }
              }

              _deserializeTypedArrayView(value) {
                return globalThis[value.ctor].from(value.array);
              }

              _deserializeTypedArrayViewRef(value) {
                const {
                  offset,
                  length,
                  ctor: constructorName
                } = value;
                const obj = new globalThis[constructorName](this._mainBinChunk.buffer, this._mainBinChunk.byteOffset + offset, length);
                return obj;
              }

              _deserializeArray(value) {
                const obj = new Array(value.length);
                let prop;

                for (let i = 0; i < value.length; i++) {
                  prop = value[i];

                  if (typeof prop === 'object' && prop) {
                    const isAssetType = this._deserializeAndAssignField(obj, prop, `${i}`);

                    if (isAssetType) {
                      obj[i] = null;
                    }
                  } else {
                    obj[i] = prop;
                  }
                }

                return obj;
              }

              _deserializePlainObject(value) {
                const obj = {};

                this._fillPlainObject(obj, value);

                return obj;
              }

              _deserializeTypeTaggedObject(value, globalIndex, owner, propName) {
                const type = value.__type__;

                const klass = this._classFinder(type, value, owner, propName);

                if (!klass) {
                  const notReported = this._classFinder === getClassById;

                  if (notReported) {
                    this._reportMissingClass(type);
                  }

                  return null;
                }

                const createObject = constructor => {
                  const obj = new constructor();

                  if (globalIndex >= 0) {
                    this.deserializedList[globalIndex] = obj;
                  }

                  return obj;
                };

                {
                  const obj = createObject(klass);

                  this._deserializeInto(value, obj, klass);

                  return obj;
                }
              }

              _deserializeInto(value, object, constructor, skipCustomized = false) {
                if (!skipCustomized && object[deserializeTag]) {
                  this._runCustomizedDeserialize(value, object, constructor);

                  return;
                }

                if (object._deserialize) {
                  object._deserialize(value.content, this);

                  return;
                }

                if (legacyCC.Class._isCCClass(constructor)) {
                  this._deserializeFireClass(object, value, constructor);
                } else {
                  this._deserializeFastDefinedObject(object, value, constructor);
                }
              }

              _runCustomizedDeserialize(value, object, constructor) {
                const serializationInput = {
                  readProperty: name => {
                    const serializedField = value[name];

                    if (typeof serializedField !== 'object' || !serializedField) {
                      return serializedField;
                    } else {
                      return this._deserializeObjectField(serializedField);
                    }
                  },
                  readThis: () => {
                    this._deserializeInto(value, object, constructor, true);
                  },
                  readSuper: () => {
                    const superConstructor = getSuper(constructor);

                    if (superConstructor) {
                      this._deserializeInto(value, object, superConstructor);
                    }
                  }
                };
                object[deserializeTag](serializationInput, this._context);
              }

              _deserializeFireClass(obj, serialized, klass) {
                let deserialize;

                if (klass.hasOwnProperty('__deserialize__')) {
                  deserialize = klass.__deserialize__;
                } else {
                  deserialize = compileDeserialize(this, klass);

                  try {
                    if (klass === MissingScript) {
                      const props = klass.__values__;

                      if (props.length === 0 || props[props.length - 1] !== '_$erialized') {
                        error(`The '_$erialized' prop of MissingScript is missing. Will force the raw data to be save.`);
                        error(`    Error props: ['${props}']. Please contact jare.`);
                      }

                      const rawDeserialize = deserialize;

                      deserialize = function (deserializer, object, deserialized, constructor) {
                        rawDeserialize(deserializer, object, deserialized, constructor);

                        if (!object._$erialized) {
                          error(`Unable to stash previously serialized data. ${JSON.stringify(deserialized)}`);
                        }
                      };
                    }
                  } catch (e) {
                    error(`Error when checking MissingScript 6, ${e}`);
                  }

                  value(klass, '__deserialize__', deserialize, true);
                }

                deserialize(this, obj, serialized, klass);
              }

              _deserializeAndAssignField(obj, serializedField, propName) {
                const id = serializedField.__id__;

                if (typeof id === 'number') {
                  const field = this.deserializedList[id];

                  if (field) {
                    obj[propName] = field;
                  } else {
                    var _this$_onDereferenced;

                    const source = this._serializedData[id];

                    {
                      obj[propName] = this._deserializeObject(source, id, undefined, propName);
                    }

                    (_this$_onDereferenced = this._onDereferenced) === null || _this$_onDereferenced === void 0 ? void 0 : _this$_onDereferenced.call(this, this.deserializedList, id, obj, propName);
                  }
                } else {
                  const uuid = serializedField.__uuid__;

                  if (uuid) {
                    const expectedType = serializedField.__expectedType__;
                    this.result.push(obj, propName, uuid, expectedType);
                  } else {
                    obj[propName] = this._deserializeObject(serializedField, -1);
                  }
                }

                return false;
              }

              _deserializeObjectField(serializedField) {
                const id = serializedField.__id__;

                if (typeof id === 'number') {
                  const field = this.deserializedList[id];

                  if (field) {
                    return field;
                  } else {
                    const source = this._serializedData[id];

                    const field = this._deserializeObject(source, id, undefined, undefined);

                    return field;
                  }
                } else {
                  const uuid = serializedField.__uuid__;

                  if (uuid) {
                    const _expectedType = serializedField.__expectedType__;
                    throw new Error(`Asset reference field serialization is currently not supported in custom serialization.`);
                  } else {
                    return this._deserializeObject(serializedField, -1);
                  }
                }
              }

              _fillPlainObject(instance, serialized) {
                for (const propName in serialized) {
                  if (!serialized.hasOwnProperty(propName)) {
                    continue;
                  }

                  const prop = serialized[propName];

                  if (typeof prop !== 'object') {
                    if (propName !== '__type__') {
                        instance[propName] = prop;
                      }
                  } else if (prop) {
                    const isAssetType = this._deserializeAndAssignField(instance, prop, propName);

                    if (isAssetType) {
                      instance[propName] = null;
                    }
                  } else {
                    instance[propName] = null;
                  }
                }
              }

              _deserializeFastDefinedObject(instance, serialized, klass) {
                if (klass === legacyCC.Vec2) {
                  instance.x = serialized.x || 0;
                  instance.y = serialized.y || 0;
                  return;
                } else if (klass === legacyCC.Vec3) {
                  instance.x = serialized.x || 0;
                  instance.y = serialized.y || 0;
                  instance.z = serialized.z || 0;
                  return;
                } else if (klass === legacyCC.Color) {
                  instance.r = serialized.r || 0;
                  instance.g = serialized.g || 0;
                  instance.b = serialized.b || 0;
                  const a = serialized.a;
                  instance.a = a === undefined ? 255 : a;
                  return;
                } else if (klass === legacyCC.Size) {
                  instance.width = serialized.width || 0;
                  instance.height = serialized.height || 0;
                  return;
                }

                const attrs = getClassAttrs(klass);
                const props = klass.__values__;

                if ( !props) {
                  error(`Unable to deserialize ${getClassName(klass)}. ` + 'For non-CCClass types, they can only be marked as serializable by `CCClass.fastDefine`.');
                }

                for (let i = 0; i < props.length; i++) {
                  const propName = props[i];
                  let value = serialized[propName];
                  const exists = value !== undefined || serialized.hasOwnProperty(propName);

                  if (!exists) {
                    value = CCClass.getDefault(attrs[propName + POSTFIX_DEFAULT]);
                  }

                  if (typeof value !== 'object') {
                    instance[propName] = value;
                  } else if (value) {
                    this._deserializeAndAssignField(instance, value, propName);
                  } else {
                    instance[propName] = null;
                  }
                }
              }

            }

            _Deserializer.pool = new DeserializerPool();
            function deserializeDynamic(data, details, options) {
              var _options$reportMissin;

              options = options || {};
              const classFinder = options.classFinder || getClassById;
              const createAssetRefs = options.createAssetRefs || sys.platform === Platform.EDITOR_CORE;
              const customEnv = options.customEnv;
              const ignoreEditorOnly = options.ignoreEditorOnly;
              const reportMissingClass = (_options$reportMissin = options.reportMissingClass) !== null && _options$reportMissin !== void 0 ? _options$reportMissin : legacyCC.deserialize.reportMissingClass;
              details.init();

              const deserializer = _Deserializer.pool.get(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly);

              legacyCC.game._isCloning = true;
              const res = deserializer.deserialize(data);
              legacyCC.game._isCloning = false;

              _Deserializer.pool.put(deserializer);

              if (createAssetRefs) {
                details.assignAssetsBy((uuid, options) => EditorExtends.serialize.asAsset(uuid, options.type));
              }

              return res;
            }

            function reportMissingClass(id) {
              {
                errorID(5302, id);
              }
            }

            const SUPPORT_MIN_FORMAT_VERSION = 1;
            const EMPTY_PLACEHOLDER = 0;
            const BuiltinValueTypes = [Vec2, Vec3, Vec4, Quat, Color, Size, Rect, Mat4];

            function BuiltinValueTypeParsers_xyzw(obj, data) {
              obj.x = data[1];
              obj.y = data[2];
              obj.z = data[3];
              obj.w = data[4];
            }

            const BuiltinValueTypeSetters = [(obj, data) => {
              obj.x = data[1];
              obj.y = data[2];
            }, (obj, data) => {
              obj.x = data[1];
              obj.y = data[2];
              obj.z = data[3];
            }, BuiltinValueTypeParsers_xyzw, BuiltinValueTypeParsers_xyzw, (obj, data) => {
              obj._val = data[1];
            }, (obj, data) => {
              obj.width = data[1];
              obj.height = data[2];
            }, (obj, data) => {
              obj.x = data[1];
              obj.y = data[2];
              obj.width = data[3];
              obj.height = data[4];
            }, (obj, data) => {
              Mat4.fromArray(obj, data, 1);
            }];

            const DataTypeID = {
              SimpleType: 0,
              InstanceRef: 1,
              Array_InstanceRef: 2,
              Array_AssetRefByInnerObj: 3,
              Class: 4,
              ValueTypeCreated: 5,
              AssetRefByInnerObj: 6,
              TRS: 7,
              ValueType: 8,
              Array_Class: 9,
              CustomizedClass: 10,
              Dict: 11,
              Array: 12,
              ARRAY_LENGTH: 13
            };
            const CLASS_TYPE = 0;
            const CLASS_KEYS = 1;
            const CLASS_PROP_TYPE_OFFSET = 2;
            const MASK_CLASS = 0;
            const OBJ_DATA_MASK = 0;
            const CUSTOM_OBJ_DATA_CLASS = 0;
            const CUSTOM_OBJ_DATA_CONTENT = 1;
            const VALUETYPE_SETTER = 0;
            const DICT_JSON_LAYOUT = 0;
            const ARRAY_ITEM_VALUES = 0;
            const Refs = {
              EACH_RECORD_LENGTH: 3,
              OWNER_OFFSET: 0,
              KEY_OFFSET: 1,
              TARGET_OFFSET: 2
            };
            const File = {
              Version: 0,
              Context: 0,
              SharedUuids: 1,
              SharedStrings: 2,
              SharedClasses: 3,
              SharedMasks: 4,
              Instances: 5,
              InstanceTypes: 6,
              Refs: 7,
              DependObjs: 8,
              DependKeys: 9,
              DependUuidIndices: 10,
              ARRAY_LENGTH: 11
            };
            const PACKED_SECTIONS = File.Instances;
            class Details {
              constructor() {
                this.uuidObjList = null;
                this.uuidPropList = null;
                this.uuidList = null;
                this.uuidTypeList = [];
              }

              init(data) {
                if ( data) {
                  this.uuidObjList = data[File.DependObjs];
                  this.uuidPropList = data[File.DependKeys];
                  this.uuidList = data[File.DependUuidIndices];
                } else {
                  const used = this.uuidList;

                  if (!used) {
                    this.uuidList = [];
                    this.uuidObjList = [];
                    this.uuidPropList = [];
                    this.uuidTypeList = [];
                  }
                }
              }

              reset() {
                {
                  const used = this.uuidList;

                  if (used) {
                    this.uuidList.length = 0;
                    this.uuidObjList.length = 0;
                    this.uuidPropList.length = 0;
                    this.uuidTypeList.length = 0;
                  }
                }
              }

              push(obj, propName, uuid, type) {
                this.uuidObjList.push(obj);
                this.uuidPropList.push(propName);
                this.uuidList.push(uuid);
                this.uuidTypeList.push(type || '');
              }

            } exports('gi', Details);
            Details.pool = new Pool(obj => {
              obj.reset();
            }, 5);

            Details.pool.get = function () {
              return this._get() || new Details();
            };

            function dereference(refs, instances, strings) {
              const dataLength = refs.length - 1;
              let i = 0;
              const instanceOffset = refs[dataLength] * Refs.EACH_RECORD_LENGTH;

              for (; i < instanceOffset; i += Refs.EACH_RECORD_LENGTH) {
                const owner = refs[i];
                const target = instances[refs[i + Refs.TARGET_OFFSET]];
                const keyIndex = refs[i + Refs.KEY_OFFSET];

                if (keyIndex >= 0) {
                  owner[strings[keyIndex]] = target;
                } else {
                  owner[~keyIndex] = target;
                }
              }

              for (; i < dataLength; i += Refs.EACH_RECORD_LENGTH) {
                const owner = instances[refs[i]];
                const target = instances[refs[i + Refs.TARGET_OFFSET]];
                const keyIndex = refs[i + Refs.KEY_OFFSET];

                if (keyIndex >= 0) {
                  owner[strings[keyIndex]] = target;
                } else {
                  owner[~keyIndex] = target;
                }
              }
            }

            function deserializeCCObject(data, objectData) {
              const mask = data[File.SharedMasks][objectData[OBJ_DATA_MASK]];
              const clazz = mask[MASK_CLASS];
              const ctor = clazz[CLASS_TYPE];
              const obj = new ctor();
              const keys = clazz[CLASS_KEYS];
              const classTypeOffset = clazz[CLASS_PROP_TYPE_OFFSET];
              const maskTypeOffset = mask[mask.length - 1];
              let i = MASK_CLASS + 1;

              for (; i < maskTypeOffset; ++i) {
                const key = keys[mask[i]];
                obj[key] = objectData[i];
              }

              for (; i < objectData.length; ++i) {
                const key = keys[mask[i]];
                const type = clazz[mask[i] + classTypeOffset];
                const op = ASSIGNMENTS[type];
                op(data, obj, key, objectData[i]);
              }

              return obj;
            }

            function deserializeCustomCCObject(data, ctor, value) {
              const obj = new ctor();

              if (obj._deserialize) {
                obj._deserialize(value, data[File.Context]);
              } else {
                errorID(5303, getClassName(ctor));
              }

              return obj;
            }

            function assignSimple(data, owner, key, value) {
              owner[key] = value;
            }

            function assignInstanceRef(data, owner, key, value) {
              if (value >= 0) {
                owner[key] = data[File.Instances][value];
              } else {
                data[File.Refs][~value * Refs.EACH_RECORD_LENGTH] = owner;
              }
            }

            function genArrayParser(parser) {
              return (data, owner, key, value) => {
                owner[key] = value;

                for (let i = 0; i < value.length; ++i) {
                  parser(data, value, i, value[i]);
                }
              };
            }

            function parseAssetRefByInnerObj(data, owner, key, value) {
              owner[key] = null;
              data[File.DependObjs][value] = owner;
            }

            function parseClass(data, owner, key, value) {
              owner[key] = deserializeCCObject(data, value);
            }

            function parseCustomClass(data, owner, key, value) {
              const ctor = data[File.SharedClasses][value[CUSTOM_OBJ_DATA_CLASS]];
              owner[key] = deserializeCustomCCObject(data, ctor, value[CUSTOM_OBJ_DATA_CONTENT]);
            }

            function parseValueTypeCreated(data, owner, key, value) {
              {
                const tmp = owner[key];
                BuiltinValueTypeSetters[value[VALUETYPE_SETTER]](tmp, value);
                owner[key] = tmp;
              }
            }

            function parseValueType(data, owner, key, value) {
              const val = new BuiltinValueTypes[value[VALUETYPE_SETTER]]();
              BuiltinValueTypeSetters[value[VALUETYPE_SETTER]](val, value);
              owner[key] = val;
            }

            function parseTRS(data, owner, key, value) {
              const typedArray = owner[key];
              typedArray.set(value);
            }

            function parseDict(data, owner, key, value) {
              const dict = value[DICT_JSON_LAYOUT];
              owner[key] = dict;

              for (let i = DICT_JSON_LAYOUT + 1; i < value.length; i += 3) {
                const subKey = value[i];
                const subType = value[i + 1];
                const subValue = value[i + 2];
                const op = ASSIGNMENTS[subType];
                op(data, dict, subKey, subValue);
              }
            }

            function parseArray(data, owner, key, value) {
              const array = value[ARRAY_ITEM_VALUES];
              owner[key] = array;

              for (let i = 0; i < array.length; ++i) {
                const subValue = array[i];
                const type = value[i + 1];

                if (type !== DataTypeID.SimpleType) {
                  const op = ASSIGNMENTS[type];
                  op(data, array, i, subValue);
                }
              }
            }

            const ASSIGNMENTS = new Array(DataTypeID.ARRAY_LENGTH);
            ASSIGNMENTS[DataTypeID.SimpleType] = assignSimple;
            ASSIGNMENTS[DataTypeID.InstanceRef] = assignInstanceRef;
            ASSIGNMENTS[DataTypeID.Array_InstanceRef] = genArrayParser(assignInstanceRef);
            ASSIGNMENTS[DataTypeID.Array_AssetRefByInnerObj] = genArrayParser(parseAssetRefByInnerObj);
            ASSIGNMENTS[DataTypeID.Class] = parseClass;
            ASSIGNMENTS[DataTypeID.ValueTypeCreated] = parseValueTypeCreated;
            ASSIGNMENTS[DataTypeID.AssetRefByInnerObj] = parseAssetRefByInnerObj;
            ASSIGNMENTS[DataTypeID.TRS] = parseTRS;
            ASSIGNMENTS[DataTypeID.ValueType] = parseValueType;
            ASSIGNMENTS[DataTypeID.Array_Class] = genArrayParser(parseClass);
            ASSIGNMENTS[DataTypeID.CustomizedClass] = parseCustomClass;
            ASSIGNMENTS[DataTypeID.Dict] = parseDict;
            ASSIGNMENTS[DataTypeID.Array] = parseArray;

            function parseInstances(data) {
              const instances = data[File.Instances];
              const instanceTypes = data[File.InstanceTypes];
              const instanceTypesLen = instanceTypes === EMPTY_PLACEHOLDER ? 0 : instanceTypes.length;
              let rootIndex = instances[instances.length - 1];
              let normalObjectCount = instances.length - instanceTypesLen;

              if (typeof rootIndex !== 'number') {
                rootIndex = 0;
              } else {
                if (rootIndex < 0) {
                  rootIndex = ~rootIndex;
                }

                --normalObjectCount;
              }

              let insIndex = 0;

              for (; insIndex < normalObjectCount; ++insIndex) {
                instances[insIndex] = deserializeCCObject(data, instances[insIndex]);
              }

              const classes = data[File.SharedClasses];

              for (let typeIndex = 0; typeIndex < instanceTypesLen; ++typeIndex, ++insIndex) {
                let type = instanceTypes[typeIndex];
                const eachData = instances[insIndex];

                if (type >= 0) {
                  const ctor = classes[type];
                  instances[insIndex] = deserializeCustomCCObject(data, ctor, eachData);
                } else {
                  type = ~type;
                  const op = ASSIGNMENTS[type];
                  op(data, instances, insIndex, eachData);
                }
              }

              return rootIndex;
            }

            function getMissingClass(hasCustomFinder, type, reportMissingClass) {
              if (!hasCustomFinder) {
                reportMissingClass(type);
              }

              return Object;
            }

            function doLookupClass(classFinder, type, container, index, silent, hasCustomFinder, reportMissingClass) {
              let klass = classFinder(type);

              if (!klass) {
                if (silent) {
                  container[index] = ((c, i, t) => function proxy() {
                    const actualClass = classFinder(t) || getMissingClass(hasCustomFinder, t, reportMissingClass);
                    c[i] = actualClass;
                    return new actualClass();
                  })(container, index, type);

                  return;
                } else {
                  klass = getMissingClass(hasCustomFinder, type, reportMissingClass);
                }
              }

              container[index] = klass;
            }

            function lookupClasses(data, silent, customFinder, reportMissingClass) {
              const classFinder = customFinder || getClassById;
              const classes = data[File.SharedClasses];

              for (let i = 0; i < classes.length; ++i) {
                const klassLayout = classes[i];

                if (typeof klassLayout !== 'string') {
                  {
                    if (typeof klassLayout[CLASS_TYPE] === 'function') {
                      throw new Error('Can not deserialize the same JSON data again.');
                    }
                  }

                  const type = klassLayout[CLASS_TYPE];
                  doLookupClass(classFinder, type, klassLayout, CLASS_TYPE, silent, customFinder, reportMissingClass);
                } else {
                  doLookupClass(classFinder, klassLayout, classes, i, silent, customFinder, reportMissingClass);
                }
              }
            }

            function cacheMasks(data) {
              const masks = data[File.SharedMasks];

              if (masks) {
                const classes = data[File.SharedClasses];

                for (let i = 0; i < masks.length; ++i) {
                  const mask = masks[i];
                  mask[MASK_CLASS] = classes[mask[MASK_CLASS]];
                }
              }
            }

            function parseResult(data) {
              const instances = data[File.Instances];
              const sharedStrings = data[File.SharedStrings];
              const dependSharedUuids = data[File.SharedUuids];
              const dependObjs = data[File.DependObjs];
              const dependKeys = data[File.DependKeys];
              const dependUuids = data[File.DependUuidIndices];

              for (let i = 0; i < dependObjs.length; ++i) {
                const obj = dependObjs[i];

                if (typeof obj === 'number') {
                  dependObjs[i] = instances[obj];
                }

                let key = dependKeys[i];

                if (typeof key === 'number') {
                  if (key >= 0) {
                    key = sharedStrings[key];
                  } else {
                    key = ~key;
                  }

                  dependKeys[i] = key;
                }

                const uuid = dependUuids[i];

                if (typeof uuid === 'number') {
                  dependUuids[i] = dependSharedUuids[uuid];
                }
              }
            }

            function isCompiledJson(json) {
              if (Array.isArray(json)) {
                const version = json[0];
                return typeof version === 'number' || version instanceof FileInfo;
              } else {
                return false;
              }
            }
            function deserialize(data, details, options) {
              if (typeof data === 'string') {
                data = JSON.parse(data);
              }

              const borrowDetails = !details;
              details = details || Details.pool.get();
              let res;

              if ( !isCompiledJson(data)) {
                res = deserializeDynamic(data, details, options);
              } else {
                details.init(data);
                options = options || {};
                let version = data[File.Version];
                let preprocessed = false;

                if (typeof version === 'object') {
                  preprocessed = version.preprocessed;
                  version = version.version;
                }

                if (version < SUPPORT_MIN_FORMAT_VERSION) {
                  throw new Error(getError(5304, version));
                }

                options._version = version;
                options.result = details;
                data[File.Context] = options;

                if (!preprocessed) {
                  var _options$reportMissin;

                  lookupClasses(data, false, options.classFinder, (_options$reportMissin = options.reportMissingClass) !== null && _options$reportMissin !== void 0 ? _options$reportMissin : deserialize.reportMissingClass);
                  cacheMasks(data);
                }

                legacyCC.game._isCloning = true;
                const instances = data[File.Instances];
                const rootIndex = parseInstances(data);
                legacyCC.game._isCloning = false;

                if (data[File.Refs]) {
                  dereference(data[File.Refs], instances, data[File.SharedStrings]);
                }

                parseResult(data);
                res = instances[rootIndex];
              }

              if (borrowDetails) {
                Details.pool.put(details);
              }

              return res;
            }
            deserialize.Details = Details;
            deserialize.reportMissingClass = reportMissingClass;

            class FileInfo {
              constructor(version) {
                this.preprocessed = true;
                this.version = version;
              }

            }

            function unpackJSONs(data, classFinder, reportMissingClass) {
              if (data[File.Version] < SUPPORT_MIN_FORMAT_VERSION) {
                throw new Error(getError(5304, data[File.Version]));
              }

              lookupClasses(data, true, classFinder, reportMissingClass !== null && reportMissingClass !== void 0 ? reportMissingClass : deserialize.reportMissingClass);
              cacheMasks(data);
              const version = new FileInfo(data[File.Version]);
              const sharedUuids = data[File.SharedUuids];
              const sharedStrings = data[File.SharedStrings];
              const sharedClasses = data[File.SharedClasses];
              const sharedMasks = data[File.SharedMasks];
              const sections = data[PACKED_SECTIONS];

              for (let i = 0; i < sections.length; ++i) {
                sections[i].unshift(version, sharedUuids, sharedStrings, sharedClasses, sharedMasks);
              }

              return sections;
            }
            function packCustomObjData(type, data, hasNativeDep) {
              return [SUPPORT_MIN_FORMAT_VERSION, EMPTY_PLACEHOLDER, EMPTY_PLACEHOLDER, [type], EMPTY_PLACEHOLDER, hasNativeDep ? [data, ~0] : [data], [0], EMPTY_PLACEHOLDER, [], [], []];
            }
            function hasNativeDep(data) {
              const instances = data[File.Instances];
              const rootInfo = instances[instances.length - 1];

              if (typeof rootInfo !== 'number') {
                return false;
              } else {
                return rootInfo < 0;
              }
            }

            function getDependUuidList(json) {
              const sharedUuids = json[File.SharedUuids];
              return json[File.DependUuidIndices].map(index => sharedUuids[index]);
            }

            function parseUuidDependencies(serialized) {
              {
                return getDependUuidList(serialized);
              }
            }

            legacyCC.deserialize = deserialize;

            const Destroyed$1 = CCObject.Flags.Destroyed;
            const PersistentMask$1 = CCObject.Flags.PersistentMask;
            const objsToClearTmpVar = [];
            function instantiate(original, internalForce) {

              let clone;

              if (isCCObject(original)) {
                if (original._instantiate) {
                  legacyCC.game._isCloning = true;
                  clone = original._instantiate(null, true);
                  legacyCC.game._isCloning = false;

                  {
                    updateChildrenForDeserialize(clone);
                  }

                  return clone;
                } else if (original instanceof legacyCC.Asset) {
                  throw new TypeError(getError(6903));
                }
              }

              legacyCC.game._isCloning = true;
              clone = doInstantiate(original);
              legacyCC.game._isCloning = false;

              {
                updateChildrenForDeserialize(clone);
              }

              return clone;
            }

            function doInstantiate(obj, parent) {

              let clone;

              if (obj._iN$t) {
                clone = obj._iN$t;
              } else if (obj.constructor) {
                const Klass = obj.constructor;
                clone = new Klass();
              } else {
                clone = Object.create(null);
              }

              enumerateObject(obj, clone, parent);

              for (let i = 0, len = objsToClearTmpVar.length; i < len; ++i) {
                objsToClearTmpVar[i]._iN$t = null;
              }

              objsToClearTmpVar.length = 0;
              return clone;
            }

            function enumerateCCClass(klass, obj, clone, parent) {
              const props = klass.__values__;

              for (let p = 0; p < props.length; p++) {
                const key = props[p];
                const value = obj[key];

                if (typeof value === 'object' && value) {
                  const initValue = clone[key];

                  if (initValue instanceof ValueType && initValue.constructor === value.constructor) {
                    initValue.set(value);
                  } else {
                    clone[key] = value._iN$t || instantiateObj(value, parent);
                  }
                } else {
                  clone[key] = value;
                }
              }
            }

            function enumerateObject(obj, clone, parent) {
              js.value(obj, '_iN$t', clone, true);
              objsToClearTmpVar.push(obj);
              const klass = obj.constructor;

              if (isCCClassOrFastDefined(klass)) {
                enumerateCCClass(klass, obj, clone, parent);
              } else {
                for (const key in obj) {
                  if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && key !== '__type__' && key !== '__prefab') {
                    continue;
                  }

                  const value = obj[key];

                  if (typeof value === 'object' && value) {
                    if (value === clone) {
                      continue;
                    }

                    clone[key] = value._iN$t || instantiateObj(value, parent);
                  } else {
                    clone[key] = value;
                  }
                }
              }

              if (isCCObject(obj)) {
                clone._objFlags &= PersistentMask$1;
              }
            }

            function instantiateObj(obj, parent) {
              if (obj instanceof ValueType) {
                return obj.clone();
              }

              if (obj instanceof legacyCC.Asset) {
                return obj;
              }

              let clone;

              if (ArrayBuffer.isView(obj)) {
                const len = obj.length;
                clone = new obj.constructor(len);
                obj._iN$t = clone;
                objsToClearTmpVar.push(obj);

                for (let i = 0; i < len; ++i) {
                  clone[i] = obj[i];
                }

                return clone;
              }

              if (Array.isArray(obj)) {
                const len = obj.length;
                clone = new Array(len);
                obj._iN$t = clone;
                objsToClearTmpVar.push(obj);

                for (let i = 0; i < len; ++i) {
                  const value = obj[i];

                  if (typeof value === 'object' && value) {
                    clone[i] = value._iN$t || instantiateObj(value, parent);
                  } else {
                    clone[i] = value;
                  }
                }

                return clone;
              } else if (obj._objFlags & Destroyed$1) {
                return null;
              }

              const ctor = obj.constructor;

              if (isCCClassOrFastDefined(ctor)) {
                if (parent) {
                  if (parent instanceof legacyCC.Component) {
                    if (obj instanceof legacyCC._BaseNode || obj instanceof legacyCC.Component) {
                      return obj;
                    }
                  } else if (parent instanceof legacyCC._BaseNode) {
                    if (obj instanceof legacyCC._BaseNode) {
                      if (!obj.isChildOf(parent)) {
                        return obj;
                      }
                    } else if (obj instanceof legacyCC.Component) {
                      if (obj.node && !obj.node.isChildOf(parent)) {
                        return obj;
                      }
                    }
                  }
                }

                clone = new ctor();
              } else if (ctor === Object) {
                clone = {};
              } else if (!ctor) {
                clone = Object.create(null);
              } else {
                return obj;
              }

              enumerateObject(obj, clone, parent);
              return clone;
            }

            instantiate._clone = doInstantiate;
            legacyCC.instantiate = instantiate;

            var _dec$4, _class$4, _class2$4, _descriptor$3, _descriptor2$2, _descriptor3$2, _descriptor4$1, _class3$2, _temp$3;
            let StorageUnit;

            (function (StorageUnit) {
              StorageUnit[StorageUnit["Uint8"] = 0] = "Uint8";
              StorageUnit[StorageUnit["Uint16"] = 1] = "Uint16";
              StorageUnit[StorageUnit["Uint32"] = 2] = "Uint32";
              StorageUnit[StorageUnit["Int8"] = 3] = "Int8";
              StorageUnit[StorageUnit["Int16"] = 4] = "Int16";
              StorageUnit[StorageUnit["Int32"] = 5] = "Int32";
              StorageUnit[StorageUnit["Float32"] = 6] = "Float32";
              StorageUnit[StorageUnit["Float64"] = 7] = "Float64";
            })(StorageUnit || (StorageUnit = {}));

            let ElementType;

            (function (ElementType) {
              ElementType[ElementType["Scalar"] = 0] = "Scalar";
              ElementType[ElementType["Vec2"] = 1] = "Vec2";
              ElementType[ElementType["Vec3"] = 2] = "Vec3";
              ElementType[ElementType["Vec4"] = 3] = "Vec4";
              ElementType[ElementType["Quat"] = 4] = "Quat";
              ElementType[ElementType["Mat4"] = 5] = "Mat4";
            })(ElementType || (ElementType = {}));

            const elementTypeBits = 3;
            function combineStorageUnitElementType(unit, elementType) {
              return (elementType << elementTypeBits) + unit;
            }
            function extractStorageUnitElementType(combined) {
              return {
                storageUnit: ~(-1 << elementTypeBits) & combined,
                elementType: combined >> elementTypeBits
              };
            }
            let CompactValueTypeArray = exports('gk', (_dec$4 = ccclass('cc.CompactValueTypeArray'), _dec$4(_class$4 = (_class2$4 = (_temp$3 = _class3$2 = class CompactValueTypeArray {
              constructor() {
                _initializerDefineProperty(this, "_byteOffset", _descriptor$3, this);

                _initializerDefineProperty(this, "_unitCount", _descriptor2$2, this);

                _initializerDefineProperty(this, "_unitElement", _descriptor3$2, this);

                _initializerDefineProperty(this, "_length", _descriptor4$1, this);
              }

              static lengthFor(values, elementType, unit) {
                const elementTraits = getElementTraits(elementType);
                return elementTraits.requiredUnits * values.length * getStorageConstructor(unit).BYTES_PER_ELEMENT;
              }

              static compress(values, elementType, unit, arrayBuffer, byteOffset, presumedByteOffset) {
                const elementTraits = getElementTraits(elementType);
                const storageConstructor = getStorageConstructor(unit);
                const unitCount = elementTraits.requiredUnits * values.length;
                const storage = new storageConstructor(arrayBuffer, byteOffset, unitCount);

                for (let i = 0; i < values.length; ++i) {
                  elementTraits.compress(storage, i, values[i]);
                }

                const result = new CompactValueTypeArray();
                result._unitElement = combineStorageUnitElementType(unit, elementType);
                result._byteOffset = presumedByteOffset;
                result._unitCount = unitCount;
                result._length = values.length;
                return result;
              }

              decompress(arrayBuffer) {
                const {
                  storageUnit,
                  elementType
                } = extractStorageUnitElementType(this._unitElement);
                const elementTraits = getElementTraits(elementType);
                const storageConstructor = getStorageConstructor(storageUnit);
                const storage = new storageConstructor(arrayBuffer, this._byteOffset, this._unitCount);
                const result = new Array(this._length);

                for (let i = 0; i < this._length; ++i) {
                  result[i] = elementTraits.decompress(storage, i);
                }

                return result;
              }

            }, _class3$2.StorageUnit = StorageUnit, _class3$2.ElementType = ElementType, _temp$3), (_descriptor$3 = _applyDecoratedDescriptor(_class2$4.prototype, "_byteOffset", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor2$2 = _applyDecoratedDescriptor(_class2$4.prototype, "_unitCount", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor3$2 = _applyDecoratedDescriptor(_class2$4.prototype, "_unitElement", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return combineStorageUnitElementType(StorageUnit.Uint8, ElementType.Scalar);
              }
            }), _descriptor4$1 = _applyDecoratedDescriptor(_class2$4.prototype, "_length", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            })), _class2$4)) || _class$4));

            function getElementTraits(elementType) {
              return BuiltinElementTypeTraits[elementType];
            }

            function getStorageConstructor(unit) {
              switch (unit) {
                case StorageUnit.Uint8:
                  return Uint8Array;

                case StorageUnit.Uint16:
                  return Uint16Array;

                case StorageUnit.Uint32:
                  return Uint32Array;

                case StorageUnit.Int8:
                  return Int8Array;

                case StorageUnit.Int16:
                  return Int16Array;

                case StorageUnit.Int32:
                  return Int32Array;

                case StorageUnit.Float32:
                  return Float32Array;

                case StorageUnit.Float64:
                  return Float64Array;
              }
            }

            const BuiltinElementTypeTraits = {
              [ElementType.Scalar]: {
                requiredUnits: 1,

                compress(storage, index, value) {
                  storage[index] = value;
                },

                decompress(storage, index) {
                  return storage[index];
                }

              },
              [ElementType.Vec2]: {
                requiredUnits: 2,

                compress(storage, index, value) {
                  storage[index * 2] = value.x;
                  storage[index * 2 + 1] = value.y;
                },

                decompress(storage, index) {
                  return new Vec3(storage[index * 2], storage[index * 2 + 1]);
                }

              },
              [ElementType.Vec3]: {
                requiredUnits: 3,

                compress(storage, index, value) {
                  storage[index * 3] = value.x;
                  storage[index * 3 + 1] = value.y;
                  storage[index * 3 + 2] = value.z;
                },

                decompress(storage, index) {
                  return new Vec3(storage[index * 3], storage[index * 3 + 1], storage[index * 3 + 2]);
                }

              },
              [ElementType.Vec4]: {
                requiredUnits: 4,

                compress(storage, index, value) {
                  storage[index * 4] = value.x;
                  storage[index * 4 + 1] = value.y;
                  storage[index * 4 + 2] = value.z;
                  storage[index * 4 + 3] = value.w;
                },

                decompress(storage, index) {
                  return new Vec4(storage[index * 4], storage[index * 4 + 1], storage[index * 4 + 2], storage[index * 4 + 3]);
                }

              },
              [ElementType.Quat]: {
                requiredUnits: 4,

                compress(storage, index, value) {
                  storage[index * 4] = value.x;
                  storage[index * 4 + 1] = value.y;
                  storage[index * 4 + 2] = value.z;
                  storage[index * 4 + 3] = value.w;
                },

                decompress(storage, index) {
                  return new Quat(storage[index * 4], storage[index * 4 + 1], storage[index * 4 + 2], storage[index * 4 + 3]);
                }

              },
              [ElementType.Mat4]: {
                requiredUnits: 16,

                compress(storage, index, value) {
                  Mat4.toArray(storage, value, index * 16);
                },

                decompress(storage, index) {
                  return Mat4.fromArray(new Mat4(), storage, index * 16);
                }

              }
            };

            legacyCC._decorator = _decorator;

            function constant() {
              return 0;
            }
            function linear(k) {
              return k;
            }
            function quadIn(k) {
              return k * k;
            }
            function quadOut(k) {
              return k * (2 - k);
            }
            function quadInOut(k) {
              k *= 2;

              if (k < 1) {
                return 0.5 * k * k;
              }

              return -0.5 * (--k * (k - 2) - 1);
            }
            function cubicIn(k) {
              return k * k * k;
            }
            function cubicOut(k) {
              return --k * k * k + 1;
            }
            function cubicInOut(k) {
              k *= 2;

              if (k < 1) {
                return 0.5 * k * k * k;
              }

              return 0.5 * ((k -= 2) * k * k + 2);
            }
            function quartIn(k) {
              return k * k * k * k;
            }
            function quartOut(k) {
              return 1 - --k * k * k * k;
            }
            function quartInOut(k) {
              k *= 2;

              if (k < 1) {
                return 0.5 * k * k * k * k;
              }

              return -0.5 * ((k -= 2) * k * k * k - 2);
            }
            function quintIn(k) {
              return k * k * k * k * k;
            }
            function quintOut(k) {
              return --k * k * k * k * k + 1;
            }
            function quintInOut(k) {
              k *= 2;

              if (k < 1) {
                return 0.5 * k * k * k * k * k;
              }

              return 0.5 * ((k -= 2) * k * k * k * k + 2);
            }
            function sineIn(k) {
              if (k === 1) {
                return 1;
              }

              return 1 - Math.cos(k * Math.PI / 2);
            }
            function sineOut(k) {
              return Math.sin(k * Math.PI / 2);
            }
            function sineInOut(k) {
              return 0.5 * (1 - Math.cos(Math.PI * k));
            }
            function expoIn(k) {
              return k === 0 ? 0 : Math.pow(1024, k - 1);
            }
            function expoOut(k) {
              return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
            }
            function expoInOut(k) {
              if (k === 0) {
                return 0;
              }

              if (k === 1) {
                return 1;
              }

              k *= 2;

              if (k < 1) {
                return 0.5 * Math.pow(1024, k - 1);
              }

              return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
            }
            function circIn(k) {
              return 1 - Math.sqrt(1 - k * k);
            }
            function circOut(k) {
              return Math.sqrt(1 - --k * k);
            }
            function circInOut(k) {
              k *= 2;

              if (k < 1) {
                return -0.5 * (Math.sqrt(1 - k * k) - 1);
              }

              return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
            }
            function elasticIn(k) {
              let s;
              let a = 0.1;
              const p = 0.4;

              if (k === 0) {
                return 0;
              }

              if (k === 1) {
                return 1;
              }

              if (!a || a < 1) {
                a = 1;
                s = p / 4;
              } else {
                s = p * Math.asin(1 / a) / (2 * Math.PI);
              }

              return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
            }
            function elasticOut(k) {
              let s;
              let a = 0.1;
              const p = 0.4;

              if (k === 0) {
                return 0;
              }

              if (k === 1) {
                return 1;
              }

              if (!a || a < 1) {
                a = 1;
                s = p / 4;
              } else {
                s = p * Math.asin(1 / a) / (2 * Math.PI);
              }

              return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
            }
            function elasticInOut(k) {
              let s;
              let a = 0.1;
              const p = 0.4;

              if (k === 0) {
                return 0;
              }

              if (k === 1) {
                return 1;
              }

              if (!a || a < 1) {
                a = 1;
                s = p / 4;
              } else {
                s = p * Math.asin(1 / a) / (2 * Math.PI);
              }

              k *= 2;

              if (k < 1) {
                return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
              }

              return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
            }
            function backIn(k) {
              if (k === 1) {
                return 1;
              }

              const s = 1.70158;
              return k * k * ((s + 1) * k - s);
            }
            function backOut(k) {
              if (k === 0) {
                return 0;
              }

              const s = 1.70158;
              return --k * k * ((s + 1) * k + s) + 1;
            }
            function backInOut(k) {
              const s = 1.70158 * 1.525;
              k *= 2;

              if (k < 1) {
                return 0.5 * (k * k * ((s + 1) * k - s));
              }

              return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
            }
            function bounceIn(k) {
              return 1 - bounceOut(1 - k);
            }
            function bounceOut(k) {
              if (k < 1 / 2.75) {
                return 7.5625 * k * k;
              } else if (k < 2 / 2.75) {
                return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
              } else if (k < 2.5 / 2.75) {
                return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
              } else {
                return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
              }
            }
            function bounceInOut(k) {
              if (k < 0.5) {
                return bounceIn(k * 2) * 0.5;
              }

              return bounceOut(k * 2 - 1) * 0.5 + 0.5;
            }
            function smooth(k) {
              if (k <= 0) {
                return 0;
              }

              if (k >= 1) {
                return 1;
              }

              return k * k * (3 - 2 * k);
            }
            function fade(k) {
              if (k <= 0) {
                return 0;
              }

              if (k >= 1) {
                return 1;
              }

              return k * k * k * (k * (k * 6 - 15) + 10);
            }
            const quadOutIn = _makeOutIn(quadIn, quadOut);
            const cubicOutIn = _makeOutIn(cubicIn, cubicOut);
            const quartOutIn = _makeOutIn(quartIn, quartOut);
            const quintOutIn = _makeOutIn(quintIn, quintOut);
            const sineOutIn = _makeOutIn(sineIn, sineOut);
            const expoOutIn = _makeOutIn(expoIn, expoOut);
            const circOutIn = _makeOutIn(circIn, circOut);
            const elasticOutIn = _makeOutIn(elasticIn, elasticOut);
            const backOutIn = _makeOutIn(backIn, backOut);
            const bounceOutIn = _makeOutIn(bounceIn, bounceOut);

            function _makeOutIn(fnIn, fnOut) {
              return k => {
                if (k < 0.5) {
                  return fnOut(k * 2) / 2;
                }

                return fnIn(2 * k - 1) / 2 + 0.5;
              };
            }

            var easing = /*#__PURE__*/Object.freeze({
                __proto__: null,
                constant: constant,
                linear: linear,
                quadIn: quadIn,
                quadOut: quadOut,
                quadInOut: quadInOut,
                cubicIn: cubicIn,
                cubicOut: cubicOut,
                cubicInOut: cubicInOut,
                quartIn: quartIn,
                quartOut: quartOut,
                quartInOut: quartInOut,
                quintIn: quintIn,
                quintOut: quintOut,
                quintInOut: quintInOut,
                sineIn: sineIn,
                sineOut: sineOut,
                sineInOut: sineInOut,
                expoIn: expoIn,
                expoOut: expoOut,
                expoInOut: expoInOut,
                circIn: circIn,
                circOut: circOut,
                circInOut: circInOut,
                elasticIn: elasticIn,
                elasticOut: elasticOut,
                elasticInOut: elasticInOut,
                backIn: backIn,
                backOut: backOut,
                backInOut: backInOut,
                bounceIn: bounceIn,
                bounceOut: bounceOut,
                bounceInOut: bounceInOut,
                smooth: smooth,
                fade: fade,
                quadOutIn: quadOutIn,
                cubicOutIn: cubicOutIn,
                quartOutIn: quartOutIn,
                quintOutIn: quintOutIn,
                sineOutIn: sineOutIn,
                expoOutIn: expoOutIn,
                circOutIn: circOutIn,
                elasticOutIn: elasticOutIn,
                backOutIn: backOutIn,
                bounceOutIn: bounceOutIn
            });
            exports('eV', easing);

            let EasingMethod;

            (function (EasingMethod) {
              EasingMethod[EasingMethod["LINEAR"] = 0] = "LINEAR";
              EasingMethod[EasingMethod["CONSTANT"] = 1] = "CONSTANT";
              EasingMethod[EasingMethod["QUAD_IN"] = 2] = "QUAD_IN";
              EasingMethod[EasingMethod["QUAD_OUT"] = 3] = "QUAD_OUT";
              EasingMethod[EasingMethod["QUAD_IN_OUT"] = 4] = "QUAD_IN_OUT";
              EasingMethod[EasingMethod["QUAD_OUT_IN"] = 5] = "QUAD_OUT_IN";
              EasingMethod[EasingMethod["CUBIC_IN"] = 6] = "CUBIC_IN";
              EasingMethod[EasingMethod["CUBIC_OUT"] = 7] = "CUBIC_OUT";
              EasingMethod[EasingMethod["CUBIC_IN_OUT"] = 8] = "CUBIC_IN_OUT";
              EasingMethod[EasingMethod["CUBIC_OUT_IN"] = 9] = "CUBIC_OUT_IN";
              EasingMethod[EasingMethod["QUART_IN"] = 10] = "QUART_IN";
              EasingMethod[EasingMethod["QUART_OUT"] = 11] = "QUART_OUT";
              EasingMethod[EasingMethod["QUART_IN_OUT"] = 12] = "QUART_IN_OUT";
              EasingMethod[EasingMethod["QUART_OUT_IN"] = 13] = "QUART_OUT_IN";
              EasingMethod[EasingMethod["QUINT_IN"] = 14] = "QUINT_IN";
              EasingMethod[EasingMethod["QUINT_OUT"] = 15] = "QUINT_OUT";
              EasingMethod[EasingMethod["QUINT_IN_OUT"] = 16] = "QUINT_IN_OUT";
              EasingMethod[EasingMethod["QUINT_OUT_IN"] = 17] = "QUINT_OUT_IN";
              EasingMethod[EasingMethod["SINE_IN"] = 18] = "SINE_IN";
              EasingMethod[EasingMethod["SINE_OUT"] = 19] = "SINE_OUT";
              EasingMethod[EasingMethod["SINE_IN_OUT"] = 20] = "SINE_IN_OUT";
              EasingMethod[EasingMethod["SINE_OUT_IN"] = 21] = "SINE_OUT_IN";
              EasingMethod[EasingMethod["EXPO_IN"] = 22] = "EXPO_IN";
              EasingMethod[EasingMethod["EXPO_OUT"] = 23] = "EXPO_OUT";
              EasingMethod[EasingMethod["EXPO_IN_OUT"] = 24] = "EXPO_IN_OUT";
              EasingMethod[EasingMethod["EXPO_OUT_IN"] = 25] = "EXPO_OUT_IN";
              EasingMethod[EasingMethod["CIRC_IN"] = 26] = "CIRC_IN";
              EasingMethod[EasingMethod["CIRC_OUT"] = 27] = "CIRC_OUT";
              EasingMethod[EasingMethod["CIRC_IN_OUT"] = 28] = "CIRC_IN_OUT";
              EasingMethod[EasingMethod["CIRC_OUT_IN"] = 29] = "CIRC_OUT_IN";
              EasingMethod[EasingMethod["ELASTIC_IN"] = 30] = "ELASTIC_IN";
              EasingMethod[EasingMethod["ELASTIC_OUT"] = 31] = "ELASTIC_OUT";
              EasingMethod[EasingMethod["ELASTIC_IN_OUT"] = 32] = "ELASTIC_IN_OUT";
              EasingMethod[EasingMethod["ELASTIC_OUT_IN"] = 33] = "ELASTIC_OUT_IN";
              EasingMethod[EasingMethod["BACK_IN"] = 34] = "BACK_IN";
              EasingMethod[EasingMethod["BACK_OUT"] = 35] = "BACK_OUT";
              EasingMethod[EasingMethod["BACK_IN_OUT"] = 36] = "BACK_IN_OUT";
              EasingMethod[EasingMethod["BACK_OUT_IN"] = 37] = "BACK_OUT_IN";
              EasingMethod[EasingMethod["BOUNCE_IN"] = 38] = "BOUNCE_IN";
              EasingMethod[EasingMethod["BOUNCE_OUT"] = 39] = "BOUNCE_OUT";
              EasingMethod[EasingMethod["BOUNCE_IN_OUT"] = 40] = "BOUNCE_IN_OUT";
              EasingMethod[EasingMethod["BOUNCE_OUT_IN"] = 41] = "BOUNCE_OUT_IN";
              EasingMethod[EasingMethod["SMOOTH"] = 42] = "SMOOTH";
              EasingMethod[EasingMethod["FADE"] = 43] = "FADE";
            })(EasingMethod || (EasingMethod = exports('eY', {})));

            const easingMethodFnMap = {
              [EasingMethod.CONSTANT]: constant,
              [EasingMethod.LINEAR]: linear,
              [EasingMethod.QUAD_IN]: quadIn,
              [EasingMethod.QUAD_OUT]: quadOut,
              [EasingMethod.QUAD_IN_OUT]: quadInOut,
              [EasingMethod.QUAD_OUT_IN]: quadOutIn,
              [EasingMethod.CUBIC_IN]: cubicIn,
              [EasingMethod.CUBIC_OUT]: cubicOut,
              [EasingMethod.CUBIC_IN_OUT]: cubicInOut,
              [EasingMethod.CUBIC_OUT_IN]: cubicOutIn,
              [EasingMethod.QUART_IN]: quartIn,
              [EasingMethod.QUART_OUT]: quartOut,
              [EasingMethod.QUART_IN_OUT]: quartInOut,
              [EasingMethod.QUART_OUT_IN]: quartOutIn,
              [EasingMethod.QUINT_IN]: quintIn,
              [EasingMethod.QUINT_OUT]: quintOut,
              [EasingMethod.QUINT_IN_OUT]: quintInOut,
              [EasingMethod.QUINT_OUT_IN]: quintOutIn,
              [EasingMethod.SINE_IN]: sineIn,
              [EasingMethod.SINE_OUT]: sineOut,
              [EasingMethod.SINE_IN_OUT]: sineInOut,
              [EasingMethod.SINE_OUT_IN]: sineOutIn,
              [EasingMethod.EXPO_IN]: expoIn,
              [EasingMethod.EXPO_OUT]: expoOut,
              [EasingMethod.EXPO_IN_OUT]: expoInOut,
              [EasingMethod.EXPO_OUT_IN]: expoOutIn,
              [EasingMethod.CIRC_IN]: circIn,
              [EasingMethod.CIRC_OUT]: circOut,
              [EasingMethod.CIRC_IN_OUT]: circInOut,
              [EasingMethod.CIRC_OUT_IN]: circOutIn,
              [EasingMethod.ELASTIC_IN]: elasticIn,
              [EasingMethod.ELASTIC_OUT]: elasticOut,
              [EasingMethod.ELASTIC_IN_OUT]: elasticInOut,
              [EasingMethod.ELASTIC_OUT_IN]: elasticOutIn,
              [EasingMethod.BACK_IN]: backIn,
              [EasingMethod.BACK_OUT]: backOut,
              [EasingMethod.BACK_IN_OUT]: backInOut,
              [EasingMethod.BACK_OUT_IN]: backOutIn,
              [EasingMethod.BOUNCE_IN]: bounceIn,
              [EasingMethod.BOUNCE_OUT]: bounceOut,
              [EasingMethod.BOUNCE_IN_OUT]: bounceInOut,
              [EasingMethod.BOUNCE_OUT_IN]: bounceOutIn,
              [EasingMethod.SMOOTH]: smooth,
              [EasingMethod.FADE]: fade
            };
            function getEasingFn(easingMethod) {
              assertIsTrue(easingMethod in easingMethodFnMap);
              return easingMethodFnMap[easingMethod];
            }

            const REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START = 0;
            const REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK = 0xFF << REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START;
            const REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START = 8;
            const REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK = 0xFF << REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START;
            const REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START = 16;
            const REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_MASK = 0xFF << REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;
            assertIsTrue(REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START === REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START + popCount(REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK));
            assertIsTrue(REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START === REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START + popCount(REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK));
            const REAL_KEYFRAME_VALUE_DEFAULT_FLAGS = RealInterpolationMode.LINEAR << REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START | TangentWeightMode.NONE << REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START | EasingMethod.LINEAR << REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;

            class RealKeyframeValue extends EditorExtendable {
              constructor(...args) {
                super(...args);
                this.value = 0.0;
                this.rightTangent = 0.0;
                this.rightTangentWeight = 0.0;
                this.leftTangent = 0.0;
                this.leftTangentWeight = 0.0;
                this._flags = REAL_KEYFRAME_VALUE_DEFAULT_FLAGS;
              }

              get interpolationMode() {
                return (this._flags & REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK) >> REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START;
              }

              set interpolationMode(value) {
                this._flags &= ~REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK;
                this._flags |= value << REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START;
              }

              get tangentWeightMode() {
                return (this._flags & REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK) >> REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START;
              }

              set tangentWeightMode(value) {
                this._flags &= ~REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK;
                this._flags |= value << REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START;
              }

              get easingMethod() {
                return (this._flags & REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_MASK) >> REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;
              }

              set easingMethod(value) {
                this._flags &= ~REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_MASK;
                this._flags |= value << REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;
              }

            }

            CCClass.fastDefine('cc.RealKeyframeValue', RealKeyframeValue, {
              interpolationMode: RealInterpolationMode.LINEAR,
              tangentWeightMode: TangentWeightMode.NONE,
              value: 0.0,
              rightTangent: 0.0,
              rightTangentWeight: 0.0,
              leftTangent: 0.0,
              leftTangentWeight: 0.0,
              easingMethod: EasingMethod.LINEAR,
              [editorExtrasTag]: undefined
            });
            CCClass.Attr.setClassAttr(RealKeyframeValue, editorExtrasTag, 'editorOnly', true);
            getOrCreateSerializationMetadata(RealKeyframeValue).uniquelyReferenced = true;

            function createRealKeyframeValue(params) {
              const realKeyframeValue = new RealKeyframeValue();

              if (typeof params === 'number') {
                realKeyframeValue.value = params;
              } else {
                const {
                  interpolationMode,
                  tangentWeightMode,
                  value,
                  rightTangent,
                  rightTangentWeight,
                  leftTangent,
                  leftTangentWeight,
                  easingMethod,
                  [editorExtrasTag]: editorExtras
                } = params;
                realKeyframeValue.value = value !== null && value !== void 0 ? value : realKeyframeValue.value;
                realKeyframeValue.rightTangent = rightTangent !== null && rightTangent !== void 0 ? rightTangent : realKeyframeValue.rightTangent;
                realKeyframeValue.rightTangentWeight = rightTangentWeight !== null && rightTangentWeight !== void 0 ? rightTangentWeight : realKeyframeValue.rightTangentWeight;
                realKeyframeValue.leftTangent = leftTangent !== null && leftTangent !== void 0 ? leftTangent : realKeyframeValue.leftTangent;
                realKeyframeValue.leftTangentWeight = leftTangentWeight !== null && leftTangentWeight !== void 0 ? leftTangentWeight : realKeyframeValue.leftTangentWeight;
                realKeyframeValue.interpolationMode = interpolationMode !== null && interpolationMode !== void 0 ? interpolationMode : realKeyframeValue.interpolationMode;
                realKeyframeValue.tangentWeightMode = tangentWeightMode !== null && tangentWeightMode !== void 0 ? tangentWeightMode : realKeyframeValue.tangentWeightMode;
                realKeyframeValue.easingMethod = easingMethod !== null && easingMethod !== void 0 ? easingMethod : realKeyframeValue.easingMethod;

                if (editorExtras) {
                  realKeyframeValue[editorExtrasTag] = editorExtras;
                }
              }

              return realKeyframeValue;
            }

            class RealCurve extends KeyframeCurve {
              constructor(...args) {
                super(...args);
                this.preExtrapolation = ExtrapolationMode.CLAMP;
                this.postExtrapolation = ExtrapolationMode.CLAMP;
              }

              evaluate(time) {
                const {
                  _times: times,
                  _values: values
                } = this;
                const nFrames = times.length;

                if (nFrames === 0) {
                  return 0.0;
                }

                const firstTime = times[0];
                const lastTime = times[nFrames - 1];

                if (time < firstTime) {
                  const {
                    preExtrapolation
                  } = this;
                  const preValue = values[0];

                  if (preExtrapolation === ExtrapolationMode.CLAMP || nFrames < 2) {
                    return preValue.value;
                  }

                  switch (preExtrapolation) {
                    case ExtrapolationMode.LINEAR:
                      return linearTrend(firstTime, values[0].value, times[1], values[1].value, time);

                    case ExtrapolationMode.LOOP:
                      time = wrapRepeat(time, firstTime, lastTime);
                      break;

                    case ExtrapolationMode.PING_PONG:
                      time = wrapPingPong(time, firstTime, lastTime);
                      break;

                    default:
                      return preValue.value;
                  }
                } else if (time > lastTime) {
                  const {
                    postExtrapolation
                  } = this;
                  const preFrame = values[nFrames - 1];

                  if (postExtrapolation === ExtrapolationMode.CLAMP || nFrames < 2) {
                    return preFrame.value;
                  }

                  switch (postExtrapolation) {
                    case ExtrapolationMode.LINEAR:
                      return linearTrend(lastTime, preFrame.value, times[nFrames - 2], values[nFrames - 2].value, time);

                    case ExtrapolationMode.LOOP:
                      time = wrapRepeat(time, firstTime, lastTime);
                      break;

                    case ExtrapolationMode.PING_PONG:
                      time = wrapPingPong(time, firstTime, lastTime);
                      break;

                    default:
                      return preFrame.value;
                  }
                }

                const index = binarySearchEpsilon(times, time);

                if (index >= 0) {
                  return values[index].value;
                }

                const iNext = ~index;
                assertIsTrue(iNext !== 0 && iNext !== nFrames && nFrames > 1);
                const iPre = iNext - 1;
                const preTime = times[iPre];
                const preValue = values[iPre];
                const nextTime = times[iNext];
                const nextValue = values[iNext];
                assertIsTrue(nextTime > time && time > preTime);
                const dt = nextTime - preTime;
                const ratio = (time - preTime) / dt;
                return evalBetweenTwoKeyFrames(preTime, preValue, nextTime, nextValue, ratio);
              }

              addKeyFrame(time, value) {
                return super.addKeyFrame(time, createRealKeyframeValue(value));
              }

              assignSorted(times, values) {
                if (values !== undefined) {
                  assertIsTrue(Array.isArray(times));
                  this.setKeyframes(times.slice(), values.map(value => createRealKeyframeValue(value)));
                } else {
                  const keyframes = Array.from(times);
                  this.setKeyframes(keyframes.map(([time]) => time), keyframes.map(([, value]) => createRealKeyframeValue(value)));
                }
              }

              isConstant(tolerance) {
                if (this._values.length <= 1) {
                  return true;
                }

                const firstVal = this._values[0].value;
                return this._values.every(frame => approx(frame.value, firstVal, tolerance));
              }

              [serializeTag](output, context) {
                if (!context.toCCON) {
                  output.writeThis();
                  return;
                }

                const {
                  _times: times,
                  _values: keyframeValues
                } = this;
                const nKeyframes = times.length;
                const dataSize = 0 + OVERFLOW_BYTES + OVERFLOW_BYTES + FRAME_COUNT_BYTES + TIME_BYTES * nKeyframes + REAL_KEY_FRAME_VALUE_MAX_SIZE * nKeyframes;
                const dataView = new DataView(new ArrayBuffer(dataSize));
                let currentOffset = 0;
                dataView.setUint8(currentOffset, this.preExtrapolation);
                currentOffset += OVERFLOW_BYTES;
                dataView.setUint8(currentOffset, this.postExtrapolation);
                currentOffset += OVERFLOW_BYTES;
                dataView.setUint32(currentOffset, nKeyframes, true);
                currentOffset += FRAME_COUNT_BYTES;
                times.forEach((time, index) => dataView.setFloat32(currentOffset + TIME_BYTES * index, time, true));
                currentOffset += TIME_BYTES * nKeyframes;

                for (const keyframeValue of keyframeValues) {
                  currentOffset = saveRealKeyFrameValue(dataView, keyframeValue, currentOffset);
                }

                const bytes = new Uint8Array(dataView.buffer, 0, currentOffset);
                output.writeProperty('bytes', bytes);
                const keyframeValueEditorExtras = keyframeValues.map(keyframeValue => keyframeValue[editorExtrasTag]);

                if (keyframeValueEditorExtras.some(extras => extras !== undefined)) {
                  output.writeProperty(`keyframeValueEditorExtras`, keyframeValueEditorExtras);
                }
              }

              [deserializeTag](input, context) {
                if (!context.fromCCON) {
                  input.readThis();
                  return;
                }

                const bytes = input.readProperty('bytes');
                const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
                let currentOffset = 0;
                this.preExtrapolation = dataView.getUint8(currentOffset);
                currentOffset += OVERFLOW_BYTES;
                this.postExtrapolation = dataView.getUint8(currentOffset);
                currentOffset += OVERFLOW_BYTES;
                const nKeyframes = dataView.getUint32(currentOffset, true);
                currentOffset += FRAME_COUNT_BYTES;
                const times = Array.from({
                  length: nKeyframes
                }, (_, index) => dataView.getFloat32(currentOffset + TIME_BYTES * index, true));
                currentOffset += TIME_BYTES * nKeyframes;
                const keyframeValues = new Array(nKeyframes);

                for (let iKeyFrame = 0; iKeyFrame < nKeyframes; ++iKeyFrame) {
                  const keyframeValue = createRealKeyframeValue({});
                  currentOffset = loadRealKeyFrameValue(dataView, keyframeValue, currentOffset);
                  keyframeValues[iKeyFrame] = keyframeValue;
                }

                assertIsTrue(currentOffset === bytes.byteLength);
                const keyframeValueEditorExtras = input.readProperty(`keyframeValueEditorExtras`);

                if (keyframeValueEditorExtras) {
                  assertIsTrue(keyframeValueEditorExtras.length === nKeyframes);
                  keyframeValueEditorExtras.forEach((extras, index) => keyframeValues[index][editorExtrasTag] = extras);
                }

                this._times = times;
                this._values = keyframeValues;
              }

            } exports('eK', RealCurve);
            CCClass.fastDefine('cc.RealCurve', RealCurve, {
              _times: [],
              _values: [],
              preExtrapolation: ExtrapolationMode.CLAMP,
              postExtrapolation: ExtrapolationMode.CLAMP
            });
            const FLAGS_EASING_METHOD_BITS_START = 8;
            const FLAG_EASING_METHOD_MASK = 0xFF << FLAGS_EASING_METHOD_BITS_START;
            var KeyframeValueFlagMask;

            (function (KeyframeValueFlagMask) {
              KeyframeValueFlagMask[KeyframeValueFlagMask["VALUE"] = 1] = "VALUE";
              KeyframeValueFlagMask[KeyframeValueFlagMask["INTERPOLATION_MODE"] = 2] = "INTERPOLATION_MODE";
              KeyframeValueFlagMask[KeyframeValueFlagMask["TANGENT_WEIGHT_MODE"] = 4] = "TANGENT_WEIGHT_MODE";
              KeyframeValueFlagMask[KeyframeValueFlagMask["LEFT_TANGENT"] = 8] = "LEFT_TANGENT";
              KeyframeValueFlagMask[KeyframeValueFlagMask["LEFT_TANGENT_WEIGHT"] = 16] = "LEFT_TANGENT_WEIGHT";
              KeyframeValueFlagMask[KeyframeValueFlagMask["RIGHT_TANGENT"] = 32] = "RIGHT_TANGENT";
              KeyframeValueFlagMask[KeyframeValueFlagMask["RIGHT_TANGENT_WEIGHT"] = 64] = "RIGHT_TANGENT_WEIGHT";
            })(KeyframeValueFlagMask || (KeyframeValueFlagMask = {}));

            const OVERFLOW_BYTES = 1;
            const FRAME_COUNT_BYTES = 4;
            const TIME_BYTES = 4;
            const KEY_FRAME_VALUE_FLAGS_BYTES = 4;
            const VALUE_BYTES = 4;
            const INTERPOLATION_MODE_BYTES = 1;
            const TANGENT_WEIGHT_MODE_BYTES = 1;
            const LEFT_TANGENT_BYTES = 4;
            const LEFT_TANGENT_WEIGHT_BYTES = 4;
            const RIGHT_TANGENT_BYTES = 4;
            const RIGHT_TANGENT_WEIGHT_BYTES = 4;
            const {
              interpolationMode: DEFAULT_INTERPOLATION_MODE,
              tangentWeightMode: DEFAULT_TANGENT_WEIGHT_MODE,
              leftTangent: DEFAULT_LEFT_TANGENT,
              leftTangentWeight: DEFAULT_LEFT_TANGENT_WEIGHT,
              rightTangent: DEFAULT_RIGHT_TANGENT,
              rightTangentWeight: DEFAULT_RIGHT_TANGENT_WEIGHT
            } = createRealKeyframeValue({});
            const REAL_KEY_FRAME_VALUE_MAX_SIZE = KEY_FRAME_VALUE_FLAGS_BYTES + VALUE_BYTES + INTERPOLATION_MODE_BYTES + TANGENT_WEIGHT_MODE_BYTES + LEFT_TANGENT_BYTES + LEFT_TANGENT_WEIGHT_BYTES + RIGHT_TANGENT_BYTES + RIGHT_TANGENT_WEIGHT_BYTES + 0;

            function saveRealKeyFrameValue(dataView, keyframeValue, offset) {
              let flags = 0;
              let currentOffset = offset;
              const pFlags = currentOffset;
              currentOffset += KEY_FRAME_VALUE_FLAGS_BYTES;
              const {
                value,
                interpolationMode,
                tangentWeightMode,
                rightTangent,
                rightTangentWeight,
                leftTangent,
                leftTangentWeight,
                easingMethod
              } = keyframeValue;
              dataView.setFloat32(currentOffset, value, true);
              currentOffset += VALUE_BYTES;

              if (interpolationMode !== DEFAULT_INTERPOLATION_MODE) {
                flags |= KeyframeValueFlagMask.INTERPOLATION_MODE;
                dataView.setUint8(currentOffset, interpolationMode);
                currentOffset += INTERPOLATION_MODE_BYTES;
              }

              if (tangentWeightMode !== DEFAULT_TANGENT_WEIGHT_MODE) {
                flags |= KeyframeValueFlagMask.TANGENT_WEIGHT_MODE;
                dataView.setUint8(currentOffset, tangentWeightMode);
                currentOffset += TANGENT_WEIGHT_MODE_BYTES;
              }

              if (leftTangent !== DEFAULT_LEFT_TANGENT) {
                flags |= KeyframeValueFlagMask.LEFT_TANGENT;
                dataView.setFloat32(currentOffset, leftTangent, true);
                currentOffset += LEFT_TANGENT_BYTES;
              }

              if (leftTangentWeight !== DEFAULT_LEFT_TANGENT_WEIGHT) {
                flags |= KeyframeValueFlagMask.LEFT_TANGENT_WEIGHT;
                dataView.setFloat32(currentOffset, leftTangentWeight, true);
                currentOffset += LEFT_TANGENT_WEIGHT_BYTES;
              }

              if (rightTangent !== DEFAULT_RIGHT_TANGENT) {
                flags |= KeyframeValueFlagMask.RIGHT_TANGENT;
                dataView.setFloat32(currentOffset, rightTangent, true);
                currentOffset += RIGHT_TANGENT_BYTES;
              }

              if (rightTangentWeight !== DEFAULT_RIGHT_TANGENT_WEIGHT) {
                flags |= KeyframeValueFlagMask.RIGHT_TANGENT_WEIGHT;
                dataView.setFloat32(currentOffset, rightTangentWeight, true);
                currentOffset += RIGHT_TANGENT_WEIGHT_BYTES;
              }

              flags |= easingMethod << FLAGS_EASING_METHOD_BITS_START;
              dataView.setUint32(pFlags, flags, true);
              return currentOffset;
            }

            function loadRealKeyFrameValue(dataView, keyframeValue, offset) {
              let currentOffset = offset;
              const flags = dataView.getUint32(currentOffset, true);
              currentOffset += KEY_FRAME_VALUE_FLAGS_BYTES;
              keyframeValue.value = dataView.getFloat32(currentOffset, true);
              currentOffset += VALUE_BYTES;

              if (flags & KeyframeValueFlagMask.INTERPOLATION_MODE) {
                keyframeValue.interpolationMode = dataView.getUint8(currentOffset);
                currentOffset += INTERPOLATION_MODE_BYTES;
              }

              if (flags & KeyframeValueFlagMask.TANGENT_WEIGHT_MODE) {
                keyframeValue.tangentWeightMode = dataView.getUint8(currentOffset);
                currentOffset += TANGENT_WEIGHT_MODE_BYTES;
              }

              if (flags & KeyframeValueFlagMask.LEFT_TANGENT) {
                keyframeValue.leftTangent = dataView.getFloat32(currentOffset, true);
                currentOffset += LEFT_TANGENT_BYTES;
              }

              if (flags & KeyframeValueFlagMask.LEFT_TANGENT_WEIGHT) {
                keyframeValue.leftTangentWeight = dataView.getFloat32(currentOffset, true);
                currentOffset += LEFT_TANGENT_WEIGHT_BYTES;
              }

              if (flags & KeyframeValueFlagMask.RIGHT_TANGENT) {
                keyframeValue.rightTangent = dataView.getFloat32(currentOffset, true);
                currentOffset += RIGHT_TANGENT_BYTES;
              }

              if (flags & KeyframeValueFlagMask.RIGHT_TANGENT_WEIGHT) {
                keyframeValue.rightTangentWeight = dataView.getFloat32(currentOffset, true);
                currentOffset += RIGHT_TANGENT_WEIGHT_BYTES;
              }

              const easingMethod = (flags & FLAG_EASING_METHOD_MASK) >> FLAGS_EASING_METHOD_BITS_START;
              keyframeValue.easingMethod = easingMethod;
              return currentOffset;
            }

            function wrapRepeat(time, prevTime, nextTime) {
              return prevTime + repeat(time - prevTime, nextTime - prevTime);
            }

            function wrapPingPong(time, prevTime, nextTime) {
              return prevTime + pingPong(time - prevTime, nextTime - prevTime);
            }

            function linearTrend(prevTime, prevValue, nextTime, nextValue, time) {
              const slope = (nextValue - prevValue) / (nextTime - prevTime);
              return prevValue + (time - prevTime) * slope;
            }

            function evalBetweenTwoKeyFrames(prevTime, prevValue, nextTime, nextValue, ratio) {
              const dt = nextTime - prevTime;

              switch (prevValue.interpolationMode) {
                default:
                case RealInterpolationMode.CONSTANT:
                  return prevValue.value;

                case RealInterpolationMode.LINEAR:
                  {
                    const transformedRatio = prevValue.easingMethod === EasingMethod.LINEAR ? ratio : getEasingFn(prevValue.easingMethod)(ratio);
                    return lerp(prevValue.value, nextValue.value, transformedRatio);
                  }

                case RealInterpolationMode.CUBIC:
                  {
                    const ONE_THIRD = 1.0 / 3.0;
                    const {
                      rightTangent: prevTangent,
                      rightTangentWeight: prevTangentWeightSpecified
                    } = prevValue;
                    const prevTangentWeightEnabled = isRightTangentWeightEnabled(prevValue.tangentWeightMode);
                    const {
                      leftTangent: nextTangent,
                      leftTangentWeight: nextTangentWeightSpecified
                    } = nextValue;
                    const nextTangentWeightEnabled = isLeftTangentWeightEnabled(nextValue.tangentWeightMode);

                    if (!prevTangentWeightEnabled && !nextTangentWeightEnabled) {
                      const p1 = prevValue.value + ONE_THIRD * prevTangent * dt;
                      const p2 = nextValue.value - ONE_THIRD * nextTangent * dt;
                      return bezierInterpolate(prevValue.value, p1, p2, nextValue.value, ratio);
                    } else {
                      let prevTangentWeight = 0.0;

                      if (prevTangentWeightEnabled) {
                        prevTangentWeight = prevTangentWeightSpecified;
                      } else {
                        const x = dt;
                        const y = dt * prevTangent;
                        prevTangentWeight = Math.sqrt(x * x + y * y) * ONE_THIRD;
                      }

                      const angle0 = Math.atan(prevTangent);
                      const tx0 = Math.cos(angle0) * prevTangentWeight + prevTime;
                      const ty0 = Math.sin(angle0) * prevTangentWeight + prevValue.value;
                      let nextTangentWeight = 0.0;

                      if (nextTangentWeightEnabled) {
                        nextTangentWeight = nextTangentWeightSpecified;
                      } else {
                        const x = dt;
                        const y = dt * nextTangent;
                        nextTangentWeight = Math.sqrt(x * x + y * y) * ONE_THIRD;
                      }

                      const angle1 = Math.atan(nextTangent);
                      const tx1 = -Math.cos(angle1) * nextTangentWeight + nextTime;
                      const ty1 = -Math.sin(angle1) * nextTangentWeight + nextValue.value;
                      const dx = dt;
                      const u0x = (tx0 - prevTime) / dx;
                      const u1x = (tx1 - prevTime) / dx;
                      const u0y = ty0;
                      const u1y = ty1;
                      const coeff0 = 0.0;
                      const coeff1 = 3.0 * u0x;
                      const coeff2 = 3.0 * u1x - 6.0 * u0x;
                      const coeff3 = 3.0 * (u0x - u1x) + 1.0;
                      const solutions = [0.0, 0.0, 0.0];
                      const nSolutions = solveCubic(coeff0 - ratio, coeff1, coeff2, coeff3, solutions);
                      const param = getParamFromCubicSolution(solutions, nSolutions, ratio);
                      const y = bezierInterpolate(prevValue.value, u0y, u1y, nextValue.value, param);
                      return y;
                    }
                  }
              }
            }

            function isLeftTangentWeightEnabled(tangentWeightMode) {
              return (tangentWeightMode & TangentWeightMode.LEFT) !== 0;
            }

            function isRightTangentWeightEnabled(tangentWeightMode) {
              return (tangentWeightMode & TangentWeightMode.RIGHT) !== 0;
            }

            function bezierInterpolate(p0, p1, p2, p3, t) {
              const u = 1 - t;
              const coeff0 = u * u * u;
              const coeff1 = 3 * u * u * t;
              const coeff2 = 3 * u * t * t;
              const coeff3 = t * t * t;
              return coeff0 * p0 + coeff1 * p1 + coeff2 * p2 + coeff3 * p3;
            }

            function getParamFromCubicSolution(solutions, solutionsCount, x) {
              let param = x;

              if (solutionsCount === 1) {
                param = solutions[0];
              } else {
                param = -Infinity;

                for (let iSolution = 0; iSolution < solutionsCount; ++iSolution) {
                  const solution = solutions[iSolution];

                  if (solution >= 0.0 && solution <= 1.0) {
                    if (solution > param) {
                      param = solution;
                    }
                  }
                }

                if (param === -Infinity) {
                  param = 0.0;
                }
              }

              return param;
            }

            function bezier(C1, C2, C3, C4, t) {
              const t1 = 1 - t;
              return t1 * (t1 * (C1 + (C2 * 3 - C1) * t) + C3 * 3 * t * t) + C4 * t * t * t;
            }
            legacyCC.bezier = bezier;
            const cos = Math.cos;
            const acos = Math.acos;
            const max$2 = Math.max;
            const pi = Math.PI;
            const tau = 2 * pi;
            const sqrt = Math.sqrt;

            function crt(v) {
              if (v < 0) {
                return -Math.pow(-v, 1 / 3);
              } else {
                return Math.pow(v, 1 / 3);
              }
            }

            function cardano(curve, x) {
              const pa = x - 0;
              const pb = x - curve[0];
              const pc = x - curve[2];
              const pd = x - 1;
              const pa3 = pa * 3;
              const pb3 = pb * 3;
              const pc3 = pc * 3;
              const d = -pa + pb3 - pc3 + pd;
              const rd = 1 / d;
              const r3 = 1 / 3;
              const a = (pa3 - 6 * pb + pc3) * rd;
              const a3 = a * r3;
              const b = (-pa3 + pb3) * rd;
              const c = pa * rd;
              const p = (3 * b - a * a) * r3;
              const p3 = p * r3;
              const q = (2 * a * a * a - 9 * a * b + 27 * c) / 27;
              const q2 = q / 2;
              const discriminant = q2 * q2 + p3 * p3 * p3;
              let u1;
              let v1;
              let x1;
              let x2;
              let x3;

              if (discriminant < 0) {
                const mp3 = -p * r3;
                const mp33 = mp3 * mp3 * mp3;
                const r = sqrt(mp33);
                const t = -q / (2 * r);
                const cosphi = t < -1 ? -1 : t > 1 ? 1 : t;
                const phi = acos(cosphi);
                const crtr = crt(r);
                const t1 = 2 * crtr;
                x1 = t1 * cos(phi * r3) - a3;
                x2 = t1 * cos((phi + tau) * r3) - a3;
                x3 = t1 * cos((phi + 2 * tau) * r3) - a3;

                if (x1 >= 0 && x1 <= 1) {
                  if (x2 >= 0 && x2 <= 1) {
                    if (x3 >= 0 && x3 <= 1) {
                      return max$2(x1, x2, x3);
                    } else {
                      return max$2(x1, x2);
                    }
                  } else if (x3 >= 0 && x3 <= 1) {
                    return max$2(x1, x3);
                  } else {
                    return x1;
                  }
                } else if (x2 >= 0 && x2 <= 1) {
                  if (x3 >= 0 && x3 <= 1) {
                    return max$2(x2, x3);
                  } else {
                    return x2;
                  }
                } else {
                  return x3;
                }
              } else if (discriminant === 0) {
                u1 = q2 < 0 ? crt(-q2) : -crt(q2);
                x1 = 2 * u1 - a3;
                x2 = -u1 - a3;

                if (x1 >= 0 && x1 <= 1) {
                  if (x2 >= 0 && x2 <= 1) {
                    return max$2(x1, x2);
                  } else {
                    return x1;
                  }
                } else {
                  return x2;
                }
              } else {
                  const sd = sqrt(discriminant);
                  u1 = crt(-q2 + sd);
                  v1 = crt(q2 + sd);
                  x1 = u1 - v1 - a3;
                  return x1;
                }
            }

            function bezierByTime(controlPoints, x) {
              const percent = cardano(controlPoints, x);
              const p1y = controlPoints[1];
              const p2y = controlPoints[3];
              return ((1 - percent) * (p1y + (p2y - p1y) * percent) * 3 + percent * percent) * percent;
            }
            legacyCC.bezierByTime = bezierByTime;

            var _dec$5, _class$5, _class2$5, _descriptor$4, _descriptor2$3, _descriptor3$3, _temp$4, _dec2$4, _class4, _class5, _descriptor4$2, _descriptor5$1, _temp2;
            let QuatInterpolationMode;

            (function (QuatInterpolationMode) {
              QuatInterpolationMode[QuatInterpolationMode["SLERP"] = 0] = "SLERP";
              QuatInterpolationMode[QuatInterpolationMode["CONSTANT"] = 1] = "CONSTANT";
            })(QuatInterpolationMode || (QuatInterpolationMode = exports('e$', {})));

            let QuatKeyframeValue = (_dec$5 = ccclass('cc.QuatKeyframeValue'), _dec$5(_class$5 = uniquelyReferenced(_class$5 = (_class2$5 = (_temp$4 = class QuatKeyframeValue {
              constructor({
                value,
                interpolationMode,
                easingMethod
              } = {}) {
                _initializerDefineProperty(this, "interpolationMode", _descriptor$4, this);

                _initializerDefineProperty(this, "value", _descriptor2$3, this);

                _initializerDefineProperty(this, "easingMethod", _descriptor3$3, this);

                this.value = value ? Quat.clone(value) : this.value;
                this.interpolationMode = interpolationMode !== null && interpolationMode !== void 0 ? interpolationMode : this.interpolationMode;
                this.easingMethod = easingMethod !== null && easingMethod !== void 0 ? easingMethod : this.easingMethod;
              }

            }, _temp$4), (_descriptor$4 = _applyDecoratedDescriptor(_class2$5.prototype, "interpolationMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return QuatInterpolationMode.SLERP;
              }
            }), _descriptor2$3 = _applyDecoratedDescriptor(_class2$5.prototype, "value", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Quat.clone(Quat.IDENTITY);
              }
            }), _descriptor3$3 = _applyDecoratedDescriptor(_class2$5.prototype, "easingMethod", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return EasingMethod.LINEAR;
              }
            })), _class2$5)) || _class$5) || _class$5);

            function createQuatKeyframeValue(params) {
              return new QuatKeyframeValue(params);
            }

            let QuatCurve = exports('eM', (_dec2$4 = ccclass('cc.QuatCurve'), _dec2$4(_class4 = (_class5 = (_temp2 = class QuatCurve extends KeyframeCurve {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "preExtrapolation", _descriptor4$2, this);

                _initializerDefineProperty(this, "postExtrapolation", _descriptor5$1, this);
              }

              evaluate(time, quat) {
                var _quat;

                (_quat = quat) !== null && _quat !== void 0 ? _quat : quat = new Quat();
                const {
                  _times: times,
                  _values: values,
                  postExtrapolation,
                  preExtrapolation
                } = this;
                const nFrames = times.length;

                if (nFrames === 0) {
                  return quat;
                }

                const firstTime = times[0];
                const lastTime = times[nFrames - 1];

                if (time < firstTime) {
                  const preValue = values[0];

                  switch (preExtrapolation) {
                    case ExtrapolationMode.LOOP:
                      time = firstTime + repeat(time - firstTime, lastTime - firstTime);
                      break;

                    case ExtrapolationMode.PING_PONG:
                      time = firstTime + pingPong(time - firstTime, lastTime - firstTime);
                      break;

                    case ExtrapolationMode.CLAMP:
                    default:
                      return Quat.copy(quat, preValue.value);
                  }
                } else if (time > lastTime) {
                  const preValue = values[nFrames - 1];

                  switch (postExtrapolation) {
                    case ExtrapolationMode.LOOP:
                      time = firstTime + repeat(time - firstTime, lastTime - firstTime);
                      break;

                    case ExtrapolationMode.PING_PONG:
                      time = firstTime + pingPong(time - firstTime, lastTime - firstTime);
                      break;

                    case ExtrapolationMode.CLAMP:
                    default:
                      return Quat.copy(quat, preValue.value);
                  }
                }

                const index = binarySearchEpsilon(times, time);

                if (index >= 0) {
                  return Quat.copy(quat, values[index].value);
                }

                const iNext = ~index;
                assertIsTrue(iNext !== 0 && iNext !== nFrames && nFrames > 1);
                const iPre = iNext - 1;
                const preTime = times[iPre];
                const preValue = values[iPre];
                const nextTime = times[iNext];
                const nextValue = values[iNext];
                assertIsTrue(nextTime > time && time > preTime);
                const dt = nextTime - preTime;
                const ratio = (time - preTime) / dt;

                switch (preValue.interpolationMode) {
                  default:
                  case QuatInterpolationMode.CONSTANT:
                    return Quat.copy(quat, preValue.value);

                  case QuatInterpolationMode.SLERP:
                    {
                      const {
                        easingMethod
                      } = preValue;
                      const transformedRatio = easingMethod === EasingMethod.LINEAR ? ratio : Array.isArray(easingMethod) ? bezierByTime(easingMethod, ratio) : getEasingFn(easingMethod)(ratio);
                      return Quat.slerp(quat, preValue.value, nextValue.value, transformedRatio);
                    }
                }
              }

              addKeyFrame(time, value) {
                const keyframeValue = new QuatKeyframeValue(value);
                return super.addKeyFrame(time, keyframeValue);
              }

              assignSorted(times, values) {
                if (values !== undefined) {
                  assertIsTrue(Array.isArray(times));
                  this.setKeyframes(times.slice(), values.map(value => createQuatKeyframeValue(value)));
                } else {
                  const keyframes = Array.from(times);
                  this.setKeyframes(keyframes.map(([time]) => time), keyframes.map(([, value]) => createQuatKeyframeValue(value)));
                }
              }

              [serializeTag](output, context) {
                if (!context.toCCON) {
                  output.writeThis();
                  return;
                }

                const {
                  _times: times,
                  _values: keyframeValues
                } = this;
                let interpolationModeRepeated = true;
                keyframeValues.forEach((keyframeValue, _index, [firstKeyframeValue]) => {
                  if (interpolationModeRepeated && keyframeValue.interpolationMode !== firstKeyframeValue.interpolationMode) {
                    interpolationModeRepeated = false;
                  }
                });
                const nKeyframes = times.length;
                const nFrames = nKeyframes;
                const interpolationModesSize = INTERPOLATION_MODE_BYTES$1 * (interpolationModeRepeated ? 1 : nFrames);
                const easingMethodsSize = keyframeValues.reduce((result, {
                  easingMethod
                }) => result += Array.isArray(easingMethod) ? EASING_METHOD_BYTES + EASING_METHOD_BEZIER_COMPONENT_BYTES * 4 : EASING_METHOD_BYTES, 0);
                let dataSize = 0;
                dataSize += FLAGS_BYTES + FRAME_COUNT_BYTES$1 + TIME_BYTES$1 * nFrames + VALUE_BYTES$1 * 4 * nFrames + easingMethodsSize + interpolationModesSize + 0;
                const dataView = new DataView(new ArrayBuffer(dataSize));
                let P = 0;
                let flags = 0;

                if (interpolationModeRepeated) {
                  flags |= KeyframeValueFlagMask$1.INTERPOLATION_MODE;
                }

                dataView.setUint32(P, flags, true);
                P += FLAGS_BYTES;
                dataView.setUint32(P, nFrames, true);
                P += FRAME_COUNT_BYTES$1;
                times.forEach((time, index) => dataView.setFloat32(P + TIME_BYTES$1 * index, time, true));
                P += TIME_BYTES$1 * nFrames;
                keyframeValues.forEach(({
                  value: {
                    x,
                    y,
                    z,
                    w
                  }
                }, index) => {
                  const pQuat = P + VALUE_BYTES$1 * 4 * index;
                  dataView.setFloat32(pQuat + VALUE_BYTES$1 * 0, x, true);
                  dataView.setFloat32(pQuat + VALUE_BYTES$1 * 1, y, true);
                  dataView.setFloat32(pQuat + VALUE_BYTES$1 * 2, z, true);
                  dataView.setFloat32(pQuat + VALUE_BYTES$1 * 3, w, true);
                });
                P += VALUE_BYTES$1 * 4 * nFrames;
                keyframeValues.forEach(({
                  easingMethod
                }, index) => {
                  if (!Array.isArray(easingMethod)) {
                    dataView.setUint8(P, easingMethod);
                    ++P;
                  } else {
                    dataView.setUint8(P, EASING_METHOD_BEZIER_TAG);
                    ++P;
                    dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 0, easingMethod[0], true);
                    dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 1, easingMethod[1], true);
                    dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 2, easingMethod[2], true);
                    dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 3, easingMethod[3], true);
                    P += EASING_METHOD_BEZIER_COMPONENT_BYTES * 4;
                  }
                });
                const INTERPOLATION_MODES_START = P;
                P += interpolationModesSize;
                let pInterpolationMode = INTERPOLATION_MODES_START;
                keyframeValues.forEach(({
                  interpolationMode
                }) => {
                  dataView.setUint8(pInterpolationMode, interpolationMode);

                  if (!interpolationModeRepeated) {
                    pInterpolationMode += INTERPOLATION_MODE_BYTES$1;
                  }
                });
                const bytes = new Uint8Array(dataView.buffer);
                output.writeProperty('bytes', bytes);
              }

              [deserializeTag](input, context) {
                if (!context.fromCCON) {
                  input.readThis();
                  return;
                }

                const bytes = input.readProperty('bytes');
                const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
                let P = 0;
                const flags = dataView.getUint32(P, true);
                P += FLAGS_BYTES;
                const interpolationModeRepeated = flags & KeyframeValueFlagMask$1.INTERPOLATION_MODE;
                const nFrames = dataView.getUint32(P, true);
                P += FRAME_COUNT_BYTES$1;
                const times = Array.from({
                  length: nFrames
                }, (_, index) => dataView.getFloat32(P + TIME_BYTES$1 * index, true));
                P += TIME_BYTES$1 * nFrames;
                const P_VALUES = P;
                P += VALUE_BYTES$1 * 4 * nFrames;
                const keyframeValues = Array.from({
                  length: nFrames
                }, (_, index) => {
                  const pQuat = P_VALUES + VALUE_BYTES$1 * 4 * index;
                  const x = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 0, true);
                  const y = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 1, true);
                  const z = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 2, true);
                  const w = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 3, true);
                  const easingMethod = dataView.getUint8(P);
                  ++P;
                  const keyframeValue = createQuatKeyframeValue({
                    value: {
                      x,
                      y,
                      z,
                      w
                    }
                  });

                  if (easingMethod !== EASING_METHOD_BEZIER_TAG) {
                    keyframeValue.easingMethod = easingMethod;
                  } else {
                    keyframeValue.easingMethod = [dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 0, true), dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 1, true), dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 2, true), dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 3, true)];
                    P += EASING_METHOD_BEZIER_COMPONENT_BYTES * 4;
                  }

                  return keyframeValue;
                });

                if (interpolationModeRepeated) {
                  const interpolationMode = dataView.getUint8(P);
                  ++P;

                  for (let iKeyframe = 0; iKeyframe < nFrames; ++iKeyframe) {
                    keyframeValues[iKeyframe].interpolationMode = interpolationMode;
                  }
                } else {
                  for (let iKeyframe = 0; iKeyframe < nFrames; ++iKeyframe) {
                    const interpolationMode = dataView.getUint8(P + iKeyframe);
                    keyframeValues[iKeyframe].interpolationMode = interpolationMode;
                  }

                  P += nFrames;
                }

                this._times = times;
                this._values = keyframeValues;
              }

            }, _temp2), (_descriptor4$2 = _applyDecoratedDescriptor(_class5.prototype, "preExtrapolation", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return ExtrapolationMode.CLAMP;
              }
            }), _descriptor5$1 = _applyDecoratedDescriptor(_class5.prototype, "postExtrapolation", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return ExtrapolationMode.CLAMP;
              }
            })), _class5)) || _class4));
            var KeyframeValueFlagMask$1;

            (function (KeyframeValueFlagMask) {
              KeyframeValueFlagMask[KeyframeValueFlagMask["INTERPOLATION_MODE"] = 1] = "INTERPOLATION_MODE";
            })(KeyframeValueFlagMask$1 || (KeyframeValueFlagMask$1 = {}));

            const FLAGS_BYTES = 1;
            const FRAME_COUNT_BYTES$1 = 4;
            const TIME_BYTES$1 = 4;
            const VALUE_BYTES$1 = 4;
            const INTERPOLATION_MODE_BYTES$1 = 1;
            const EASING_METHOD_BYTES = 1;
            const EASING_METHOD_BEZIER_TAG = 255;
            const EASING_METHOD_BEZIER_COMPONENT_BYTES = 4;

            var _dec$6, _class$6;
            let ObjectCurve = exports('eN', (_dec$6 = ccclass('cc.ObjectCurve'), _dec$6(_class$6 = class ObjectCurve extends KeyframeCurve {
              evaluate(time) {
                const iSearch = this.searchKeyframe(time);

                if (iSearch >= 0) {
                  return this._values[iSearch];
                }

                const iPrev = clamp(~iSearch - 1, 0, this._values.length - 1);
                return this._values[iPrev];
              }

            }) || _class$6));

            const LOOK_FORWARD = 3;
            class Keyframe {
              constructor() {
                this.time = 0;
                this.value = 0;
                this.inTangent = 0;
                this.outTangent = 0;
              }

            } exports('c0', Keyframe);
            CCClass.fastDefine('cc.Keyframe', Keyframe, {
              time: 0,
              value: 0,
              inTangent: 0,
              outTangent: 0
            });
            class OptimizedKey {
              constructor() {
                this.index = void 0;
                this.time = void 0;
                this.endTime = void 0;
                this.coefficient = void 0;
                this.index = -1;
                this.time = 0;
                this.endTime = 0;
                this.coefficient = new Float32Array(4);
              }

              evaluate(T) {
                const t = T - this.time;
                return evalOptCurve(t, this.coefficient);
              }

            }
            function evalOptCurve(t, coefs) {
              return t * (t * (t * coefs[0] + coefs[1]) + coefs[2]) + coefs[3];
            }
            class AnimationCurve {
              get _internalCurve() {
                return this._curve;
              }

              get keyFrames() {
                return Array.from(this._curve.keyframes()).map(([time, value]) => {
                  const legacyKeyframe = new Keyframe();
                  legacyKeyframe.time = time;
                  legacyKeyframe.value = value.value;
                  legacyKeyframe.inTangent = value.leftTangent;
                  legacyKeyframe.outTangent = value.rightTangent;
                  return legacyKeyframe;
                });
              }

              set keyFrames(value) {
                this._curve.assignSorted(value.map(legacyCurve => [legacyCurve.time, {
                  interpolationMode: RealInterpolationMode.CUBIC,
                  value: legacyCurve.value,
                  leftTangent: legacyCurve.inTangent,
                  rightTangent: legacyCurve.outTangent
                }]));
              }

              get preWrapMode() {
                return toLegacyWrapMode(this._curve.preExtrapolation);
              }

              set preWrapMode(value) {
                this._curve.preExtrapolation = fromLegacyWrapMode(value);
              }

              get postWrapMode() {
                return toLegacyWrapMode(this._curve.postExtrapolation);
              }

              set postWrapMode(value) {
                this._curve.postExtrapolation = fromLegacyWrapMode(value);
              }

              constructor(keyFrames = null) {
                this.cachedKey = void 0;

                if (keyFrames instanceof RealCurve) {
                  this._curve = keyFrames;
                } else {
                  const curve = new RealCurve();
                  this._curve = curve;
                  curve.preExtrapolation = ExtrapolationMode.LOOP;
                  curve.postExtrapolation = ExtrapolationMode.CLAMP;

                  if (!keyFrames) {
                    curve.assignSorted([[0.0, {
                      interpolationMode: RealInterpolationMode.CUBIC,
                      value: 1.0
                    }], [1.0, {
                      interpolationMode: RealInterpolationMode.CUBIC,
                      value: 1.0
                    }]]);
                  } else {
                    curve.assignSorted(keyFrames.map(legacyKeyframe => [legacyKeyframe.time, {
                      interpolationMode: RealInterpolationMode.CUBIC,
                      value: legacyKeyframe.value,
                      leftTangent: legacyKeyframe.inTangent,
                      rightTangent: legacyKeyframe.outTangent
                    }]));
                  }
                }

                this.cachedKey = new OptimizedKey();
              }

              addKey(keyFrame) {
                if (!keyFrame) {
                  this._curve.clear();
                } else {
                  this._curve.addKeyFrame(keyFrame.time, {
                    interpolationMode: RealInterpolationMode.CUBIC,
                    value: keyFrame.value,
                    leftTangent: keyFrame.inTangent,
                    rightTangent: keyFrame.outTangent
                  });
                }
              }

              evaluate_slow(time) {
                return this._curve.evaluate(time);
              }

              evaluate(time) {
                const {
                  cachedKey,
                  _curve: curve
                } = this;
                const nKeyframes = curve.keyFramesCount;
                const lastKeyframeIndex = nKeyframes - 1;
                let wrappedTime = time;
                const extrapolationMode = time < 0 ? curve.preExtrapolation : curve.postExtrapolation;
                const startTime = curve.getKeyframeTime(0);
                const endTime = curve.getKeyframeTime(lastKeyframeIndex);

                switch (extrapolationMode) {
                  case ExtrapolationMode.LOOP:
                    wrappedTime = repeat(time - startTime, endTime - startTime) + startTime;
                    break;

                  case ExtrapolationMode.PING_PONG:
                    wrappedTime = pingPong(time - startTime, endTime - startTime) + startTime;
                    break;

                  case ExtrapolationMode.CLAMP:
                  default:
                    wrappedTime = clamp(time, startTime, endTime);
                    break;
                }

                if (wrappedTime >= cachedKey.time && wrappedTime < cachedKey.endTime) {
                  return cachedKey.evaluate(wrappedTime);
                }

                const leftIndex = this.findIndex(cachedKey, wrappedTime);
                const rightIndex = Math.min(leftIndex + 1, lastKeyframeIndex);
                this.calcOptimizedKey(cachedKey, leftIndex, rightIndex);
                return cachedKey.evaluate(wrappedTime);
              }

              calcOptimizedKey(optKey, leftIndex, rightIndex) {
                const lhsTime = this._curve.getKeyframeTime(leftIndex);

                const rhsTime = this._curve.getKeyframeTime(rightIndex);

                const {
                  value: lhsValue,
                  leftTangent: lhsOutTangent
                } = this._curve.getKeyframeValue(leftIndex);

                const {
                  value: rhsValue,
                  rightTangent: rhsInTangent
                } = this._curve.getKeyframeValue(rightIndex);

                optKey.index = leftIndex;
                optKey.time = lhsTime;
                optKey.endTime = rhsTime;
                const dx = rhsTime - lhsTime;
                const dy = rhsValue - lhsValue;
                const length = 1 / (dx * dx);
                const d1 = lhsOutTangent * dx;
                const d2 = rhsInTangent * dx;
                optKey.coefficient[0] = (d1 + d2 - dy - dy) * length / dx;
                optKey.coefficient[1] = (dy + dy + dy - d1 - d1 - d2) * length;
                optKey.coefficient[2] = lhsOutTangent;
                optKey.coefficient[3] = lhsValue;
              }

              findIndex(optKey, t) {
                const {
                  _curve: curve
                } = this;
                const nKeyframes = curve.keyFramesCount;
                const cachedIndex = optKey.index;

                if (cachedIndex !== -1) {
                  const cachedTime = curve.getKeyframeTime(cachedIndex);

                  if (t > cachedTime) {
                    for (let i = 0; i < LOOK_FORWARD; i++) {
                      const currIndex = cachedIndex + i;

                      if (currIndex + 1 < nKeyframes && curve.getKeyframeTime(currIndex + 1) > t) {
                        return currIndex;
                      }
                    }
                  } else {
                    for (let i = 0; i < LOOK_FORWARD; i++) {
                      const currIndex = cachedIndex - i;

                      if (currIndex >= 0 && curve.getKeyframeTime(currIndex - 1) <= t) {
                        return currIndex - 1;
                      }
                    }
                  }
                }

                let left = 0;
                let right = nKeyframes;
                let mid;

                while (right - left > 1) {
                  mid = Math.floor((left + right) / 2);

                  if (curve.getKeyframeTime(mid) >= t) {
                    right = mid;
                  } else {
                    left = mid;
                  }
                }

                return left;
              }

            } exports('c1', AnimationCurve);
            AnimationCurve.defaultKF = [{
              time: 0,
              value: 1,
              inTangent: 0,
              outTangent: 0
            }, {
              time: 1,
              value: 1,
              inTangent: 0,
              outTangent: 0
            }];
            CCClass.fastDefine('cc.AnimationCurve', AnimationCurve, {
              _curve: null
            });

            function fromLegacyWrapMode(legacyWrapMode) {
              switch (legacyWrapMode) {
                default:
                case WrapModeMask.Default:
                case WrapModeMask.Normal:
                case WrapModeMask.Clamp:
                  return ExtrapolationMode.CLAMP;

                case WrapModeMask.PingPong:
                  return ExtrapolationMode.PING_PONG;

                case WrapModeMask.Loop:
                  return ExtrapolationMode.LOOP;
              }
            }

            function toLegacyWrapMode(extrapolationMode) {
              switch (extrapolationMode) {
                default:
                case ExtrapolationMode.LINEAR:
                case ExtrapolationMode.CLAMP:
                  return WrapModeMask.Clamp;

                case ExtrapolationMode.PING_PONG:
                  return WrapModeMask.PingPong;

                case ExtrapolationMode.LOOP:
                  return WrapModeMask.Loop;
              }
            }

            function constructLegacyCurveAndConvert() {
              const curve = new RealCurve();
              curve.assignSorted([[0.0, {
                interpolationMode: RealInterpolationMode.CUBIC,
                value: 1.0
              }], [1.0, {
                interpolationMode: RealInterpolationMode.CUBIC,
                value: 1.0
              }]]);
              return curve;
            }

            let SplineMode;

            (function (SplineMode) {
              SplineMode[SplineMode["LINEAR"] = 0] = "LINEAR";
              SplineMode[SplineMode["BEZIER"] = 1] = "BEZIER";
              SplineMode[SplineMode["CATMULL_ROM"] = 2] = "CATMULL_ROM";
            })(SplineMode || (SplineMode = exports('c2', {})));

            const SPLINE_WHOLE_INDEX = 0xffffffff;

            const _v0 = new Vec3();

            const _v1 = new Vec3();

            const _v2 = new Vec3();

            const _v3 = new Vec3();

            class Spline {
              constructor(mode = SplineMode.CATMULL_ROM, knots = []) {
                this._type = void 0;
                this._mode = SplineMode.CATMULL_ROM;
                this._knots = [];
                this._type = enums.SHAPE_SPLINE;
                this._mode = mode;

                for (let i = 0; i < knots.length; i++) {
                  this._knots[i] = new Vec3(knots[i]);
                }
              }

              static create(mode, knots = []) {
                return new Spline(mode, knots);
              }

              static clone(s) {
                return new Spline(s.mode, s.knots);
              }

              static copy(out, s) {
                out._mode = s.mode;
                out._knots.length = 0;
                const knots = s.knots;
                const length = knots.length;

                for (let i = 0; i < length; i++) {
                  out._knots[i] = new Vec3(knots[i]);
                }

                return out;
              }

              get type() {
                return this._type;
              }

              get mode() {
                return this._mode;
              }

              get knots() {
                return this._knots;
              }

              setModeAndKnots(mode, knots) {
                this._mode = mode;
                this._knots.length = 0;

                for (let i = 0; i < knots.length; i++) {
                  this._knots[i] = new Vec3(knots[i]);
                }
              }

              clearKnots() {
                this._knots.length = 0;
              }

              getKnotCount() {
                return this._knots.length;
              }

              addKnot(knot) {
                this._knots.push(new Vec3(knot));
              }

              insertKnot(index, knot) {
                const item = new Vec3(knot);

                if (index >= this._knots.length) {
                  this._knots.push(item);

                  return;
                }

                this._knots.splice(index, 0, item);
              }

              removeKnot(index) {
                assertIsTrue(index >= 0 && index < this._knots.length, 'Spline: invalid index');

                this._knots.splice(index, 1);
              }

              setKnot(index, knot) {
                assertIsTrue(index >= 0 && index < this._knots.length, 'Spline: invalid index');

                this._knots[index].set(knot);
              }

              getKnot(index) {
                assertIsTrue(index >= 0 && index < this._knots.length, 'Spline: invalid index');
                return this._knots[index];
              }

              getPoint(t, index = SPLINE_WHOLE_INDEX) {
                t = clamp(t, 0.0, 1.0);
                const segments = this.getSegments();

                if (segments == 0) {
                  return new Vec3(0.0, 0.0, 0.0);
                }

                if (index == SPLINE_WHOLE_INDEX) {
                  const deltaT = 1.0 / segments;
                  index = Math.floor(t / deltaT);
                  t = t % deltaT / deltaT;
                }

                if (index >= segments) {
                  return new Vec3(this._knots[this._knots.length - 1]);
                }

                switch (this._mode) {
                  case SplineMode.LINEAR:
                    return Spline.calcLinear(this._knots[index], this._knots[index + 1], t);

                  case SplineMode.BEZIER:
                    return Spline.calcBezier(this._knots[index * 4], this._knots[index * 4 + 1], this._knots[index * 4 + 2], this._knots[index * 4 + 3], t);

                  case SplineMode.CATMULL_ROM:
                    {
                      const v0 = index > 0 ? this._knots[index - 1] : this._knots[index];
                      const v3 = index + 2 < this._knots.length ? this._knots[index + 2] : this._knots[index + 1];
                      return Spline.calcCatmullRom(v0, this._knots[index], this._knots[index + 1], v3, t);
                    }

                  default:
                    return new Vec3(0.0, 0.0, 0.0);
                }
              }

              getPoints(num, index = SPLINE_WHOLE_INDEX) {
                if (num == 0) {
                  return [];
                }

                if (num == 1) {
                  const point = this.getPoint(0.0, index);
                  return [point];
                }

                const points = [];
                const deltaT = 1.0 / (num - 1.0);

                for (let i = 0; i < num; i++) {
                  const t = i * deltaT;
                  const point = this.getPoint(t, index);
                  points.push(point);
                }

                return points;
              }

              getSegments() {
                const count = this._knots.length;

                switch (this._mode) {
                  case SplineMode.LINEAR:
                  case SplineMode.CATMULL_ROM:
                    if (count < 2) {
                      warnID(14300);
                      return 0;
                    }

                    return count - 1;

                  case SplineMode.BEZIER:
                    if (count < 4 || count % 4 != 0) {
                      warnID(14301);
                      return 0;
                    }

                    return count / 4;

                  default:
                    assertIsTrue(false, 'Spline error: invalid mode');
                }
              }

              static calcLinear(v0, v1, t) {
                const result = new Vec3();
                Vec3.multiplyScalar(_v0, v0, 1.0 - t);
                Vec3.multiplyScalar(_v1, v1, t);
                Vec3.add(result, _v0, _v1);
                return result;
              }

              static calcBezier(v0, v1, v2, v3, t) {
                const result = new Vec3();
                const s = 1.0 - t;
                Vec3.multiplyScalar(_v0, v0, s * s * s);
                Vec3.multiplyScalar(_v1, v1, 3.0 * t * s * s);
                Vec3.multiplyScalar(_v2, v2, 3.0 * t * t * s);
                Vec3.multiplyScalar(_v3, v3, t * t * t);
                Vec3.add(_v0, _v0, _v1);
                Vec3.add(_v2, _v2, _v3);
                Vec3.add(result, _v0, _v2);
                return result;
              }

              static calcCatmullRom(v0, v1, v2, v3, t) {
                const result = new Vec3();
                const t2 = t * t;
                const t3 = t2 * t;
                Vec3.multiplyScalar(_v0, v0, -0.5 * t3 + t2 - 0.5 * t);
                Vec3.multiplyScalar(_v1, v1, 1.5 * t3 - 2.5 * t2 + 1.0);
                Vec3.multiplyScalar(_v2, v2, -1.5 * t3 + 2.0 * t2 + 0.5 * t);
                Vec3.multiplyScalar(_v3, v3, 0.5 * t3 - 0.5 * t2);
                Vec3.add(_v0, _v0, _v1);
                Vec3.add(_v2, _v2, _v3);
                Vec3.add(result, _v0, _v2);
                return result;
              }

            } exports('c3', Spline);

            replaceProperty(intersect, 'intersect', [{
              name: 'ray_aabb',
              newName: 'rayAABB'
            }, {
              name: 'ray_plane',
              newName: 'rayPlane'
            }, {
              name: 'ray_triangle',
              newName: 'rayTriangle'
            }, {
              name: 'ray_sphere',
              newName: 'raySphere'
            }, {
              name: 'ray_obb',
              newName: 'rayOBB'
            }, {
              name: 'ray_capsule',
              newName: 'rayCapsule'
            }, {
              name: 'ray_subMesh',
              newName: 'raySubMesh'
            }, {
              name: 'ray_mesh',
              newName: 'rayMesh'
            }, {
              name: 'ray_model',
              newName: 'rayModel'
            }, {
              name: 'line_plane',
              newName: 'linePlane'
            }, {
              name: 'line_triangle',
              newName: 'lineTriangle'
            }, {
              name: 'line_aabb',
              newName: 'lineAABB'
            }, {
              name: 'line_obb',
              newName: 'lineOBB'
            }, {
              name: 'line_sphere',
              newName: 'lineSphere'
            }, {
              name: 'aabb_aabb',
              newName: 'aabbWithAABB'
            }, {
              name: 'aabb_obb',
              newName: 'aabbWithOBB'
            }, {
              name: 'aabb_plane',
              newName: 'aabbPlane'
            }, {
              name: 'aabb_frustum',
              newName: 'aabbFrustum'
            }, {
              name: 'aabbFrustum_accurate',
              newName: 'aabbFrustumAccurate'
            }, {
              name: 'obb_point',
              newName: 'obbPoint'
            }, {
              name: 'obb_plane',
              newName: 'obbPlane'
            }, {
              name: 'obb_frustum',
              newName: 'obbFrustum'
            }, {
              name: 'obbFrustum_accurate',
              newName: 'obbFrustumAccurate'
            }, {
              name: 'obb_obb',
              newName: 'obbWithOBB'
            }, {
              name: 'obb_capsule',
              newName: 'obbCapsule'
            }, {
              name: 'sphere_plane',
              newName: 'spherePlane'
            }, {
              name: 'sphere_frustum',
              newName: 'sphereFrustum'
            }, {
              name: 'sphereFrustum_accurate',
              newName: 'sphereFrustumAccurate'
            }, {
              name: 'sphere_sphere',
              newName: 'sphereWithSphere'
            }, {
              name: 'sphere_aabb',
              newName: 'sphereAABB'
            }, {
              name: 'sphere_obb',
              newName: 'sphereOBB'
            }, {
              name: 'sphere_capsule',
              newName: 'sphereCapsule'
            }, {
              name: 'capsule_capsule',
              newName: 'capsuleWithCapsule'
            }]);

            function deprecatedClassMessage(oldClassName, newClassName) {
              console.warn(`${oldClassName} is deprecated, please use ${newClassName} instead.`);
            }

            class line extends Line {
              constructor() {
                super();
                deprecatedClassMessage('line', 'Line');
              }

            } exports('c5', line);
            class plane extends Plane {
              constructor() {
                super();
                deprecatedClassMessage('plane', 'Plane');
              }

            } exports('c6', plane);
            class ray extends Ray {
              constructor() {
                super();
                deprecatedClassMessage('ray', 'Ray');
              }

            } exports('c7', ray);
            class triangle extends Triangle {
              constructor() {
                super();
                deprecatedClassMessage('triangle', 'Triangle');
              }

            } exports('c8', triangle);
            class sphere extends Sphere {
              constructor() {
                super();
                deprecatedClassMessage('sphere', 'Sphere');
              }

            } exports('c9', sphere);
            class aabb extends AABB {
              constructor() {
                super();
                deprecatedClassMessage('aabb', 'AABB');
              }

            } exports('ca', aabb);
            class obb extends OBB {
              constructor() {
                super();
                deprecatedClassMessage('obb', 'OBB');
              }

            } exports('cb', obb);
            class capsule extends Capsule {
              constructor() {
                super();
                deprecatedClassMessage('capsule', 'Capsule');
              }

            } exports('cc', capsule);
            class frustum extends Frustum {
              constructor() {
                super();
                deprecatedClassMessage('frustum', 'Frustum');
              }

            } exports('cd', frustum);

            const EffectAsset = exports('fI', jsb.EffectAsset);
            legacyCC.EffectAsset = EffectAsset;
            const effectAssetProto = EffectAsset.prototype;

            effectAssetProto._ctor = function () {
              jsb.Asset.prototype._ctor.apply(this, arguments);

              this.hideInEditor = false;
            };

            const EffectAssetProto = EffectAsset.prototype;
            serializable(EffectAssetProto, 'techniques');
            serializable(EffectAssetProto, 'shaders');
            serializable(EffectAssetProto, 'combinations');
            editorOnly(EffectAssetProto, 'hideInEditor');
            serializable(EffectAssetProto, 'hideInEditor');
            ccclass('cc.EffectAsset')(EffectAsset);

            const CUSTOM_PIXEL_FORMAT = 1024;
            let PixelFormat;

            (function (PixelFormat) {
              PixelFormat[PixelFormat["RGB565"] = Format.R5G6B5] = "RGB565";
              PixelFormat[PixelFormat["RGB5A1"] = Format.RGB5A1] = "RGB5A1";
              PixelFormat[PixelFormat["RGBA4444"] = Format.RGBA4] = "RGBA4444";
              PixelFormat[PixelFormat["RGB888"] = Format.RGB8] = "RGB888";
              PixelFormat[PixelFormat["RGB32F"] = Format.RGB32F] = "RGB32F";
              PixelFormat[PixelFormat["RGBA8888"] = Format.RGBA8] = "RGBA8888";
              PixelFormat[PixelFormat["RGBA32F"] = Format.RGBA32F] = "RGBA32F";
              PixelFormat[PixelFormat["A8"] = Format.A8] = "A8";
              PixelFormat[PixelFormat["I8"] = Format.L8] = "I8";
              PixelFormat[PixelFormat["AI8"] = Format.LA8] = "AI8";
              PixelFormat[PixelFormat["RGB_PVRTC_2BPPV1"] = Format.PVRTC_RGB2] = "RGB_PVRTC_2BPPV1";
              PixelFormat[PixelFormat["RGBA_PVRTC_2BPPV1"] = Format.PVRTC_RGBA2] = "RGBA_PVRTC_2BPPV1";
              PixelFormat[PixelFormat["RGB_A_PVRTC_2BPPV1"] = CUSTOM_PIXEL_FORMAT] = "RGB_A_PVRTC_2BPPV1";
              PixelFormat[PixelFormat["RGB_PVRTC_4BPPV1"] = Format.PVRTC_RGB4] = "RGB_PVRTC_4BPPV1";
              PixelFormat[PixelFormat["RGBA_PVRTC_4BPPV1"] = Format.PVRTC_RGBA4] = "RGBA_PVRTC_4BPPV1";
              PixelFormat[PixelFormat["RGB_A_PVRTC_4BPPV1"] = CUSTOM_PIXEL_FORMAT + 1] = "RGB_A_PVRTC_4BPPV1";
              PixelFormat[PixelFormat["RGB_ETC1"] = Format.ETC_RGB8] = "RGB_ETC1";
              PixelFormat[PixelFormat["RGBA_ETC1"] = CUSTOM_PIXEL_FORMAT + 2] = "RGBA_ETC1";
              PixelFormat[PixelFormat["RGB_ETC2"] = Format.ETC2_RGB8] = "RGB_ETC2";
              PixelFormat[PixelFormat["RGBA_ETC2"] = Format.ETC2_RGBA8] = "RGBA_ETC2";
              PixelFormat[PixelFormat["RGBA_ASTC_4x4"] = Format.ASTC_RGBA_4X4] = "RGBA_ASTC_4x4";
              PixelFormat[PixelFormat["RGBA_ASTC_5x4"] = Format.ASTC_RGBA_5X4] = "RGBA_ASTC_5x4";
              PixelFormat[PixelFormat["RGBA_ASTC_5x5"] = Format.ASTC_RGBA_5X5] = "RGBA_ASTC_5x5";
              PixelFormat[PixelFormat["RGBA_ASTC_6x5"] = Format.ASTC_RGBA_6X5] = "RGBA_ASTC_6x5";
              PixelFormat[PixelFormat["RGBA_ASTC_6x6"] = Format.ASTC_RGBA_6X6] = "RGBA_ASTC_6x6";
              PixelFormat[PixelFormat["RGBA_ASTC_8x5"] = Format.ASTC_RGBA_8X5] = "RGBA_ASTC_8x5";
              PixelFormat[PixelFormat["RGBA_ASTC_8x6"] = Format.ASTC_RGBA_8X6] = "RGBA_ASTC_8x6";
              PixelFormat[PixelFormat["RGBA_ASTC_8x8"] = Format.ASTC_RGBA_8X8] = "RGBA_ASTC_8x8";
              PixelFormat[PixelFormat["RGBA_ASTC_10x5"] = Format.ASTC_RGBA_10X5] = "RGBA_ASTC_10x5";
              PixelFormat[PixelFormat["RGBA_ASTC_10x6"] = Format.ASTC_RGBA_10X6] = "RGBA_ASTC_10x6";
              PixelFormat[PixelFormat["RGBA_ASTC_10x8"] = Format.ASTC_RGBA_10X8] = "RGBA_ASTC_10x8";
              PixelFormat[PixelFormat["RGBA_ASTC_10x10"] = Format.ASTC_RGBA_10X10] = "RGBA_ASTC_10x10";
              PixelFormat[PixelFormat["RGBA_ASTC_12x10"] = Format.ASTC_RGBA_12X10] = "RGBA_ASTC_12x10";
              PixelFormat[PixelFormat["RGBA_ASTC_12x12"] = Format.ASTC_RGBA_12X12] = "RGBA_ASTC_12x12";
            })(PixelFormat || (PixelFormat = exports('dr', {})));

            let WrapMode$1;

            (function (WrapMode) {
              WrapMode[WrapMode["REPEAT"] = Address.WRAP] = "REPEAT";
              WrapMode[WrapMode["CLAMP_TO_EDGE"] = Address.CLAMP] = "CLAMP_TO_EDGE";
              WrapMode[WrapMode["MIRRORED_REPEAT"] = Address.MIRROR] = "MIRRORED_REPEAT";
              WrapMode[WrapMode["CLAMP_TO_BORDER"] = Address.BORDER] = "CLAMP_TO_BORDER";
            })(WrapMode$1 || (WrapMode$1 = exports('er', {})));

            let Filter$1;

            (function (Filter$1) {
              Filter$1[Filter$1["NONE"] = Filter.NONE] = "NONE";
              Filter$1[Filter$1["LINEAR"] = Filter.LINEAR] = "LINEAR";
              Filter$1[Filter$1["NEAREST"] = Filter.POINT] = "NEAREST";
            })(Filter$1 || (Filter$1 = exports('ds', {})));

            const textureBaseProto = jsb.TextureBase.prototype;

            textureBaseProto._serialize = function (ctxForExporting) {
              if (EDITOR || TEST) {
                return `${this._minFilter},${this._magFilter},${this._wrapS},${this._wrapT},${this._mipFilter},${this._anisotropy}`;
              }

              return '';
            };

            textureBaseProto._deserialize = function (serializedData, handle) {
              const data = serializedData;
              const fields = data.split(',');
              fields.unshift('');

              if (fields.length >= 5) {
                this.setFilters(parseInt(fields[1]), parseInt(fields[2]));
                this.setWrapMode(parseInt(fields[3]), parseInt(fields[4]));
              }

              if (fields.length >= 7) {
                this.setMipFilter(parseInt(fields[5]));
                this.setAnisotropy(parseInt(fields[6]));
              }
            };

            textureBaseProto._getGFXDevice = function () {
              return deviceManager.gfxDevice;
            };

            textureBaseProto._getGFXFormat = function () {
              return this._getGFXPixelFormat(this.format);
            };

            textureBaseProto._setGFXFormat = function (format) {
              this.format = format === undefined ? PixelFormat.RGBA8888 : format;
            };

            textureBaseProto._getGFXPixelFormat = function (format) {
              if (format === PixelFormat.RGBA_ETC1) {
                format = PixelFormat.RGB_ETC1;
              } else if (format === PixelFormat.RGB_A_PVRTC_4BPPV1) {
                format = PixelFormat.RGB_PVRTC_4BPPV1;
              } else if (format === PixelFormat.RGB_A_PVRTC_2BPPV1) {
                format = PixelFormat.RGB_PVRTC_2BPPV1;
              }

              return format;
            };

            textureBaseProto.createNode = null;
            const TextureBase = exports('e6', jsb.TextureBase);
            TextureBase.Filter = Filter$1;
            TextureBase.PixelFormat = PixelFormat;
            TextureBase.WrapMode = WrapMode$1;

            textureBaseProto._ctor = function () {
              jsb.Asset.prototype._ctor.apply(this, arguments);

              this._gfxSampler = null;
              this._samplerInfo = null;
              this._textureHash = 0;

              this._registerGFXSamplerUpdatedListener();
            };

            const oldGetGFXSampler = textureBaseProto.getGFXSampler;

            textureBaseProto.getGFXSampler = function () {
              if (!this._gfxSampler) {
                this._gfxSampler = oldGetGFXSampler.call(this);
              }

              return this._gfxSampler;
            };

            const oldGetHash = textureBaseProto.getHash;

            textureBaseProto.getHash = function () {
              if (this._textureHash === 0) {
                this._textureHash = oldGetHash.call(this);
              }

              return this._textureHash;
            };

            const oldGetSamplerInfo = textureBaseProto.getSamplerInfo;

            textureBaseProto.getSamplerInfo = function () {
              if (!this._samplerInfo) {
                this._samplerInfo = oldGetSamplerInfo.call(this);
              }

              return this._samplerInfo;
            };

            const oldDestroy = textureBaseProto.destroy;

            textureBaseProto.destroy = function () {
              var _legacyCC$director$ro;

              if ((_legacyCC$director$ro = legacyCC.director.root) === null || _legacyCC$director$ro === void 0 ? void 0 : _legacyCC$director$ro.batcher2D) {
                legacyCC.director.root.batcher2D._releaseDescriptorSetCache(this.getGFXTexture(), this.getGFXSampler());
              }

              return oldDestroy.call(this);
            };

            textureBaseProto._onGFXSamplerUpdated = function (gfxSampler, samplerInfo) {
              this._gfxSampler = gfxSampler;
              this._samplerInfo = samplerInfo;
            };

            legacyCC.TextureBase = jsb.TextureBase;
            const TextureBaseProto = TextureBase.prototype;
            serializable(TextureBaseProto, '_format');
            serializable(TextureBaseProto, '_minFilter');
            serializable(TextureBaseProto, '_magFilter');
            serializable(TextureBaseProto, '_mipFilter');
            serializable(TextureBaseProto, '_wrapS');
            serializable(TextureBaseProto, '_wrapT');
            serializable(TextureBaseProto, '_wrapR');
            serializable(TextureBaseProto, '_anisotropy');
            ccclass('cc.TextureBase')(TextureBase);

            const matProto = jsb.Material.prototype;

            function wrapSetProperty(cb, target, name, val, passIdx) {
              if (passIdx != undefined) {
                cb.call(target, name, val, passIdx);
              } else {
                cb.call(target, name, val);
              }
            }

            var MathType;

            (function (MathType) {
              MathType[MathType["VEC2"] = 0] = "VEC2";
              MathType[MathType["VEC3"] = 1] = "VEC3";
              MathType[MathType["VEC4"] = 2] = "VEC4";
              MathType[MathType["QUATERNION"] = 3] = "QUATERNION";
              MathType[MathType["MAT3"] = 4] = "MAT3";
              MathType[MathType["MAT4"] = 5] = "MAT4";
              MathType[MathType["SIZE"] = 6] = "SIZE";
              MathType[MathType["RECT"] = 7] = "RECT";
              MathType[MathType["COLOR"] = 8] = "COLOR";
            })(MathType || (MathType = {}));

            matProto.setProperty = function (name, val, passIdx) {
              if (Array.isArray(val)) {
                const first = val[0];

                if (typeof first === 'number') {
                  if (Number.isInteger(first)) {
                    wrapSetProperty(this.setPropertyInt32Array, this, name, val, passIdx);
                  } else {
                    wrapSetProperty(this.setPropertyFloat32Array, this, name, val, passIdx);
                  }
                } else if (first instanceof Vec2) {
                  wrapSetProperty(this.setPropertyVec2Array, this, name, val, passIdx);
                } else if (first instanceof Vec3) {
                  wrapSetProperty(this.setPropertyVec3Array, this, name, val, passIdx);
                } else if (first instanceof Vec4) {
                  wrapSetProperty(this.setPropertyVec4Array, this, name, val, passIdx);
                } else if (first instanceof Color) {
                  wrapSetProperty(this.setPropertyColorArray, this, name, val, passIdx);
                } else if (first instanceof Mat3) {
                  wrapSetProperty(this.setPropertyMat3Array, this, name, val, passIdx);
                } else if (first instanceof Mat4) {
                  wrapSetProperty(this.setPropertyMat4Array, this, name, val, passIdx);
                } else if (first instanceof Quat) {
                  wrapSetProperty(this.setPropertyQuatArray, this, name, val, passIdx);
                } else if (first instanceof TextureBase) {
                  wrapSetProperty(this.setPropertyTextureBaseArray, this, name, val, passIdx);
                } else if (first instanceof Texture) {
                  wrapSetProperty(this.setPropertyGFXTextureArray, this, name, val, passIdx);
                } else {
                  legacyCC.error(`Material.setProperty Unknown type: ${val}`);
                }
              } else if (typeof val === 'number') {
                if (Number.isInteger(val)) {
                  wrapSetProperty(this.setPropertyInt32, this, name, val, passIdx);
                } else {
                  wrapSetProperty(this.setPropertyFloat32, this, name, val, passIdx);
                }
              } else if (val instanceof Vec2) {
                wrapSetProperty(this.setPropertyVec2, this, name, val, passIdx);
              } else if (val instanceof Vec3) {
                wrapSetProperty(this.setPropertyVec3, this, name, val, passIdx);
              } else if (val instanceof Vec4) {
                wrapSetProperty(this.setPropertyVec4, this, name, val, passIdx);
              } else if (val instanceof Color) {
                wrapSetProperty(this.setPropertyColor, this, name, val, passIdx);
              } else if (val instanceof Mat3) {
                wrapSetProperty(this.setPropertyMat3, this, name, val, passIdx);
              } else if (val instanceof Mat4) {
                wrapSetProperty(this.setPropertyMat4, this, name, val, passIdx);
              } else if (val instanceof Quat) {
                wrapSetProperty(this.setPropertyQuat, this, name, val, passIdx);
              } else if (val instanceof TextureBase) {
                wrapSetProperty(this.setPropertyTextureBase, this, name, val, passIdx);
              } else if (val instanceof Texture) {
                wrapSetProperty(this.setPropertyGFXTexture, this, name, val, passIdx);
              } else if (val === null) {
                if (passIdx) {
                  this.setPropertyNull(name, passIdx);
                } else {
                  this.setPropertyNull(name);
                }
              } else {
                legacyCC.error(`Material.setProperty Unknown type: ${val}`);
              }
            };

            matProto.getProperty = function (name, passIdx) {
              let val;

              if (passIdx !== undefined) {
                val = this._getProperty(name, passIdx);
              } else {
                val = this._getProperty(name);
              }

              if (Array.isArray(val)) {
                const first = val[0];
                const arr = [];

                if (first instanceof jsb.Vec2 || first.type === MathType.VEC2) {
                  for (let i = 0, len = val.length; i < len; ++i) {
                    const e = val[i];
                    arr.push(new Vec2(e.x, e.y));
                  }
                } else if (first.type === MathType.VEC3) {
                  for (let i = 0, len = val.length; i < len; ++i) {
                    const e = val[i];
                    arr.push(new Vec3(e.x, e.y, e.z));
                  }
                } else if (first.type === MathType.VEC4) {
                  for (let i = 0, len = val.length; i < len; ++i) {
                    const e = val[i];
                    arr.push(new Vec4(e.x, e.y, e.z, e.w));
                  }
                } else if (first instanceof jsb.Color) {
                  for (let i = 0, len = val.length; i < len; ++i) {
                    const e = val[i];
                    arr.push(new Color(e.r, e.g, e.b, e.a));
                  }
                } else if (first.type === MathType.MAT3) {
                  for (let i = 0, len = val.length; i < len; ++i) {
                    const e = val[i];
                    arr.push(new Mat3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]));
                  }
                } else if (first.type === MathType.MAT4) {
                  for (let i = 0, len = val.length; i < len; ++i) {
                    const e = val[i];
                    arr.push(new Mat4(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15]));
                  }
                } else if (first.type === MathType.QUATERNION) {
                  for (let i = 0, len = val.length; i < len; ++i) {
                    const e = val[i];
                    arr.push(new Quat(e.x, e.y, e.z, e.w));
                  }
                }

                return arr || val;
              }

              let ret;
              const e = val;

              if (val instanceof jsb.Vec2 || val.type === MathType.VEC2) {
                ret = new Vec3(e.x, e.y);
              } else if (val.type === MathType.VEC3) {
                ret = new Vec3(e.x, e.y, e.z);
              } else if (val.type === MathType.VEC4) {
                ret = new Vec4(e.x, e.y, e.z, e.w);
              } else if (val instanceof jsb.Color) {
                ret = new Color(e.r, e.g, e.b, e.a);
              } else if (val.type === MathType.MAT3) {
                ret = new Mat3(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8]);
              } else if (val.type === MathType.MAT4) {
                ret = new Mat4(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15]);
              } else if (val.type === MathType.QUATERNION) {
                ret = new Quat(e.x, e.y, e.z, e.w);
              }

              return ret || val;
            };

            const Material = exports('dp', jsb.Material);
            legacyCC.Material = Material;
            const materialProto = Material.prototype;

            materialProto._ctor = function () {
              jsb.Asset.prototype._ctor.apply(this, arguments);

              this._props = [];
              this._passes = [];

              this._registerPassesUpdatedListener();

              this._isCtorCalled = true;
            };

            const oldOnLoaded = materialProto.onLoaded;

            materialProto.onLoaded = function () {
              this._propsInternal = this._props;
              oldOnLoaded.call(this);
            };

            materialProto._onPassesUpdated = function () {
              this._passes = this.getPasses();
            };

            Object.defineProperty(materialProto, 'passes', {
              enumerable: true,
              configurable: true,

              get() {
                if (!this._isCtorCalled) {
                  this._ctor();

                  this._passes = this.getPasses();
                }

                return this._passes;
              }

            });
            const MaterialProto = Material.prototype;
            type(EffectAsset)(MaterialProto, '_effectAsset');
            serializable(MaterialProto, '_techIdx');
            serializable(MaterialProto, '_defines');
            serializable(MaterialProto, '_states');
            serializable(MaterialProto, '_props');
            ccclass('cc.Material')(Material);

            const getPhaseID = (() => {
              const phases = new Map();
              let phaseNum = 0;
              return phaseName => {
                if (typeof phaseName === 'number') {
                  return phaseName;
                }

                if (!phases.has(phaseName)) {
                  phases.set(phaseName, 1 << phaseNum);
                  phaseNum++;
                }

                return phases.get(phaseName);
              };
            })();

            const layerList = {
              NONE: 0,
              IGNORE_RAYCAST: 1 << 20,
              GIZMOS: 1 << 21,
              EDITOR: 1 << 22,
              UI_3D: 1 << 23,
              SCENE_GIZMO: 1 << 24,
              UI_2D: 1 << 25,
              PROFILER: 1 << 28,
              DEFAULT: 1 << 30,
              ALL: 0xffffffff
            };
            class Layers {
              static init() {
                const userLayers = settings.querySettings(Settings.Category.ENGINE, 'customLayers');
                if (!userLayers) return;

                for (let i = 0; i < userLayers.length; i++) {
                  const layer = userLayers[i];
                  Layers.addLayer(layer.name, layer.bit);
                }
              }

              static makeMaskInclude(includes) {
                let mask = 0;

                for (const inc of includes) {
                  mask |= inc;
                }

                return mask;
              }

              static makeMaskExclude(excludes) {
                return ~Layers.makeMaskInclude(excludes);
              }

              static addLayer(name, bitNum) {
                if (bitNum === undefined) {
                  console.warn('bitNum can\'t be undefined');
                  return;
                }

                if (bitNum > 19 || bitNum < 0) {
                  console.warn('maximum layers reached.');
                  return;
                }

                const val = 1 << bitNum;
                assertIsTrue(!Layers.Enum[name], getError(2104, name));
                Layers.Enum[name] = val;
                js.value(Layers.Enum, String(val), name);
                Layers.BitMask[name] = val;
                js.value(Layers.BitMask, String(val), name);
              }

              static deleteLayer(bitNum) {
                if (bitNum > 19 || bitNum < 0) {
                  console.warn('do not change buildin layers.');
                  return;
                }

                const val = 1 << bitNum;
                delete Layers.Enum[Layers.Enum[val]];
                delete Layers.Enum[val];
                delete Layers.BitMask[Layers.BitMask[val]];
                delete Layers.BitMask[val];
              }

              static nameToLayer(name) {
                if (name === undefined) {
                  console.warn('name can\'t be undefined');
                  return -1;
                }

                return log2(Layers.Enum[name]);
              }

              static layerToName(bitNum) {
                if (bitNum > 31 || bitNum < 0) {
                  console.warn('Unable to access unknown layer.');
                  return '';
                }

                return Layers.Enum[1 << bitNum];
              }

            } exports('e9', Layers);
            Layers.Enum = Enum(layerList);
            Layers.BitMask = BitMask({ ...layerList
            });
            legacyCC.Layers = Layers;

            const PIPELINE_FLOW_MAIN = 'MainFlow';
            const PIPELINE_FLOW_FORWARD = 'ForwardFlow';
            const PIPELINE_FLOW_SHADOW = 'ShadowFlow';
            const PIPELINE_FLOW_SMAA = 'SMAAFlow';
            const PIPELINE_FLOW_TONEMAP = 'ToneMapFlow';
            let RenderPassStage;

            (function (RenderPassStage) {
              RenderPassStage[RenderPassStage["DEFAULT"] = 100] = "DEFAULT";
              RenderPassStage[RenderPassStage["UI"] = 200] = "UI";
            })(RenderPassStage || (RenderPassStage = {}));

            legacyCC.RenderPassStage = RenderPassStage;
            let RenderPriority;

            (function (RenderPriority) {
              RenderPriority[RenderPriority["MIN"] = 0] = "MIN";
              RenderPriority[RenderPriority["MAX"] = 255] = "MAX";
              RenderPriority[RenderPriority["DEFAULT"] = 128] = "DEFAULT";
            })(RenderPriority || (RenderPriority = exports('eo', {})));

            const globalDescriptorSetLayout = {
              bindings: [],
              layouts: {}
            };
            const localDescriptorSetLayout = {
              bindings: [],
              layouts: {}
            };
            let PipelineGlobalBindings;

            (function (PipelineGlobalBindings) {
              PipelineGlobalBindings[PipelineGlobalBindings["UBO_GLOBAL"] = 0] = "UBO_GLOBAL";
              PipelineGlobalBindings[PipelineGlobalBindings["UBO_CAMERA"] = 1] = "UBO_CAMERA";
              PipelineGlobalBindings[PipelineGlobalBindings["UBO_SHADOW"] = 2] = "UBO_SHADOW";
              PipelineGlobalBindings[PipelineGlobalBindings["UBO_CSM"] = 3] = "UBO_CSM";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_SHADOWMAP"] = 4] = "SAMPLER_SHADOWMAP";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_ENVIRONMENT"] = 5] = "SAMPLER_ENVIRONMENT";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_SPOT_SHADOW_MAP"] = 6] = "SAMPLER_SPOT_SHADOW_MAP";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_DIFFUSEMAP"] = 7] = "SAMPLER_DIFFUSEMAP";
              PipelineGlobalBindings[PipelineGlobalBindings["COUNT"] = 8] = "COUNT";
            })(PipelineGlobalBindings || (PipelineGlobalBindings = {}));

            const GLOBAL_UBO_COUNT = PipelineGlobalBindings.SAMPLER_SHADOWMAP;
            const GLOBAL_SAMPLER_COUNT = PipelineGlobalBindings.COUNT - GLOBAL_UBO_COUNT;
            let ModelLocalBindings;

            (function (ModelLocalBindings) {
              ModelLocalBindings[ModelLocalBindings["UBO_LOCAL"] = 0] = "UBO_LOCAL";
              ModelLocalBindings[ModelLocalBindings["UBO_FORWARD_LIGHTS"] = 1] = "UBO_FORWARD_LIGHTS";
              ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_ANIMATION"] = 2] = "UBO_SKINNING_ANIMATION";
              ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_TEXTURE"] = 3] = "UBO_SKINNING_TEXTURE";
              ModelLocalBindings[ModelLocalBindings["UBO_MORPH"] = 4] = "UBO_MORPH";
              ModelLocalBindings[ModelLocalBindings["UBO_UI_LOCAL"] = 5] = "UBO_UI_LOCAL";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_JOINTS"] = 6] = "SAMPLER_JOINTS";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_POSITION"] = 7] = "SAMPLER_MORPH_POSITION";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_NORMAL"] = 8] = "SAMPLER_MORPH_NORMAL";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_TANGENT"] = 9] = "SAMPLER_MORPH_TANGENT";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_LIGHTMAP"] = 10] = "SAMPLER_LIGHTMAP";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_SPRITE"] = 11] = "SAMPLER_SPRITE";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_REFLECTION"] = 12] = "SAMPLER_REFLECTION";
              ModelLocalBindings[ModelLocalBindings["STORAGE_REFLECTION"] = 13] = "STORAGE_REFLECTION";
              ModelLocalBindings[ModelLocalBindings["COUNT"] = 14] = "COUNT";
            })(ModelLocalBindings || (ModelLocalBindings = exports('en', {})));

            const LOCAL_UBO_COUNT = ModelLocalBindings.SAMPLER_JOINTS;
            const LOCAL_SAMPLER_COUNT = ModelLocalBindings.STORAGE_REFLECTION - LOCAL_UBO_COUNT;
            const LOCAL_STORAGE_IMAGE_COUNT = ModelLocalBindings.COUNT - LOCAL_UBO_COUNT - LOCAL_SAMPLER_COUNT;
            let SetIndex;

            (function (SetIndex) {
              SetIndex[SetIndex["GLOBAL"] = 0] = "GLOBAL";
              SetIndex[SetIndex["MATERIAL"] = 1] = "MATERIAL";
              SetIndex[SetIndex["LOCAL"] = 2] = "LOCAL";
            })(SetIndex || (SetIndex = {}));

            const bindingMappingInfo = new BindingMappingInfo([GLOBAL_UBO_COUNT, 0, LOCAL_UBO_COUNT], [GLOBAL_SAMPLER_COUNT, 0, LOCAL_SAMPLER_COUNT], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, LOCAL_STORAGE_IMAGE_COUNT], [0, 0, 0], [0, 2, 1]);
            class UBOGlobal {}
            UBOGlobal.TIME_OFFSET = 0;
            UBOGlobal.SCREEN_SIZE_OFFSET = UBOGlobal.TIME_OFFSET + 4;
            UBOGlobal.NATIVE_SIZE_OFFSET = UBOGlobal.SCREEN_SIZE_OFFSET + 4;
            UBOGlobal.DEBUG_VIEW_MODE_OFFSET = UBOGlobal.NATIVE_SIZE_OFFSET + 4;
            UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_1_OFFSET = UBOGlobal.DEBUG_VIEW_MODE_OFFSET + 4;
            UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_2_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_1_OFFSET + 4;
            UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_3_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_2_OFFSET + 4;
            UBOGlobal.COUNT = UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_3_OFFSET + 4;
            UBOGlobal.SIZE = UBOGlobal.COUNT * 4;
            UBOGlobal.NAME = 'CCGlobal';
            UBOGlobal.BINDING = PipelineGlobalBindings.UBO_GLOBAL;
            UBOGlobal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOGlobal.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
            UBOGlobal.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOGlobal.BINDING, UBOGlobal.NAME, [new Uniform('cc_time', Type.FLOAT4, 1), new Uniform('cc_screenSize', Type.FLOAT4, 1), new Uniform('cc_nativeSize', Type.FLOAT4, 1), new Uniform('cc_debug_view_mode', Type.FLOAT, 4), new Uniform('cc_debug_view_composite_pack_1', Type.FLOAT, 4), new Uniform('cc_debug_view_composite_pack_2', Type.FLOAT, 4), new Uniform('cc_debug_view_composite_pack_3', Type.FLOAT, 4)], 1);
            globalDescriptorSetLayout.layouts[UBOGlobal.NAME] = UBOGlobal.LAYOUT;
            globalDescriptorSetLayout.bindings[UBOGlobal.BINDING] = UBOGlobal.DESCRIPTOR;
            class UBOCamera {}
            UBOCamera.MAT_VIEW_OFFSET = 0;
            UBOCamera.MAT_VIEW_INV_OFFSET = UBOCamera.MAT_VIEW_OFFSET + 16;
            UBOCamera.MAT_PROJ_OFFSET = UBOCamera.MAT_VIEW_INV_OFFSET + 16;
            UBOCamera.MAT_PROJ_INV_OFFSET = UBOCamera.MAT_PROJ_OFFSET + 16;
            UBOCamera.MAT_VIEW_PROJ_OFFSET = UBOCamera.MAT_PROJ_INV_OFFSET + 16;
            UBOCamera.MAT_VIEW_PROJ_INV_OFFSET = UBOCamera.MAT_VIEW_PROJ_OFFSET + 16;
            UBOCamera.CAMERA_POS_OFFSET = UBOCamera.MAT_VIEW_PROJ_INV_OFFSET + 16;
            UBOCamera.SURFACE_TRANSFORM_OFFSET = UBOCamera.CAMERA_POS_OFFSET + 4;
            UBOCamera.SCREEN_SCALE_OFFSET = UBOCamera.SURFACE_TRANSFORM_OFFSET + 4;
            UBOCamera.EXPOSURE_OFFSET = UBOCamera.SCREEN_SCALE_OFFSET + 4;
            UBOCamera.MAIN_LIT_DIR_OFFSET = UBOCamera.EXPOSURE_OFFSET + 4;
            UBOCamera.MAIN_LIT_COLOR_OFFSET = UBOCamera.MAIN_LIT_DIR_OFFSET + 4;
            UBOCamera.AMBIENT_SKY_OFFSET = UBOCamera.MAIN_LIT_COLOR_OFFSET + 4;
            UBOCamera.AMBIENT_GROUND_OFFSET = UBOCamera.AMBIENT_SKY_OFFSET + 4;
            UBOCamera.GLOBAL_FOG_COLOR_OFFSET = UBOCamera.AMBIENT_GROUND_OFFSET + 4;
            UBOCamera.GLOBAL_FOG_BASE_OFFSET = UBOCamera.GLOBAL_FOG_COLOR_OFFSET + 4;
            UBOCamera.GLOBAL_FOG_ADD_OFFSET = UBOCamera.GLOBAL_FOG_BASE_OFFSET + 4;
            UBOCamera.NEAR_FAR_OFFSET = UBOCamera.GLOBAL_FOG_ADD_OFFSET + 4;
            UBOCamera.VIEW_PORT_OFFSET = UBOCamera.NEAR_FAR_OFFSET + 4;
            UBOCamera.COUNT = UBOCamera.VIEW_PORT_OFFSET + 4;
            UBOCamera.SIZE = UBOCamera.COUNT * 4;
            UBOCamera.NAME = 'CCCamera';
            UBOCamera.BINDING = PipelineGlobalBindings.UBO_CAMERA;
            UBOCamera.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOCamera.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
            UBOCamera.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOCamera.BINDING, UBOCamera.NAME, [new Uniform('cc_matView', Type.MAT4, 1), new Uniform('cc_matViewInv', Type.MAT4, 1), new Uniform('cc_matProj', Type.MAT4, 1), new Uniform('cc_matProjInv', Type.MAT4, 1), new Uniform('cc_matViewProj', Type.MAT4, 1), new Uniform('cc_matViewProjInv', Type.MAT4, 1), new Uniform('cc_cameraPos', Type.FLOAT4, 1), new Uniform('cc_surfaceTransform', Type.FLOAT4, 1), new Uniform('cc_screenScale', Type.FLOAT4, 1), new Uniform('cc_exposure', Type.FLOAT4, 1), new Uniform('cc_mainLitDir', Type.FLOAT4, 1), new Uniform('cc_mainLitColor', Type.FLOAT4, 1), new Uniform('cc_ambientSky', Type.FLOAT4, 1), new Uniform('cc_ambientGround', Type.FLOAT4, 1), new Uniform('cc_fogColor', Type.FLOAT4, 1), new Uniform('cc_fogBase', Type.FLOAT4, 1), new Uniform('cc_fogAdd', Type.FLOAT4, 1), new Uniform('cc_nearFar', Type.FLOAT4, 1), new Uniform('cc_viewPort', Type.FLOAT4, 1)], 1);
            globalDescriptorSetLayout.layouts[UBOCamera.NAME] = UBOCamera.LAYOUT;
            globalDescriptorSetLayout.bindings[UBOCamera.BINDING] = UBOCamera.DESCRIPTOR;
            class UBOShadow {}
            UBOShadow.MAT_LIGHT_VIEW_OFFSET = 0;
            UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET = UBOShadow.MAT_LIGHT_VIEW_OFFSET + 16;
            UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET = UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET + 16;
            UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET = UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 4;
            UBOShadow.SHADOW_PROJ_INFO_OFFSET = UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 4;
            UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET = UBOShadow.SHADOW_PROJ_INFO_OFFSET + 4;
            UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET = UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 4;
            UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET = UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 4;
            UBOShadow.SHADOW_COLOR_OFFSET = UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 4;
            UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET = UBOShadow.SHADOW_COLOR_OFFSET + 4;
            UBOShadow.COUNT = UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 4;
            UBOShadow.SIZE = UBOShadow.COUNT * 4;
            UBOShadow.NAME = 'CCShadow';
            UBOShadow.BINDING = PipelineGlobalBindings.UBO_SHADOW;
            UBOShadow.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOShadow.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
            UBOShadow.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOShadow.BINDING, UBOShadow.NAME, [new Uniform('cc_matLightView', Type.MAT4, 1), new Uniform('cc_matLightViewProj', Type.MAT4, 1), new Uniform('cc_shadowInvProjDepthInfo', Type.FLOAT4, 1), new Uniform('cc_shadowProjDepthInfo', Type.FLOAT4, 1), new Uniform('cc_shadowProjInfo', Type.FLOAT4, 1), new Uniform('cc_shadowNFLSInfo', Type.FLOAT4, 1), new Uniform('cc_shadowWHPBInfo', Type.FLOAT4, 1), new Uniform('cc_shadowLPNNInfo', Type.FLOAT4, 1), new Uniform('cc_shadowColor', Type.FLOAT4, 1), new Uniform('cc_planarNDInfo', Type.FLOAT4, 1)], 1);
            globalDescriptorSetLayout.layouts[UBOShadow.NAME] = UBOShadow.LAYOUT;
            globalDescriptorSetLayout.bindings[UBOShadow.BINDING] = UBOShadow.DESCRIPTOR;
            class UBOCSM {}
            UBOCSM.CSM_LEVEL_COUNT = 4;
            UBOCSM.CSM_VIEW_DIR_0_OFFSET = 0;
            UBOCSM.CSM_VIEW_DIR_1_OFFSET = UBOCSM.CSM_VIEW_DIR_0_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
            UBOCSM.CSM_VIEW_DIR_2_OFFSET = UBOCSM.CSM_VIEW_DIR_1_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
            UBOCSM.CSM_ATLAS_OFFSET = UBOCSM.CSM_VIEW_DIR_2_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
            UBOCSM.MAT_CSM_VIEW_PROJ_OFFSET = UBOCSM.CSM_ATLAS_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
            UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET = UBOCSM.MAT_CSM_VIEW_PROJ_OFFSET + 16 * UBOCSM.CSM_LEVEL_COUNT;
            UBOCSM.CSM_PROJ_INFO_OFFSET = UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
            UBOCSM.CSM_SPLITS_INFO_OFFSET = UBOCSM.CSM_PROJ_INFO_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
            UBOCSM.COUNT = UBOCSM.CSM_SPLITS_INFO_OFFSET + 4;
            UBOCSM.SIZE = UBOCSM.COUNT * 4;
            UBOCSM.NAME = 'CCCSM';
            UBOCSM.BINDING = PipelineGlobalBindings.UBO_CSM;
            UBOCSM.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOCSM.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
            UBOCSM.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOCSM.BINDING, UBOCSM.NAME, [new Uniform('cc_csmViewDir0', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmViewDir1', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmViewDir2', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmAtlas', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_matCSMViewProj', Type.MAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmProjDepthInfo', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmProjInfo', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmSplitsInfo', Type.FLOAT4, 1)], 1);
            globalDescriptorSetLayout.layouts[UBOCSM.NAME] = UBOCSM.LAYOUT;
            globalDescriptorSetLayout.bindings[UBOCSM.BINDING] = UBOCSM.DESCRIPTOR;
            const UNIFORM_SHADOWMAP_NAME = 'cc_shadowMap';
            const UNIFORM_SHADOWMAP_BINDING = PipelineGlobalBindings.SAMPLER_SHADOWMAP;
            const UNIFORM_SHADOWMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SHADOWMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_SHADOWMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SHADOWMAP_NAME, Type.SAMPLER2D, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_SHADOWMAP_NAME] = UNIFORM_SHADOWMAP_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_SHADOWMAP_BINDING] = UNIFORM_SHADOWMAP_DESCRIPTOR;
            const UNIFORM_ENVIRONMENT_NAME = 'cc_environment';
            const UNIFORM_ENVIRONMENT_BINDING = PipelineGlobalBindings.SAMPLER_ENVIRONMENT;
            const UNIFORM_ENVIRONMENT_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_ENVIRONMENT_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_ENVIRONMENT_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_ENVIRONMENT_BINDING, UNIFORM_ENVIRONMENT_NAME, Type.SAMPLER_CUBE, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_ENVIRONMENT_NAME] = UNIFORM_ENVIRONMENT_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_ENVIRONMENT_BINDING] = UNIFORM_ENVIRONMENT_DESCRIPTOR;
            const UNIFORM_DIFFUSEMAP_NAME = 'cc_diffuseMap';
            const UNIFORM_DIFFUSEMAP_BINDING = PipelineGlobalBindings.SAMPLER_DIFFUSEMAP;
            const UNIFORM_DIFFUSEMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_DIFFUSEMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_DIFFUSEMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_DIFFUSEMAP_BINDING, UNIFORM_DIFFUSEMAP_NAME, Type.SAMPLER_CUBE, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_DIFFUSEMAP_NAME] = UNIFORM_DIFFUSEMAP_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_DIFFUSEMAP_BINDING] = UNIFORM_DIFFUSEMAP_DESCRIPTOR;
            const UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME = 'cc_spotShadowMap';
            const UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING = PipelineGlobalBindings.SAMPLER_SPOT_SHADOW_MAP;
            const UNIFORM_SPOT_SHADOW_MAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_SPOT_SHADOW_MAP_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME, Type.SAMPLER2D, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME] = UNIFORM_SPOT_SHADOW_MAP_TEXTURE_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING] = UNIFORM_SPOT_SHADOW_MAP_TEXTURE_DESCRIPTOR;
            class UBOLocal {} exports('ey', UBOLocal);
            UBOLocal.MAT_WORLD_OFFSET = 0;
            UBOLocal.MAT_WORLD_IT_OFFSET = UBOLocal.MAT_WORLD_OFFSET + 16;
            UBOLocal.LIGHTINGMAP_UVPARAM = UBOLocal.MAT_WORLD_IT_OFFSET + 16;
            UBOLocal.LOCAL_SHADOW_BIAS = UBOLocal.LIGHTINGMAP_UVPARAM + 4;
            UBOLocal.COUNT = UBOLocal.LOCAL_SHADOW_BIAS + 4;
            UBOLocal.SIZE = UBOLocal.COUNT * 4;
            UBOLocal.NAME = 'CCLocal';
            UBOLocal.BINDING = ModelLocalBindings.UBO_LOCAL;
            UBOLocal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOLocal.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE);
            UBOLocal.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocal.BINDING, UBOLocal.NAME, [new Uniform('cc_matWorld', Type.MAT4, 1), new Uniform('cc_matWorldIT', Type.MAT4, 1), new Uniform('cc_lightingMapUVParam', Type.FLOAT4, 1), new Uniform('cc_localShadowBias', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOLocal.NAME] = UBOLocal.LAYOUT;
            localDescriptorSetLayout.bindings[UBOLocal.BINDING] = UBOLocal.DESCRIPTOR;
            class UBOWorldBound {}
            UBOWorldBound.WORLD_BOUND_CENTER = 0;
            UBOWorldBound.WORLD_BOUND_HALF_EXTENTS = UBOWorldBound.WORLD_BOUND_CENTER + 4;
            UBOWorldBound.COUNT = UBOWorldBound.WORLD_BOUND_HALF_EXTENTS + 4;
            UBOWorldBound.SIZE = UBOWorldBound.COUNT * 4;
            UBOWorldBound.NAME = 'CCWorldBound';
            UBOWorldBound.BINDING = ModelLocalBindings.UBO_LOCAL;
            UBOWorldBound.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOWorldBound.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE);
            UBOWorldBound.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOWorldBound.BINDING, UBOWorldBound.NAME, [new Uniform('cc_worldBoundCenter', Type.FLOAT4, 1), new Uniform('cc_worldBoundHalfExtents', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOWorldBound.NAME] = UBOWorldBound.LAYOUT;
            localDescriptorSetLayout.bindings[UBOWorldBound.BINDING] = UBOWorldBound.DESCRIPTOR;
            const INST_MAT_WORLD = 'a_matWorld0';
            class UBOLocalBatched {}
            UBOLocalBatched.BATCHING_COUNT = 10;
            UBOLocalBatched.MAT_WORLDS_OFFSET = 0;
            UBOLocalBatched.COUNT = 16 * UBOLocalBatched.BATCHING_COUNT;
            UBOLocalBatched.SIZE = UBOLocalBatched.COUNT * 4;
            UBOLocalBatched.NAME = 'CCLocalBatched';
            UBOLocalBatched.BINDING = ModelLocalBindings.UBO_LOCAL;
            UBOLocalBatched.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOLocalBatched.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE);
            UBOLocalBatched.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocalBatched.BINDING, UBOLocalBatched.NAME, [new Uniform('cc_matWorlds', Type.MAT4, UBOLocalBatched.BATCHING_COUNT)], 1);
            localDescriptorSetLayout.layouts[UBOLocalBatched.NAME] = UBOLocalBatched.LAYOUT;
            localDescriptorSetLayout.bindings[UBOLocalBatched.BINDING] = UBOLocalBatched.DESCRIPTOR;
            class UBOForwardLight {}
            UBOForwardLight.LIGHTS_PER_PASS = 1;
            UBOForwardLight.LIGHT_POS_OFFSET = 0;
            UBOForwardLight.LIGHT_COLOR_OFFSET = UBOForwardLight.LIGHT_POS_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
            UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET = UBOForwardLight.LIGHT_COLOR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
            UBOForwardLight.LIGHT_DIR_OFFSET = UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
            UBOForwardLight.COUNT = UBOForwardLight.LIGHT_DIR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
            UBOForwardLight.SIZE = UBOForwardLight.COUNT * 4;
            UBOForwardLight.NAME = 'CCForwardLight';
            UBOForwardLight.BINDING = ModelLocalBindings.UBO_FORWARD_LIGHTS;
            UBOForwardLight.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOForwardLight.BINDING, DescriptorType.DYNAMIC_UNIFORM_BUFFER, 1, ShaderStageFlagBit.FRAGMENT);
            UBOForwardLight.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOForwardLight.BINDING, UBOForwardLight.NAME, [new Uniform('cc_lightPos', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightColor', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightSizeRangeAngle', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightDir', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS)], 1);
            localDescriptorSetLayout.layouts[UBOForwardLight.NAME] = UBOForwardLight.LAYOUT;
            localDescriptorSetLayout.bindings[UBOForwardLight.BINDING] = UBOForwardLight.DESCRIPTOR;
            class UBODeferredLight {}
            UBODeferredLight.LIGHTS_PER_PASS = 10;
            const JOINT_UNIFORM_CAPACITY = 30;
            class UBOSkinningTexture {}
            UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET = 0;
            UBOSkinningTexture.COUNT = UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET + 4;
            UBOSkinningTexture.SIZE = UBOSkinningTexture.COUNT * 4;
            UBOSkinningTexture.NAME = 'CCSkinningTexture';
            UBOSkinningTexture.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
            UBOSkinningTexture.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinningTexture.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOSkinningTexture.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningTexture.BINDING, UBOSkinningTexture.NAME, [new Uniform('cc_jointTextureInfo', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOSkinningTexture.NAME] = UBOSkinningTexture.LAYOUT;
            localDescriptorSetLayout.bindings[UBOSkinningTexture.BINDING] = UBOSkinningTexture.DESCRIPTOR;
            class UBOSkinningAnimation {} exports('fH', UBOSkinningAnimation);
            UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET = 0;
            UBOSkinningAnimation.COUNT = UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET + 4;
            UBOSkinningAnimation.SIZE = UBOSkinningAnimation.COUNT * 4;
            UBOSkinningAnimation.NAME = 'CCSkinningAnimation';
            UBOSkinningAnimation.BINDING = ModelLocalBindings.UBO_SKINNING_ANIMATION;
            UBOSkinningAnimation.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinningAnimation.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOSkinningAnimation.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningAnimation.BINDING, UBOSkinningAnimation.NAME, [new Uniform('cc_jointAnimInfo', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOSkinningAnimation.NAME] = UBOSkinningAnimation.LAYOUT;
            localDescriptorSetLayout.bindings[UBOSkinningAnimation.BINDING] = UBOSkinningAnimation.DESCRIPTOR;
            const INST_JOINT_ANIM_INFO = 'a_jointAnimInfo';
            class UBOSkinning {
              static get JOINT_UNIFORM_CAPACITY() {
                return UBOSkinning._jointUniformCapacity;
              }

              static get COUNT() {
                return UBOSkinning._count;
              }

              static get SIZE() {
                return UBOSkinning._size;
              }

              static initLayout(capacity) {
                UBOSkinning._jointUniformCapacity = capacity;
                UBOSkinning._count = capacity * 12;
                UBOSkinning._size = UBOSkinning._count * 4;
                UBOSkinning.LAYOUT.members[0].count = capacity * 3;
              }

            }
            UBOSkinning._jointUniformCapacity = 0;
            UBOSkinning._count = 0;
            UBOSkinning._size = 0;
            UBOSkinning.NAME = 'CCSkinning';
            UBOSkinning.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
            UBOSkinning.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinning.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOSkinning.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinning.BINDING, UBOSkinning.NAME, [new Uniform('cc_joints', Type.FLOAT4, 1)], 1);
            function localDescriptorSetLayout_ResizeMaxJoints(maxCount) {
              UBOSkinning.initLayout(maxCount);
              localDescriptorSetLayout.layouts[UBOSkinning.NAME] = UBOSkinning.LAYOUT;
              localDescriptorSetLayout.bindings[UBOSkinning.BINDING] = UBOSkinning.DESCRIPTOR;
            }
            class UBOMorph {}
            UBOMorph.MAX_MORPH_TARGET_COUNT = 60;
            UBOMorph.OFFSET_OF_WEIGHTS = 0;
            UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH = 4 * UBOMorph.MAX_MORPH_TARGET_COUNT;
            UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH + 4;
            UBOMorph.OFFSET_OF_VERTICES_COUNT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT + 4;
            UBOMorph.COUNT_BASE_4_BYTES = 4 * Math.ceil(UBOMorph.MAX_MORPH_TARGET_COUNT / 4) + 4;
            UBOMorph.SIZE = UBOMorph.COUNT_BASE_4_BYTES * 4;
            UBOMorph.NAME = 'CCMorph';
            UBOMorph.BINDING = ModelLocalBindings.UBO_MORPH;
            UBOMorph.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOMorph.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOMorph.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOMorph.BINDING, UBOMorph.NAME, [new Uniform('cc_displacementWeights', Type.FLOAT4, UBOMorph.MAX_MORPH_TARGET_COUNT / 4), new Uniform('cc_displacementTextureInfo', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOMorph.NAME] = UBOMorph.LAYOUT;
            localDescriptorSetLayout.bindings[UBOMorph.BINDING] = UBOMorph.DESCRIPTOR;
            class UBOUILocal {}
            UBOUILocal.NAME = 'CCUILocal';
            UBOUILocal.BINDING = ModelLocalBindings.UBO_UI_LOCAL;
            UBOUILocal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOUILocal.BINDING, DescriptorType.DYNAMIC_UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOUILocal.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOUILocal.BINDING, UBOUILocal.NAME, [new Uniform('cc_local_data', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOUILocal.NAME] = UBOUILocal.LAYOUT;
            localDescriptorSetLayout.bindings[UBOUILocal.BINDING] = UBOUILocal.DESCRIPTOR;
            const UNIFORM_JOINT_TEXTURE_NAME = 'cc_jointTexture';
            const UNIFORM_JOINT_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_JOINTS;
            const UNIFORM_JOINT_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_JOINT_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
            const UNIFORM_JOINT_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_JOINT_TEXTURE_BINDING, UNIFORM_JOINT_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_JOINT_TEXTURE_NAME] = UNIFORM_JOINT_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_JOINT_TEXTURE_BINDING] = UNIFORM_JOINT_TEXTURE_DESCRIPTOR;
            const UNIFORM_REALTIME_JOINT_TEXTURE_NAME = 'cc_realtimeJoint';
            const UNIFORM_REALTIME_JOINT_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_JOINTS;
            const UNIFORM_REALTIME_JOINT_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REALTIME_JOINT_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
            const UNIFORM_REALTIME_JOINT_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REALTIME_JOINT_TEXTURE_BINDING, UNIFORM_REALTIME_JOINT_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_REALTIME_JOINT_TEXTURE_NAME] = UNIFORM_REALTIME_JOINT_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_REALTIME_JOINT_TEXTURE_BINDING] = UNIFORM_REALTIME_JOINT_TEXTURE_DESCRIPTOR;
            const UNIFORM_POSITION_MORPH_TEXTURE_NAME = 'cc_PositionDisplacements';
            const UNIFORM_POSITION_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_POSITION;
            const UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_POSITION_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
            const UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_POSITION_MORPH_TEXTURE_BINDING, UNIFORM_POSITION_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_POSITION_MORPH_TEXTURE_NAME] = UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_POSITION_MORPH_TEXTURE_BINDING] = UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR;
            const UNIFORM_NORMAL_MORPH_TEXTURE_NAME = 'cc_NormalDisplacements';
            const UNIFORM_NORMAL_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_NORMAL;
            const UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_NORMAL_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
            const UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_NORMAL_MORPH_TEXTURE_BINDING, UNIFORM_NORMAL_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_NORMAL_MORPH_TEXTURE_NAME] = UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_NORMAL_MORPH_TEXTURE_BINDING] = UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR;
            const UNIFORM_TANGENT_MORPH_TEXTURE_NAME = 'cc_TangentDisplacements';
            const UNIFORM_TANGENT_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_TANGENT;
            const UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_TANGENT_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
            const UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_TANGENT_MORPH_TEXTURE_BINDING, UNIFORM_TANGENT_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_TANGENT_MORPH_TEXTURE_NAME] = UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_TANGENT_MORPH_TEXTURE_BINDING] = UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR;
            const UNIFORM_LIGHTMAP_TEXTURE_NAME = 'cc_lightingMap';
            const UNIFORM_LIGHTMAP_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_LIGHTMAP;
            const UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_LIGHTMAP_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_LIGHTMAP_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_LIGHTMAP_TEXTURE_BINDING, UNIFORM_LIGHTMAP_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_LIGHTMAP_TEXTURE_NAME] = UNIFORM_LIGHTMAP_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_LIGHTMAP_TEXTURE_BINDING] = UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR;
            const UNIFORM_SPRITE_TEXTURE_NAME = 'cc_spriteTexture';
            const UNIFORM_SPRITE_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_SPRITE;
            const UNIFORM_SPRITE_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SPRITE_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_SPRITE_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_SPRITE_TEXTURE_BINDING, UNIFORM_SPRITE_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_SPRITE_TEXTURE_NAME] = UNIFORM_SPRITE_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_SPRITE_TEXTURE_BINDING] = UNIFORM_SPRITE_TEXTURE_DESCRIPTOR;
            const UNIFORM_REFLECTION_TEXTURE_NAME = 'cc_reflectionTexture';
            const UNIFORM_REFLECTION_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_REFLECTION;
            const UNIFORM_REFLECTION_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_REFLECTION_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REFLECTION_TEXTURE_BINDING, UNIFORM_REFLECTION_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_TEXTURE_NAME] = UNIFORM_REFLECTION_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_TEXTURE_BINDING] = UNIFORM_REFLECTION_TEXTURE_DESCRIPTOR;
            const UNIFORM_REFLECTION_STORAGE_NAME = 'cc_reflectionStorage';
            const UNIFORM_REFLECTION_STORAGE_BINDING = ModelLocalBindings.STORAGE_REFLECTION;
            const UNIFORM_REFLECTION_STORAGE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_STORAGE_BINDING, DescriptorType.STORAGE_IMAGE, 1, ShaderStageFlagBit.COMPUTE);
            const UNIFORM_REFLECTION_STORAGE_LAYOUT = new UniformStorageImage(SetIndex.LOCAL, UNIFORM_REFLECTION_STORAGE_BINDING, UNIFORM_REFLECTION_STORAGE_NAME, Type.IMAGE2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_STORAGE_NAME] = UNIFORM_REFLECTION_STORAGE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_STORAGE_BINDING] = UNIFORM_REFLECTION_STORAGE_DESCRIPTOR;
            const CAMERA_DEFAULT_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.GIZMOS, Layers.BitMask.EDITOR, Layers.BitMask.SCENE_GIZMO, Layers.BitMask.PROFILER]);
            const CAMERA_EDITOR_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.PROFILER]);
            const MODEL_ALWAYS_MASK = Layers.Enum.ALL;
            function supportsR16HalfFloatTexture(device) {
              return (device.getFormatFeatures(Format.R16F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE)) === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE);
            }
            function supportsR32FloatTexture(device) {
              return (device.getFormatFeatures(Format.R32F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE)) === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE);
            }

            var define$1 = /*#__PURE__*/Object.freeze({
                __proto__: null,
                PIPELINE_FLOW_MAIN: PIPELINE_FLOW_MAIN,
                PIPELINE_FLOW_FORWARD: PIPELINE_FLOW_FORWARD,
                PIPELINE_FLOW_SHADOW: PIPELINE_FLOW_SHADOW,
                PIPELINE_FLOW_SMAA: PIPELINE_FLOW_SMAA,
                PIPELINE_FLOW_TONEMAP: PIPELINE_FLOW_TONEMAP,
                get RenderPassStage () { return RenderPassStage; },
                get RenderPriority () { return RenderPriority; },
                globalDescriptorSetLayout: globalDescriptorSetLayout,
                localDescriptorSetLayout: localDescriptorSetLayout,
                get PipelineGlobalBindings () { return PipelineGlobalBindings; },
                get ModelLocalBindings () { return ModelLocalBindings; },
                get SetIndex () { return SetIndex; },
                bindingMappingInfo: bindingMappingInfo,
                UBOGlobal: UBOGlobal,
                UBOCamera: UBOCamera,
                UBOShadow: UBOShadow,
                UBOCSM: UBOCSM,
                UNIFORM_SHADOWMAP_BINDING: UNIFORM_SHADOWMAP_BINDING,
                UNIFORM_ENVIRONMENT_BINDING: UNIFORM_ENVIRONMENT_BINDING,
                UNIFORM_DIFFUSEMAP_BINDING: UNIFORM_DIFFUSEMAP_BINDING,
                UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING: UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING,
                UBOLocal: UBOLocal,
                UBOWorldBound: UBOWorldBound,
                INST_MAT_WORLD: INST_MAT_WORLD,
                UBOLocalBatched: UBOLocalBatched,
                UBOForwardLight: UBOForwardLight,
                UBODeferredLight: UBODeferredLight,
                JOINT_UNIFORM_CAPACITY: JOINT_UNIFORM_CAPACITY,
                UBOSkinningTexture: UBOSkinningTexture,
                UBOSkinningAnimation: UBOSkinningAnimation,
                INST_JOINT_ANIM_INFO: INST_JOINT_ANIM_INFO,
                UBOSkinning: UBOSkinning,
                localDescriptorSetLayout_ResizeMaxJoints: localDescriptorSetLayout_ResizeMaxJoints,
                UBOMorph: UBOMorph,
                UBOUILocal: UBOUILocal,
                UNIFORM_JOINT_TEXTURE_BINDING: UNIFORM_JOINT_TEXTURE_BINDING,
                UNIFORM_REALTIME_JOINT_TEXTURE_BINDING: UNIFORM_REALTIME_JOINT_TEXTURE_BINDING,
                UNIFORM_POSITION_MORPH_TEXTURE_BINDING: UNIFORM_POSITION_MORPH_TEXTURE_BINDING,
                UNIFORM_NORMAL_MORPH_TEXTURE_BINDING: UNIFORM_NORMAL_MORPH_TEXTURE_BINDING,
                UNIFORM_TANGENT_MORPH_TEXTURE_BINDING: UNIFORM_TANGENT_MORPH_TEXTURE_BINDING,
                UNIFORM_LIGHTMAP_TEXTURE_BINDING: UNIFORM_LIGHTMAP_TEXTURE_BINDING,
                UNIFORM_SPRITE_TEXTURE_BINDING: UNIFORM_SPRITE_TEXTURE_BINDING,
                UNIFORM_REFLECTION_TEXTURE_BINDING: UNIFORM_REFLECTION_TEXTURE_BINDING,
                UNIFORM_REFLECTION_STORAGE_BINDING: UNIFORM_REFLECTION_STORAGE_BINDING,
                CAMERA_DEFAULT_MASK: CAMERA_DEFAULT_MASK,
                CAMERA_EDITOR_MASK: CAMERA_EDITOR_MASK,
                MODEL_ALWAYS_MASK: MODEL_ALWAYS_MASK,
                supportsR16HalfFloatTexture: supportsR16HalfFloatTexture,
                supportsR32FloatTexture: supportsR32FloatTexture
            });
            exports('gB', define$1);

            let PipelineEventType;

            (function (PipelineEventType) {
              PipelineEventType["RENDER_FRAME_BEGIN"] = "render-frame-begin";
              PipelineEventType["RENDER_FRAME_END"] = "render-frame-end";
              PipelineEventType["RENDER_CAMERA_BEGIN"] = "render-camera-begin";
              PipelineEventType["RENDER_CAMERA_END"] = "render-camera-end";
              PipelineEventType["ATTACHMENT_SCALE_CAHNGED"] = "attachment-scale-changed";
            })(PipelineEventType || (PipelineEventType = exports('fK', {})));

            nr.getPhaseID = getPhaseID;
            const RenderPipeline = exports('gC', nr.RenderPipeline);
            const RenderFlow = exports('gD', nr.RenderFlow);
            const RenderStage = exports('gE', nr.RenderStage);
            const InstancedBuffer = exports('gF', nr.InstancedBuffer);
            const PipelineStateManager = exports('gG', nr.PipelineStateManager);
            const ForwardPipeline = exports('gH', nr.ForwardPipeline);
            const ForwardFlow = exports('gI', nr.ForwardFlow);
            const ShadowFlow = exports('gJ', nr.ShadowFlow);
            const ForwardStage = exports('gK', nr.ForwardStage);
            const ShadowStage = exports('gL', nr.ShadowStage);
            const DeferredPipeline = exports('gM', nr.DeferredPipeline);
            const MainFlow = exports('gN', nr.MainFlow);
            const LightingStage = exports('gO', nr.LightingStage);
            const PostProcessStage = exports('gP', nr.PostProcessStage);
            const GbufferStage = exports('gQ', nr.GbufferStage);
            const BloomStage = exports('gR', nr.BloomStage);
            let getOrCreatePipelineState = nr.PipelineStateManager.getOrCreatePipelineState;

            nr.PipelineStateManager.getOrCreatePipelineState = function (device, pass, shader, renderPass, ia) {
              return getOrCreatePipelineState(pass, shader, renderPass, ia);
            };

            const forwardPipelineProto = ForwardPipeline.prototype;

            forwardPipelineProto._ctor = function () {
              this._tag = 0;
              this._flows = [];
            };

            forwardPipelineProto.init = function () {
              for (let i = 0; i < this._flows.length; i++) {
                this._flows[i].init(this);
              }

              const info = new nr.RenderPipelineInfo(this._tag, this._flows);
              this.initialize(info);
            };

            const oldForwardOnLoaded = forwardPipelineProto.onLoaded;

            forwardPipelineProto.onLoaded = function () {
              if (oldForwardOnLoaded) oldForwardOnLoaded.call(this);

              for (let i = 0; i < this._flows.length; i++) {
                this._flows[i].init(this);
              }

              const info = new nr.RenderPipelineInfo(this._tag, this._flows);
              this.initialize(info);
            };

            const forwardFlowProto = ForwardFlow.prototype;

            forwardFlowProto._ctor = function () {
              this._name = 0;
              this._priority = 0;
              this._tag = 0;
              this._stages = [];
            };

            forwardFlowProto.init = function (pipeline) {
              for (let i = 0; i < this._stages.length; i++) {
                this._stages[i].init(pipeline);
              }

              const info = new nr.RenderFlowInfo(this._name, this._priority, this._tag, this._stages);
              this.initialize(info);
            };

            const shadowFlowProto = ShadowFlow.prototype;

            shadowFlowProto._ctor = function () {
              this._name = 0;
              this._priority = 0;
              this._tag = 0;
              this._stages = [];
            };

            shadowFlowProto.init = function (pipeline) {
              for (let i = 0; i < this._stages.length; i++) {
                this._stages[i].init(pipeline);
              }

              const info = new nr.RenderFlowInfo(this._name, this._priority, this._tag, this._stages);
              this.initialize(info);
            };

            const forwardStageProto = ForwardStage.prototype;

            forwardStageProto._ctor = function () {
              this._name = 0;
              this._priority = 0;
              this._tag = 0;
              this.renderQueues = [];
            };

            forwardStageProto.init = function (pipeline) {
              const queues = [];

              for (let i = 0; i < this.renderQueues.length; i++) {
                queues.push(this.renderQueues[i].init());
              }

              const info = new nr.RenderStageInfo(this._name, this._priority, this._tag, queues);
              this.initialize(info);
            };

            const shadowStageProto = ShadowStage.prototype;

            shadowStageProto._ctor = function () {
              this._name = 0;
              this._priority = 0;
              this._tag = 0;
            };

            shadowStageProto.init = function (pipeline) {
              const info = new nr.RenderStageInfo(this._name, this._priority, this._tag, []);
              this.initialize(info);
            };

            class RenderQueueDesc {
              constructor() {
                this.isTransparent = false;
                this.sortMode = 0;
                this.stages = [];
                this.isTransparent = false;
                this.sortMode = 0;
                this.stages = [];
              }

              init() {
                return new nr.RenderQueueDesc(this.isTransparent, this.sortMode, this.stages);
              }

            } exports('gS', RenderQueueDesc);
            const deferredPipelineProto = DeferredPipeline.prototype;

            deferredPipelineProto._ctor = function () {
              this._tag = 0;
              this._flows = [];
              this.renderTextures = [];
              this.materials = [];
            };

            const oldDeferredOnLoaded = deferredPipelineProto.onLoaded;

            deferredPipelineProto.onLoaded = function () {
              if (oldDeferredOnLoaded) oldDeferredOnLoaded.call(this);

              for (let i = 0; i < this._flows.length; i++) {
                this._flows[i].init(this);
              }

              let info = new nr.RenderPipelineInfo(this._tag, this._flows);
              this.initialize(info);
            };

            const mainFlowProto = MainFlow.prototype;

            mainFlowProto._ctor = function () {
              this._name = 0;
              this._priority = 0;
              this._tag = 0;
              this._stages = [];
            };

            mainFlowProto.init = function (pipeline) {
              for (let i = 0; i < this._stages.length; i++) {
                this._stages[i].init(pipeline);
              }

              let info = new nr.RenderFlowInfo(this._name, this._priority, this._tag, this._stages);
              this.initialize(info);
            };

            const gbufferStageProto = GbufferStage.prototype;

            gbufferStageProto._ctor = function () {
              this._name = 0;
              this._priority = 0;
              this._tag = 0;
              this.renderQueues = [];
            };

            gbufferStageProto.init = function (pipeline) {
              const queues = [];

              for (let i = 0; i < this.renderQueues.length; i++) {
                queues.push(this.renderQueues[i].init());
              }

              let info = new nr.RenderStageInfo(this._name, this._priority, this._tag, queues);
              this.initialize(info);
            };

            const lightingStageProto = LightingStage.prototype;

            lightingStageProto._ctor = function () {
              this._name = 0;
              this._priority = 0;
              this._tag = 0;
              this.renderQueues = [];
              this._deferredMaterial = null;
            };

            lightingStageProto.init = function (pipeline) {
              const queues = [];

              for (let i = 0; i < this.renderQueues.length; i++) {
                queues.push(this.renderQueues[i].init());
              }

              pipeline.pipelineSceneData.deferredLightingMaterial = this._deferredMaterial;
              let info = new nr.RenderStageInfo(this._name, this._priority, this._tag, queues);
              this.initialize(info);
            };

            const bloomStageProto = BloomStage.prototype;

            bloomStageProto._ctor = function () {
              this._name = 0;
              this._priority = 0;
              this._tag = 0;
              this.renderQueues = [];
              this._bloomMaterial = null;
            };

            bloomStageProto.init = function (pipeline) {
              const queues = [];

              for (let i = 0; i < this.renderQueues.length; i++) {
                queues.push(this.renderQueues[i].init());
              }

              pipeline.pipelineSceneData.bloomMaterial = this._bloomMaterial;
              let info = new nr.RenderStageInfo(this._name, this._priority, this._tag, queues);
              this.initialize(info);
            };

            const postProcessStageProto = PostProcessStage.prototype;

            postProcessStageProto._ctor = function () {
              this._name = 0;
              this._priority = 0;
              this._tag = 0;
              this.renderQueues = [];
              this._postProcessMaterial = null;
            };

            postProcessStageProto.init = function (pipeline) {
              const queues = [];

              for (let i = 0; i < this.renderQueues.length; i++) {
                queues.push(this.renderQueues[i].init());
              }

              pipeline.pipelineSceneData.postProcessMaterial = this._postProcessMaterial;
              let info = new nr.RenderStageInfo(this._name, this._priority, this._tag, queues);
              this.initialize(info);
            };

            setClassName('DeferredPipeline', DeferredPipeline);
            setClassName('MainFlow', MainFlow);
            setClassName('GbufferStage', GbufferStage);
            setClassName('LightingStage', LightingStage);
            setClassName('BloomStage', BloomStage);
            setClassName('PostProcessStage', PostProcessStage);
            setClassName('ForwardPipeline', ForwardPipeline);
            setClassName('ForwardFlow', ForwardFlow);
            setClassName('ShadowFlow', ShadowFlow);
            setClassName('ForwardStage', ForwardStage);
            setClassName('ShadowStage', ShadowStage);
            setClassName('RenderQueueDesc', RenderQueueDesc);

            const v2_0 = new Vec2();
            class SplashScreen {
              get isFinished() {
                return this._curTime >= this.settings.totalTime;
              }

              set curTime(val) {
                this._curTime = val;
              }

              get curTime() {
                return this._curTime;
              }

              init() {
                var _settings$querySettin, _settings$querySettin2, _settings$querySettin3, _settings$querySettin4, _settings$querySettin5, _settings$querySettin6, _settings$querySettin7;

                this.settings = {
                  enabled: (_settings$querySettin = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'enabled')) !== null && _settings$querySettin !== void 0 ? _settings$querySettin : true,
                  totalTime: (_settings$querySettin2 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'totalTime')) !== null && _settings$querySettin2 !== void 0 ? _settings$querySettin2 : 3000,
                  base64src: (_settings$querySettin3 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'base64src')) !== null && _settings$querySettin3 !== void 0 ? _settings$querySettin3 : '',
                  effect: (_settings$querySettin4 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'effect')) !== null && _settings$querySettin4 !== void 0 ? _settings$querySettin4 : 'FADE-INOUT',
                  clearColor: (_settings$querySettin5 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'clearColor')) !== null && _settings$querySettin5 !== void 0 ? _settings$querySettin5 : new Color$1(0.88, 0.88, 0.88, 1),
                  displayRatio: (_settings$querySettin6 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'displayRatio')) !== null && _settings$querySettin6 !== void 0 ? _settings$querySettin6 : 0.4,
                  displayWatermark: (_settings$querySettin7 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'displayWatermark')) !== null && _settings$querySettin7 !== void 0 ? _settings$querySettin7 : true
                };
                this._curTime = 0;

                if ( !this.settings.enabled || this.settings.base64src === '' || this.settings.totalTime <= 0) {
                  this.settings.totalTime = 0;
                } else {
                  this.device = legacyCC.director.root.device;
                  this.swapchain = legacyCC.director.root.mainWindow.swapchain;
                  this.framebuffer = legacyCC.director.root.mainWindow.framebuffer;
                  this.preInit();
                  if (this.settings.displayWatermark) this.initWarterMark();
                  return new Promise((resolve, reject) => {
                    this.logoImage = new Image();

                    this.logoImage.onload = () => {
                      this.initLogo();
                      resolve();
                    };

                    this.logoImage.onerror = () => {
                      reject();
                    };

                    this.logoImage.src = this.settings.base64src;
                  });
                }

                return Promise.resolve();
              }

              preInit() {
                const clearColor = this.settings.clearColor;
                this.clearColors = [new Color$1(clearColor.x, clearColor.y, clearColor.z, clearColor.w)];
                const {
                  device,
                  swapchain
                } = this;
                this.renderArea = new Rect$1(0, 0, swapchain.width, swapchain.height);
                this.cmdBuff = device.commandBuffer;
                const verts = new Float32Array([0.5, 0.5, 1, 0, -0.5, 0.5, 0, 0, 0.5, -0.5, 1, 1, -0.5, -0.5, 0, 1]);
                const vbStride = Float32Array.BYTES_PER_ELEMENT * 4;
                const vbSize = vbStride * 4;
                this.vertexBuffers = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, vbSize, vbStride));
                this.vertexBuffers.update(verts);
                const indices = new Uint16Array([0, 1, 2, 1, 3, 2]);
                const ibStride = Uint16Array.BYTES_PER_ELEMENT;
                const ibSize = ibStride * 6;
                this.indicesBuffers = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, ibSize, ibStride));
                this.indicesBuffers.update(indices);
                const attributes = [new Attribute('a_position', Format.RG32F), new Attribute('a_texCoord', Format.RG32F)];
                const IAInfo = new InputAssemblerInfo(attributes, [this.vertexBuffers], this.indicesBuffers);
                this.quadAssmebler = device.createInputAssembler(IAInfo);
                this.projection = new Mat4();
                Mat4.ortho(this.projection, -1, 1, -1, 1, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, swapchain.surfaceTransform);
              }

              update(deltaTime) {
                const settings = this.settings;
                const {
                  device,
                  swapchain
                } = this;
                Mat4.ortho(this.projection, -1, 1, -1, 1, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, swapchain.surfaceTransform);
                const dw = swapchain.width;
                const dh = swapchain.height;
                const refW = dw < dh ? dw : dh;
                this._curTime += deltaTime * 1000;
                const percent = clamp01(this._curTime / settings.totalTime);
                let u_p = cubicOut(percent);
                if (settings.effect === 'NONE') u_p = 1.0;
                const logoTW = this.logoTexture.width;
                const logoTH = this.logoTexture.height;
                const logoW = refW * settings.displayRatio;
                let scaleX = logoW * logoTW / logoTH;
                let scaleY = logoW;

                if (swapchain.surfaceTransform === SurfaceTransform.ROTATE_90 || swapchain.surfaceTransform === SurfaceTransform.ROTATE_270) {
                  scaleX = logoW * dw / dh;
                  scaleY = logoW * logoTH / logoTW * dh / dw;
                }

                this.logoMat.setProperty('resolution', v2_0.set(dw, dh), 0);
                this.logoMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
                this.logoMat.setProperty('translate', v2_0.set(dw * 0.5, dh * 0.5), 0);
                this.logoMat.setProperty('percent', u_p);
                this.logoMat.setProperty('u_projection', this.projection);
                this.logoMat.passes[0].update();

                if (settings.displayWatermark && this.watermarkMat) {
                  const wartermarkW = refW * 0.5;
                  const wartermarkTW = this.watermarkTexture.width;
                  const wartermarkTH = this.watermarkTexture.height;
                  let scaleX = wartermarkW;
                  let scaleY = wartermarkW * wartermarkTH / wartermarkTW;

                  if (swapchain.surfaceTransform === SurfaceTransform.ROTATE_90 || swapchain.surfaceTransform === SurfaceTransform.ROTATE_270) {
                    scaleX = wartermarkW * 0.5;
                    scaleY = wartermarkW * dw / dh * 0.5;
                  }

                  this.watermarkMat.setProperty('resolution', v2_0.set(dw, dh), 0);
                  this.watermarkMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
                  this.watermarkMat.setProperty('translate', v2_0.set(dw * 0.5, dh * 0.1), 0);
                  this.watermarkMat.setProperty('percent', u_p);
                  this.watermarkMat.setProperty('u_projection', this.projection);
                  this.watermarkMat.passes[0].update();
                }

                this.frame();
              }

              initLogo() {
                const device = this.device;
                this.logoMat = new Material();
                this.logoMat.initialize({
                  effectName: 'util/splash-screen'
                });
                const samplerInfo = new SamplerInfo();
                samplerInfo.addressU = Address.CLAMP;
                samplerInfo.addressV = Address.CLAMP;
                samplerInfo.addressW = Address.CLAMP;
                this.sampler = device.getSampler(samplerInfo);
                this.logoTexture = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, this.logoImage.width, this.logoImage.height));
                const pass = this.logoMat.passes[0];
                const binding = pass.getBinding('mainTexture');
                pass.bindTexture(binding, this.logoTexture);
                this.shader = pass.getShaderVariant();
                const descriptorSet = pass.descriptorSet;
                descriptorSet.bindSampler(binding, this.sampler);
                descriptorSet.update();
                const region = new BufferTextureCopy();
                region.texExtent.width = this.logoImage.width;
                region.texExtent.height = this.logoImage.height;
                region.texExtent.depth = 1;
                device.copyTexImagesToTexture([this.logoImage], this.logoTexture, [region]);
              }

              initWarterMark() {
                const wartemarkImg = document.createElement('canvas');
                wartemarkImg.width = 330;
                wartemarkImg.height = 30;
                wartemarkImg.style.width = `${wartemarkImg.width}`;
                wartemarkImg.style.height = `${wartemarkImg.height}`;
                const ctx = wartemarkImg.getContext('2d');
                ctx.font = `${18}px Arial`;
                ctx.textBaseline = 'top';
                ctx.textAlign = 'left';
                ctx.fillStyle = '`#424242`';
                const text = 'Powered by Cocos Creator';
                const textMetrics = ctx.measureText(text);
                ctx.fillText(text, (330 - textMetrics.width) / 2, 6);
                const region = new BufferTextureCopy();
                region.texExtent.width = wartemarkImg.width;
                region.texExtent.height = wartemarkImg.height;
                region.texExtent.depth = 1;
                this.watermarkTexture = this.device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, wartemarkImg.width, wartemarkImg.height));
                this.device.copyTexImagesToTexture([wartemarkImg], this.watermarkTexture, [region]);
                this.watermarkMat = new Material();
                this.watermarkMat.initialize({
                  effectName: 'util/splash-screen'
                });
                const pass = this.watermarkMat.passes[0];
                const binding = pass.getBinding('mainTexture');
                pass.bindTexture(binding, this.watermarkTexture);
                pass.descriptorSet.update();
              }

              frame() {
                const {
                  device,
                  swapchain
                } = this;

                if (!sys.isXR || xr.entry.isRenderAllowable()) {
                  const renderSize = sys.isXR ? 2 : 1;

                  for (let xrEye = 0; xrEye < renderSize; xrEye++) {
                    if (sys.isXR) {
                      xr.entry.renderLoopStart(xrEye);
                    }

                    device.acquire([swapchain]);
                    const cmdBuff = this.cmdBuff;
                    const framebuffer = this.framebuffer;
                    const renderArea = this.renderArea;
                    renderArea.width = swapchain.width;
                    renderArea.height = swapchain.height;
                    cmdBuff.begin();
                    cmdBuff.beginRenderPass(framebuffer.renderPass, framebuffer, renderArea, this.clearColors, 1.0, 0);
                    const logoPass = this.logoMat.passes[0];
                    const logoPso = PipelineStateManager.getOrCreatePipelineState(device, logoPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
                    cmdBuff.bindPipelineState(logoPso);
                    cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, logoPass.descriptorSet);
                    cmdBuff.bindInputAssembler(this.quadAssmebler);
                    cmdBuff.draw(this.quadAssmebler);

                    if (this.settings.displayWatermark && this.watermarkMat) {
                      const wartermarkPass = this.watermarkMat.passes[0];
                      const watermarkPso = PipelineStateManager.getOrCreatePipelineState(device, wartermarkPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
                      cmdBuff.bindPipelineState(watermarkPso);
                      cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, wartermarkPass.descriptorSet);
                      cmdBuff.bindInputAssembler(this.quadAssmebler);
                      cmdBuff.draw(this.quadAssmebler);
                    }

                    cmdBuff.endRenderPass();
                    cmdBuff.end();
                    device.flushCommands([cmdBuff]);
                    device.queue.submit([cmdBuff]);
                    device.present();

                    if (sys.isXR) {
                      xr.entry.renderLoopEnd(xrEye);
                    }
                  }
                }
              }

              destroy() {
                this.device = null;
                this.swapchain = null;
                this.clearColors = null;
                if (this.logoImage.destroy) this.logoImage.destroy();
                this.logoImage = null;
                this.framebuffer = null;
                this.renderArea = null;
                this.cmdBuff = null;
                this.shader = null;
                this.logoMat.destroy();
                this.logoMat = null;
                this.logoTexture.destroy();
                this.logoTexture = null;
                this.quadAssmebler.destroy();
                this.quadAssmebler = null;
                this.vertexBuffers.destroy();
                this.vertexBuffers = null;
                this.indicesBuffers.destroy();
                this.indicesBuffers = null;
                this.sampler = null;

                if (this.watermarkTexture) {
                  this.watermarkMat.destroy();
                  this.watermarkMat = null;
                  this.watermarkTexture.destroy();
                  this.watermarkTexture = null;
                }

                this.settings = null;
              }

              static get instance() {
                if (!SplashScreen._ins) {
                  SplashScreen._ins = new SplashScreen();
                }

                return SplashScreen._ins;
              }

              constructor() {
                this._curTime = 0;
              }

            }
            SplashScreen._ins = void 0;
            legacyCC.internal.SplashScreen = SplashScreen;

            class System {
              constructor() {
                this._id = '';
                this._priority = 0;
                this._executeInEditMode = false;
              }

              set priority(value) {
                this._priority = value;
              }

              get priority() {
                return this._priority;
              }

              set id(id) {
                this._id = id;
              }

              get id() {
                return this._id;
              }

              static sortByPriority(a, b) {
                if (a._priority < b._priority) {
                  return 1;
                } else if (a._priority > b.priority) {
                  return -1;
                } else {
                  return 0;
                }
              }

              init() {}

              update(dt) {}

              postUpdate(dt) {}

              destroy() {}

            } exports('cN', System);
            System.Priority = Enum({
              LOW: 0,
              MEDIUM: 100,
              HIGH: 200,
              SCHEDULER: 1 << 31 >>> 0
            });

            const MAX_POOL_SIZE = 20;
            const idGenerator$1 = new IDGenerator('Scheduler');

            class ListEntry {
              constructor(target, priority, paused, markedForDeletion) {
                this.target = void 0;
                this.priority = void 0;
                this.paused = void 0;
                this.markedForDeletion = void 0;
                this.target = target;
                this.priority = priority;
                this.paused = paused;
                this.markedForDeletion = markedForDeletion;
              }

            }

            ListEntry.get = (target, priority, paused, markedForDeletion) => {
              let result = ListEntry._listEntries.pop();

              if (result) {
                result.target = target;
                result.priority = priority;
                result.paused = paused;
                result.markedForDeletion = markedForDeletion;
              } else {
                result = new ListEntry(target, priority, paused, markedForDeletion);
              }

              return result;
            };

            ListEntry.put = entry => {
              if (ListEntry._listEntries.length < MAX_POOL_SIZE) {
                entry.target = null;

                ListEntry._listEntries.push(entry);
              }
            };

            ListEntry._listEntries = [];

            class HashUpdateEntry {
              constructor(list, entry, target, callback) {
                this.list = void 0;
                this.entry = void 0;
                this.target = void 0;
                this.callback = void 0;
                this.list = list;
                this.entry = entry;
                this.target = target;
                this.callback = callback;
              }

            }

            HashUpdateEntry.get = (list, entry, target, callback) => {
              let result = HashUpdateEntry._hashUpdateEntries.pop();

              if (result) {
                result.list = list;
                result.entry = entry;
                result.target = target;
                result.callback = callback;
              } else {
                result = new HashUpdateEntry(list, entry, target, callback);
              }

              return result;
            };

            HashUpdateEntry.put = entry => {
              if (HashUpdateEntry._hashUpdateEntries.length < MAX_POOL_SIZE) {
                entry.list = entry.entry = entry.target = entry.callback = null;

                HashUpdateEntry._hashUpdateEntries.push(entry);
              }
            };

            HashUpdateEntry._hashUpdateEntries = [];

            class HashTimerEntry {
              constructor(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
                this.timers = void 0;
                this.target = void 0;
                this.timerIndex = void 0;
                this.currentTimer = void 0;
                this.currentTimerSalvaged = void 0;
                this.paused = void 0;
                this.timers = timers;
                this.target = target;
                this.timerIndex = timerIndex;
                this.currentTimer = currentTimer;
                this.currentTimerSalvaged = currentTimerSalvaged;
                this.paused = paused;
              }

            }

            HashTimerEntry.get = (timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) => {
              let result = HashTimerEntry._hashTimerEntries.pop();

              if (result) {
                result.timers = timers;
                result.target = target;
                result.timerIndex = timerIndex;
                result.currentTimer = currentTimer;
                result.currentTimerSalvaged = currentTimerSalvaged;
                result.paused = paused;
              } else {
                result = new HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused);
              }

              return result;
            };

            HashTimerEntry.put = entry => {
              if (HashTimerEntry._hashTimerEntries.length < MAX_POOL_SIZE) {
                entry.timers = entry.target = entry.currentTimer = null;

                HashTimerEntry._hashTimerEntries.push(entry);
              }
            };

            HashTimerEntry._hashTimerEntries = [];

            class CallbackTimer {
              constructor() {
                this._lock = void 0;
                this._scheduler = void 0;
                this._elapsed = void 0;
                this._runForever = void 0;
                this._useDelay = void 0;
                this._timesExecuted = void 0;
                this._repeat = void 0;
                this._delay = void 0;
                this._interval = void 0;
                this._target = void 0;
                this._callback = void 0;
                this._lock = false;
                this._scheduler = null;
                this._elapsed = -1;
                this._runForever = false;
                this._useDelay = false;
                this._timesExecuted = 0;
                this._repeat = 0;
                this._delay = 0;
                this._interval = 0;
                this._target = null;
                this._callback = null;
              }

              initWithCallback(scheduler, callback, target, seconds, repeat, delay) {
                this._lock = false;
                this._scheduler = scheduler;
                this._target = target;
                this._callback = callback;
                this._elapsed = -1;
                this._interval = seconds;
                this._delay = delay;
                this._useDelay = this._delay > 0;
                this._repeat = repeat;
                this._runForever = this._repeat === legacyCC.macro.REPEAT_FOREVER;
                return true;
              }

              getInterval() {
                return this._interval;
              }

              setInterval(interval) {
                this._interval = interval;
              }

              update(dt) {
                if (this._elapsed === -1) {
                  this._elapsed = 0;
                  this._timesExecuted = 0;
                } else {
                  this._elapsed += dt;

                  if (this._runForever && !this._useDelay) {
                    if (this._elapsed >= this._interval) {
                      this.trigger();
                      this._elapsed = 0;
                    }
                  } else {
                    if (this._useDelay) {
                      if (this._elapsed >= this._delay) {
                        this.trigger();
                        this._elapsed -= this._delay;
                        this._timesExecuted += 1;
                        this._useDelay = false;
                      }
                    } else if (this._elapsed >= this._interval) {
                      this.trigger();
                      this._elapsed = 0;
                      this._timesExecuted += 1;
                    }

                    if (this._callback && !this._runForever && this._timesExecuted > this._repeat) {
                      this.cancel();
                    }
                  }
                }
              }

              getCallback() {
                return this._callback;
              }

              trigger() {
                if (this._target && this._callback) {
                  this._lock = true;

                  this._callback.call(this._target, this._elapsed);

                  this._lock = false;
                }
              }

              cancel() {
                this._scheduler.unschedule(this._callback, this._target);
              }

            }

            CallbackTimer._timers = [];

            CallbackTimer.get = () => CallbackTimer._timers.pop() || new CallbackTimer();

            CallbackTimer.put = timer => {
              if (CallbackTimer._timers.length < MAX_POOL_SIZE && !timer._lock) {
                timer._scheduler = timer._target = timer._callback = null;

                CallbackTimer._timers.push(timer);
              }
            };

            class Scheduler extends System {
              static enableForTarget(target) {
                let found = false;

                if (target.uuid) {
                  found = true;
                } else if (target.id) {
                  found = true;
                }

                if (!found) {
                  if (target.__instanceId) {
                    warnID(1513);
                  } else {
                    target.id = idGenerator$1.getNewId();
                  }
                }
              }

              constructor() {
                super();
                this._timeScale = void 0;
                this._updatesNegList = void 0;
                this._updates0List = void 0;
                this._updatesPosList = void 0;
                this._hashForUpdates = void 0;
                this._hashForTimers = void 0;
                this._currentTarget = void 0;
                this._currentTargetSalvaged = void 0;
                this._updateHashLocked = void 0;
                this._arrayForTimers = void 0;
                this._timeScale = 1.0;
                this._updatesNegList = [];
                this._updates0List = [];
                this._updatesPosList = [];
                this._hashForUpdates = createMap(true);
                this._hashForTimers = createMap(true);
                this._currentTarget = null;
                this._currentTargetSalvaged = false;
                this._updateHashLocked = false;
                this._arrayForTimers = [];
              }

              setTimeScale(timeScale) {
                this._timeScale = timeScale;
              }

              getTimeScale() {
                return this._timeScale;
              }

              update(dt) {
                this._updateHashLocked = true;

                if (this._timeScale !== 1) {
                  dt *= this._timeScale;
                }

                let i;
                let list;
                let len;
                let entry;

                for (i = 0, list = this._updatesNegList, len = list.length; i < len; i++) {
                  entry = list[i];

                  if (!entry.paused && !entry.markedForDeletion) {
                    entry.target.update(dt);
                  }
                }

                for (i = 0, list = this._updates0List, len = list.length; i < len; i++) {
                  entry = list[i];

                  if (!entry.paused && !entry.markedForDeletion) {
                    entry.target.update(dt);
                  }
                }

                for (i = 0, list = this._updatesPosList, len = list.length; i < len; i++) {
                  entry = list[i];

                  if (!entry.paused && !entry.markedForDeletion) {
                    entry.target.update(dt);
                  }
                }

                let elt;
                const arr = this._arrayForTimers;

                for (i = 0; i < arr.length; i++) {
                  elt = arr[i];
                  this._currentTarget = elt;
                  this._currentTargetSalvaged = false;

                  if (!elt.paused) {
                    for (elt.timerIndex = 0; elt.timerIndex < elt.timers.length; ++elt.timerIndex) {
                      elt.currentTimer = elt.timers[elt.timerIndex];
                      elt.currentTimerSalvaged = false;
                      elt.currentTimer.update(dt);
                      elt.currentTimer = null;
                    }
                  }

                  if (this._currentTargetSalvaged && this._currentTarget.timers.length === 0) {
                    this._removeHashElement(this._currentTarget);

                    --i;
                  }
                }

                for (i = 0, list = this._updatesNegList; i < list.length;) {
                  entry = list[i];

                  if (entry.markedForDeletion) {
                    this._removeUpdateFromHash(entry);
                  } else {
                    i++;
                  }
                }

                for (i = 0, list = this._updates0List; i < list.length;) {
                  entry = list[i];

                  if (entry.markedForDeletion) {
                    this._removeUpdateFromHash(entry);
                  } else {
                    i++;
                  }
                }

                for (i = 0, list = this._updatesPosList; i < list.length;) {
                  entry = list[i];

                  if (entry.markedForDeletion) {
                    this._removeUpdateFromHash(entry);
                  } else {
                    i++;
                  }
                }

                this._updateHashLocked = false;
                this._currentTarget = null;
              }

              schedule(callback, target, interval, repeat, delay, paused) {
                if (typeof callback !== 'function') {
                  const tmp = callback;
                  callback = target;
                  target = tmp;
                }

                if (arguments.length === 3 || arguments.length === 4 || arguments.length === 5) {
                  paused = !!repeat;
                  repeat = legacyCC.macro.REPEAT_FOREVER;
                  delay = 0;
                }

                assertID(target, 1502);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                let element = this._hashForTimers[targetId];

                if (!element) {
                  element = HashTimerEntry.get(null, target, 0, null, null, paused);

                  this._arrayForTimers.push(element);

                  this._hashForTimers[targetId] = element;
                } else if (element.paused !== paused) {
                  warnID(1511);
                }

                let timer;
                let i;

                if (element.timers == null) {
                  element.timers = [];
                } else {
                  for (i = 0; i < element.timers.length; ++i) {
                    timer = element.timers[i];

                    if (timer && callback === timer._callback) {
                      logID(1507, timer.getInterval(), interval);
                      timer._interval = interval;
                      return;
                    }
                  }
                }

                timer = CallbackTimer.get();
                timer.initWithCallback(this, callback, target, interval, repeat, delay);
                element.timers.push(timer);

                if (this._currentTarget === element && this._currentTargetSalvaged) {
                  this._currentTargetSalvaged = false;
                }
              }

              scheduleUpdate(target, priority, paused) {
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const hashElement = this._hashForUpdates[targetId];

                if (hashElement && hashElement.entry) {
                  if (hashElement.entry.priority !== priority) {
                    if (this._updateHashLocked) {
                      logID(1506);
                      hashElement.entry.markedForDeletion = false;
                      hashElement.entry.paused = paused;
                      return;
                    } else {
                      this.unscheduleUpdate(target);
                    }
                  } else {
                    hashElement.entry.markedForDeletion = false;
                    hashElement.entry.paused = paused;
                    return;
                  }
                }

                const listElement = ListEntry.get(target, priority, paused, false);
                let ppList;

                if (priority === 0) {
                  ppList = this._updates0List;

                  this._appendIn(ppList, listElement);
                } else {
                  ppList = priority < 0 ? this._updatesNegList : this._updatesPosList;

                  this._priorityIn(ppList, listElement, priority);
                }

                this._hashForUpdates[targetId] = HashUpdateEntry.get(ppList, listElement, target, null);
              }

              unschedule(callback, target) {
                if (!target || !callback) {
                  return;
                }

                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const element = this._hashForTimers[targetId];

                if (element) {
                  const timers = element.timers;

                  for (let i = 0, li = timers.length; i < li; i++) {
                    const timer = timers[i];

                    if (callback === timer._callback) {
                      if (timer === element.currentTimer && !element.currentTimerSalvaged) {
                        element.currentTimerSalvaged = true;
                      }

                      timers.splice(i, 1);
                      CallbackTimer.put(timer);

                      if (element.timerIndex >= i) {
                        element.timerIndex--;
                      }

                      if (timers.length === 0) {
                        if (this._currentTarget === element) {
                          this._currentTargetSalvaged = true;
                        } else {
                          this._removeHashElement(element);
                        }
                      }

                      return;
                    }
                  }
                }
              }

              unscheduleUpdate(target) {
                if (!target) {
                  return;
                }

                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const element = this._hashForUpdates[targetId];

                if (element) {
                  if (this._updateHashLocked) {
                    element.entry.markedForDeletion = true;
                  } else {
                    this._removeUpdateFromHash(element.entry);
                  }
                }
              }

              unscheduleAllForTarget(target) {
                if (!target) {
                  return;
                }

                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const element = this._hashForTimers[targetId];

                if (element) {
                  const timers = element.timers;

                  if (timers.indexOf(element.currentTimer) > -1 && !element.currentTimerSalvaged) {
                    element.currentTimerSalvaged = true;
                  }

                  for (let i = 0, l = timers.length; i < l; i++) {
                    CallbackTimer.put(timers[i]);
                  }

                  timers.length = 0;

                  if (this._currentTarget === element) {
                    this._currentTargetSalvaged = true;
                  } else {
                    this._removeHashElement(element);
                  }
                }

                this.unscheduleUpdate(target);
              }

              unscheduleAll() {
                this.unscheduleAllWithMinPriority(System.Priority.SCHEDULER);
              }

              unscheduleAllWithMinPriority(minPriority) {
                let i;
                let element;
                const arr = this._arrayForTimers;

                for (i = arr.length - 1; i >= 0; i--) {
                  element = arr[i];
                  this.unscheduleAllForTarget(element.target);
                }

                let entry;
                let temp_length = 0;

                if (minPriority < 0) {
                  for (i = 0; i < this._updatesNegList.length;) {
                    temp_length = this._updatesNegList.length;
                    entry = this._updatesNegList[i];

                    if (entry && entry.priority >= minPriority) {
                      this.unscheduleUpdate(entry.target);
                    }

                    if (temp_length === this._updatesNegList.length) {
                      i++;
                    }
                  }
                }

                if (minPriority <= 0) {
                  for (i = 0; i < this._updates0List.length;) {
                    temp_length = this._updates0List.length;
                    entry = this._updates0List[i];

                    if (entry) {
                      this.unscheduleUpdate(entry.target);
                    }

                    if (temp_length === this._updates0List.length) {
                      i++;
                    }
                  }
                }

                for (i = 0; i < this._updatesPosList.length;) {
                  temp_length = this._updatesPosList.length;
                  entry = this._updatesPosList[i];

                  if (entry && entry.priority >= minPriority) {
                    this.unscheduleUpdate(entry.target);
                  }

                  if (temp_length === this._updatesPosList.length) {
                    i++;
                  }
                }
              }

              isScheduled(callback, target) {
                assertID(callback, 1508);
                assertID(target, 1509);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return false;
                }

                const element = this._hashForTimers[targetId];

                if (!element) {
                  return false;
                }

                if (element.timers == null) {
                  return false;
                } else {
                  const timers = element.timers;

                  for (let i = 0; i < timers.length; ++i) {
                    const timer = timers[i];

                    if (callback === timer._callback) {
                      return true;
                    }
                  }

                  return false;
                }
              }

              pauseAllTargets() {
                return this.pauseAllTargetsWithMinPriority(System.Priority.SCHEDULER);
              }

              pauseAllTargetsWithMinPriority(minPriority) {
                const idsWithSelectors = [];
                let element;
                const locArrayForTimers = this._arrayForTimers;
                let i;
                let li;

                for (i = 0, li = locArrayForTimers.length; i < li; i++) {
                  element = locArrayForTimers[i];

                  if (element) {
                    element.paused = true;
                    idsWithSelectors.push(element.target);
                  }
                }

                let entry;

                if (minPriority < 0) {
                  for (i = 0; i < this._updatesNegList.length; i++) {
                    entry = this._updatesNegList[i];

                    if (entry) {
                      if (entry.priority >= minPriority) {
                        entry.paused = true;
                        idsWithSelectors.push(entry.target);
                      }
                    }
                  }
                }

                if (minPriority <= 0) {
                  for (i = 0; i < this._updates0List.length; i++) {
                    entry = this._updates0List[i];

                    if (entry) {
                      entry.paused = true;
                      idsWithSelectors.push(entry.target);
                    }
                  }
                }

                for (i = 0; i < this._updatesPosList.length; i++) {
                  entry = this._updatesPosList[i];

                  if (entry) {
                    if (entry.priority >= minPriority) {
                      entry.paused = true;
                      idsWithSelectors.push(entry.target);
                    }
                  }
                }

                return idsWithSelectors;
              }

              resumeTargets(targetsToResume) {
                if (!targetsToResume) {
                  return;
                }

                for (let i = 0; i < targetsToResume.length; i++) {
                  this.resumeTarget(targetsToResume[i]);
                }
              }

              pauseTarget(target) {
                assertID(target, 1503);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const element = this._hashForTimers[targetId];

                if (element) {
                  element.paused = true;
                }

                const elementUpdate = this._hashForUpdates[targetId];

                if (elementUpdate) {
                  elementUpdate.entry.paused = true;
                }
              }

              resumeTarget(target) {
                assertID(target, 1504);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const element = this._hashForTimers[targetId];

                if (element) {
                  element.paused = false;
                }

                const elementUpdate = this._hashForUpdates[targetId];

                if (elementUpdate) {
                  elementUpdate.entry.paused = false;
                }
              }

              isTargetPaused(target) {
                assertID(target, 1505);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return false;
                }

                const element = this._hashForTimers[targetId];

                if (element) {
                  return element.paused;
                }

                const elementUpdate = this._hashForUpdates[targetId];

                if (elementUpdate) {
                  return elementUpdate.entry.paused;
                }

                return false;
              }

              _removeHashElement(element) {
                const targetId = element.target.uuid || element.target.id;
                delete this._hashForTimers[targetId];
                const arr = this._arrayForTimers;

                for (let i = 0, l = arr.length; i < l; i++) {
                  if (arr[i] === element) {
                    arr.splice(i, 1);
                    break;
                  }
                }

                HashTimerEntry.put(element);
              }

              _removeUpdateFromHash(entry) {
                const targetId = entry.target.uuid || entry.target.id;
                const element = this._hashForUpdates[targetId];

                if (element) {
                  const list = element.list;
                  const listEntry = element.entry;

                  for (let i = 0, l = list.length; i < l; i++) {
                    if (list[i] === listEntry) {
                      list.splice(i, 1);
                      break;
                    }
                  }

                  delete this._hashForUpdates[targetId];
                  ListEntry.put(listEntry);
                  HashUpdateEntry.put(element);
                }
              }

              _priorityIn(ppList, listElement, priority) {
                for (let i = 0; i < ppList.length; i++) {
                  if (priority < ppList[i].priority) {
                    ppList.splice(i, 0, listElement);
                    return;
                  }
                }

                ppList.push(listElement);
              }

              _appendIn(ppList, listElement) {
                ppList.push(listElement);
              }

            } exports('cM', Scheduler);
            Scheduler.ID = 'scheduler';
            legacyCC.Scheduler = Scheduler;

            const SubModel = exports('cg', jsb.SubModel);

            const RenderingDebugViewType = {
              NONE: 0,
              SINGLE: 1,
              COMPOSITE_AND_MISC: 2
            };
            const DebugViewSingleType = {
              NONE: 0,
              VERTEX_COLOR: 1,
              VERTEX_NORMAL: 2,
              VERTEX_TANGENT: 3,
              WORLD_POS: 4,
              VERTEX_MIRROR: 5,
              FACE_SIDE: 6,
              UV0: 7,
              UV1: 8,
              UV_LIGHTMAP: 9,
              PROJ_DEPTH: 10,
              LINEAR_DEPTH: 11,
              FRAGMENT_NORMAL: 12,
              FRAGMENT_TANGENT: 13,
              FRAGMENT_BINORMAL: 14,
              BASE_COLOR: 15,
              DIFFUSE_COLOR: 16,
              SPECULAR_COLOR: 17,
              TRANSPARENCY: 18,
              METALLIC: 19,
              ROUGHNESS: 20,
              SPECULAR_INTENSITY: 21,
              DIRECT_DIFFUSE: 22,
              DIRECT_SPECULAR: 23,
              DIRECT_ALL: 24,
              ENV_DIFFUSE: 25,
              ENV_SPECULAR: 26,
              ENV_ALL: 27,
              EMISSIVE: 28,
              LIGHT_MAP: 29,
              SHADOW: 30,
              AO: 31,
              FOG: 32
            };
            const DebugViewCompositeType = {
              DIRECT_DIFFUSE: 0,
              DIRECT_SPECULAR: 1,
              ENV_DIFFUSE: 2,
              ENV_SPECULAR: 3,
              EMISSIVE: 4,
              LIGHT_MAP: 5,
              SHADOW: 6,
              AO: 7,
              NORMAL_MAP: 8,
              FOG: 9,
              TONE_MAPPING: 10,
              GAMMA_CORRECTION: 11,
              MAX_BIT_COUNT: 12
            };
            class DebugView {
              get singleMode() {
                return this._singleMode;
              }

              set singleMode(val) {
                this._singleMode = val;

                this._updatePipeline();

                if ( this._nativeConfig) {
                  this._nativeConfig.singleMode = this._singleMode;
                }
              }

              get lightingWithAlbedo() {
                return this._lightingWithAlbedo;
              }

              set lightingWithAlbedo(val) {
                this._lightingWithAlbedo = val;

                this._updatePipeline();

                if ( this._nativeConfig) {
                  this._nativeConfig.lightingWithAlbedo = this._lightingWithAlbedo;
                }
              }

              get csmLayerColoration() {
                return this._csmLayerColoration;
              }

              set csmLayerColoration(val) {
                this._csmLayerColoration = val;

                this._updatePipeline();

                if ( this._nativeConfig) {
                  this._nativeConfig.csmLayerColoration = this._csmLayerColoration;
                }
              }

              constructor() {
                this._singleMode = DebugViewSingleType.NONE;
                this._compositeModeValue = 0;
                this._lightingWithAlbedo = true;
                this._csmLayerColoration = false;
                this._nativeConfig = null;

                this._activate();

                if ( this._nativeConfig === null) {
                  this._nativeConfig = new jsb.DebugViewConfig();
                  this._nativeConfig.compositeModeBitCount = DebugViewCompositeType.MAX_BIT_COUNT;
                }
              }

              isCompositeModeEnabled(val) {
                const mode = this._compositeModeValue & 1 << val;
                return mode !== 0;
              }

              enableCompositeMode(val, enable) {
                this._enableCompositeMode(val, enable);

                this._updatePipeline();
              }

              enableAllCompositeMode(enable) {
                this._enableAllCompositeMode(enable);

                this._updatePipeline();
              }

              isEnabled() {
                return this._getType() !== RenderingDebugViewType.NONE;
              }

              reset() {
                this._activate();

                this._updatePipeline();
              }

              _activate() {
                this._singleMode = DebugViewSingleType.NONE;

                this._enableAllCompositeMode(true);

                this._lightingWithAlbedo = true;
                this._csmLayerColoration = false;

                if ( this._nativeConfig) {
                  this._nativeConfig.singleMode = this._singleMode;
                  this._nativeConfig.compositeModeValue = this._compositeModeValue;
                  this._nativeConfig.lightingWithAlbedo = this._lightingWithAlbedo;
                  this._nativeConfig.csmLayerColoration = this._csmLayerColoration;
                }
              }

              _updatePipeline() {
                const root = legacyCC.director.root;
                const pipeline = root.pipeline;

                const useDebugView = this._getType();

                if (pipeline.macros.CC_USE_DEBUG_VIEW !== useDebugView) {
                  pipeline.macros.CC_USE_DEBUG_VIEW = useDebugView;
                  root.onGlobalPipelineStateChanged();
                }
              }

              _enableCompositeMode(val, enable) {
                if (enable) {
                  this._compositeModeValue |= 1 << val;
                } else {
                  this._compositeModeValue &= ~(1 << val);
                }

                if ( this._nativeConfig) {
                  this._nativeConfig.compositeModeValue = this._compositeModeValue;
                }
              }

              _enableAllCompositeMode(enable) {
                for (let i = 0; i < DebugViewCompositeType.MAX_BIT_COUNT; i++) {
                  if (enable) {
                    this._compositeModeValue |= 1 << i;
                  } else {
                    this._compositeModeValue &= ~(1 << i);
                  }

                  if ( this._nativeConfig) {
                    this._nativeConfig.compositeModeValue = this._compositeModeValue;
                  }
                }
              }

              _getType() {
                if (this._singleMode !== DebugViewSingleType.NONE) {
                  return RenderingDebugViewType.SINGLE;
                } else if (this._lightingWithAlbedo !== true || this._csmLayerColoration !== false) {
                  return RenderingDebugViewType.COMPOSITE_AND_MISC;
                } else {
                  for (let i = 0; i < DebugViewCompositeType.MAX_BIT_COUNT; i++) {
                    if (!this.isCompositeModeEnabled(i)) {
                      return RenderingDebugViewType.COMPOSITE_AND_MISC;
                    }
                  }
                }

                return RenderingDebugViewType.NONE;
              }

            }

            const renderTextureProto = jsb.RenderTexture.prototype;
            const textureBaseProto$1 = jsb.TextureBase.prototype;
            renderTextureProto.createNode = null;
            const RenderTexture = exports('ed', jsb.RenderTexture);
            RenderTexture.Filter = Filter$1;
            RenderTexture.PixelFormat = PixelFormat;
            RenderTexture.WrapMode = WrapMode$1;

            renderTextureProto._serialize = function (ctxForExporting) {

              return {};
            };

            renderTextureProto._deserialize = function (serializedData, handle) {
              const data = serializedData;
              this._width = data.w;
              this._height = data.h;
              this._name = data.n;

              textureBaseProto$1._deserialize.call(this, data.base, handle);
            };

            const oldReadPixels = renderTextureProto.readPixels;

            renderTextureProto.readPixels = function readPixels(x, y, width, height, buffer) {
              x = x || 0;
              y = y || 0;
              width = width || this.width;
              height = height || this.height;
              let tmpBuffer = oldReadPixels.call(this, x, y, width, height);

              if (tmpBuffer.length == 0) {
                return null;
              }

              buffer = tmpBuffer;
              return buffer;
            };

            legacyCC.RenderTexture = jsb.RenderTexture;
            ccclass('cc.RenderTexture')(RenderTexture);

            removeProperty(TextureBase.prototype, 'TextureBase.prototype', [{
              name: 'hasPremultipliedAlpha'
            }, {
              name: 'setPremultiplyAlpha'
            }, {
              name: 'setFlipY'
            }]);
            replaceProperty(RenderTexture.prototype, 'RenderTexture.prototype', [{
              name: 'getGFXWindow',

              customFunction() {
                return this._window;
              }

            }]);

            const BufferAsset = exports('gp', jsb.BufferAsset);
            legacyCC.BufferAsset = jsb.BufferAsset;
            const BufferAssetProto = BufferAsset.prototype;

            const _nativeAssetDescriptor$1 = Object.getOwnPropertyDescriptor(BufferAssetProto, '_nativeAsset');

            override(BufferAssetProto, '_nativeAsset', _nativeAssetDescriptor$1);
            ccclass('cc.BufferAsset')(BufferAsset);

            function deepFlatten(strList, array) {
              for (const item of array) {
                if (Array.isArray(item)) {
                  deepFlatten(strList, item);
                } else {
                    strList.push(item);
                  }
              }
            }

            function flattenCodeArray(array) {
              const separator =  '';
              const strList = [];
              deepFlatten(strList, array);
              return strList.join(separator);
            }

            const Destroyed$2 = CCObject.Flags.Destroyed;
            const PersistentMask$2 = CCObject.Flags.PersistentMask;
            const DEFAULT = `${DELIMETER}default`;
            const IDENTIFIER_RE$1 = CCClass.IDENTIFIER_RE;
            const VAR = 'var ';
            const LOCAL_OBJ = 'o';
            const LOCAL_TEMP_OBJ = 't';
            const LOCAL_ARRAY = 'a';
            const LINE_INDEX_OF_NEW_OBJ = 0;
            const DEFAULT_MODULE_CACHE = {
              'cc.ClickEvent': false,
              'cc.PrefabInfo': false
            };
            const escapeForJS$1 = CCClass.escapeForJS;

            class Declaration {
              constructor(varName, expression) {
                this.varName = void 0;
                this.expression = void 0;
                this.varName = varName;
                this.expression = expression;
              }

              toString() {
                return `${VAR + this.varName}=${this.expression};`;
              }

            }

            function mergeDeclaration(statement, expression) {
              if (expression instanceof Declaration) {
                return new Declaration(expression.varName, statement + expression.expression);
              } else {
                return statement + expression;
              }
            }

            function writeAssignment(codeArray, statement, expression) {
              if (Array.isArray(expression)) {
                expression[0] = mergeDeclaration(statement, expression[0]);
                codeArray.push(expression);
              } else {
                codeArray.push(`${mergeDeclaration(statement, expression)};`);
              }
            }

            class Assignments {
              constructor(targetExpression) {
                this._exps = void 0;
                this._targetExp = void 0;
                this._exps = [];
                this._targetExp = targetExpression;
              }

              append(key, expression) {
                this._exps.push([key, expression]);
              }

              writeCode(codeArray) {
                let targetVar;

                if (this._exps.length > 1) {
                  codeArray.push(`${LOCAL_TEMP_OBJ}=${this._targetExp};`);
                  targetVar = LOCAL_TEMP_OBJ;
                } else if (this._exps.length === 1) {
                  targetVar = this._targetExp;
                } else {
                  return;
                }

                for (let i = 0; i < this._exps.length; i++) {
                  const pair = this._exps[i];
                  writeAssignment(codeArray, `${targetVar + getPropAccessor(pair[0])}=`, pair[1]);
                }
              }

            }

            Assignments.pool = void 0;
            Assignments.pool = new Pool(obj => {
              obj._exps.length = 0;
              obj._targetExp = null;
            }, 1);

            Assignments.pool.get = function (targetExpression) {
              const cache = this._get() || new Assignments();
              cache._targetExp = targetExpression;
              return cache;
            };

            function getPropAccessor(key) {
              return IDENTIFIER_RE$1.test(key) ? `.${key}` : `[${escapeForJS$1(key)}]`;
            }

            class Parser {
              constructor(obj, parent) {
                this.parent = void 0;
                this.objsToClear_iN$t = void 0;
                this.codeArray = void 0;
                this.objs = void 0;
                this.funcs = void 0;
                this.funcModuleCache = void 0;
                this.globalVariables = void 0;
                this.globalVariableId = void 0;
                this.localVariableId = void 0;
                this.result = void 0;
                this.parent = parent;
                this.objsToClear_iN$t = [];
                this.codeArray = [];
                this.objs = [];
                this.funcs = [];
                this.funcModuleCache = createMap();
                mixin(this.funcModuleCache, DEFAULT_MODULE_CACHE);
                this.globalVariables = [];
                this.globalVariableId = 0;
                this.localVariableId = 0;
                this.codeArray.push(`${VAR + LOCAL_OBJ},${LOCAL_TEMP_OBJ};`, 'if(R){', `${LOCAL_OBJ}=R;`, '}else{', `${LOCAL_OBJ}=R=new ${this.getFuncModule(obj.constructor, true)}();`, '}');
                obj._iN$t = {
                  globalVar: 'R'
                };
                this.objsToClear_iN$t.push(obj);
                this.enumerateObject(this.codeArray, obj);
                let globalVariablesDeclaration;

                if (this.globalVariables.length > 0) {
                  globalVariablesDeclaration = `${VAR + this.globalVariables.join(',')};`;
                }

                const code = flattenCodeArray(['return (function(R){', globalVariablesDeclaration || [], this.codeArray, 'return o;', '})']);
                this.result = Function('O', 'F', code)(this.objs, this.funcs);

                for (let i = 0, len = this.objsToClear_iN$t.length; i < len; ++i) {
                  this.objsToClear_iN$t[i]._iN$t = null;
                }

                this.objsToClear_iN$t.length = 0;
              }

              getFuncModule(func, usedInNew) {
                const clsName = getClassName(func);

                if (clsName) {
                  const cache = this.funcModuleCache[clsName];

                  if (cache) {
                    return cache;
                  } else if (cache === undefined) {
                    let clsNameIsModule = clsName.indexOf('.') !== -1;

                    if (clsNameIsModule) {
                      try {
                        clsNameIsModule = func === Function(`return ${clsName}`)();

                        if (clsNameIsModule) {
                          this.funcModuleCache[clsName] = clsName;
                          return clsName;
                        }
                      } catch (e) {}
                    }
                  }
                }

                let index = this.funcs.indexOf(func);

                if (index < 0) {
                  index = this.funcs.length;
                  this.funcs.push(func);
                }

                let res = `F[${index}]`;

                if (usedInNew) {
                  res = `(${res})`;
                }

                this.funcModuleCache[clsName] = res;
                return res;
              }

              getObjRef(obj) {
                let index = this.objs.indexOf(obj);

                if (index < 0) {
                  index = this.objs.length;
                  this.objs.push(obj);
                }

                return `O[${index}]`;
              }

              setValueType(codeArray, defaultValue, srcValue, targetExpression) {
                const assignments = Assignments.pool.get(targetExpression);
                let fastDefinedProps = defaultValue.constructor.__props__;

                if (!fastDefinedProps) {
                  fastDefinedProps = Object.keys(defaultValue);
                }

                for (let i = 0; i < fastDefinedProps.length; i++) {
                  const propName = fastDefinedProps[i];
                  const prop = srcValue[propName];

                  if (defaultValue[propName] === prop) {
                    continue;
                  }

                  const expression = this.enumerateField(srcValue, propName, prop);
                  assignments.append(propName, expression);
                }

                assignments.writeCode(codeArray);
                Assignments.pool.put(assignments);
              }

              enumerateCCClass(codeArray, obj, klass) {
                const props = klass.__values__;
                const attrs = getClassAttrs(klass);

                for (let p = 0; p < props.length; p++) {
                  const key = props[p];
                  const val = obj[key];
                  let defaultValue = attrs[key + DEFAULT];

                  if (equalsToDefault(defaultValue, val)) {
                    continue;
                  }

                  if (typeof val === 'object' && val instanceof legacyCC.ValueType) {
                    defaultValue = CCClass.getDefault(defaultValue);

                    if (defaultValue && defaultValue.constructor === val.constructor) {
                      const targetExpression = LOCAL_OBJ + getPropAccessor(key);
                      this.setValueType(codeArray, defaultValue, val, targetExpression);
                      continue;
                    }
                  }

                  this.setObjProp(codeArray, obj, key, val);
                }
              }

              instantiateArray(value) {
                if (value.length === 0) {
                  return '[]';
                }

                const arrayVar = LOCAL_ARRAY + ++this.localVariableId;
                const declaration = new Declaration(arrayVar, `new Array(${value.length})`);
                const codeArray = [declaration];
                value._iN$t = {
                  globalVar: '',
                  source: codeArray
                };
                this.objsToClear_iN$t.push(value);

                for (let i = 0; i < value.length; ++i) {
                  const statement = `${arrayVar}[${i}]=`;
                  const expression = this.enumerateField(value, i, value[i]);
                  writeAssignment(codeArray, statement, expression);
                }

                return codeArray;
              }

              instantiateTypedArray(value) {
                const type = value.constructor.name;

                if (value.length === 0) {
                  return `new ${type}`;
                }

                const arrayVar = LOCAL_ARRAY + ++this.localVariableId;
                const declaration = new Declaration(arrayVar, `new ${type}(${value.length})`);
                const codeArray = [declaration];
                value._iN$t = {
                  globalVar: '',
                  source: codeArray
                };
                this.objsToClear_iN$t.push(value);

                for (let i = 0; i < value.length; ++i) {
                  if (value[i] !== 0) {
                    const statement = `${arrayVar}[${i}]=`;
                    writeAssignment(codeArray, statement, value[i]);
                  }
                }

                return codeArray;
              }

              enumerateField(obj, key, value) {
                if (typeof value === 'object' && value) {
                  const _iN$t = value._iN$t;

                  if (_iN$t) {
                    let globalVar = _iN$t.globalVar;

                    if (!globalVar) {
                      globalVar = _iN$t.globalVar = `v${++this.globalVariableId}`;
                      this.globalVariables.push(globalVar);
                      const line = _iN$t.source[LINE_INDEX_OF_NEW_OBJ];
                      _iN$t.source[LINE_INDEX_OF_NEW_OBJ] = mergeDeclaration(`${globalVar}=`, line);
                    }

                    return globalVar;
                  } else if (ArrayBuffer.isView(value)) {
                    return this.instantiateTypedArray(value);
                  } else if (Array.isArray(value)) {
                    return this.instantiateArray(value);
                  } else {
                    return this.instantiateObj(value);
                  }
                } else if (typeof value === 'function') {
                  return this.getFuncModule(value);
                } else if (typeof value === 'string') {
                  return escapeForJS$1(value);
                } else {
                  if (key === '_objFlags' && isCCObject(obj)) {
                    value &= PersistentMask$2;
                  }

                  return value;
                }
              }

              setObjProp(codeArray, obj, key, value) {
                const statement = `${LOCAL_OBJ + getPropAccessor(key)}=`;
                const expression = this.enumerateField(obj, key, value);
                writeAssignment(codeArray, statement, expression);
              }

              enumerateObject(codeArray, obj) {
                const klass = obj.constructor;

                if (isCCClassOrFastDefined(klass)) {
                  this.enumerateCCClass(codeArray, obj, klass);
                } else {
                  for (const key in obj) {
                    if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && key !== '__type__') {
                      continue;
                    }

                    const value = obj[key];

                    if (typeof value === 'object' && value && value === obj._iN$t) {
                      continue;
                    }

                    this.setObjProp(codeArray, obj, key, value);
                  }
                }
              }

              instantiateObj(obj) {
                if (obj instanceof legacyCC.ValueType) {
                  return CCClass.getNewValueTypeCode(obj);
                }

                if (obj instanceof legacyCC.Asset) {
                  return this.getObjRef(obj);
                }

                if (obj._objFlags & Destroyed$2) {
                  return null;
                }

                let createCode;
                const ctor = obj.constructor;

                if (isCCClassOrFastDefined(ctor)) {
                  if (this.parent) {
                    if (this.parent instanceof legacyCC.Component) {
                      if (obj instanceof legacyCC._BaseNode || obj instanceof legacyCC.Component) {
                        return this.getObjRef(obj);
                      }
                    } else if (this.parent instanceof legacyCC._BaseNode) {
                      if (obj instanceof legacyCC._BaseNode) {
                        if (!obj.isChildOf(this.parent)) {
                          return this.getObjRef(obj);
                        }
                      } else if (obj instanceof legacyCC.Component) {
                        var _obj$node;

                        if (!((_obj$node = obj.node) === null || _obj$node === void 0 ? void 0 : _obj$node.isChildOf(this.parent))) {
                          return this.getObjRef(obj);
                        }
                      }
                    }
                  }

                  createCode = new Declaration(LOCAL_OBJ, `new ${this.getFuncModule(ctor, true)}()`);
                } else if (ctor === Object) {
                  createCode = new Declaration(LOCAL_OBJ, '{}');
                } else if (!ctor) {
                  createCode = new Declaration(LOCAL_OBJ, 'Object.create(null)');
                } else {
                  return this.getObjRef(obj);
                }

                const codeArray = [createCode];
                obj._iN$t = {
                  globalVar: '',
                  source: codeArray
                };
                this.objsToClear_iN$t.push(obj);
                this.enumerateObject(codeArray, obj);
                return ['(function(){', codeArray, 'return o;})();'];
              }

            }

            function equalsToDefault(def, value) {
              if (typeof def === 'function') {
                try {
                  def = def();
                } catch (e) {
                  return false;
                }
              }

              if (def === value) {
                return true;
              }

              if (def && value && typeof def === 'object' && typeof value === 'object' && def.constructor === value.constructor) {
                if (def instanceof legacyCC.ValueType) {
                  if (def.equals(value)) {
                    return true;
                  }
                } else if (Array.isArray(def)) {
                  return def.length === 0 && value.length === 0;
                } else if (def.constructor === Object) {
                  return isEmptyObject(def) && isEmptyObject(value);
                }
              }

              return false;
            }
            function compile(node) {
              const root = node instanceof legacyCC._BaseNode && node;
              const parser = new Parser(node, root);
              return parser.result;
            }

            let NodeEventType;

            (function (NodeEventType) {
              NodeEventType["TOUCH_START"] = "touch-start";
              NodeEventType["TOUCH_MOVE"] = "touch-move";
              NodeEventType["TOUCH_END"] = "touch-end";
              NodeEventType["TOUCH_CANCEL"] = "touch-cancel";
              NodeEventType["MOUSE_DOWN"] = "mouse-down";
              NodeEventType["MOUSE_MOVE"] = "mouse-move";
              NodeEventType["MOUSE_UP"] = "mouse-up";
              NodeEventType["MOUSE_WHEEL"] = "mouse-wheel";
              NodeEventType["MOUSE_ENTER"] = "mouse-enter";
              NodeEventType["MOUSE_LEAVE"] = "mouse-leave";
              NodeEventType["KEY_DOWN"] = "keydown";
              NodeEventType["KEY_UP"] = "keyup";
              NodeEventType["DEVICEMOTION"] = "devicemotion";
              NodeEventType["TRANSFORM_CHANGED"] = "transform-changed";
              NodeEventType["SCENE_CHANGED_FOR_PERSISTS"] = "scene-changed-for-persists";
              NodeEventType["SIZE_CHANGED"] = "size-changed";
              NodeEventType["ANCHOR_CHANGED"] = "anchor-changed";
              NodeEventType["COLOR_CHANGED"] = "color-changed";
              NodeEventType["CHILD_ADDED"] = "child-added";
              NodeEventType["CHILD_REMOVED"] = "child-removed";
              NodeEventType["PARENT_CHANGED"] = "parent-changed";
              NodeEventType["NODE_DESTROYED"] = "node-destroyed";
              NodeEventType["LAYER_CHANGED"] = "layer-changed";
              NodeEventType["SIBLING_ORDER_CHANGED"] = "sibling-order-changed";
              NodeEventType["ACTIVE_IN_HIERARCHY_CHANGED"] = "active-in-hierarchy-changed";
              NodeEventType["COMPONENT_ADDED"] = "component-added";
              NodeEventType["COMPONENT_REMOVED"] = "component-removed";
            })(NodeEventType || (NodeEventType = exports('dR', {})));

            class NodeUIProperties {
              get uiTransformComp() {
                if (!this._uiTransformComp) {
                  this._uiTransformComp = this._node.getComponent('cc.UITransform');
                }

                return this._uiTransformComp;
              }

              set uiTransformComp(value) {
                this._uiTransformComp = value;
              }

              get uiComp() {
                return this._uiComp;
              }

              set uiComp(comp) {
                if (this._uiComp && comp) {
                  warnID(12002);
                  return;
                }

                this._uiComp = comp;
              }

              get opacity() {
                return this._opacity;
              }

              get localOpacity() {
                return this._localOpacity;
              }

              set localOpacity(val) {
                this._localOpacity = val;
                this.colorDirty = true;
              }

              constructor(node) {
                this._uiComp = null;
                this._opacity = 1;
                this._localOpacity = 1;
                this.colorDirty = true;
                this._uiTransformComp = null;
                this._node = void 0;
                this._node = node;
              }

              applyOpacity(effectOpacity) {
                this._opacity = this._localOpacity * effectOpacity;
              }

              static markOpacityTree(node, isDirty = true) {}

            }

            let NodeSpace;

            (function (NodeSpace) {
              NodeSpace[NodeSpace["LOCAL"] = 0] = "LOCAL";
              NodeSpace[NodeSpace["WORLD"] = 1] = "WORLD";
            })(NodeSpace || (NodeSpace = {}));

            let TransformBit;

            (function (TransformBit) {
              TransformBit[TransformBit["NONE"] = 0] = "NONE";
              TransformBit[TransformBit["POSITION"] = 1] = "POSITION";
              TransformBit[TransformBit["ROTATION"] = 2] = "ROTATION";
              TransformBit[TransformBit["SCALE"] = 4] = "SCALE";
              TransformBit[TransformBit["RS"] = TransformBit.ROTATION | TransformBit.SCALE] = "RS";
              TransformBit[TransformBit["TRS"] = TransformBit.POSITION | TransformBit.ROTATION | TransformBit.SCALE] = "TRS";
              TransformBit[TransformBit["TRS_MASK"] = ~TransformBit.TRS] = "TRS_MASK";
            })(TransformBit || (TransformBit = exports('em', {})));

            legacyCC.internal.TransformBit = TransformBit;

            const _tempFloatArray = new Float32Array(jsb.createExternalArrayBuffer(20 * 4));
            const fillMat4WithTempFloatArray = function fillMat4WithTempFloatArray(out) {
              Mat4.set(out, _tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2], _tempFloatArray[3], _tempFloatArray[4], _tempFloatArray[5], _tempFloatArray[6], _tempFloatArray[7], _tempFloatArray[8], _tempFloatArray[9], _tempFloatArray[10], _tempFloatArray[11], _tempFloatArray[12], _tempFloatArray[13], _tempFloatArray[14], _tempFloatArray[15]);
            };

            const Destroying$1 = CCObject.Flags.Destroying;

            const baseNodeProto = jsb.BaseNode.prototype;
            baseNodeProto.createNode = null;
            const BaseNode = jsb.BaseNode;
            legacyCC._BaseNode = BaseNode;
            ccclass('cc.BaseNode')(BaseNode);

            const reserveContentsForAllSyncablePrefabTag = Symbol('ReserveContentsForAllSyncablePrefab');
            const Node$1 = exports('eg', jsb.Node);
            legacyCC.Node = Node$1;
            const NodeCls = Node$1;
            NodeCls.reserveContentsForAllSyncablePrefabTag = reserveContentsForAllSyncablePrefabTag;
            NodeCls.EventType = NodeEventType;
            NodeCls.NodeSpace = NodeSpace;
            NodeCls.TransformDirtyBit = TransformBit;
            NodeCls.TransformBit = TransformBit;
            const TRANSFORMBIT_TRS = TransformBit.TRS;
            const nodeProto = jsb.Node.prototype;
            const TRANSFORM_ON = exports('gU', 1 << 0);
            const Destroying$2 = CCObject.Flags.Destroying;

            Node$1._setTempFloatArray(_tempFloatArray.buffer);

            function getConstructor(typeOrClassName) {
              if (!typeOrClassName) {
                return null;
              }

              if (typeof typeOrClassName === 'string') {
                return getClassByName(typeOrClassName);
              }

              return typeOrClassName;
            }

            nodeProto.attr = function (attrs) {
              mixin(this, attrs);
            };

            nodeProto.getComponent = function (typeOrClassName) {
              const constructor = getConstructor(typeOrClassName);

              if (constructor) {
                return NodeCls._findComponent(this, constructor);
              }

              return null;
            };

            nodeProto.getComponents = function (typeOrClassName) {
              const constructor = getConstructor(typeOrClassName);
              const components = [];

              if (constructor) {
                NodeCls._findComponents(this, constructor, components);
              }

              return components;
            };

            nodeProto.getComponentInChildren = function (typeOrClassName) {
              const constructor = getConstructor(typeOrClassName);

              if (constructor) {
                return NodeCls._findChildComponent(this._children, constructor);
              }

              return null;
            };

            nodeProto.getComponentsInChildren = function (typeOrClassName) {
              const constructor = getConstructor(typeOrClassName);
              const components = [];

              if (constructor) {
                NodeCls._findComponents(this, constructor, components);

                NodeCls._findChildComponents(this.children, constructor, components);
              }

              return components;
            };

            nodeProto.addComponent = function (typeOrClassName) {

              let constructor;

              if (typeof typeOrClassName === 'string') {
                constructor = getClassByName(typeOrClassName);

                if (!constructor) {
                  if (legacyCC._RF.peek()) {
                    errorID(3808, typeOrClassName);
                  }

                  throw TypeError(getError(3807, typeOrClassName));
                }
              } else {
                if (!typeOrClassName) {
                  throw TypeError(getError(3804));
                }

                constructor = typeOrClassName;
              }

              if (typeof constructor !== 'function') {
                throw TypeError(getError(3809));
              }

              if (!isChildClassOf(constructor, Component)) {
                throw TypeError(getError(3810));
              }

              const ReqComp = constructor._requireComponent;

              if (ReqComp && !this.getComponent(ReqComp)) {
                this.addComponent(ReqComp);
              }

              const component = new constructor();
              component.node = this;

              this._components.push(component);

              this.emit(NodeEventType.COMPONENT_ADDED, component);

              if (this._activeInHierarchy) {
                legacyCC.director._nodeActivator.activateComp(component);
              }

              return component;
            };

            nodeProto.removeComponent = function (component) {
              if (!component) {
                errorID(3813);
                return;
              }

              let componentInstance = null;

              if (component instanceof Component) {
                componentInstance = component;
              } else {
                componentInstance = this.getComponent(component);
              }

              if (componentInstance) {
                componentInstance.destroy();
              }
            };

            const REGISTERED_EVENT_MASK_TRANSFORM_CHANGED = 1 << 0;
            const REGISTERED_EVENT_MASK_PARENT_CHANGED = 1 << 1;
            const REGISTERED_EVENT_MASK_LAYER_CHANGED = 1 << 2;
            const REGISTERED_EVENT_MASK_CHILD_REMOVED_CHANGED = 1 << 3;
            const REGISTERED_EVENT_MASK_CHILD_ADDED_CHANGED = 1 << 4;
            const REGISTERED_EVENT_MASK_SIBLING_ORDER_CHANGED_CHANGED = 1 << 5;

            nodeProto.on = function (type, callback, target, useCapture = false) {
              switch (type) {
                case NodeEventType.TRANSFORM_CHANGED:
                  this._eventMask |= TRANSFORM_ON;

                  if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_TRANSFORM_CHANGED)) {
                    this._registerOnTransformChanged();

                    this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_TRANSFORM_CHANGED;
                  }

                  break;

                case NodeEventType.PARENT_CHANGED:
                  if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_PARENT_CHANGED)) {
                    this._registerOnParentChanged();

                    this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_PARENT_CHANGED;
                  }

                  break;

                case NodeEventType.LAYER_CHANGED:
                  if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_LAYER_CHANGED)) {
                    this._registerOnLayerChanged();

                    this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_LAYER_CHANGED;
                  }

                  break;

                case NodeEventType.CHILD_REMOVED:
                  if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_CHILD_REMOVED_CHANGED)) {
                    this._registerOnChildRemoved();

                    this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_CHILD_REMOVED_CHANGED;
                  }

                  break;

                case NodeEventType.CHILD_ADDED:
                  if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_CHILD_ADDED_CHANGED)) {
                    this._registerOnChildAdded();

                    this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_CHILD_ADDED_CHANGED;
                  }

                  break;

                case NodeEventType.SIBLING_ORDER_CHANGED:
                  if (!(this._registeredNodeEventTypeMask & REGISTERED_EVENT_MASK_SIBLING_ORDER_CHANGED_CHANGED)) {
                    this._registerOnSiblingOrderChanged();

                    this._registeredNodeEventTypeMask |= REGISTERED_EVENT_MASK_SIBLING_ORDER_CHANGED_CHANGED;
                  }

                  break;
              }

              this._eventProcessor.on(type, callback, target, useCapture);
            };

            nodeProto.off = function (type, callback, target, useCapture = false) {
              this._eventProcessor.off(type, callback, target, useCapture);

              const hasListeners = this._eventProcessor.hasEventListener(type);

              if (!hasListeners) {
                switch (type) {
                  case NodeEventType.TRANSFORM_CHANGED:
                    this._eventMask &= ~TRANSFORM_ON;
                    break;
                }
              }
            };

            nodeProto.once = function (type, callback, target, useCapture) {
              this._eventProcessor.once(type, callback, target, useCapture);
            };

            nodeProto.emit = function (type, arg0, arg1, arg2, arg3, arg4) {
              this._eventProcessor.emit(type, arg0, arg1, arg2, arg3, arg4);
            };

            nodeProto.dispatchEvent = function (event) {
              this._eventProcessor.dispatchEvent(event);
            };

            nodeProto.hasEventListener = function (type, callback, target) {
              return this._eventProcessor.hasEventListener(type, callback, target);
            };

            nodeProto.targetOff = function (target) {
              if (this._eventMask & TRANSFORM_ON && !this._eventProcessor.hasEventListener(NodeEventType.TRANSFORM_CHANGED)) {
                this._eventMask &= ~TRANSFORM_ON;
              }
            };

            nodeProto._removeComponent = function (component) {
              if (!component) {
                errorID(3814);
                return;
              }

              if (!(this._objFlags & Destroying$2)) {
                const i = this._components.indexOf(component);

                if (i !== -1) {
                  this._components.splice(i, 1);

                  this.emit(NodeEventType.COMPONENT_REMOVED, component);
                } else if (component.node !== this) {
                  errorID(3815);
                }
              }
            };

            nodeProto._registerIfAttached =  undefined ;

            nodeProto._onTransformChanged = function (transformType) {
              this.emit(NodeEventType.TRANSFORM_CHANGED, transformType);
            };

            nodeProto._onParentChanged = function (oldParent) {
              this.emit(NodeEventType.PARENT_CHANGED, oldParent);
            };

            nodeProto._onReAttach = function () {
              this._eventProcessor.reattach();
            };

            nodeProto._onEditorAttached = function (attached) {
            };

            nodeProto._onRemovePersistRootNode = function () {
              legacyCC.game.removePersistRootNode(this);
            };

            nodeProto._onDestroyComponents = function () {
              this._eventProcessor.destroy();

              const comps = this._components;

              for (let i = 0; i < comps.length; ++i) {
                comps[i]._destroyImmediate();
              }
            };

            nodeProto._onLayerChanged = function (layer) {
              this.emit(NodeEventType.LAYER_CHANGED, layer);
            };

            nodeProto._onChildRemoved = function (child) {
              this.emit(NodeEventType.CHILD_REMOVED, child);
            };

            nodeProto._onChildAdded = function (child) {
              this.emit(NodeEventType.CHILD_ADDED, child);
            };

            nodeProto._onNodeDestroyed = function () {
              this.emit(NodeEventType.NODE_DESTROYED, this);
              const children = this._children;

              for (let i = 0; i < children.length; ++i) {
                children[i]._destroyImmediate();
              }
            };

            const oldPreDestroy = nodeProto._onPreDestroy;

            nodeProto._onPreDestroy = function _onPreDestroy() {
              const ret = oldPreDestroy.call(this);
              this.emit(NodeEventType.NODE_DESTROYED, this);

              this._eventProcessor.destroy();

              const children = this._children;

              for (let i = 0; i < children.length; ++i) {
                children[i]._destroyImmediate();
              }

              const comps = this._components;

              for (let i = 0; i < comps.length; ++i) {
                comps[i]._destroyImmediate();
              }

              return ret;
            };

            nodeProto.destroyAllChildren = function destroyAllChildren() {
              const children = this._children;

              for (let i = 0, len = children.length; i < len; ++i) {
                children[i].destroy();
              }
            };

            nodeProto._onSiblingOrderChanged = function () {
              this.emit(NodeEventType.SIBLING_ORDER_CHANGED);
            };

            nodeProto._onActivateNode = function (shouldActiveNow) {
              legacyCC.director._nodeActivator.activateNode(this, shouldActiveNow);
            };

            nodeProto._onPostActivated = function (active) {
              if (active) {
                this._eventProcessor.setEnabled(true);

                this.invalidateChildren(TransformBit.TRS);

                if (this._uiProps && this._uiProps.uiComp) {
                  this._uiProps.uiComp.setNodeDirty();

                  this._uiProps.uiComp.setTextureDirty();

                  this._uiProps.uiComp.markForUpdateRenderData();
                }
              } else {
                this._eventProcessor.setEnabled(false);
              }
            };

            NodeCls._findComponent = function (node, constructor) {
              const cls = constructor;
              const comps = node._components;

              if (cls._sealed) {
                for (let i = 0; i < comps.length; ++i) {
                  const comp = comps[i];

                  if (comp.constructor === constructor) {
                    return comp;
                  }
                }
              } else {
                for (let i = 0; i < comps.length; ++i) {
                  const comp = comps[i];

                  if (comp instanceof constructor) {
                    return comp;
                  }
                }
              }

              return null;
            };

            NodeCls._findComponents = function (node, constructor, components) {
              const cls = constructor;
              const comps = node._components;

              if (cls._sealed) {
                for (let i = 0; i < comps.length; ++i) {
                  const comp = comps[i];

                  if (comp.constructor === constructor) {
                    components.push(comp);
                  }
                }
              } else {
                for (let i = 0; i < comps.length; ++i) {
                  const comp = comps[i];

                  if (comp instanceof constructor) {
                    components.push(comp);
                  }
                }
              }
            };

            NodeCls._findChildComponent = function (children, constructor) {
              for (let i = 0; i < children.length; ++i) {
                const node = children[i];

                let comp = NodeCls._findComponent(node, constructor);

                if (comp) {
                  return comp;
                }

                const childChildren = node.children;

                if (childChildren.length > 0) {
                  comp = NodeCls._findChildComponent(childChildren, constructor);

                  if (comp) {
                    return comp;
                  }
                }
              }

              return null;
            };

            NodeCls._findChildComponents = function (children, constructor, components) {
              for (let i = 0; i < children.length; ++i) {
                const node = children[i];

                NodeCls._findComponents(node, constructor, components);

                const childChildren = node.children;

                if (childChildren.length > 0) {
                  NodeCls._findChildComponents(childChildren, constructor, components);
                }
              }
            };

            NodeCls.isNode = function (obj) {
              return obj instanceof jsb.Node && (obj.constructor === jsb.Node || !(obj instanceof legacyCC.Scene));
            };

            let _tempQuat = new Quat();

            nodeProto.setRTS = function setRTS(rot, pos, scale) {
              if (rot) {
                let val = _tempQuat;

                if (rot instanceof Quat) {
                  val = rot;
                } else {
                  Quat.fromEuler(val, rot.x, rot.y, rot.z);
                }

                _tempFloatArray[0] = 4;
                _tempFloatArray[1] = val.x;
                _tempFloatArray[2] = val.y;
                _tempFloatArray[3] = val.z;
                _tempFloatArray[4] = val.w;

                this._lrot.set(val.x, val.y, val.z, val.w);
              } else {
                _tempFloatArray[0] = 0;
              }

              if (pos) {
                _tempFloatArray[5] = 3;
                _tempFloatArray[6] = pos.x;
                _tempFloatArray[7] = pos.y;
                _tempFloatArray[8] = pos.z;

                this._lpos.set(pos.x, pos.y, pos.z);
              } else {
                _tempFloatArray[5] = 0;
              }

              if (scale) {
                _tempFloatArray[9] = 3;
                _tempFloatArray[10] = scale.x;
                _tempFloatArray[11] = scale.y;
                _tempFloatArray[12] = scale.z;

                this._lscale.set(scale.x, scale.y, scale.z);
              } else {
                _tempFloatArray[9] = 0;
              }

              this._setRTS();
            };

            nodeProto.getPosition = function getPosition(out) {
              if (out) {
                return Vec3.set(out, this._lpos.x, this._lpos.y, this._lpos.z);
              }

              return Vec3.copy(new Vec3(), this._lpos);
            };

            nodeProto.setPosition = function setPosition(val, y, z) {
              if (y === undefined && z === undefined) {
                _tempFloatArray[0] = 3;
                const pos = val;
                this._lpos.x = _tempFloatArray[1] = pos.x;
                this._lpos.y = _tempFloatArray[2] = pos.y;
                this._lpos.z = _tempFloatArray[3] = pos.z;
              } else if (z === undefined) {
                _tempFloatArray[0] = 2;
                this._lpos.x = _tempFloatArray[1] = val;
                this._lpos.y = _tempFloatArray[2] = y;
              } else {
                _tempFloatArray[0] = 3;
                this._lpos.x = _tempFloatArray[1] = val;
                this._lpos.y = _tempFloatArray[2] = y;
                this._lpos.z = _tempFloatArray[3] = z;
              }

              this._setPosition();
            };

            nodeProto.getRotation = function getRotation(out) {
              const lrot = this._lrot;

              if (out) {
                return Quat.set(out, lrot.x, lrot.y, lrot.z, lrot.w);
              }

              return Quat.copy(new Quat(), lrot);
            };

            nodeProto.setRotation = function setRotation(val, y, z, w) {
              if (y === undefined || z === undefined || w === undefined) {
                const rot = val;
                this._lrot.x = _tempFloatArray[0] = rot.x;
                this._lrot.y = _tempFloatArray[1] = rot.y;
                this._lrot.z = _tempFloatArray[2] = rot.z;
                this._lrot.w = _tempFloatArray[3] = rot.w;
              } else {
                this._lrot.x = _tempFloatArray[0] = val;
                this._lrot.y = _tempFloatArray[1] = y;
                this._lrot.z = _tempFloatArray[2] = z;
                this._lrot.w = _tempFloatArray[3] = w;
              }

              this._setRotation();
            };

            nodeProto.setRotationFromEuler = function setRotationFromEuler(val, y, zOpt) {
              const z = zOpt === undefined ? this._euler.z : zOpt;

              if (y === undefined) {
                const euler = val;
                this._euler.x = _tempFloatArray[0] = euler.x;
                this._euler.y = _tempFloatArray[1] = euler.y;
                this._euler.z = _tempFloatArray[2] = euler.z;
              } else {
                this._euler.x = _tempFloatArray[0] = val;
                this._euler.y = _tempFloatArray[1] = y;
                this._euler.z = _tempFloatArray[2] = z;
              }

              this._setRotationFromEuler();
            };

            nodeProto.getScale = function getScale(out) {
              if (out) {
                return Vec3.set(out, this._lscale.x, this._lscale.y, this._lscale.z);
              }

              return Vec3.copy(new Vec3(), this._lscale);
            };

            nodeProto.setScale = function setScale(val, y, z) {
              if (y === undefined && z === undefined) {
                _tempFloatArray[0] = 3;
                const scale = val;
                this._lscale.x = _tempFloatArray[1] = scale.x;
                this._lscale.y = _tempFloatArray[2] = scale.y;
                this._lscale.z = _tempFloatArray[3] = scale.z;
              } else if (z === undefined) {
                _tempFloatArray[0] = 2;
                this._lscale.x = _tempFloatArray[1] = val;
                this._lscale.y = _tempFloatArray[2] = y;
              } else {
                _tempFloatArray[0] = 3;
                this._lscale.x = _tempFloatArray[1] = val;
                this._lscale.y = _tempFloatArray[2] = y;
                this._lscale.z = _tempFloatArray[3] = z;
              }

              this._setScale();
            };

            nodeProto.getWorldPosition = function getWorldPosition(out) {
              this._getWorldPosition();

              out = out || new Vec3();
              return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
            };

            nodeProto.getWorldRotation = function getWorldRotation(out) {
              this._getWorldRotation();

              out = out || new Quat();
              return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2], _tempFloatArray[3]);
            };

            nodeProto.getWorldScale = function getWorldScale(out) {
              this._getWorldScale();

              out = out || new Vec3();
              return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
            };

            nodeProto.getWorldMatrix = function getWorldMatrix(out) {
              this._getWorldMatrix();

              out = out || new Mat4();
              fillMat4WithTempFloatArray(out);
              return out;
            };

            nodeProto.getEulerAngles = function getEulerAngles(out) {
              this._getEulerAngles();

              out = out || new Vec3();
              return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
            };

            nodeProto.getForward = function getForward(out) {
              this._getForward();

              out = out || new Vec3();
              return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
            };

            nodeProto.getUp = function getUp(out) {
              this._getUp();

              out = out || new Vec3();
              return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
            };

            nodeProto.getRight = function getRight(out) {
              this._getRight();

              out = out || new Vec3();
              return out.set(_tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
            };

            nodeProto.inverseTransformPoint = function inverseTransformPoint(out, p) {
              _tempFloatArray[0] = p.x;
              _tempFloatArray[1] = p.y;
              _tempFloatArray[2] = p.z;

              this._inverseTransformPoint();

              out.x = _tempFloatArray[0];
              out.y = _tempFloatArray[1];
              out.z = _tempFloatArray[2];
              return out;
            };

            nodeProto.getWorldRT = function getWorldRT(out) {
              out = out || new Mat4();

              this._getWorldRT();

              fillMat4WithTempFloatArray(out);
              return out;
            };

            nodeProto.getWorldRS = function getWorldRS(out) {
              out = out || new Mat4();

              this._getWorldRS();

              fillMat4WithTempFloatArray(out);
              return out;
            };

            Object.defineProperty(nodeProto, 'position', {
              configurable: true,
              enumerable: true,

              get() {
                return this._lpos;
              },

              set(v) {
                this.setPosition(v);
              }

            });
            Object.defineProperty(nodeProto, 'rotation', {
              configurable: true,
              enumerable: true,

              get() {
                return this._lrot;
              },

              set(v) {
                this.setRotation(v);
              }

            });
            Object.defineProperty(nodeProto, 'scale', {
              configurable: true,
              enumerable: true,

              get() {
                return this._lscale;
              },

              set(v) {
                this.setScale(v);
              }

            });
            Object.defineProperty(nodeProto, 'worldPosition', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getWorldPosition();
              },

              set(v) {
                this.setWorldPosition(v);
              }

            });
            Object.defineProperty(nodeProto, 'worldRotation', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getWorldRotation();
              },

              set(v) {
                this.setWorldRotation(v);
              }

            });
            Object.defineProperty(nodeProto, 'worldScale', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getWorldScale();
              },

              set(v) {
                this.setWorldScale(v);
              }

            });
            Object.defineProperty(nodeProto, '_pos', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getWorldPosition();
              }

            });
            Object.defineProperty(nodeProto, '_rot', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getWorldRotation();
              }

            });
            Object.defineProperty(nodeProto, '_scale', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getWorldScale();
              }

            });
            Object.defineProperty(nodeProto, 'eulerAngles', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getEulerAngles();
              },

              set(v) {
                this.setRotationFromEuler(v.x, v.y, v.z);
              }

            });
            Object.defineProperty(nodeProto, 'worldMatrix', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getWorldMatrix();
              }

            });
            Object.defineProperty(nodeProto, '_mat', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getWorldMatrix();
              }

            });
            Object.defineProperty(nodeProto, 'activeInHierarchy', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedUint8Arr[0] != 0;
              },

              set(v) {
                this._sharedUint8Arr[0] = v ? 1 : 0;
              }

            });
            Object.defineProperty(nodeProto, '_activeInHierarchy', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedUint8Arr[0] != 0;
              },

              set(v) {
                this._sharedUint8Arr[0] = v ? 1 : 0;
              }

            });
            Object.defineProperty(nodeProto, 'layer', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedUint32Arr[1];
              },

              set(v) {
                this._sharedUint32Arr[1] = v;

                if (this._uiProps && this._uiProps.uiComp) {
                  this._uiProps.uiComp.setNodeDirty();

                  this._uiProps.uiComp.markForUpdateRenderData();
                }

                this.emit(NodeEventType.LAYER_CHANGED, v);
              }

            });
            Object.defineProperty(nodeProto, '_layer', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedUint32Arr[1];
              },

              set(v) {
                this._sharedUint32Arr[1] = v;
              }

            });
            Object.defineProperty(nodeProto, '_eventMask', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedUint32Arr[0];
              },

              set(v) {
                this._sharedUint32Arr[0] = v;
              }

            });
            Object.defineProperty(nodeProto, '_siblingIndex', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedInt32Arr[0];
              },

              set(v) {
                this._sharedInt32Arr[0] = v;
              }

            });

            nodeProto.getSiblingIndex = function getSiblingIndex() {
              return this._sharedInt32Arr[0];
            };

            Object.defineProperty(nodeProto, '_dirtyFlags', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedUint32Arr[2];
              },

              set(v) {
                this._sharedUint32Arr[2] = v;
              }

            });
            Object.defineProperty(nodeProto, '_active', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedUint8Arr[1] != 0;
              },

              set(v) {
                this._sharedUint8Arr[1] = v ? 1 : 0;
              }

            });
            Object.defineProperty(nodeProto, 'active', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedUint8Arr[1] != 0;
              },

              set(v) {
                this.setActive(!!v);
              }

            });
            Object.defineProperty(nodeProto, '_static', {
              configurable: true,
              enumerable: true,

              get() {
                return this._sharedUint8Arr[2] != 0;
              },

              set(v) {
                this._sharedUint8Arr[2] = v ? 1 : 0;
              }

            });
            Object.defineProperty(nodeProto, 'forward', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getForward();
              },

              set(dir) {
                this.setForward(dir);
              }

            });
            Object.defineProperty(nodeProto, 'up', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getUp();
              }

            });
            Object.defineProperty(nodeProto, 'right', {
              configurable: true,
              enumerable: true,

              get() {
                return this.getRight();
              }

            });
            Object.defineProperty(nodeProto, 'eventProcessor', {
              configurable: true,
              enumerable: true,

              get() {
                return this._eventProcessor;
              }

            });
            Object.defineProperty(nodeProto, 'components', {
              configurable: true,
              enumerable: true,

              get() {
                return this._components;
              }

            });
            Object.defineProperty(nodeProto, '_parent', {
              configurable: true,
              enumerable: true,

              get() {
                this._parentRef = this._parentInternal;
                return this._parentRef;
              },

              set(v) {
                this._parentRef = this._parentInternal = v;
              }

            });
            Object.defineProperty(nodeProto, 'parent', {
              configurable: true,
              enumerable: true,

              get() {
                this._parentRef = this.getParent();
                return this._parentRef;
              },

              set(v) {
                this._parentRef = v;
                this.setParent(v);
              }

            });
            Object.defineProperty(nodeProto, 'children', {
              configurable: true,
              enumerable: true,

              get() {
                return this._children;
              },

              set(v) {
                this._children = v;
              }

            });
            Object.defineProperty(nodeProto, 'scene', {
              configurable: true,
              enumerable: true,

              get() {
                return this._scene;
              }

            });

            nodeProto.rotate = function (rot, ns) {
              _tempFloatArray[1] = rot.x;
              _tempFloatArray[2] = rot.y;
              _tempFloatArray[3] = rot.z;
              _tempFloatArray[4] = rot.w;

              if (ns) {
                _tempFloatArray[5] = ns;
                _tempFloatArray[0] = 5;
              } else {
                _tempFloatArray[0] = 4;
              }

              this._rotateForJS();

              const lrot = this._lrot;
              lrot.x = _tempFloatArray[0];
              lrot.y = _tempFloatArray[1];
              lrot.z = _tempFloatArray[2];
              lrot.w = _tempFloatArray[3];
            };

            nodeProto.addChild = function (child) {
              child.setParent(this);
            };

            nodeProto.insertChild = function (child, siblingIndex) {
              child.parent = this;
              child.setSiblingIndex(siblingIndex);
            };

            nodeProto[serializeTag] = function (serializationOutput, context) {
              {
                serializationOutput.writeThis();
              }

              const isMountedChild = () => {
                var _ref;

                return !!((_ref = this[editorExtrasTag]) === null || _ref === void 0 ? void 0 : _ref.mountedRoot);
              };

              const isSyncPrefab = () => {
                var _this$_prefab, _this$_prefab$root, _this$_prefab$root$_p, _this$_prefab2;

                return ((_this$_prefab = this._prefab) === null || _this$_prefab === void 0 ? void 0 : (_this$_prefab$root = _this$_prefab.root) === null || _this$_prefab$root === void 0 ? void 0 : (_this$_prefab$root$_p = _this$_prefab$root._prefab) === null || _this$_prefab$root$_p === void 0 ? void 0 : _this$_prefab$root$_p.instance) && ((this === null || this === void 0 ? void 0 : (_this$_prefab2 = this._prefab) === null || _this$_prefab2 === void 0 ? void 0 : _this$_prefab2.instance) || !isMountedChild());
              };

              const canDiscardByPrefabRoot = () => !(context.customArguments[reserveContentsForAllSyncablePrefabTag] || !isSyncPrefab() || context.root === this);

              if (canDiscardByPrefabRoot()) {
                var _this$_prefab3;

                const isRoot = ((_this$_prefab3 = this._prefab) === null || _this$_prefab3 === void 0 ? void 0 : _this$_prefab3.root) === this;

                if (isRoot) {
                  serializationOutput.writeProperty('_objFlags', this._objFlags);
                  serializationOutput.writeProperty('_parent', this._parent);
                  serializationOutput.writeProperty('_prefab', this._prefab);

                  if (context.customArguments.keepNodeUuid) {
                    serializationOutput.writeProperty('_id', this._id);
                  }

                  serializationOutput.writeProperty(editorExtrasTag, this[editorExtrasTag]);
                }
              } else {
                serializationOutput.writeThis();
              }
            };

            nodeProto._onActiveNode = function (shouldActiveNow) {
              legacyCC.director._nodeActivator.activateNode(this, shouldActiveNow);
            };

            nodeProto._onBatchCreated = function (dontSyncChildPrefab) {
              this.hasChangedFlags = TRANSFORMBIT_TRS;
              this._dirtyFlags |= TRANSFORMBIT_TRS;
              const children = this._children;
              const len = children.length;
              let child;

              for (let i = 0; i < len; ++i) {
                child = children[i];
                child._siblingIndex = i;

                child._onBatchCreated(dontSyncChildPrefab);
              }

              syncNodeValues(this);
            };

            nodeProto._onSceneUpdated = function (scene) {
              this._scene = scene;
            };

            nodeProto._onLocalPositionUpdated = function (x, y, z) {
              const lpos = this._lpos;
              lpos.x = x;
              lpos.y = y;
              lpos.z = z;
            };

            nodeProto._onLocalRotationUpdated = function (x, y, z, w) {
              const lrot = this._lrot;
              lrot.x = x;
              lrot.y = y;
              lrot.z = z;
              lrot.w = w;
            };

            nodeProto._onLocalScaleUpdated = function (x, y, z) {
              const lscale = this._lscale;
              lscale.x = x;
              lscale.y = y;
              lscale.z = z;
            };

            nodeProto._onLocalPositionRotationScaleUpdated = function (px, py, pz, rx, ry, rz, rw, sx, sy, sz) {
              const lpos = this._lpos;
              lpos.x = px;
              lpos.y = py;
              lpos.z = pz;
              const lrot = this._lrot;
              lrot.x = rx;
              lrot.y = ry;
              lrot.z = rz;
              lrot.w = rw;
              const lscale = this._lscale;
              lscale.x = sx;
              lscale.y = sy;
              lscale.z = sz;
            };

            nodeProto._instantiate = function (cloned, isSyncedNode) {
              if (!cloned) {
                cloned = legacyCC.instantiate._clone(this, this);
              }

              const newPrefabInfo = cloned._prefab;

              cloned._parent = null;

              cloned._onBatchCreated(isSyncedNode);

              return cloned;
            };

            nodeProto._ctor = function (name) {
              this.__nativeRefs = {};
              this._parentRef = null;
              this.__jsb_ref_id = undefined;
              this._iN$t = null;
              this.__editorExtras__ = {
                editorOnly: true
              };
              this._components = [];
              this._eventProcessor = new legacyCC.NodeEventProcessor(this);
              this._uiProps = new NodeUIProperties(this);

              const sharedArrayBuffer = this._getSharedArrayBufferObject();

              this._sharedUint32Arr = new Uint32Array(sharedArrayBuffer, 0, 3);
              this._sharedInt32Arr = new Int32Array(sharedArrayBuffer, 12, 1);
              this._sharedUint8Arr = new Uint8Array(sharedArrayBuffer, 16, 3);
              this._sharedUint32Arr[1] = Layers.Enum.DEFAULT;
              this._scene = null;
              this._prefab = null;
              this._originalSceneId = '';

              this._registerListeners();

              this._children = [];
              this._lpos = new Vec3();
              this._lrot = new Quat();
              this._lscale = new Vec3(1, 1, 1);
              this._euler = new Vec3();
              this._registeredNodeEventTypeMask = 0;
              this.on(NodeEventType.CHILD_ADDED, child => {
                this._children.push(child);
              });
              this.on(NodeEventType.CHILD_REMOVED, child => {
                const removeAt = this._children.indexOf(child);

                if (removeAt < 0) {
                  errorID(1633);
                  return;
                }

                this._children.splice(removeAt, 1);
              });

              this._onSiblingIndexChanged = function (index) {
                const siblings = this._parent._children;
                index = index !== -1 ? index : siblings.length - 1;
                const oldIndex = siblings.indexOf(this);

                if (index !== oldIndex) {
                  siblings.splice(oldIndex, 1);

                  if (index < siblings.length) {
                    siblings.splice(index, 0, this);
                  } else {
                    siblings.push(this);
                  }
                }
              };
            };

            const NodeProto = Node$1.prototype;

            const _persistNodeDescriptor = Object.getOwnPropertyDescriptor(NodeProto, '_persistNode');

            property(NodeProto, '_persistNode', _persistNodeDescriptor);
            serializable(NodeProto, '_parent');
            serializable(NodeProto, '_children');
            serializable(NodeProto, '_active');
            serializable(NodeProto, '_components');
            serializable(NodeProto, '_prefab');
            serializable(NodeProto, '_lpos');
            serializable(NodeProto, '_lrot');
            serializable(NodeProto, '_lscale');
            serializable(NodeProto, '_layer');
            serializable(NodeProto, '_euler');
            const eulerAnglesDescriptor = Object.getOwnPropertyDescriptor(NodeProto, 'eulerAngles');
            type(Vec3)(NodeProto, 'eulerAngles', eulerAnglesDescriptor);
            ccclass('cc.Node')(Node$1);

            CCClass.Attr.setClassAttr(EventHandler, 'target', 'type', 'Object');
            CCClass.Attr.setClassAttr(EventHandler, 'target', 'ctor', Node$1);

            let CameraFOVAxis;

            (function (CameraFOVAxis) {
              CameraFOVAxis[CameraFOVAxis["VERTICAL"] = 0] = "VERTICAL";
              CameraFOVAxis[CameraFOVAxis["HORIZONTAL"] = 1] = "HORIZONTAL";
            })(CameraFOVAxis || (CameraFOVAxis = exports('ch', {})));

            let CameraProjection;

            (function (CameraProjection) {
              CameraProjection[CameraProjection["ORTHO"] = 0] = "ORTHO";
              CameraProjection[CameraProjection["PERSPECTIVE"] = 1] = "PERSPECTIVE";
            })(CameraProjection || (CameraProjection = exports('ci', {})));

            let CameraAperture;

            (function (CameraAperture) {
              CameraAperture[CameraAperture["F1_8"] = 0] = "F1_8";
              CameraAperture[CameraAperture["F2_0"] = 1] = "F2_0";
              CameraAperture[CameraAperture["F2_2"] = 2] = "F2_2";
              CameraAperture[CameraAperture["F2_5"] = 3] = "F2_5";
              CameraAperture[CameraAperture["F2_8"] = 4] = "F2_8";
              CameraAperture[CameraAperture["F3_2"] = 5] = "F3_2";
              CameraAperture[CameraAperture["F3_5"] = 6] = "F3_5";
              CameraAperture[CameraAperture["F4_0"] = 7] = "F4_0";
              CameraAperture[CameraAperture["F4_5"] = 8] = "F4_5";
              CameraAperture[CameraAperture["F5_0"] = 9] = "F5_0";
              CameraAperture[CameraAperture["F5_6"] = 10] = "F5_6";
              CameraAperture[CameraAperture["F6_3"] = 11] = "F6_3";
              CameraAperture[CameraAperture["F7_1"] = 12] = "F7_1";
              CameraAperture[CameraAperture["F8_0"] = 13] = "F8_0";
              CameraAperture[CameraAperture["F9_0"] = 14] = "F9_0";
              CameraAperture[CameraAperture["F10_0"] = 15] = "F10_0";
              CameraAperture[CameraAperture["F11_0"] = 16] = "F11_0";
              CameraAperture[CameraAperture["F13_0"] = 17] = "F13_0";
              CameraAperture[CameraAperture["F14_0"] = 18] = "F14_0";
              CameraAperture[CameraAperture["F16_0"] = 19] = "F16_0";
              CameraAperture[CameraAperture["F18_0"] = 20] = "F18_0";
              CameraAperture[CameraAperture["F20_0"] = 21] = "F20_0";
              CameraAperture[CameraAperture["F22_0"] = 22] = "F22_0";
            })(CameraAperture || (CameraAperture = exports('cj', {})));

            let CameraISO;

            (function (CameraISO) {
              CameraISO[CameraISO["ISO100"] = 0] = "ISO100";
              CameraISO[CameraISO["ISO200"] = 1] = "ISO200";
              CameraISO[CameraISO["ISO400"] = 2] = "ISO400";
              CameraISO[CameraISO["ISO800"] = 3] = "ISO800";
            })(CameraISO || (CameraISO = exports('ck', {})));

            let CameraShutter;

            (function (CameraShutter) {
              CameraShutter[CameraShutter["D1"] = 0] = "D1";
              CameraShutter[CameraShutter["D2"] = 1] = "D2";
              CameraShutter[CameraShutter["D4"] = 2] = "D4";
              CameraShutter[CameraShutter["D8"] = 3] = "D8";
              CameraShutter[CameraShutter["D15"] = 4] = "D15";
              CameraShutter[CameraShutter["D30"] = 5] = "D30";
              CameraShutter[CameraShutter["D60"] = 6] = "D60";
              CameraShutter[CameraShutter["D125"] = 7] = "D125";
              CameraShutter[CameraShutter["D250"] = 8] = "D250";
              CameraShutter[CameraShutter["D500"] = 9] = "D500";
              CameraShutter[CameraShutter["D1000"] = 10] = "D1000";
              CameraShutter[CameraShutter["D2000"] = 11] = "D2000";
              CameraShutter[CameraShutter["D4000"] = 12] = "D4000";
            })(CameraShutter || (CameraShutter = exports('cl', {})));

            let CameraType;

            (function (CameraType) {
              CameraType[CameraType["DEFAULT"] = -1] = "DEFAULT";
              CameraType[CameraType["LEFT_EYE"] = 0] = "LEFT_EYE";
              CameraType[CameraType["RIGHT_EYE"] = 1] = "RIGHT_EYE";
              CameraType[CameraType["MAIN"] = 2] = "MAIN";
            })(CameraType || (CameraType = exports('cm', {})));

            let TrackingType;

            (function (TrackingType) {
              TrackingType[TrackingType["NO_TRACKING"] = 0] = "NO_TRACKING";
              TrackingType[TrackingType["POSITION_AND_ROTATION"] = 1] = "POSITION_AND_ROTATION";
              TrackingType[TrackingType["POSITION"] = 2] = "POSITION";
              TrackingType[TrackingType["ROTATION"] = 3] = "ROTATION";
            })(TrackingType || (TrackingType = exports('cn', {})));

            const SKYBOX_FLAG = exports('co', ClearFlagBit.STENCIL << 1);
            const Camera = exports('cp', jsb.Camera);
            const cameraProto = jsb.Camera.prototype;
            Object.defineProperty(Camera, "standardExposureValue", {
              configurable: true,
              enumerable: true,

              get() {
                return Camera.getStandardExposureValue();
              }

            });
            Object.defineProperty(Camera, "standardLightMeterScale", {
              configurable: true,
              enumerable: true,

              get() {
                return Camera.getStandardLightMeterScale();
              }

            });
            Object.defineProperty(cameraProto, 'matView', {
              configurable: true,
              enumerable: true,

              get() {
                this.getMatView();
                fillMat4WithTempFloatArray(this._matView);
                return this._matView;
              }

            });
            Object.defineProperty(cameraProto, 'matProj', {
              configurable: true,
              enumerable: true,

              get() {
                this.getMatProj();
                fillMat4WithTempFloatArray(this._matProj);
                return this._matProj;
              }

            });
            Object.defineProperty(cameraProto, 'matProjInv', {
              configurable: true,
              enumerable: true,

              get() {
                this.getMatProjInv();
                fillMat4WithTempFloatArray(this._matProjInv);
                return this._matProjInv;
              }

            });
            Object.defineProperty(cameraProto, 'matViewProj', {
              configurable: true,
              enumerable: true,

              get() {
                this.getMatViewProj();
                fillMat4WithTempFloatArray(this._matViewProj);
                return this._matViewProj;
              }

            });
            Object.defineProperty(cameraProto, 'matViewProjInv', {
              configurable: true,
              enumerable: true,

              get() {
                this.getMatViewProjInv();
                fillMat4WithTempFloatArray(this._matViewProjInv);
                return this._matViewProjInv;
              }

            });
            const oldInitialize = cameraProto.initialize;

            cameraProto.initialize = function initialize() {
              oldInitialize.apply(this, arguments);
              this._matView = new Mat4();
              this._matProj = new Mat4();
              this._matProjInv = new Mat4();
              this._matViewProj = new Mat4();
              this._matViewProjInv = new Mat4();
            };

            const oldScreenPointToRay = cameraProto.screenPointToRay;
            const oldScreenToWorld = cameraProto.screenToWorld;
            const oldWorldToScreen = cameraProto.worldToScreen;
            const oldWorldMatrixToScreen = cameraProto.worldMatrixToScreen;

            cameraProto.screenPointToRay = function screenPointToRay(out, x, y) {
              _tempFloatArray[0] = x;
              _tempFloatArray[1] = y;
              oldScreenPointToRay.call(this);
              out.o.x = _tempFloatArray[0];
              out.o.y = _tempFloatArray[1];
              out.o.z = _tempFloatArray[2];
              out.d.x = _tempFloatArray[3];
              out.d.y = _tempFloatArray[4];
              out.d.z = _tempFloatArray[5];
              return out;
            };

            cameraProto.screenToWorld = function screenToWorld(out, screenPos) {
              _tempFloatArray[0] = screenPos.x;
              _tempFloatArray[1] = screenPos.y;
              _tempFloatArray[2] = screenPos.z;
              oldScreenToWorld.call(this);
              Vec3.set(out, _tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
              return out;
            };

            cameraProto.worldToScreen = function worldToScreen(out, worldPos) {
              _tempFloatArray[0] = worldPos.x;
              _tempFloatArray[1] = worldPos.y;
              _tempFloatArray[2] = worldPos.z;
              oldWorldToScreen.call(this);
              Vec3.set(out, _tempFloatArray[0], _tempFloatArray[1], _tempFloatArray[2]);
              return out;
            };

            cameraProto.worldMatrixToScreen = function worldMatrixToScreen(out, worldMatrix, width, height) {
              _tempFloatArray[0] = worldMatrix.m00;
              _tempFloatArray[1] = worldMatrix.m01;
              _tempFloatArray[2] = worldMatrix.m02;
              _tempFloatArray[3] = worldMatrix.m03;
              _tempFloatArray[4] = worldMatrix.m04;
              _tempFloatArray[5] = worldMatrix.m05;
              _tempFloatArray[6] = worldMatrix.m06;
              _tempFloatArray[7] = worldMatrix.m07;
              _tempFloatArray[8] = worldMatrix.m08;
              _tempFloatArray[9] = worldMatrix.m09;
              _tempFloatArray[10] = worldMatrix.m10;
              _tempFloatArray[11] = worldMatrix.m11;
              _tempFloatArray[12] = worldMatrix.m12;
              _tempFloatArray[13] = worldMatrix.m13;
              _tempFloatArray[14] = worldMatrix.m14;
              _tempFloatArray[15] = worldMatrix.m15;
              _tempFloatArray[16] = width;
              _tempFloatArray[17] = height;
              oldWorldMatrixToScreen.call(this);
              fillMat4WithTempFloatArray(out);
              return out;
            };

            var _dec$7, _dec2$5, _dec3$3, _dec4$2, _dec5$1, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _class$7, _class2$6, _descriptor$5, _descriptor2$4, _descriptor3$4, _descriptor4$3, _descriptor5$2, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _class3$3, _temp$5;

            const _temp_vec3_1 = new Vec3();

            const ProjectionType = Enum(CameraProjection);
            const FOVAxis = Enum(CameraFOVAxis);
            const Aperture = Enum(CameraAperture);
            const Shutter = Enum(CameraShutter);
            const ISO = Enum(CameraISO);
            const ClearFlag = Enum({
              SKYBOX: SKYBOX_FLAG | ClearFlagBit.DEPTH_STENCIL,
              SOLID_COLOR: ClearFlagBit.ALL,
              DEPTH_ONLY: ClearFlagBit.DEPTH_STENCIL,
              DONT_CLEAR: ClearFlagBit.NONE
            });
            let Camera$1 = exports('ei', (_dec$7 = ccclass('cc.Camera'), _dec2$5 = help(), _dec3$3 = menu(), _dec4$2 = displayOrder(), _dec5$1 = tooltip(), _dec6 = type(Layers.BitMask), _dec7 = displayOrder(), _dec8 = tooltip(), _dec9 = type(ClearFlag), _dec10 = displayOrder(), _dec11 = tooltip(), _dec12 = displayOrder(), _dec13 = tooltip(), _dec14 = displayOrder(), _dec15 = tooltip(), _dec16 = displayOrder(), _dec17 = tooltip(), _dec18 = type(ProjectionType), _dec19 = displayOrder(), _dec20 = tooltip(), _dec21 = type(FOVAxis), _dec22 = displayOrder(), _dec23 = visible(), _dec24 = tooltip(), _dec25 = displayOrder(), _dec26 = visible(), _dec27 = tooltip(), _dec28 = displayOrder(), _dec29 = visible(), _dec30 = tooltip(), _dec31 = displayOrder(), _dec32 = tooltip(), _dec33 = displayOrder(), _dec34 = tooltip(), _dec35 = type(Aperture), _dec36 = displayOrder(), _dec37 = tooltip(), _dec38 = type(Shutter), _dec39 = displayOrder(), _dec40 = tooltip(), _dec41 = type(ISO), _dec42 = displayOrder(), _dec43 = tooltip(), _dec44 = displayOrder(), _dec45 = tooltip(), _dec46 = type(RenderTexture), _dec47 = displayOrder(), _dec48 = tooltip(), _dec$7(_class$7 = _dec2$5(_class$7 = _dec3$3(_class$7 = executeInEditMode(_class$7 = (_class2$6 = (_temp$5 = _class3$3 = class Camera extends Component {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "_projection", _descriptor$5, this);

                _initializerDefineProperty(this, "_priority", _descriptor2$4, this);

                _initializerDefineProperty(this, "_fov", _descriptor3$4, this);

                _initializerDefineProperty(this, "_fovAxis", _descriptor4$3, this);

                _initializerDefineProperty(this, "_orthoHeight", _descriptor5$2, this);

                _initializerDefineProperty(this, "_near", _descriptor6, this);

                _initializerDefineProperty(this, "_far", _descriptor7, this);

                _initializerDefineProperty(this, "_color", _descriptor8, this);

                _initializerDefineProperty(this, "_depth", _descriptor9, this);

                _initializerDefineProperty(this, "_stencil", _descriptor10, this);

                _initializerDefineProperty(this, "_clearFlags", _descriptor11, this);

                _initializerDefineProperty(this, "_rect", _descriptor12, this);

                _initializerDefineProperty(this, "_aperture", _descriptor13, this);

                _initializerDefineProperty(this, "_shutter", _descriptor14, this);

                _initializerDefineProperty(this, "_iso", _descriptor15, this);

                _initializerDefineProperty(this, "_screenScale", _descriptor16, this);

                _initializerDefineProperty(this, "_visibility", _descriptor17, this);

                _initializerDefineProperty(this, "_targetTexture", _descriptor18, this);

                this._camera = null;
                this._inEditorMode = false;
                this._flows = undefined;

                _initializerDefineProperty(this, "_cameraType", _descriptor19, this);

                _initializerDefineProperty(this, "_trackingType", _descriptor20, this);
              }

              get camera() {
                return this._camera;
              }

              get priority() {
                return this._priority;
              }

              set priority(val) {
                this._priority = val;

                if (this._camera) {
                  this._camera.priority = val;
                }
              }

              get visibility() {
                return this._visibility;
              }

              set visibility(val) {
                this._visibility = val;

                if (this._camera) {
                  this._camera.visibility = val;
                }
              }

              get clearFlags() {
                return this._clearFlags;
              }

              set clearFlags(val) {
                this._clearFlags = val;

                if (this._camera) {
                  this._camera.clearFlag = val;
                }
              }

              get clearColor() {
                return this._color;
              }

              set clearColor(val) {
                this._color.set(val);

                if (this._camera) {
                  this._camera.clearColor = this._color;
                }
              }

              get clearDepth() {
                return this._depth;
              }

              set clearDepth(val) {
                this._depth = val;

                if (this._camera) {
                  this._camera.clearDepth = val;
                }
              }

              get clearStencil() {
                return this._stencil;
              }

              set clearStencil(val) {
                this._stencil = val;

                if (this._camera) {
                  this._camera.clearStencil = val;
                }
              }

              get projection() {
                return this._projection;
              }

              set projection(val) {
                this._projection = val;

                if (this._camera) {
                  this._camera.projectionType = val;
                }
              }

              get fovAxis() {
                return this._fovAxis;
              }

              set fovAxis(val) {
                if (val === this._fovAxis) {
                  return;
                }

                this._fovAxis = val;

                if (this._camera) {
                  this._camera.fovAxis = val;

                  if (val === CameraFOVAxis.VERTICAL) {
                    this.fov = this._fov * this._camera.aspect;
                  } else {
                    this.fov = this._fov / this._camera.aspect;
                  }
                }
              }

              get fov() {
                return this._fov;
              }

              set fov(val) {
                this._fov = val;

                if (this._camera) {
                  this._camera.fov = toRadian(val);
                }
              }

              get orthoHeight() {
                return this._orthoHeight;
              }

              set orthoHeight(val) {
                this._orthoHeight = val;

                if (this._camera) {
                  this._camera.orthoHeight = val;
                }
              }

              get near() {
                return this._near;
              }

              set near(val) {
                this._near = val;

                if (this._camera) {
                  this._camera.nearClip = val;
                }
              }

              get far() {
                return this._far;
              }

              set far(val) {
                this._far = val;

                if (this._camera) {
                  this._camera.farClip = val;
                }
              }

              get aperture() {
                return this._aperture;
              }

              set aperture(val) {
                this._aperture = val;

                if (this._camera) {
                  this._camera.aperture = val;
                }
              }

              get shutter() {
                return this._shutter;
              }

              set shutter(val) {
                this._shutter = val;

                if (this._camera) {
                  this._camera.shutter = val;
                }
              }

              get iso() {
                return this._iso;
              }

              set iso(val) {
                this._iso = val;

                if (this._camera) {
                  this._camera.iso = val;
                }
              }

              get rect() {
                return this._rect;
              }

              set rect(val) {
                this._rect = val;

                if (this._camera) {
                  this._camera.setViewportInOrientedSpace(val);
                }
              }

              get targetTexture() {
                return this._targetTexture;
              }

              set targetTexture(value) {
                if (this._targetTexture === value) {
                  return;
                }

                const old = this._targetTexture;
                this._targetTexture = value;

                this._checkTargetTextureEvent(old);

                this._updateTargetTexture();

                if (!value && this._camera) {
                  this._camera.changeTargetWindow( null);

                  this._camera.isWindowSize = true;
                }

                this.node.emit(Camera.TARGET_TEXTURE_CHANGE, this);
              }

              get screenScale() {
                return this._screenScale;
              }

              set screenScale(val) {
                this._screenScale = val;

                if (this._camera) {
                  this._camera.screenScale = val;
                }
              }

              get inEditorMode() {
                return this._inEditorMode;
              }

              set inEditorMode(value) {
                this._inEditorMode = value;

                if (this._camera) {
                  this._camera.changeTargetWindow(value ? legacyCC.director.root && legacyCC.director.root.mainWindow : legacyCC.director.root && legacyCC.director.root.tempWindow);
                }
              }

              get cameraType() {
                return this._cameraType;
              }

              set cameraType(val) {
                if (this._cameraType === val) {
                  return;
                }

                this._cameraType = val;

                if (this.camera) {
                  this.camera.cameraType = val;
                }
              }

              get trackingType() {
                return this._trackingType;
              }

              set trackingType(val) {
                if (this._trackingType === val) {
                  return;
                }

                this._trackingType = val;

                if (this.camera) {
                  this.camera.trackingType = val;
                }
              }

              onLoad() {
                this._createCamera();
              }

              onEnable() {
                this.node.hasChangedFlags |= TransformBit.POSITION;

                if (this._camera) {
                  this._attachToScene();
                }
              }

              onDisable() {
                if (this._camera) {
                  this._detachFromScene();
                }
              }

              onDestroy() {
                if (this._camera) {
                  this._camera.destroy();

                  this._camera = null;
                }

                if (this._targetTexture) {
                  this._targetTexture.off('resize');
                }
              }

              screenPointToRay(x, y, out) {
                if (!out) {
                  out = Ray.create();
                }

                if (this._camera) {
                  this._camera.screenPointToRay(out, x, y);
                }

                return out;
              }

              worldToScreen(worldPos, out) {
                if (!out) {
                  out = new Vec3();
                }

                if (this._camera) {
                  this._camera.worldToScreen(out, worldPos);
                }

                return out;
              }

              screenToWorld(screenPos, out) {
                if (!out) {
                  out = this.node.getWorldPosition();
                }

                if (this._camera) {
                  this._camera.screenToWorld(out, screenPos);
                }

                return out;
              }

              convertToUINode(wpos, uiNode, out) {
                if (!out) {
                  out = new Vec3();
                }

                if (!this._camera) {
                  return out;
                }

                this.worldToScreen(wpos, _temp_vec3_1);
                const cmp = uiNode.getComponent('cc.UITransform');
                const designSize = legacyCC.view.getVisibleSize();
                const xoffset = _temp_vec3_1.x - this._camera.width * 0.5;
                const yoffset = _temp_vec3_1.y - this._camera.height * 0.5;
                _temp_vec3_1.x = xoffset / legacyCC.view.getScaleX() + designSize.width * 0.5;
                _temp_vec3_1.y = yoffset / legacyCC.view.getScaleY() + designSize.height * 0.5;

                if (cmp) {
                  cmp.convertToNodeSpaceAR(_temp_vec3_1, out);
                }

                return out;
              }

              _createCamera() {
                if (!this._camera) {
                  this._camera = legacyCC.director.root.createCamera();

                  this._camera.initialize({
                    name: this.node.name,
                    node: this.node,
                    projection: this._projection,
                    window: this._inEditorMode ? legacyCC.director.root && legacyCC.director.root.mainWindow : legacyCC.director.root && legacyCC.director.root.tempWindow,
                    priority: this._priority,
                    cameraType: this.cameraType,
                    trackingType: this.trackingType
                  });

                  this._camera.setViewportInOrientedSpace(this._rect);

                  this._camera.fovAxis = this._fovAxis;
                  this._camera.fov = toRadian(this._fov);
                  this._camera.orthoHeight = this._orthoHeight;
                  this._camera.nearClip = this._near;
                  this._camera.farClip = this._far;
                  this._camera.clearColor = this._color;
                  this._camera.clearDepth = this._depth;
                  this._camera.clearStencil = this._stencil;
                  this._camera.clearFlag = this._clearFlags;
                  this._camera.visibility = this._visibility;
                  this._camera.aperture = this._aperture;
                  this._camera.shutter = this._shutter;
                  this._camera.iso = this._iso;
                }

                this._updateTargetTexture();
              }

              _attachToScene() {
                if (!this.node.scene || !this._camera) {
                  return;
                }

                if (this._camera && this._camera.scene) {
                  this._camera.scene.removeCamera(this._camera);
                }

                const rs = this._getRenderScene();

                rs.addCamera(this._camera);
              }

              _detachFromScene() {
                if (this._camera && this._camera.scene) {
                  this._camera.scene.removeCamera(this._camera);
                }
              }

              _checkTargetTextureEvent(old) {
                if (old) {
                  old.off('resize');
                }

                if (this._targetTexture) {
                  this._targetTexture.on('resize', window => {
                    if (this._camera) {
                      this._camera.setFixedSize(window.width, window.height);
                    }
                  }, this);
                }
              }

              _updateTargetTexture() {
                if (!this._camera) {
                  return;
                }

                if (this._targetTexture) {
                  const window = this._targetTexture.window;

                  this._camera.changeTargetWindow(window);

                  this._camera.setFixedSize(window.width, window.height);
                }
              }

            }, _class3$3.ProjectionType = ProjectionType, _class3$3.FOVAxis = FOVAxis, _class3$3.ClearFlag = ClearFlag, _class3$3.Aperture = Aperture, _class3$3.Shutter = Shutter, _class3$3.ISO = ISO, _class3$3.TARGET_TEXTURE_CHANGE = 'tex-change', _temp$5), (_descriptor$5 = _applyDecoratedDescriptor(_class2$6.prototype, "_projection", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return ProjectionType.PERSPECTIVE;
              }
            }), _descriptor2$4 = _applyDecoratedDescriptor(_class2$6.prototype, "_priority", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor3$4 = _applyDecoratedDescriptor(_class2$6.prototype, "_fov", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 45;
              }
            }), _descriptor4$3 = _applyDecoratedDescriptor(_class2$6.prototype, "_fovAxis", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return FOVAxis.VERTICAL;
              }
            }), _descriptor5$2 = _applyDecoratedDescriptor(_class2$6.prototype, "_orthoHeight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 10;
              }
            }), _descriptor6 = _applyDecoratedDescriptor(_class2$6.prototype, "_near", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor7 = _applyDecoratedDescriptor(_class2$6.prototype, "_far", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1000;
              }
            }), _descriptor8 = _applyDecoratedDescriptor(_class2$6.prototype, "_color", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Color('#333333');
              }
            }), _descriptor9 = _applyDecoratedDescriptor(_class2$6.prototype, "_depth", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor10 = _applyDecoratedDescriptor(_class2$6.prototype, "_stencil", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor11 = _applyDecoratedDescriptor(_class2$6.prototype, "_clearFlags", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return ClearFlag.SOLID_COLOR;
              }
            }), _descriptor12 = _applyDecoratedDescriptor(_class2$6.prototype, "_rect", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Rect(0, 0, 1, 1);
              }
            }), _descriptor13 = _applyDecoratedDescriptor(_class2$6.prototype, "_aperture", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Aperture.F16_0;
              }
            }), _descriptor14 = _applyDecoratedDescriptor(_class2$6.prototype, "_shutter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Shutter.D125;
              }
            }), _descriptor15 = _applyDecoratedDescriptor(_class2$6.prototype, "_iso", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return ISO.ISO100;
              }
            }), _descriptor16 = _applyDecoratedDescriptor(_class2$6.prototype, "_screenScale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor17 = _applyDecoratedDescriptor(_class2$6.prototype, "_visibility", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return CAMERA_DEFAULT_MASK;
              }
            }), _descriptor18 = _applyDecoratedDescriptor(_class2$6.prototype, "_targetTexture", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor19 = _applyDecoratedDescriptor(_class2$6.prototype, "_cameraType", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return CameraType.DEFAULT;
              }
            }), _descriptor20 = _applyDecoratedDescriptor(_class2$6.prototype, "_trackingType", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return TrackingType.NO_TRACKING;
              }
            }), _applyDecoratedDescriptor(_class2$6.prototype, "priority", [_dec4$2, _dec5$1], Object.getOwnPropertyDescriptor(_class2$6.prototype, "priority"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "visibility", [_dec6, _dec7, _dec8], Object.getOwnPropertyDescriptor(_class2$6.prototype, "visibility"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "clearFlags", [_dec9, _dec10, _dec11], Object.getOwnPropertyDescriptor(_class2$6.prototype, "clearFlags"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "clearColor", [_dec12, _dec13], Object.getOwnPropertyDescriptor(_class2$6.prototype, "clearColor"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "clearDepth", [_dec14, _dec15], Object.getOwnPropertyDescriptor(_class2$6.prototype, "clearDepth"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "clearStencil", [_dec16, _dec17], Object.getOwnPropertyDescriptor(_class2$6.prototype, "clearStencil"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "projection", [_dec18, _dec19, _dec20], Object.getOwnPropertyDescriptor(_class2$6.prototype, "projection"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "fovAxis", [_dec21, _dec22, _dec23, _dec24], Object.getOwnPropertyDescriptor(_class2$6.prototype, "fovAxis"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "fov", [_dec25, _dec26, _dec27], Object.getOwnPropertyDescriptor(_class2$6.prototype, "fov"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "orthoHeight", [_dec28, _dec29, _dec30], Object.getOwnPropertyDescriptor(_class2$6.prototype, "orthoHeight"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "near", [_dec31, _dec32], Object.getOwnPropertyDescriptor(_class2$6.prototype, "near"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "far", [_dec33, _dec34], Object.getOwnPropertyDescriptor(_class2$6.prototype, "far"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "aperture", [_dec35, _dec36, _dec37], Object.getOwnPropertyDescriptor(_class2$6.prototype, "aperture"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "shutter", [_dec38, _dec39, _dec40], Object.getOwnPropertyDescriptor(_class2$6.prototype, "shutter"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "iso", [_dec41, _dec42, _dec43], Object.getOwnPropertyDescriptor(_class2$6.prototype, "iso"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "rect", [_dec44, _dec45], Object.getOwnPropertyDescriptor(_class2$6.prototype, "rect"), _class2$6.prototype), _applyDecoratedDescriptor(_class2$6.prototype, "targetTexture", [_dec46, _dec47, _dec48], Object.getOwnPropertyDescriptor(_class2$6.prototype, "targetTexture"), _class2$6.prototype)), _class2$6)) || _class$7) || _class$7) || _class$7) || _class$7));
            legacyCC.Camera = Camera$1;

            const MaterialInstance = exports('ea', jsb.MaterialInstance);
            const materialInstanceProto = jsb.MaterialInstance.prototype;
            Object.defineProperty(materialInstanceProto, 'parent', {
              configurable: true,
              enumerable: true,

              get() {
                return this._parent;
              }

            });
            Object.defineProperty(materialInstanceProto, 'owner', {
              configurable: true,
              enumerable: true,

              get() {
                return this._owner;
              }

            });

            materialInstanceProto._ctor = function (info) {
              jsb.Material.prototype._ctor.apply(this, arguments);

              this._registerListeners();

              this._parent = info.parent;
              this._owner = info.owner || null;
              this._subModelIdx = info.subModelIdx || 0;
              this._passes = this.getPasses();
            };

            materialInstanceProto._onRebuildPSO = function () {
              if (this._owner) {
                this._owner._onRebuildPSO(this._subModelIdx, this);
              }
            };

            var _dec$8, _dec2$6, _dec3$4, _dec4$3, _dec5$2, _class$8, _class2$7, _descriptor$6, _temp$6;
            const _matInsInfo = {
              parent: null,
              owner: null,
              subModelIdx: 0
            };
            let Renderer = exports('e2', (_dec$8 = ccclass('cc.Renderer'), _dec2$6 = type(Material), _dec3$4 = displayOrder(), _dec4$3 = displayName(), _dec5$2 = type([Material]), _dec$8(_class$8 = disallowMultiple(_class$8 = (_class2$7 = (_temp$6 = class Renderer extends Component {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "_materials", _descriptor$6, this);

                this._materialInstances = [];
              }

              get sharedMaterial() {
                return this.getMaterial(0);
              }

              get sharedMaterials() {
                return  this._materials;
              }

              set sharedMaterials(val) {
                for (let i = 0; i < val.length; i++) {
                  if (val[i] !== this._materials[i]) {
                    this.setMaterial(val[i], i);
                  }
                }

                if (val.length < this._materials.length) {
                  for (let i = val.length; i < this._materials.length; i++) {
                    this.setMaterial(null, i);
                  }

                  this._materials.splice(val.length);
                }
              }

              get material() {
                return this.getMaterialInstance(0);
              }

              set material(val) {
                if (this._materials.length === 1 && !this._materialInstances[0] && this._materials[0] === val) {
                  return;
                }

                this.setMaterialInstance(val, 0);
              }

              get materials() {
                for (let i = 0; i < this._materials.length; i++) {
                  this._materialInstances[i] = this.getMaterialInstance(i);
                }

                return this._materialInstances;
              }

              set materials(val) {
                const newLength = val.length;
                const oldLength = this._materials.length;

                for (let i = newLength; i < oldLength; i++) {
                  this.setMaterialInstance(null, i);
                }

                this._materials.length = newLength;
                this._materialInstances.length = newLength;

                for (let i = 0; i < newLength; i++) {
                  if (this._materialInstances[i] != val[i]) {
                    this.setMaterialInstance(val[i], i);
                  }
                }
              }

              getMaterial(idx) {
                if (idx < 0 || idx >= this._materials.length) {
                  return null;
                }

                return this._materials[idx];
              }

              setMaterial(material, index) {
                if (material && material instanceof MaterialInstance) {
                  console.error('Can\'t set a material instance to a sharedMaterial slot');
                }

                this._materials[index] = material;
                const inst = this._materialInstances[index];

                if (inst) {
                  inst.destroy();
                  this._materialInstances[index] = null;
                }

                this._onMaterialModified(index, this._materials[index]);
              }

              getMaterialInstance(idx) {
                const mat = this._materials[idx];

                if (!mat) {
                  return null;
                }

                if (!this._materialInstances[idx]) {
                  _matInsInfo.parent = this._materials[idx];
                  _matInsInfo.owner = this;
                  _matInsInfo.subModelIdx = idx;
                  const instantiated = new MaterialInstance(_matInsInfo);
                  _matInsInfo.parent = null;
                  _matInsInfo.owner = null;
                  _matInsInfo.subModelIdx = 0;
                  this.setMaterialInstance(instantiated, idx);
                }

                return this._materialInstances[idx];
              }

              setMaterialInstance(matInst, index) {
                if (typeof matInst === 'number') {
                  warnID(12007);
                  const temp = matInst;
                  matInst = index;
                  index = temp;
                }

                const curInst = this._materialInstances[index];

                if (matInst && matInst.parent) {
                  if (matInst !== curInst) {
                    this._materialInstances[index] = matInst;

                    this._onMaterialModified(index, matInst);
                  }

                  return;
                }

                if (matInst !== this._materials[index] || curInst) {
                  this.setMaterial(matInst, index);
                }
              }

              getRenderMaterial(index) {
                return this._materialInstances[index] || this._materials[index];
              }

              _onMaterialModified(index, material) {}

              _onRebuildPSO(index, material) {}

              _clearMaterials() {}

            }, _temp$6), (_applyDecoratedDescriptor(_class2$7.prototype, "sharedMaterials", [_dec2$6, _dec3$4, _dec4$3], Object.getOwnPropertyDescriptor(_class2$7.prototype, "sharedMaterials"), _class2$7.prototype), _descriptor$6 = _applyDecoratedDescriptor(_class2$7.prototype, "_materials", [_dec5$2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class2$7)) || _class$8) || _class$8));

            var _dec$9, _class$9, _class2$8, _descriptor$7, _temp$7;
            let ModelRenderer = exports('el', (_dec$9 = ccclass('cc.ModelRenderer'), _dec$9(_class$9 = (_class2$8 = (_temp$7 = class ModelRenderer extends Renderer {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "_visFlags", _descriptor$7, this);

                this._models = [];
                this._priority = 0;
              }

              get visibility() {
                return this._visFlags;
              }

              set visibility(val) {
                this._visFlags = val;

                this._onVisibilityChange(val);
              }

              get priority() {
                return this._priority;
              }

              set priority(val) {
                if (val === this._priority) return;
                this._priority = val;

                this._updatePriority();
              }

              _collectModels() {
                return this._models;
              }

              onEnable() {
                this._updatePriority();
              }

              _attachToScene() {}

              _detachFromScene() {}

              _onVisibilityChange(val) {}

              _updatePriority() {
                if (this._models.length > 0) {
                  for (let i = 0; i < this._models.length; i++) {
                    this._models[i].priority = this._priority;
                  }
                }
              }

            }, _temp$7), (_descriptor$7 = _applyDecoratedDescriptor(_class2$8.prototype, "_visFlags", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Layers.Enum.NONE;
              }
            })), _class2$8)) || _class$9));

            replaceProperty(Camera$1, 'Camera', [{
              name: 'CameraClearFlag',
              newName: 'ClearFlag'
            }]);
            replaceProperty(Camera$1.prototype, 'Camera.prototype', [{
              name: 'color',
              newName: 'clearColor'
            }, {
              name: 'depth',
              newName: 'clearDepth'
            }, {
              name: 'stencil',
              newName: 'clearStencil'
            }]);
            legacyCC.CameraComponent = Camera$1;
            js.setClassAlias(Camera$1, 'cc.CameraComponent');
            legacyCC.RenderableComponent = ModelRenderer;
            js.setClassAlias(ModelRenderer, 'cc.RenderableComponent');

            class Event {
              constructor(type, bubbles) {
                this.type = void 0;
                this.bubbles = void 0;
                this.target = null;
                this.currentTarget = null;
                this.eventPhase = 0;
                this.propagationStopped = false;
                this.propagationImmediateStopped = false;
                this.type = type;
                this.bubbles = !!bubbles;
              }

              unuse() {
                this.type = Event.NO_TYPE;
                this.target = null;
                this.currentTarget = null;
                this.eventPhase = Event.NONE;
                this.propagationStopped = false;
                this.propagationImmediateStopped = false;
              }

              reuse(type, bubbles) {
                this.type = type;
                this.bubbles = bubbles || false;
              }

              isStopped() {
                return this.propagationStopped || this.propagationImmediateStopped;
              }

              getCurrentTarget() {
                return this.currentTarget;
              }

              getType() {
                return this.type;
              }

            } exports('fP', Event);
            Event.NO_TYPE = 'no_type';
            Event.TOUCH = 'touch';
            Event.MOUSE = 'mouse';
            Event.KEYBOARD = 'keyboard';
            Event.ACCELERATION = 'acceleration';
            Event.NONE = 0;
            Event.CAPTURING_PHASE = 1;
            Event.AT_TARGET = 2;
            Event.BUBBLING_PHASE = 3;
            legacyCC.Event = Event;

            let SystemEventType;

            (function (SystemEventType) {
              SystemEventType["TOUCH_START"] = "touch-start";
              SystemEventType["TOUCH_MOVE"] = "touch-move";
              SystemEventType["TOUCH_END"] = "touch-end";
              SystemEventType["TOUCH_CANCEL"] = "touch-cancel";
              SystemEventType["MOUSE_DOWN"] = "mouse-down";
              SystemEventType["MOUSE_MOVE"] = "mouse-move";
              SystemEventType["MOUSE_UP"] = "mouse-up";
              SystemEventType["MOUSE_WHEEL"] = "mouse-wheel";
              SystemEventType["MOUSE_ENTER"] = "mouse-enter";
              SystemEventType["MOUSE_LEAVE"] = "mouse-leave";
              SystemEventType["KEY_DOWN"] = "keydown";
              SystemEventType["KEY_UP"] = "keyup";
              SystemEventType["DEVICEMOTION"] = "devicemotion";
              SystemEventType["TRANSFORM_CHANGED"] = "transform-changed";
              SystemEventType["SCENE_CHANGED_FOR_PERSISTS"] = "scene-changed-for-persists";
              SystemEventType["SIZE_CHANGED"] = "size-changed";
              SystemEventType["ANCHOR_CHANGED"] = "anchor-changed";
              SystemEventType["COLOR_CHANGED"] = "color-changed";
              SystemEventType["CHILD_ADDED"] = "child-added";
              SystemEventType["CHILD_REMOVED"] = "child-removed";
              SystemEventType["PARENT_CHANGED"] = "parent-changed";
              SystemEventType["NODE_DESTROYED"] = "node-destroyed";
              SystemEventType["LAYER_CHANGED"] = "layer-changed";
              SystemEventType["SIBLING_ORDER_CHANGED"] = "sibling-order-changed";
            })(SystemEventType || (SystemEventType = exports('f_', {})));

            let InputEventType;

            (function (InputEventType) {
              InputEventType["TOUCH_START"] = "touch-start";
              InputEventType["TOUCH_MOVE"] = "touch-move";
              InputEventType["TOUCH_END"] = "touch-end";
              InputEventType["TOUCH_CANCEL"] = "touch-cancel";
              InputEventType["MOUSE_DOWN"] = "mouse-down";
              InputEventType["MOUSE_MOVE"] = "mouse-move";
              InputEventType["MOUSE_UP"] = "mouse-up";
              InputEventType["MOUSE_WHEEL"] = "mouse-wheel";
              InputEventType["KEY_DOWN"] = "keydown";
              InputEventType["KEY_PRESSING"] = "key-pressing";
              InputEventType["KEY_UP"] = "keyup";
              InputEventType["DEVICEMOTION"] = "devicemotion";
              InputEventType["GAMEPAD_INPUT"] = "gamepad-input";
              InputEventType["GAMEPAD_CHANGE"] = "gamepad-change";
              InputEventType["HANDLE_INPUT"] = "handle-input";
              InputEventType["HANDLE_POSE_INPUT"] = "handle-pose-input";
              InputEventType["HMD_POSE_INPUT"] = "hmd-pose-input";
            })(InputEventType || (InputEventType = exports('ex', {})));

            legacyCC.SystemEventType = SystemEventType;

            class EventAcceleration extends Event {
              constructor(acc, bubbles) {
                super(SystemEventType.DEVICEMOTION, bubbles);
                this.acc = void 0;
                this.acc = acc;
              }

            } exports('h5', EventAcceleration);
            Event.EventAcceleration = EventAcceleration;

            class EventKeyboard extends Event {
              get isPressed() {
                return this._isPressed;
              }

              constructor(keyCode, eventType, bubbles) {
                if (typeof eventType === 'boolean') {
                  const isPressed = eventType;
                  eventType = isPressed ? SystemEventType.KEY_DOWN : SystemEventType.KEY_UP;
                }

                super(eventType, bubbles);
                this.keyCode = void 0;
                this.rawEvent = void 0;
                this._isPressed = void 0;
                this._isPressed = eventType !== SystemEventType.KEY_UP;

                if (typeof keyCode === 'number') {
                  this.keyCode = keyCode;
                } else {
                  this.keyCode = keyCode.keyCode;
                  this.rawEvent = keyCode;
                }
              }

            } exports('h6', EventKeyboard);
            Event.EventKeyboard = EventKeyboard;

            class EventMouse extends Event {
              get eventType() {
                return this._eventType;
              }

              constructor(eventType, bubbles, prevLoc) {
                super(eventType, bubbles);
                this.movementX = 0;
                this.movementY = 0;
                this.preventSwallow = false;
                this._eventType = void 0;
                this._button = EventMouse.BUTTON_MISSING;
                this._x = 0;
                this._y = 0;
                this._prevX = 0;
                this._prevY = 0;
                this._scrollX = 0;
                this._scrollY = 0;
                this._eventType = eventType;

                if (prevLoc) {
                  this._prevX = prevLoc.x;
                  this._prevY = prevLoc.y;
                }
              }

              setScrollData(scrollX, scrollY) {
                this._scrollX = scrollX;
                this._scrollY = scrollY;
              }

              getScrollX() {
                return this._scrollX;
              }

              getScrollY() {
                return this._scrollY;
              }

              setLocation(x, y) {
                this._x = x;
                this._y = y;
              }

              getLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._x, this._y);
                return out;
              }

              getLocationInView(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._x, legacyCC.view._designResolutionSize.height - this._y);
                return out;
              }

              getUILocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._x, this._y);

                legacyCC.view._convertToUISpace(out);

                return out;
              }

              getPreviousLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._prevX, this._prevY);
                return out;
              }

              getUIPreviousLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._prevX, this._prevY);

                legacyCC.view._convertToUISpace(out);

                return out;
              }

              getDelta(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._x - this._prevX, this._y - this._prevY);
                return out;
              }

              getDeltaX() {
                return this._x - this._prevX;
              }

              getDeltaY() {
                return this._y - this._prevY;
              }

              getUIDelta(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, (this._x - this._prevX) / legacyCC.view.getScaleX(), (this._y - this._prevY) / legacyCC.view.getScaleY());
                return out;
              }

              getUIDeltaX() {
                return (this._x - this._prevX) / legacyCC.view.getScaleX();
              }

              getUIDeltaY() {
                return (this._y - this._prevY) / legacyCC.view.getScaleY();
              }

              setButton(button) {
                this._button = button;
              }

              getButton() {
                return this._button;
              }

              getLocationX() {
                return this._x;
              }

              getLocationY() {
                return this._y;
              }

              getUILocationX() {
                const viewport = legacyCC.view.getViewportRect();
                return (this._x - viewport.x) / legacyCC.view.getScaleX();
              }

              getUILocationY() {
                const viewport = legacyCC.view.getViewportRect();
                return (this._y - viewport.y) / legacyCC.view.getScaleY();
              }

            } exports('h7', EventMouse);
            EventMouse.BUTTON_MISSING = -1;
            EventMouse.BUTTON_LEFT = 0;
            EventMouse.BUTTON_RIGHT = 2;
            EventMouse.BUTTON_MIDDLE = 1;
            EventMouse.BUTTON_4 = 3;
            EventMouse.BUTTON_5 = 4;
            EventMouse.BUTTON_6 = 5;
            EventMouse.BUTTON_7 = 6;
            EventMouse.BUTTON_8 = 7;
            Event.EventMouse = EventMouse;

            const _vec2 = new Vec2();

            class EventTouch extends Event {
              constructor(changedTouches, bubbles, eventType, touches = []) {
                super(eventType, bubbles);
                this.touch = null;
                this.simulate = false;
                this.preventSwallow = false;
                this._eventCode = void 0;
                this._touches = void 0;
                this._allTouches = void 0;
                this._eventCode = eventType;
                this._touches = changedTouches || [];
                this._allTouches = touches;
              }

              getEventCode() {
                return this._eventCode;
              }

              getTouches() {
                return this._touches;
              }

              getAllTouches() {
                return this._allTouches;
              }

              setLocation(x, y) {
                if (this.touch) {
                  this.touch.setTouchInfo(this.touch.getID(), x, y);
                }
              }

              getLocation(out) {
                return this.touch ? this.touch.getLocation(out) : new Vec2();
              }

              getUILocation(out) {
                return this.touch ? this.touch.getUILocation(out) : new Vec2();
              }

              getLocationInView(out) {
                return this.touch ? this.touch.getLocationInView(out) : new Vec2();
              }

              getPreviousLocation(out) {
                return this.touch ? this.touch.getPreviousLocation(out) : new Vec2();
              }

              getStartLocation(out) {
                return this.touch ? this.touch.getStartLocation(out) : new Vec2();
              }

              getUIStartLocation(out) {
                return this.touch ? this.touch.getUIStartLocation(out) : new Vec2();
              }

              getID() {
                return this.touch ? this.touch.getID() : null;
              }

              getDelta(out) {
                return this.touch ? this.touch.getDelta(out) : new Vec2();
              }

              getUIDelta(out) {
                return this.touch ? this.touch.getUIDelta(out) : new Vec2();
              }

              getDeltaX() {
                return this.touch ? this.touch.getDelta(_vec2).x : 0;
              }

              getDeltaY() {
                return this.touch ? this.touch.getDelta(_vec2).y : 0;
              }

              getLocationX() {
                return this.touch ? this.touch.getLocationX() : 0;
              }

              getLocationY() {
                return this.touch ? this.touch.getLocationY() : 0;
              }

            } exports('fZ', EventTouch);
            EventTouch.MAX_TOUCHES = 5;
            Event.EventTouch = EventTouch;

            class EventGamepad extends Event {
              constructor(type, gamepad) {
                super(type, false);
                this.gamepad = void 0;
                this.gamepad = gamepad;
              }

            } exports('f$', EventGamepad);

            class EventHandle extends Event {
              constructor(eventType, handleInputDevice) {
                super(eventType, false);
                this.handleInputDevice = void 0;
                this.handleInputDevice = handleInputDevice;
              }

            } exports('g0', EventHandle);

            class EventHMD extends Event {
              constructor(eventType, hmdInputDevice) {
                super(eventType, false);
                this.hmdInputDevice = void 0;
                this.hmdInputDevice = hmdInputDevice;
              }

            } exports('h8', EventHMD);

            class Acceleration {
              constructor(x = 0, y = 0, z = 0, timestamp = 0) {
                this.x = void 0;
                this.y = void 0;
                this.z = void 0;
                this.timestamp = void 0;
                this.x = x;
                this.y = y;
                this.z = z;
                this.timestamp = timestamp;
              }

            } exports('h9', Acceleration);

            let KeyCode;

            (function (KeyCode) {
              KeyCode[KeyCode["NONE"] = 0] = "NONE";
              KeyCode[KeyCode["MOBILE_BACK"] = 6] = "MOBILE_BACK";
              KeyCode[KeyCode["BACKSPACE"] = 8] = "BACKSPACE";
              KeyCode[KeyCode["TAB"] = 9] = "TAB";
              KeyCode[KeyCode["ENTER"] = 13] = "ENTER";
              KeyCode[KeyCode["SHIFT_LEFT"] = 16] = "SHIFT_LEFT";
              KeyCode[KeyCode["CTRL_LEFT"] = 17] = "CTRL_LEFT";
              KeyCode[KeyCode["ALT_LEFT"] = 18] = "ALT_LEFT";
              KeyCode[KeyCode["PAUSE"] = 19] = "PAUSE";
              KeyCode[KeyCode["CAPS_LOCK"] = 20] = "CAPS_LOCK";
              KeyCode[KeyCode["ESCAPE"] = 27] = "ESCAPE";
              KeyCode[KeyCode["SPACE"] = 32] = "SPACE";
              KeyCode[KeyCode["PAGE_UP"] = 33] = "PAGE_UP";
              KeyCode[KeyCode["PAGE_DOWN"] = 34] = "PAGE_DOWN";
              KeyCode[KeyCode["END"] = 35] = "END";
              KeyCode[KeyCode["HOME"] = 36] = "HOME";
              KeyCode[KeyCode["ARROW_LEFT"] = 37] = "ARROW_LEFT";
              KeyCode[KeyCode["ARROW_UP"] = 38] = "ARROW_UP";
              KeyCode[KeyCode["ARROW_RIGHT"] = 39] = "ARROW_RIGHT";
              KeyCode[KeyCode["ARROW_DOWN"] = 40] = "ARROW_DOWN";
              KeyCode[KeyCode["INSERT"] = 45] = "INSERT";
              KeyCode[KeyCode["DELETE"] = 46] = "DELETE";
              KeyCode[KeyCode["DIGIT_0"] = 48] = "DIGIT_0";
              KeyCode[KeyCode["DIGIT_1"] = 49] = "DIGIT_1";
              KeyCode[KeyCode["DIGIT_2"] = 50] = "DIGIT_2";
              KeyCode[KeyCode["DIGIT_3"] = 51] = "DIGIT_3";
              KeyCode[KeyCode["DIGIT_4"] = 52] = "DIGIT_4";
              KeyCode[KeyCode["DIGIT_5"] = 53] = "DIGIT_5";
              KeyCode[KeyCode["DIGIT_6"] = 54] = "DIGIT_6";
              KeyCode[KeyCode["DIGIT_7"] = 55] = "DIGIT_7";
              KeyCode[KeyCode["DIGIT_8"] = 56] = "DIGIT_8";
              KeyCode[KeyCode["DIGIT_9"] = 57] = "DIGIT_9";
              KeyCode[KeyCode["KEY_A"] = 65] = "KEY_A";
              KeyCode[KeyCode["KEY_B"] = 66] = "KEY_B";
              KeyCode[KeyCode["KEY_C"] = 67] = "KEY_C";
              KeyCode[KeyCode["KEY_D"] = 68] = "KEY_D";
              KeyCode[KeyCode["KEY_E"] = 69] = "KEY_E";
              KeyCode[KeyCode["KEY_F"] = 70] = "KEY_F";
              KeyCode[KeyCode["KEY_G"] = 71] = "KEY_G";
              KeyCode[KeyCode["KEY_H"] = 72] = "KEY_H";
              KeyCode[KeyCode["KEY_I"] = 73] = "KEY_I";
              KeyCode[KeyCode["KEY_J"] = 74] = "KEY_J";
              KeyCode[KeyCode["KEY_K"] = 75] = "KEY_K";
              KeyCode[KeyCode["KEY_L"] = 76] = "KEY_L";
              KeyCode[KeyCode["KEY_M"] = 77] = "KEY_M";
              KeyCode[KeyCode["KEY_N"] = 78] = "KEY_N";
              KeyCode[KeyCode["KEY_O"] = 79] = "KEY_O";
              KeyCode[KeyCode["KEY_P"] = 80] = "KEY_P";
              KeyCode[KeyCode["KEY_Q"] = 81] = "KEY_Q";
              KeyCode[KeyCode["KEY_R"] = 82] = "KEY_R";
              KeyCode[KeyCode["KEY_S"] = 83] = "KEY_S";
              KeyCode[KeyCode["KEY_T"] = 84] = "KEY_T";
              KeyCode[KeyCode["KEY_U"] = 85] = "KEY_U";
              KeyCode[KeyCode["KEY_V"] = 86] = "KEY_V";
              KeyCode[KeyCode["KEY_W"] = 87] = "KEY_W";
              KeyCode[KeyCode["KEY_X"] = 88] = "KEY_X";
              KeyCode[KeyCode["KEY_Y"] = 89] = "KEY_Y";
              KeyCode[KeyCode["KEY_Z"] = 90] = "KEY_Z";
              KeyCode[KeyCode["NUM_0"] = 96] = "NUM_0";
              KeyCode[KeyCode["NUM_1"] = 97] = "NUM_1";
              KeyCode[KeyCode["NUM_2"] = 98] = "NUM_2";
              KeyCode[KeyCode["NUM_3"] = 99] = "NUM_3";
              KeyCode[KeyCode["NUM_4"] = 100] = "NUM_4";
              KeyCode[KeyCode["NUM_5"] = 101] = "NUM_5";
              KeyCode[KeyCode["NUM_6"] = 102] = "NUM_6";
              KeyCode[KeyCode["NUM_7"] = 103] = "NUM_7";
              KeyCode[KeyCode["NUM_8"] = 104] = "NUM_8";
              KeyCode[KeyCode["NUM_9"] = 105] = "NUM_9";
              KeyCode[KeyCode["NUM_MULTIPLY"] = 106] = "NUM_MULTIPLY";
              KeyCode[KeyCode["NUM_PLUS"] = 107] = "NUM_PLUS";
              KeyCode[KeyCode["NUM_SUBTRACT"] = 109] = "NUM_SUBTRACT";
              KeyCode[KeyCode["NUM_DECIMAL"] = 110] = "NUM_DECIMAL";
              KeyCode[KeyCode["NUM_DIVIDE"] = 111] = "NUM_DIVIDE";
              KeyCode[KeyCode["F1"] = 112] = "F1";
              KeyCode[KeyCode["F2"] = 113] = "F2";
              KeyCode[KeyCode["F3"] = 114] = "F3";
              KeyCode[KeyCode["F4"] = 115] = "F4";
              KeyCode[KeyCode["F5"] = 116] = "F5";
              KeyCode[KeyCode["F6"] = 117] = "F6";
              KeyCode[KeyCode["F7"] = 118] = "F7";
              KeyCode[KeyCode["F8"] = 119] = "F8";
              KeyCode[KeyCode["F9"] = 120] = "F9";
              KeyCode[KeyCode["F10"] = 121] = "F10";
              KeyCode[KeyCode["F11"] = 122] = "F11";
              KeyCode[KeyCode["F12"] = 123] = "F12";
              KeyCode[KeyCode["NUM_LOCK"] = 144] = "NUM_LOCK";
              KeyCode[KeyCode["SCROLL_LOCK"] = 145] = "SCROLL_LOCK";
              KeyCode[KeyCode["SEMICOLON"] = 186] = "SEMICOLON";
              KeyCode[KeyCode["EQUAL"] = 187] = "EQUAL";
              KeyCode[KeyCode["COMMA"] = 188] = "COMMA";
              KeyCode[KeyCode["DASH"] = 189] = "DASH";
              KeyCode[KeyCode["PERIOD"] = 190] = "PERIOD";
              KeyCode[KeyCode["SLASH"] = 191] = "SLASH";
              KeyCode[KeyCode["BACK_QUOTE"] = 192] = "BACK_QUOTE";
              KeyCode[KeyCode["BRACKET_LEFT"] = 219] = "BRACKET_LEFT";
              KeyCode[KeyCode["BACKSLASH"] = 220] = "BACKSLASH";
              KeyCode[KeyCode["BRACKET_RIGHT"] = 221] = "BRACKET_RIGHT";
              KeyCode[KeyCode["QUOTE"] = 222] = "QUOTE";
              KeyCode[KeyCode["SHIFT_RIGHT"] = 2000] = "SHIFT_RIGHT";
              KeyCode[KeyCode["CTRL_RIGHT"] = 2001] = "CTRL_RIGHT";
              KeyCode[KeyCode["ALT_RIGHT"] = 2002] = "ALT_RIGHT";
              KeyCode[KeyCode["NUM_ENTER"] = 2003] = "NUM_ENTER";
            })(KeyCode || (KeyCode = exports('fV', {})));

            const _vec2$1 = new Vec2();

            class Touch {
              get lastModified() {
                return this._lastModified;
              }

              constructor(x, y, id = 0) {
                this._point = new Vec2();
                this._prevPoint = new Vec2();
                this._lastModified = 0;
                this._id = 0;
                this._startPoint = new Vec2();
                this._startPointCaptured = false;
                this.setTouchInfo(id, x, y);
              }

              getLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._point.x, this._point.y);
                return out;
              }

              getLocationX() {
                return this._point.x;
              }

              getLocationY() {
                return this._point.y;
              }

              getUILocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._point.x, this._point.y);

                legacyCC.view._convertToUISpace(out);

                return out;
              }

              getUILocationX() {
                const viewport = legacyCC.view.getViewportRect();
                return (this._point.x - viewport.x) / legacyCC.view.getScaleX();
              }

              getUILocationY() {
                const viewport = legacyCC.view.getViewportRect();
                return (this._point.y - viewport.y) / legacyCC.view.getScaleY();
              }

              getPreviousLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._prevPoint.x, this._prevPoint.y);
                return out;
              }

              getUIPreviousLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._prevPoint.x, this._prevPoint.y);

                legacyCC.view._convertToUISpace(out);

                return out;
              }

              getStartLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._startPoint.x, this._startPoint.y);
                return out;
              }

              getUIStartLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._startPoint.x, this._startPoint.y);

                legacyCC.view._convertToUISpace(out);

                return out;
              }

              getDelta(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._point);
                out.subtract(this._prevPoint);
                return out;
              }

              getUIDelta(out) {
                if (!out) {
                  out = new Vec2();
                }

                _vec2$1.set(this._point);

                _vec2$1.subtract(this._prevPoint);

                out.set(legacyCC.view.getScaleX(), legacyCC.view.getScaleY());
                Vec2.divide(out, _vec2$1, out);
                return out;
              }

              getLocationInView(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._point.x, legacyCC.view._designResolutionSize.height - this._point.y);
                return out;
              }

              getPreviousLocationInView(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._prevPoint.x, legacyCC.view._designResolutionSize.height - this._prevPoint.y);
                return out;
              }

              getStartLocationInView(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._startPoint.x, legacyCC.view._designResolutionSize.height - this._startPoint.y);
                return out;
              }

              getID() {
                return this._id;
              }

              setTouchInfo(id = 0, x, y) {
                this._prevPoint = this._point;
                this._point = new Vec2(x || 0, y || 0);
                this._id = id;

                if (!this._startPointCaptured) {
                  this._startPoint = new Vec2(this._point);
                  this._startPointCaptured = true;
                }
              }

              setPoint(x, y) {
                if (typeof x === 'object') {
                  this._point.x = x.x;
                  this._point.y = x.y;
                } else {
                  this._point.x = x || 0;
                  this._point.y = y || 0;
                }

                this._lastModified = legacyCC.game.frameStartTime;
              }

              setPrevPoint(x, y) {
                if (typeof x === 'object') {
                  this._prevPoint = new Vec2(x.x, x.y);
                } else {
                  this._prevPoint = new Vec2(x || 0, y || 0);
                }

                this._lastModified = legacyCC.game.frameStartTime;
              }

            } exports('ha', Touch);
            legacyCC.Touch = Touch;

            const _cachedArray = new Array(16);

            let _currentHovered = null;
            const pos = new Vec2();
            const _touchEvents = [NodeEventType.TOUCH_START, NodeEventType.TOUCH_MOVE, NodeEventType.TOUCH_END, NodeEventType.TOUCH_CANCEL];
            const _mouseEvents = [NodeEventType.MOUSE_DOWN, NodeEventType.MOUSE_ENTER, NodeEventType.MOUSE_MOVE, NodeEventType.MOUSE_LEAVE, NodeEventType.MOUSE_UP, NodeEventType.MOUSE_WHEEL];
            let DispatcherEventType;

            (function (DispatcherEventType) {
              DispatcherEventType[DispatcherEventType["ADD_POINTER_EVENT_PROCESSOR"] = 0] = "ADD_POINTER_EVENT_PROCESSOR";
              DispatcherEventType[DispatcherEventType["REMOVE_POINTER_EVENT_PROCESSOR"] = 1] = "REMOVE_POINTER_EVENT_PROCESSOR";
              DispatcherEventType[DispatcherEventType["MARK_LIST_DIRTY"] = 2] = "MARK_LIST_DIRTY";
            })(DispatcherEventType || (DispatcherEventType = exports('ew', {})));

            class NodeEventProcessor {
              get isEnabled() {
                return this._isEnabled;
              }

              get node() {
                return this._node;
              }

              constructor(node) {
                this.claimedTouchIdList = [];
                this.maskList = null;
                this.cachedCameraPriority = 0;
                this.previousMouseIn = false;
                this.bubblingTarget = null;
                this.capturingTarget = null;
                this.shouldHandleEventMouse = false;
                this.shouldHandleEventTouch = false;
                this._dispatchingTouch = null;
                this._isEnabled = false;
                this._node = void 0;
                this._node = node;
              }

              setEnabled(value, recursive = false) {
                if (this._isEnabled === value) {
                  return;
                }

                this._isEnabled = value;
                const node = this.node;
                const children = node.children;

                if (value) {
                  this._attachMask();
                }

                NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.MARK_LIST_DIRTY);

                if (recursive && children.length > 0) {
                  for (let i = 0; i < children.length; ++i) {
                    const child = children[i];

                    child._eventProcessor.setEnabled(value, true);
                  }
                }
              }

              reattach() {
                let currentMaskList;
                this.node.walk(node => {
                  if (!currentMaskList) {
                    currentMaskList = this._searchComponentsInParent(NodeEventProcessor._maskComp);
                  }

                  node.eventProcessor.maskList = currentMaskList;
                });
              }

              destroy() {
                if (_currentHovered === this._node) {
                  _currentHovered = null;
                }

                if (this.capturingTarget) this.capturingTarget.clear();
                if (this.bubblingTarget) this.bubblingTarget.clear();
                NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this);

                if (this._dispatchingTouch) {
                  const cancelEvent = new EventTouch([this._dispatchingTouch], true, InputEventType.TOUCH_CANCEL);
                  cancelEvent.touch = this._dispatchingTouch;
                  this.dispatchEvent(cancelEvent);
                  this._dispatchingTouch = null;
                }
              }

              on(type, callback, target, useCapture) {
                this._tryEmittingAddEvent(type);

                useCapture = !!useCapture;
                let invoker;

                if (useCapture) {
                  var _this$capturingTarget;

                  invoker = (_this$capturingTarget = this.capturingTarget) !== null && _this$capturingTarget !== void 0 ? _this$capturingTarget : this.capturingTarget = this._newCallbacksInvoker();
                } else {
                  var _this$bubblingTarget;

                  invoker = (_this$bubblingTarget = this.bubblingTarget) !== null && _this$bubblingTarget !== void 0 ? _this$bubblingTarget : this.bubblingTarget = this._newCallbacksInvoker();
                }

                invoker.on(type, callback, target);
                return callback;
              }

              once(type, callback, target, useCapture) {
                this._tryEmittingAddEvent(type);

                useCapture = !!useCapture;
                let invoker;

                if (useCapture) {
                  var _this$capturingTarget2;

                  invoker = (_this$capturingTarget2 = this.capturingTarget) !== null && _this$capturingTarget2 !== void 0 ? _this$capturingTarget2 : this.capturingTarget = this._newCallbacksInvoker();
                } else {
                  var _this$bubblingTarget2;

                  invoker = (_this$bubblingTarget2 = this.bubblingTarget) !== null && _this$bubblingTarget2 !== void 0 ? _this$bubblingTarget2 : this.bubblingTarget = this._newCallbacksInvoker();
                }

                invoker.on(type, callback, target, true);
                return callback;
              }

              off(type, callback, target, useCapture) {
                var _invoker;

                useCapture = !!useCapture;
                let invoker;

                if (useCapture) {
                  invoker = this.capturingTarget;
                } else {
                  invoker = this.bubblingTarget;
                }

                (_invoker = invoker) === null || _invoker === void 0 ? void 0 : _invoker.off(type, callback, target);
              }

              targetOff(target) {
                var _this$capturingTarget3, _this$bubblingTarget3;

                (_this$capturingTarget3 = this.capturingTarget) === null || _this$capturingTarget3 === void 0 ? void 0 : _this$capturingTarget3.removeAll(target);
                (_this$bubblingTarget3 = this.bubblingTarget) === null || _this$bubblingTarget3 === void 0 ? void 0 : _this$bubblingTarget3.removeAll(target);

                if (this.shouldHandleEventTouch && !this._hasTouchListeners()) {
                  this.shouldHandleEventTouch = false;
                }

                if (this.shouldHandleEventMouse && !this._hasMouseListeners()) {
                  this.shouldHandleEventMouse = false;
                }

                if (!this._hasPointerListeners()) {
                  NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this);
                }
              }

              emit(type, arg0, arg1, arg2, arg3, arg4) {
                var _this$bubblingTarget4;

                (_this$bubblingTarget4 = this.bubblingTarget) === null || _this$bubblingTarget4 === void 0 ? void 0 : _this$bubblingTarget4.emit(type, arg0, arg1, arg2, arg3, arg4);
              }

              dispatchEvent(event) {
                const owner = this.node;
                let target;
                let i = 0;
                event.target = owner;
                _cachedArray.length = 0;
                this.getCapturingTargets(event.type, _cachedArray);
                event.eventPhase = 1;

                for (i = _cachedArray.length - 1; i >= 0; --i) {
                  target = _cachedArray[i];

                  if (target.eventProcessor.capturingTarget) {
                    event.currentTarget = target;
                    target.eventProcessor.capturingTarget.emit(event.type, event, _cachedArray);

                    if (event.propagationStopped) {
                      _cachedArray.length = 0;
                      return;
                    }
                  }
                }

                _cachedArray.length = 0;
                event.eventPhase = 2;
                event.currentTarget = owner;

                if (this.capturingTarget) {
                  this.capturingTarget.emit(event.type, event);
                }

                if (!event.propagationImmediateStopped && this.bubblingTarget) {
                  this.bubblingTarget.emit(event.type, event);
                }

                if (!event.propagationStopped && event.bubbles) {
                  this.getBubblingTargets(event.type, _cachedArray);
                  event.eventPhase = 3;

                  for (i = 0; i < _cachedArray.length; ++i) {
                    target = _cachedArray[i];

                    if (target.eventProcessor.bubblingTarget) {
                      event.currentTarget = target;
                      target.eventProcessor.bubblingTarget.emit(event.type, event);

                      if (event.propagationStopped) {
                        _cachedArray.length = 0;
                        return;
                      }
                    }
                  }
                }

                _cachedArray.length = 0;
              }

              hasEventListener(type, callback, target) {
                let has = false;

                if (this.bubblingTarget) {
                  has = this.bubblingTarget.hasEventListener(type, callback, target);
                }

                if (!has && this.capturingTarget) {
                  has = this.capturingTarget.hasEventListener(type, callback, target);
                }

                return has;
              }

              getCapturingTargets(type, targets) {
                let parent = this._node.parent;

                while (parent) {
                  var _parent$eventProcesso;

                  if ((_parent$eventProcesso = parent.eventProcessor.capturingTarget) === null || _parent$eventProcesso === void 0 ? void 0 : _parent$eventProcesso.hasEventListener(type)) {
                    targets.push(parent);
                  }

                  parent = parent.parent;
                }
              }

              getBubblingTargets(type, targets) {
                let parent = this._node.parent;

                while (parent) {
                  var _parent$eventProcesso2;

                  if ((_parent$eventProcesso2 = parent.eventProcessor.bubblingTarget) === null || _parent$eventProcesso2 === void 0 ? void 0 : _parent$eventProcesso2.hasEventListener(type)) {
                    targets.push(parent);
                  }

                  parent = parent.parent;
                }
              }

              _searchComponentsInParent(ctor) {
                const node = this.node;

                if (ctor) {
                  let index = 0;
                  let list = [];

                  for (let curr = node; curr && Node$1.isNode(curr); curr = curr.parent, ++index) {
                    const comp = curr.getComponent(ctor);

                    if (comp) {
                      const next = {
                        index,
                        comp
                      };

                      if (list) {
                        list.push(next);
                      } else {
                        list = [next];
                      }
                    }
                  }

                  return list.length > 0 ? list : null;
                }

                return null;
              }

              _attachMask() {
                this.maskList = this._searchComponentsInParent(NodeEventProcessor._maskComp);
              }

              _isTouchEvent(type) {
                const index = _touchEvents.indexOf(type);

                return index !== -1;
              }

              _isMouseEvent(type) {
                const index = _mouseEvents.indexOf(type);

                return index !== -1;
              }

              _hasTouchListeners() {
                for (let i = 0; i < _touchEvents.length; ++i) {
                  const eventType = _touchEvents[i];

                  if (this.hasEventListener(eventType)) {
                    return true;
                  }
                }

                return false;
              }

              _hasMouseListeners() {
                for (let i = 0; i < _mouseEvents.length; ++i) {
                  const eventType = _mouseEvents[i];

                  if (this.hasEventListener(eventType)) {
                    return true;
                  }
                }

                return false;
              }

              _hasPointerListeners() {
                const has = this._hasTouchListeners();

                if (has) {
                  return true;
                }

                return this._hasMouseListeners();
              }

              _tryEmittingAddEvent(typeToAdd) {
                const isTouchEvent = this._isTouchEvent(typeToAdd);

                const isMouseEvent = this._isMouseEvent(typeToAdd);

                if (isTouchEvent) {
                  this.shouldHandleEventTouch = true;
                } else if (isMouseEvent) {
                  this.shouldHandleEventMouse = true;
                }

                if ((isTouchEvent || isMouseEvent) && !this._hasPointerListeners()) {
                  NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.ADD_POINTER_EVENT_PROCESSOR, this);
                }
              }

              _newCallbacksInvoker() {
                const callbacksInvoker = new CallbacksInvoker();

                callbacksInvoker._registerOffCallback(() => {
                  if (this.shouldHandleEventTouch && !this._hasTouchListeners()) {
                    this.shouldHandleEventTouch = false;
                  }

                  if (this.shouldHandleEventMouse && !this._hasMouseListeners()) {
                    this.shouldHandleEventMouse = false;
                  }

                  if (!this._hasPointerListeners()) {
                    NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this);
                  }
                });

                return callbacksInvoker;
              }

              _handleEventMouse(eventMouse) {
                switch (eventMouse.type) {
                  case InputEventType.MOUSE_DOWN:
                    return this._handleMouseDown(eventMouse);

                  case InputEventType.MOUSE_MOVE:
                    return this._handleMouseMove(eventMouse);

                  case InputEventType.MOUSE_UP:
                    return this._handleMouseUp(eventMouse);

                  case InputEventType.MOUSE_WHEEL:
                    return this._handleMouseWheel(eventMouse);

                  default:
                    return false;
                }
              }

              _handleMouseDown(event) {
                const node = this._node;

                if (!node || !node._uiProps.uiTransformComp) {
                  return false;
                }

                event.getLocation(pos);

                if (node._uiProps.uiTransformComp.hitTest(pos)) {
                  event.type = NodeEventType.MOUSE_DOWN;
                  event.bubbles = true;
                  node.dispatchEvent(event);
                  event.propagationStopped = true;
                  return true;
                }

                return false;
              }

              _handleMouseMove(event) {
                const node = this._node;

                if (!node || !node._uiProps.uiTransformComp) {
                  return false;
                }

                event.getLocation(pos);

                const hit = node._uiProps.uiTransformComp.hitTest(pos);

                if (hit) {
                  if (!this.previousMouseIn) {
                    if (_currentHovered && _currentHovered !== node) {
                      event.type = NodeEventType.MOUSE_LEAVE;

                      _currentHovered.dispatchEvent(event);

                      _currentHovered.eventProcessor.previousMouseIn = false;
                    }

                    _currentHovered = node;
                    event.type = NodeEventType.MOUSE_ENTER;
                    node.dispatchEvent(event);
                    this.previousMouseIn = true;
                  }

                  event.type = NodeEventType.MOUSE_MOVE;
                  event.bubbles = true;
                  node.dispatchEvent(event);
                  event.propagationStopped = true;
                  return true;
                } else if (this.previousMouseIn) {
                  event.type = NodeEventType.MOUSE_LEAVE;
                  node.dispatchEvent(event);
                  this.previousMouseIn = false;
                  _currentHovered = null;
                }

                return false;
              }

              _handleMouseUp(event) {
                const node = this._node;

                if (!node || !node._uiProps.uiTransformComp) {
                  return false;
                }

                event.getLocation(pos);

                if (node._uiProps.uiTransformComp.hitTest(pos)) {
                  event.type = NodeEventType.MOUSE_UP;
                  event.bubbles = true;
                  node.dispatchEvent(event);
                  event.propagationStopped = true;
                  return true;
                }

                return false;
              }

              _handleMouseWheel(event) {
                const node = this._node;

                if (!node || !node._uiProps.uiTransformComp) {
                  return false;
                }

                event.getLocation(pos);

                if (node._uiProps.uiTransformComp.hitTest(pos)) {
                  event.type = NodeEventType.MOUSE_WHEEL;
                  event.bubbles = true;
                  node.dispatchEvent(event);
                  event.propagationStopped = true;
                  return true;
                }

                return false;
              }

              _handleEventTouch(eventTouch) {
                switch (eventTouch.type) {
                  case InputEventType.TOUCH_START:
                    return this._handleTouchStart(eventTouch);

                  case InputEventType.TOUCH_MOVE:
                    return this._handleTouchMove(eventTouch);

                  case InputEventType.TOUCH_END:
                    return this._handleTouchEnd(eventTouch);

                  case InputEventType.TOUCH_CANCEL:
                    return this._handleTouchCancel(eventTouch);

                  default:
                    return false;
                }
              }

              _handleTouchStart(event) {
                const node = this.node;

                if (!node || !node._uiProps.uiTransformComp) {
                  return false;
                }

                event.getLocation(pos);

                if (node._uiProps.uiTransformComp.hitTest(pos)) {
                  event.type = NodeEventType.TOUCH_START;
                  event.bubbles = true;
                  this._dispatchingTouch = event.touch;
                  node.dispatchEvent(event);
                  return true;
                }

                return false;
              }

              _handleTouchMove(event) {
                const node = this.node;

                if (!node || !node._uiProps.uiTransformComp) {
                  return false;
                }

                event.type = NodeEventType.TOUCH_MOVE;
                event.bubbles = true;
                this._dispatchingTouch = event.touch;
                node.dispatchEvent(event);
                return true;
              }

              _handleTouchEnd(event) {
                const node = this.node;

                if (!node || !node._uiProps.uiTransformComp) {
                  return;
                }

                event.getLocation(pos);

                if (node._uiProps.uiTransformComp.hitTest(pos)) {
                  event.type = NodeEventType.TOUCH_END;
                } else {
                  event.type = NodeEventType.TOUCH_CANCEL;
                }

                event.bubbles = true;
                node.dispatchEvent(event);
                this._dispatchingTouch = null;
              }

              _handleTouchCancel(event) {
                const node = this.node;

                if (!node || !node._uiProps.uiTransformComp) {
                  return;
                }

                event.type = NodeEventType.TOUCH_CANCEL;
                event.bubbles = true;
                node.dispatchEvent(event);
              }

            } exports('ef', NodeEventProcessor);
            NodeEventProcessor._maskComp = null;
            NodeEventProcessor.callbacksInvoker = new CallbacksInvoker();
            legacyCC.NodeEventProcessor = NodeEventProcessor;

            function createNodeWithPrefab(node) {
              const prefabInfo = node._prefab;

              if (!prefabInfo) {
                return;
              }

              const prefabInstance = prefabInfo.instance;

              if (!prefabInstance) {
                return;
              }

              if (!prefabInfo.asset) {
                {
                  errorID(3701, node.name);
                }

                prefabInfo.instance = undefined;
                return;
              }

              const _objFlags = node._objFlags;
              const _parent = node._parent;
              const _id = node._id;
              const _prefab = node._prefab;
              const editorExtras = node[editorExtrasTag];
              legacyCC.game._isCloning = true;

              {
                prefabInfo.asset._doInstantiate(node);
              }

              legacyCC.game._isCloning = false;
              node._objFlags = _objFlags;
              node._parent = _parent;
              node._id = _id;

              if (node._prefab) {
                node._prefab.instance = _prefab === null || _prefab === void 0 ? void 0 : _prefab.instance;
              }
            }
            function generateTargetMap(node, targetMap, isRoot) {
              var _node$_prefab;

              if (!targetMap) {
                return;
              }

              if (!node) {
                return;
              }

              let curTargetMap = targetMap;
              const prefabInstance = (_node$_prefab = node._prefab) === null || _node$_prefab === void 0 ? void 0 : _node$_prefab.instance;

              if (!isRoot && prefabInstance) {
                targetMap[prefabInstance.fileId] = {};
                curTargetMap = targetMap[prefabInstance.fileId];
              }

              const prefabInfo = node._prefab;

              if (prefabInfo) {
                curTargetMap[prefabInfo.fileId] = node;
              }

              const components = node.components;

              for (let i = 0; i < components.length; i++) {
                const comp = components[i];

                if (comp.__prefab) {
                  curTargetMap[comp.__prefab.fileId] = comp;
                }
              }

              for (let i = 0; i < node.children.length; i++) {
                const childNode = node.children[i];
                generateTargetMap(childNode, curTargetMap, false);
              }
            }
            function getTarget(localID, targetMap) {
              if (!localID) {
                return null;
              }

              let target = null;
              let targetIter = targetMap;

              for (let i = 0; i < localID.length; i++) {
                if (!targetIter) {
                  return null;
                }

                targetIter = targetIter[localID[i]];
              }

              target = targetIter;
              return target;
            }
            function applyMountedChildren(node, mountedChildren, targetMap) {
              if (!mountedChildren) {
                return;
              }

              for (let i = 0; i < mountedChildren.length; i++) {
                const childInfo = mountedChildren[i];

                if (childInfo && childInfo.targetInfo) {
                  const target = getTarget(childInfo.targetInfo.localID, targetMap);

                  if (!target) {
                    continue;
                  }

                  let curTargetMap = targetMap;
                  const localID = childInfo.targetInfo.localID;

                  if (localID.length > 0) {
                    for (let i = 0; i < localID.length - 1; i++) {
                      curTargetMap = curTargetMap[localID[i]];
                    }
                  }

                  if (childInfo.nodes) {
                    for (let i = 0; i < childInfo.nodes.length; i++) {
                      const childNode = childInfo.nodes[i];

                      if (!childNode || target._children.includes(childNode)) {
                        continue;
                      }

                      target._children.push(childNode);

                      childNode._parent = target;

                      generateTargetMap(childNode, curTargetMap, false);
                      childNode._siblingIndex = target._children.length - 1;
                      expandPrefabInstanceNode(childNode, true);
                    }
                  }
                }
              }
            }
            function applyMountedComponents(node, mountedComponents, targetMap) {
              if (!mountedComponents) {
                return;
              }

              for (let i = 0; i < mountedComponents.length; i++) {
                const componentsInfo = mountedComponents[i];

                if (componentsInfo && componentsInfo.targetInfo) {
                  const target = getTarget(componentsInfo.targetInfo.localID, targetMap);

                  if (!target) {
                    continue;
                  }

                  if (componentsInfo.components) {
                    for (let i = 0; i < componentsInfo.components.length; i++) {
                      const comp = componentsInfo.components[i];

                      if (!comp) {
                        continue;
                      }

                      comp.node = target;

                      target._components.push(comp);
                    }
                  }
                }
              }
            }
            function applyRemovedComponents(node, removedComponents, targetMap) {
              if (!removedComponents) {
                return;
              }

              for (let i = 0; i < removedComponents.length; i++) {
                const targetInfo = removedComponents[i];

                if (targetInfo) {
                  const target = getTarget(targetInfo.localID, targetMap);

                  if (!target || !target.node) {
                    continue;
                  }

                  const index = target.node.components.indexOf(target);

                  if (index >= 0) {
                    target.node._components.splice(index, 1);
                  }
                }
              }
            }
            function applyPropertyOverrides(node, propertyOverrides, targetMap) {
              if (propertyOverrides.length <= 0) {
                return;
              }

              let target = null;

              for (let i = 0; i < propertyOverrides.length; i++) {
                const propOverride = propertyOverrides[i];

                if (propOverride && propOverride.targetInfo) {
                  const targetInfo = propOverride.targetInfo;
                  target = getTarget(targetInfo.localID, targetMap);

                  if (!target) {
                    continue;
                  }

                  let targetPropOwner = target;
                  const propertyPath = propOverride.propertyPath.slice();

                  if (propertyPath.length > 0) {
                    const targetPropName = propertyPath.pop();

                    if (!targetPropName) {
                      continue;
                    }

                    for (let i = 0; i < propertyPath.length; i++) {
                      const propName = propertyPath[i];
                      targetPropOwner = targetPropOwner[propName];

                      if (!targetPropOwner) {
                        break;
                      }
                    }

                    if (!targetPropOwner) {
                      continue;
                    }

                    if (Array.isArray(targetPropOwner)) {
                      if (targetPropName === 'length') {
                        targetPropOwner[targetPropName] = propOverride.value;
                      } else {
                        const index = Number.parseInt(targetPropName);

                        if (Number.isInteger(index) && index < targetPropOwner.length) {
                          targetPropOwner[targetPropName] = propOverride.value;
                        }
                      }
                    } else if (targetPropOwner[targetPropName] instanceof ValueType) {
                      targetPropOwner[targetPropName].set(propOverride.value);
                    } else {
                      targetPropOwner[targetPropName] = propOverride.value;
                    }
                  }
                }
              }
            }
            function applyTargetOverrides(node) {
              var _node$_prefab2;

              const targetOverrides = (_node$_prefab2 = node._prefab) === null || _node$_prefab2 === void 0 ? void 0 : _node$_prefab2.targetOverrides;

              if (targetOverrides) {
                for (let i = 0; i < targetOverrides.length; i++) {
                  var _targetOverride$targe, _targetOverride$targe2;

                  const targetOverride = targetOverrides[i];
                  let source = targetOverride.source;
                  const sourceInfo = targetOverride.sourceInfo;

                  if (sourceInfo) {
                    var _targetOverride$sourc, _targetOverride$sourc2;

                    const sourceInstance = (_targetOverride$sourc = targetOverride.source) === null || _targetOverride$sourc === void 0 ? void 0 : (_targetOverride$sourc2 = _targetOverride$sourc._prefab) === null || _targetOverride$sourc2 === void 0 ? void 0 : _targetOverride$sourc2.instance;

                    if (sourceInstance && sourceInstance.targetMap) {
                      source = getTarget(sourceInfo.localID, sourceInstance.targetMap);
                    }
                  }

                  if (!source) {
                    continue;
                  }

                  let target = null;
                  const targetInfo = targetOverride.targetInfo;

                  if (!targetInfo) {
                    continue;
                  }

                  const targetInstance = (_targetOverride$targe = targetOverride.target) === null || _targetOverride$targe === void 0 ? void 0 : (_targetOverride$targe2 = _targetOverride$targe._prefab) === null || _targetOverride$targe2 === void 0 ? void 0 : _targetOverride$targe2.instance;

                  if (!targetInstance || !targetInstance.targetMap) {
                    continue;
                  }

                  target = getTarget(targetInfo.localID, targetInstance.targetMap);

                  if (!target) {
                    continue;
                  }

                  const propertyPath = targetOverride.propertyPath.slice();
                  let targetPropOwner = source;

                  if (propertyPath.length > 0) {
                    const targetPropName = propertyPath.pop();

                    if (!targetPropName) {
                      return;
                    }

                    for (let i = 0; i < propertyPath.length; i++) {
                      const propName = propertyPath[i];
                      targetPropOwner = targetPropOwner[propName];

                      if (!targetPropOwner) {
                        break;
                      }
                    }

                    if (!targetPropOwner) {
                      continue;
                    }

                    targetPropOwner[targetPropName] = target;
                  }
                }
              }
            }
            function expandPrefabInstanceNode(node, recursively = false) {
              const prefabInfo = node._prefab;
              const prefabInstance = prefabInfo === null || prefabInfo === void 0 ? void 0 : prefabInfo.instance;

              if (prefabInstance && !prefabInstance.expanded) {
                createNodeWithPrefab(node);

                if (recursively) {
                  if (node && node.children) {
                    node.children.forEach(child => {
                      expandPrefabInstanceNode(child, true);
                    });
                  }
                }

                const targetMap = {};
                prefabInstance.targetMap = targetMap;
                generateTargetMap(node, targetMap, true);
                applyMountedChildren(node, prefabInstance.mountedChildren, targetMap);
                applyRemovedComponents(node, prefabInstance.removedComponents, targetMap);
                applyMountedComponents(node, prefabInstance.mountedComponents, targetMap);
                applyPropertyOverrides(node, prefabInstance.propertyOverrides, targetMap);
                prefabInstance.expanded = true;
              } else if (recursively) {
                if (node && node.children) {
                  node.children.forEach(child => {
                    expandPrefabInstanceNode(child, true);
                  });
                }
              }
            }
            function expandNestedPrefabInstanceNode(node) {
              const prefabInfo = node._prefab;

              if (prefabInfo && prefabInfo.nestedPrefabInstanceRoots) {
                prefabInfo.nestedPrefabInstanceRoots.forEach(instanceNode => {
                  expandPrefabInstanceNode(instanceNode);
                });
              }
            }
            function applyNodeAndComponentId(node, rootId) {
              const {
                components,
                children
              } = node;

              for (let i = 0; i < components.length; i++) {
                var _comp$__prefab;

                const comp = components[i];
                comp._id = `${rootId}${(_comp$__prefab = comp.__prefab) === null || _comp$__prefab === void 0 ? void 0 : _comp$__prefab.fileId}`;
              }

              for (let i = 0; i < children.length; i++) {
                var _child$_prefab;

                const child = children[i];
                child._id = `${rootId}${(_child$_prefab = child._prefab) === null || _child$_prefab === void 0 ? void 0 : _child$_prefab.fileId}`;
                applyNodeAndComponentId(child, rootId);
              }
            }

            const Scene = exports('g1', jsb.Scene);
            legacyCC.Scene = Scene;
            const sceneProto = Scene.prototype;
            Object.defineProperty(sceneProto, '_globals', {
              enumerable: true,
              configurable: true,

              get() {
                return this.getSceneGlobals();
              },

              set(v) {
                this._globalRef = v;
                this.setSceneGlobals(v);
              }

            });
            Object.defineProperty(sceneProto, 'globals', {
              enumerable: true,
              configurable: true,

              get() {
                return this.getSceneGlobals();
              }

            });
            Object.defineProperty(sceneProto, '_renderScene', {
              enumerable: true,
              configurable: true,

              get() {
                if (!this._renderSceneInternal) {
                  this._renderSceneInternal = this.getRenderScene();
                }

                return this._renderSceneInternal;
              }

            });
            Object.defineProperty(sceneProto, 'renderScene', {
              enumerable: true,
              configurable: true,

              get() {
                if (!this._renderSceneInternal) {
                  this._renderSceneInternal = this.getRenderScene();
                }

                return this._renderSceneInternal;
              }

            });

            sceneProto._ctor = function () {
              Node$1.prototype._ctor.apply(this, arguments);

              this._inited = false;
              this._renderSceneInternal = null;
              this._globalRef = null;
              this._prefabSyncedInLiveReload = false;
            };

            sceneProto._onBatchCreated = function (dontSyncChildPrefab) {
              if (this._parent) {
                this._siblingIndex = this._parent.children.indexOf(this);
              }

              const len = this._children.length;

              for (let i = 0; i < len; ++i) {
                this.children[i]._siblingIndex = i;

                this._children[i]._onBatchCreated(dontSyncChildPrefab);
              }
            };

            const oldLoad = sceneProto._load;

            sceneProto._load = function () {
              this._scene = this;

              if (!this._inited) {

                expandNestedPrefabInstanceNode(this);
                applyTargetOverrides(this);

                this._onBatchCreated(EDITOR$1 );

                this._inited = true;
              }

              updateChildrenForDeserialize(this);
              oldLoad.call(this);
            };

            sceneProto._activate = function (active) {
              active = active !== false;

              legacyCC.director._nodeActivator.activateNode(this, active);

              {
                this._globals.activate();

                if (this._renderScene) {
                  this._renderScene.activate();
                }
              }
            };

            const SceneProto = Scene.prototype;
            serializable(SceneProto, 'autoReleaseAssets');
            serializable(SceneProto, '_globals');
            ccclass('cc.Scene')(Scene);

            const dependMap = new WeakMap();
            const nativeDependMap = new WeakSet();
            const onLoadedInvokedMap = new WeakSet();

            function deserializeAsset(json, options) {
              let classFinder;

              {
                classFinder = MissingScript.safeFindClass;
              }

              const tdInfo = Details.pool.get();
              let asset;

              try {
                asset = deserialize(json, tdInfo, {
                  classFinder,
                  customEnv: options
                });
              } catch (e) {
                error(e);
                Details.pool.put(tdInfo);
                throw e;
              }

              asset._uuid = options.__uuid__ || '';

              const uuidList = tdInfo.uuidList;
              const objList = tdInfo.uuidObjList;
              const propList = tdInfo.uuidPropList;
              const typeList = tdInfo.uuidTypeList || [];
              const depends = [];

              for (let i = 0; i < uuidList.length; i++) {
                const dependUuid = uuidList[i];
                depends[i] = {
                  uuid: decodeUuid(dependUuid),
                  owner: objList[i],
                  prop: propList[i],
                  type: js.getClassById(typeList[i])
                };
              }

              dependMap.set(asset, depends);

              if (asset._native) {
                nativeDependMap.add(asset);
              }

              Details.pool.put(tdInfo);
              return asset;
            }

            class DependUtil {
              constructor() {
                this._depends = new Cache();
              }

              init() {
                this._depends.clear();
              }

              getNativeDep(uuid) {
                const depend = this._depends.get(uuid);

                if (depend && depend.nativeDep) {
                  return { ...depend.nativeDep
                  };
                }

                return null;
              }

              getDeps(uuid) {
                if (this._depends.has(uuid)) {
                  return this._depends.get(uuid).deps;
                }

                return [];
              }

              getDepsRecursively(uuid) {
                const exclude = Object.create(null);
                const depends = [];

                this._descend(uuid, exclude, depends);

                return depends;
              }

              remove(uuid) {
                this._depends.remove(uuid);
              }

              parse(uuid, json) {
                let out = null;

                if (Array.isArray(json) || json.__type__ || json instanceof CCON) {
                  if (this._depends.has(uuid)) {
                    return this._depends.get(uuid);
                  }

                  if (Array.isArray(json) && ( !hasNativeDep(json))) {
                    out = {
                      deps: this._parseDepsFromJson(json)
                    };
                  } else {
                    try {
                      const asset = deserializeAsset(json, {
                        __uuid__: uuid
                      });
                      out = this._parseDepsFromAsset(asset);

                      if (out.nativeDep) {
                        out.nativeDep.uuid = uuid;
                      }

                      parsed.add(`${uuid}@import`, asset);
                    } catch (e) {
                      files.remove(`${uuid}@import`);
                      out = {
                        deps: []
                      };
                    }
                  }
                } else {
                  if ( this._depends.has(uuid)) {
                    out = this._depends.get(uuid);

                    if (out.parsedFromExistAsset) {
                      return out;
                    }
                  }

                  out = this._parseDepsFromAsset(json);
                }

                this._depends.add(uuid, out);

                return out;
              }

              _parseDepsFromAsset(asset) {
                const out = {
                  deps: [],
                  parsedFromExistAsset: true
                };
                const deps = dependMap.get(asset);
                assertIsNonNullable(deps);

                for (let i = 0, l = deps.length; i < l; i++) {
                  out.deps.push(deps[i].uuid);
                }

                if (nativeDependMap.has(asset)) {
                  out.nativeDep = asset._nativeDep;
                }

                return out;
              }

              _parseDepsFromJson(json) {
                const depends = parseUuidDependencies(json);
                depends.forEach((uuid, index) => depends[index] = decodeUuid(uuid));
                return depends;
              }

              _descend(uuid, exclude, depends) {
                const deps = this.getDeps(uuid);

                for (let i = 0; i < deps.length; i++) {
                  const depend = deps[i];

                  if (!exclude[depend]) {
                    exclude[depend] = true;
                    depends.push(depend);

                    this._descend(depend, exclude, depends);
                  }
                }
              }

            }
            var dependUtil = exports('c$', new DependUtil());

            const SimpleTexture = jsb.SimpleTexture;
            SimpleTexture.Filter = Filter$1;
            SimpleTexture.PixelFormat = PixelFormat;
            SimpleTexture.WrapMode = WrapMode$1;
            const simpleTextureProto = jsb.SimpleTexture.prototype;
            const oldUpdateDataFunc = simpleTextureProto.uploadData;

            simpleTextureProto.uploadData = function (source, level = 0, arrayIndex = 0) {
              let data;

              if (source instanceof HTMLCanvasElement) {
                data = source.data;
              } else if (source instanceof HTMLImageElement) {
                data = source._data;
              } else if (ArrayBuffer.isView(source)) {
                data = source.buffer;
              }

              oldUpdateDataFunc.call(this, data, level, arrayIndex);
            };

            const clsDecorator = ccclass('cc.SimpleTexture');

            simpleTextureProto._ctor = function () {
              jsb.TextureBase.prototype._ctor.apply(this, arguments);

              this._gfxTexture = null;

              this._registerListeners();
            };

            const oldGetGFXTexture = simpleTextureProto.getGFXTexture;

            simpleTextureProto.getGFXTexture = function () {
              if (!this._gfxTexture) {
                this._gfxTexture = oldGetGFXTexture.call(this);
              }

              return this._gfxTexture;
            };

            simpleTextureProto._onGFXTextureUpdated = function (gfxTexture) {
              this._gfxTexture = gfxTexture;
            };

            simpleTextureProto._onAfterAssignImage = function (image) {
              if (macro.CLEANUP_IMAGE_CACHE) {
                const deps = dependUtil.getDeps(this._uuid);
                const index = deps.indexOf(image._uuid);

                if (index !== -1) {
                  fastRemoveAt(deps, index);
                  image.decRef();
                }
              }
            };

            clsDecorator(SimpleTexture);
            legacyCC.SimpleTexture = jsb.SimpleTexture;

            const textureCubeProto = jsb.TextureCube.prototype;
            var FaceIndex;

            (function (FaceIndex) {
              FaceIndex[FaceIndex["right"] = 0] = "right";
              FaceIndex[FaceIndex["left"] = 1] = "left";
              FaceIndex[FaceIndex["top"] = 2] = "top";
              FaceIndex[FaceIndex["bottom"] = 3] = "bottom";
              FaceIndex[FaceIndex["front"] = 4] = "front";
              FaceIndex[FaceIndex["back"] = 5] = "back";
            })(FaceIndex || (FaceIndex = {}));

            var MipmapMode;

            (function (MipmapMode) {
              MipmapMode[MipmapMode["NONE"] = 0] = "NONE";
              MipmapMode[MipmapMode["AUTO"] = 1] = "AUTO";
              MipmapMode[MipmapMode["BAKED_CONVOLUTION_MAP"] = 2] = "BAKED_CONVOLUTION_MAP";
            })(MipmapMode || (MipmapMode = {}));

            textureCubeProto.createNode = null;
            const TextureCube = exports('gt', jsb.TextureCube);
            TextureCube.Filter = Filter$1;
            TextureCube.PixelFormat = PixelFormat;
            TextureCube.WrapMode = WrapMode$1;

            textureCubeProto._ctor = function () {
              jsb.SimpleTexture.prototype._ctor.apply(this, arguments);

              this._mipmaps = null;
              this._mipmapAtlas = null;
            };

            Object.defineProperty(textureCubeProto, 'mipmaps', {
              get() {
                return this._mipmaps;
              },

              set(value) {
                this._mipmaps = value;
                this.setMipmaps(value);
              }

            });
            Object.defineProperty(textureCubeProto, 'image', {
              get() {
                return this._mipmaps.length === 0 ? null : this._mipmaps[0];
              },

              set(value) {
                this.mipmaps = value ? [value] : [];
              }

            });
            const oldOnLoaded$1 = textureCubeProto.onLoaded;

            textureCubeProto.onLoaded = function () {
              if (this._mipmapMode === MipmapMode.BAKED_CONVOLUTION_MAP) {
                this.setMipmapAtlasForJS(this._mipmapAtlas);
              } else {
                this.setMipmapsForJS(this._mipmaps);
              }

              oldOnLoaded$1.apply(this);
            };

            textureCubeProto._serialize = function (ctxForExporting) {

              return null;
            };

            textureCubeProto._deserialize = function (serializedData, handle) {
              const data = serializedData;

              jsb.TextureBase.prototype._deserialize.call(this, data.base, handle);

              this.isRGBE = data.rgbe;

              if (data.mipmapMode != undefined) {
                this._mipmapMode = data.mipmapMode;
              }

              if (this._mipmapMode === MipmapMode.BAKED_CONVOLUTION_MAP) {
                const mipmapAtlas = data.mipmapAtlas;
                const mipmapLayout = data.mipmapLayout;
                this._mipmapAtlas = {
                  atlas: {},
                  layout: mipmapLayout
                };
                this._mipmapAtlas.atlas = {
                  front: new jsb.ImageAsset(),
                  back: new jsb.ImageAsset(),
                  left: new jsb.ImageAsset(),
                  right: new jsb.ImageAsset(),
                  top: new jsb.ImageAsset(),
                  bottom: new jsb.ImageAsset()
                };

                if (mipmapAtlas) {
                  const imageAssetClassId = js.getClassId(jsb.ImageAsset);
                  handle.result.push(this._mipmapAtlas.atlas, `front`, mipmapAtlas.front, imageAssetClassId);
                  handle.result.push(this._mipmapAtlas.atlas, `back`, mipmapAtlas.back, imageAssetClassId);
                  handle.result.push(this._mipmapAtlas.atlas, `left`, mipmapAtlas.left, imageAssetClassId);
                  handle.result.push(this._mipmapAtlas.atlas, `right`, mipmapAtlas.right, imageAssetClassId);
                  handle.result.push(this._mipmapAtlas.atlas, `top`, mipmapAtlas.top, imageAssetClassId);
                  handle.result.push(this._mipmapAtlas.atlas, `bottom`, mipmapAtlas.bottom, imageAssetClassId);
                }
              } else {
                this._mipmaps = new Array(data.mipmaps.length);

                for (let i = 0; i < data.mipmaps.length; ++i) {
                  this._mipmaps[i] = {
                    front: new jsb.ImageAsset(),
                    back: new jsb.ImageAsset(),
                    left: new jsb.ImageAsset(),
                    right: new jsb.ImageAsset(),
                    top: new jsb.ImageAsset(),
                    bottom: new jsb.ImageAsset()
                  };
                  const mipmap = data.mipmaps[i];
                  const imageAssetClassId = js.getClassId(jsb.ImageAsset);
                  handle.result.push(this._mipmaps[i], `front`, mipmap.front, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `back`, mipmap.back, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `left`, mipmap.left, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `right`, mipmap.right, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `top`, mipmap.top, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `bottom`, mipmap.bottom, imageAssetClassId);
                }
              }
            };

            legacyCC.TextureCube = jsb.TextureCube;
            const TextureCubeProto = TextureCube.prototype;
            serializable(TextureCubeProto, 'isRGBE');
            serializable(TextureCubeProto, '_mipmaps');
            serializable(TextureCubeProto, '_mipmapMode');
            serializable(TextureCubeProto, '_mipmapAtlas');
            ccclass('cc.TextureCube')(TextureCube);

            let ModelType;

            (function (ModelType) {
              ModelType[ModelType["DEFAULT"] = 0] = "DEFAULT";
              ModelType[ModelType["SKINNING"] = 1] = "SKINNING";
              ModelType[ModelType["BAKED_SKINNING"] = 2] = "BAKED_SKINNING";
              ModelType[ModelType["BATCH_2D"] = 3] = "BATCH_2D";
              ModelType[ModelType["PARTICLE_BATCH"] = 4] = "PARTICLE_BATCH";
              ModelType[ModelType["LINE"] = 5] = "LINE";
            })(ModelType || (ModelType = exports('ce', {})));

            const Model = exports('cf', jsb.Model);
            const modelProto = Model.prototype;

            modelProto._ctor = function () {
              this._device = deviceManager.gfxDevice;
            };

            const oldCreateBoundingShape = modelProto.createBoundingShape;

            modelProto.createBoundingShape = function (minPos, maxPos) {
              if (!minPos || !maxPos) {
                return;
              }

              oldCreateBoundingShape.call(this, minPos, maxPos);
            };

            const Ambient = exports('cq', jsb.Ambient);
            legacyCC.Ambient = Ambient;
            function ColorTemperatureToRGB(rgb, kelvin) {
              if (kelvin < 1000.0) {
                kelvin = 1000.0;
              } else if (kelvin > 15000.0) {
                kelvin = 15000.0;
              }

              const kSqr = kelvin * kelvin;
              const u = (0.860117757 + 1.54118254e-4 * kelvin + 1.28641212e-7 * kSqr) / (1.0 + 8.42420235e-4 * kelvin + 7.08145163e-7 * kSqr);
              const v = (0.317398726 + 4.22806245e-5 * kelvin + 4.20481691e-8 * kSqr) / (1.0 - 2.89741816e-5 * kelvin + 1.61456053e-7 * kSqr);
              const d = 2.0 * u - 8.0 * v + 4.0;
              const x = 3.0 * u / d;
              const y = 2.0 * v / d;
              const z = 1.0 - x - y;
              const X = 1.0 / y * x;
              const Z = 1.0 / y * z;
              rgb.x = 3.2404542 * X + -1.5371385 + -0.4985314 * Z;
              rgb.y = -0.9692660 * X + 1.8760108 + 0.0415560 * Z;
              rgb.z = 0.0556434 * X + -0.2040259 + 1.0572252 * Z;
            }
            let LightType;

            (function (LightType) {
              LightType[LightType["DIRECTIONAL"] = 0] = "DIRECTIONAL";
              LightType[LightType["SPHERE"] = 1] = "SPHERE";
              LightType[LightType["SPOT"] = 2] = "SPOT";
              LightType[LightType["UNKNOWN"] = 3] = "UNKNOWN";
            })(LightType || (LightType = exports('cs', {})));

            const nt2lm = exports('ct', size => 4 * Math.PI * Math.PI * size * size);
            const Light = exports('cu', jsb.Light);
            legacyCC.Light = jsb.Light;
            const DirectionalLight = exports('cv', jsb.DirectionalLight);
            legacyCC.DirectionalLight = jsb.DirectionalLight;
            const SpotLight = exports('cw', jsb.SpotLight);
            legacyCC.SpotLight = jsb.SpotLight;
            const SphereLight = exports('cx', jsb.SphereLight);
            legacyCC.SphereLight = jsb.SphereLight;
            const FogType = exports('cy', Enum({
              LINEAR: 0,
              EXP: 1,
              EXP_SQUARED: 2,
              LAYERED: 3
            }));
            const FogInfo = exports('cz', jsb.FogInfo);
            const Fog = exports('cA', jsb.Fog);
            legacyCC.Fog = Fog;
            const ShadowSize = exports('cB', Enum({
              Low_256x256: 256,
              Medium_512x512: 512,
              High_1024x1024: 1024,
              Ultra_2048x2048: 2048
            }));
            const ShadowType = exports('cC', Enum({
              Planar: 0,
              ShadowMap: 1
            }));
            const PCFType = exports('cD', Enum({
              HARD: 0,
              SOFT: 1,
              SOFT_2X: 2
            }));
            const CSMLevel = exports('cE', Enum({
              LEVEL_1: 1,
              LEVEL_2: 2,
              LEVEL_3: 3,
              LEVEL_4: 4
            }));
            const CSMOptimizationMode = exports('cF', Enum({
              NONE: 1,
              RemoveDuplicates: 2,
              DisableRotaitonFix: 3
            }));
            const EnvironmentLightingType = exports('cG', Enum({
              HEMISPHERE_DIFFUSE: 0,
              AUTOGEN_HEMISPHERE_DIFFUSE_WITH_REFLECTION: 1,
              DIFFUSEMAP_WITH_REFLECTION: 2
            }));
            const ShadowsInfo = exports('cH', jsb.ShadowsInfo);
            const Shadows = exports('cI', jsb.Shadow);
            legacyCC.Shadows = Shadows;
            const Skybox = exports('cJ', jsb.Skybox);
            legacyCC.Skybox = Skybox;

            const FogType$1 = exports('gW', Enum({
              LINEAR: 0,
              EXP: 1,
              EXP_SQUARED: 2,
              LAYERED: 3
            }));
            const ShadowSize$1 = exports('gX', Enum({
              Low_256x256: 256,
              Medium_512x512: 512,
              High_1024x1024: 1024,
              Ultra_2048x2048: 2048
            }));
            const ShadowType$1 = exports('gY', Enum({
              Planar: 0,
              ShadowMap: 1
            }));
            const AmbientInfo = exports('gZ', jsb.AmbientInfo);
            legacyCC.AmbientInfo = AmbientInfo;
            const SkyboxInfo = exports('g_', jsb.SkyboxInfo);
            legacyCC.SkyboxInfo = SkyboxInfo;
            const FogInfo$1 = exports('g$', jsb.FogInfo);
            legacyCC.FogInfo = FogInfo$1;
            FogInfo$1.FogType = FogType$1;
            const ShadowsInfo$1 = exports('h0', jsb.ShadowsInfo);
            legacyCC.ShadowsInfo = ShadowsInfo$1;
            const OctreeInfo = exports('h1', jsb.OctreeInfo);
            legacyCC.OctreeInfo = OctreeInfo;
            const SceneGlobals = exports('h2', jsb.SceneGlobals);
            legacyCC.SceneGlobals = SceneGlobals;

            (function () {
              const sceneGlobalsProto = SceneGlobals.prototype;

              sceneGlobalsProto._ctor = function () {
                this._ambientRef = null;
                this._shadowsRef = null;
                this._skyboxRef = null;
                this._fogRef = null;
                this._octreeRef = null;
              };

              Object.defineProperty(sceneGlobalsProto, 'ambient', {
                enumerable: true,
                configurable: true,

                get() {
                  return this._ambientRef;
                },

                set(v) {
                  this._ambientRef = v;
                  this.setAmbientInfo(v);
                }

              });
              Object.defineProperty(sceneGlobalsProto, 'shadows', {
                enumerable: true,
                configurable: true,

                get() {
                  return this._shadowsRef;
                },

                set(v) {
                  this._shadowsRef = v;
                  this.setShadowsInfo(v);
                }

              });
              Object.defineProperty(sceneGlobalsProto, '_skybox', {
                enumerable: true,
                configurable: true,

                get() {
                  return this._skyboxRef;
                },

                set(v) {
                  this._skyboxRef = v;
                  this.setSkyboxInfo(v);
                }

              });
              Object.defineProperty(sceneGlobalsProto, 'skybox', {
                enumerable: true,
                configurable: true,

                get() {
                  return this._skyboxRef;
                },

                set(v) {
                  this._skyboxRef = v;
                  this.setSkyboxInfo(v);
                }

              });
              Object.defineProperty(sceneGlobalsProto, 'fog', {
                enumerable: true,
                configurable: true,

                get() {
                  return this._fogRef;
                },

                set(v) {
                  this._fogRef = v;
                  this.setFogInfo(v);
                }

              });
              Object.defineProperty(sceneGlobalsProto, 'octree', {
                enumerable: true,
                configurable: true,

                get() {
                  return this._octreeRef;
                },

                set(v) {
                  this._octreeRef = v;
                  this.setOctreeInfo(v);
                }

              });
            })();

            const SceneGlobalsProto = SceneGlobals.prototype;
            serializable(SceneGlobalsProto, 'ambient');
            serializable(SceneGlobalsProto, 'shadows');
            serializable(SceneGlobalsProto, '_skybox');
            serializable(SceneGlobalsProto, 'fog');
            const skyboxDescriptor = Object.getOwnPropertyDescriptor(SceneGlobalsProto, 'skybox');
            type(SkyboxInfo)(SceneGlobalsProto, 'skybox', skyboxDescriptor);
            serializable(SceneGlobalsProto, 'octree');
            ccclass('cc.SceneGlobals')(SceneGlobals);
            const OctreeInfoProto = OctreeInfo.prototype;
            serializable(OctreeInfoProto, '_enabled');
            serializable(OctreeInfoProto, '_minPos');
            serializable(OctreeInfoProto, '_maxPos');
            serializable(OctreeInfoProto, '_depth');
            const depthDescriptor = Object.getOwnPropertyDescriptor(OctreeInfoProto, 'depth');
            type(CCInteger)(OctreeInfoProto, 'depth', depthDescriptor);
            ccclass('cc.OctreeInfo')(OctreeInfo);
            const ShadowsInfoProto = ShadowsInfo$1.prototype;
            serializable(ShadowsInfoProto, '_enabled');
            serializable(ShadowsInfoProto, '_type');
            serializable(ShadowsInfoProto, '_normal');
            serializable(ShadowsInfoProto, '_distance');
            serializable(ShadowsInfoProto, '_shadowColor');
            serializable(ShadowsInfoProto, '_maxReceived');
            serializable(ShadowsInfoProto, '_size');
            const typeDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'type');
            type(ShadowType$1)(ShadowsInfoProto, 'type', typeDescriptor);
            const planeHeightDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'planeHeight');
            type(CCFloat)(ShadowsInfoProto, 'planeHeight', planeHeightDescriptor);
            const maxReceivedDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'maxReceived');
            type(CCInteger)(ShadowsInfoProto, 'maxReceived', maxReceivedDescriptor);
            const shadowMapSizeDescriptor = Object.getOwnPropertyDescriptor(ShadowsInfoProto, 'shadowMapSize');
            type(ShadowSize$1)(ShadowsInfoProto, 'shadowMapSize', shadowMapSizeDescriptor);
            ccclass('cc.ShadowsInfo')(ShadowsInfo$1);
            const FogInfoProto = FogInfo$1.prototype;
            serializable(FogInfoProto, '_type');
            serializable(FogInfoProto, '_fogColor');
            serializable(FogInfoProto, '_enabled');
            serializable(FogInfoProto, '_fogDensity');
            serializable(FogInfoProto, '_fogStart');
            serializable(FogInfoProto, '_fogEnd');
            serializable(FogInfoProto, '_fogAtten');
            serializable(FogInfoProto, '_fogTop');
            serializable(FogInfoProto, '_fogRange');
            serializable(FogInfoProto, '_accurate');
            const fogTypeDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'type');
            type(FogType$1)(FogInfoProto, 'type', fogTypeDescriptor);
            const fogDensityDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogDensity');
            type(CCFloat)(FogInfoProto, 'fogDensity', fogDensityDescriptor);
            const fogStartDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogStart');
            type(CCFloat)(FogInfoProto, 'fogStart', fogStartDescriptor);
            const fogEndDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogEnd');
            type(CCFloat)(FogInfoProto, 'fogEnd', fogEndDescriptor);
            const fogAttenDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogAtten');
            type(CCFloat)(FogInfoProto, 'fogAtten', fogAttenDescriptor);
            const fogTopDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogTop');
            type(CCFloat)(FogInfoProto, 'fogTop', fogTopDescriptor);
            const fogRangeDescriptor = Object.getOwnPropertyDescriptor(FogInfoProto, 'fogRange');
            type(CCFloat)(FogInfoProto, 'fogRange', fogRangeDescriptor);
            ccclass('cc.FogInfo')(FogInfo$1);
            const SkyboxInfoProto = SkyboxInfo.prototype;
            serializable(SkyboxInfoProto, '_envLightingType');
            formerlySerializedAs('_envmap')(SkyboxInfoProto, '_envmapHDR');
            type(TextureCube)(SkyboxInfoProto, '_envmapHDR');
            serializable(SkyboxInfoProto, '_envmapHDR');
            type(TextureCube)(SkyboxInfoProto, '_envmapLDR');
            serializable(SkyboxInfoProto, '_envmapLDR');
            type(TextureCube)(SkyboxInfoProto, '_diffuseMapHDR');
            serializable(SkyboxInfoProto, '_diffuseMapHDR');
            type(TextureCube)(SkyboxInfoProto, '_diffuseMapLDR');
            serializable(SkyboxInfoProto, '_diffuseMapLDR');
            serializable(SkyboxInfoProto, '_enabled');
            serializable(SkyboxInfoProto, '_useHDR');
            type(Material)(SkyboxInfoProto, '_editableMaterial');
            serializable(SkyboxInfoProto, '_editableMaterial');
            type(TextureCube)(SkyboxInfoProto, '_reflectionHDR');
            serializable(SkyboxInfoProto, '_reflectionHDR');
            type(TextureCube)(SkyboxInfoProto, '_reflectionLDR');
            serializable(SkyboxInfoProto, '_reflectionLDR');
            const envLightingTypeDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'envLightingType');
            type(EnvironmentLightingType)(SkyboxInfoProto, 'envLightingType', envLightingTypeDescriptor);
            const envmapDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'envmap');
            type(TextureCube)(SkyboxInfoProto, 'envmap', envmapDescriptor);
            const diffuseMapDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'diffuseMap');
            type(TextureCube)(SkyboxInfoProto, 'diffuseMap', diffuseMapDescriptor);
            const skyboxMaterialDescriptor = Object.getOwnPropertyDescriptor(SkyboxInfoProto, 'skyboxMaterial');
            type(Material)(SkyboxInfoProto, 'skyboxMaterial', skyboxMaterialDescriptor);
            ccclass('cc.SkyboxInfo')(SkyboxInfo);
            const AmbientInfoProto = AmbientInfo.prototype;
            formerlySerializedAs('_skyColor')(AmbientInfoProto, '_skyColorHDR');
            serializable(AmbientInfoProto, '_skyColorHDR');
            formerlySerializedAs('_skyIllum')(AmbientInfoProto, '_skyIllumHDR');
            serializable(AmbientInfoProto, '_skyIllumHDR');
            formerlySerializedAs('_groundAlbedo')(AmbientInfoProto, '_groundAlbedoHDR');
            serializable(AmbientInfoProto, '_groundAlbedoHDR');
            serializable(AmbientInfoProto, '_skyColorLDR');
            serializable(AmbientInfoProto, '_skyIllumLDR');
            serializable(AmbientInfoProto, '_groundAlbedoLDR');
            const skyIllumDescriptor = Object.getOwnPropertyDescriptor(AmbientInfoProto, 'skyIllum');
            type(CCFloat)(AmbientInfoProto, 'skyIllum', skyIllumDescriptor);
            ccclass('cc.AmbientInfo')(AmbientInfo);

            deprecateModuleExportedName({
              SystemEventType: {
                newName: 'Input.EventType',
                since: '3.3.0',
                removed: false
              }
            });

            deprecateModuleExportedName({
              SystemEvent: {
                newName: 'Input',
                since: '3.4.0',
                removed: false
              },
              systemEvent: {
                newName: 'input',
                since: '3.4.0',
                removed: false
              }
            });

            class AccelerometerInputSource {
              constructor() {
                this._intervalInSeconds = 0.2;
                this._intervalId = void 0;
                this._isEnabled = false;
                this._eventTarget = new EventTarget();
                this._didAccelerateFunc = void 0;
                this._didAccelerateFunc = this._didAccelerate.bind(this);
              }

              _didAccelerate() {
                const deviceMotionValue = jsb.device.getDeviceMotionValue();
                let x = deviceMotionValue[3] * 0.1;
                let y = deviceMotionValue[4] * 0.1;
                const z = deviceMotionValue[5] * 0.1;
                const orientation = screenAdapter.orientation;
                const tmpX = x;

                if (orientation === Orientation.LANDSCAPE_RIGHT) {
                  x = -y;
                  y = tmpX;
                } else if (orientation === Orientation.LANDSCAPE_LEFT) {
                  x = y;
                  y = -tmpX;
                } else if (orientation === Orientation.PORTRAIT_UPSIDE_DOWN) {
                  x = -x;
                  y = -y;
                }

                if (systemInfo.os === OS.ANDROID || systemInfo.os === OS.OHOS) {
                  x = -x;
                  y = -y;
                }

                const timestamp = performance.now();
                const acceleration = new Acceleration(x, y, z, timestamp);
                const eventAcceleration = new EventAcceleration(acceleration);

                this._eventTarget.emit(InputEventType.DEVICEMOTION, eventAcceleration);
              }

              start() {
                if (this._intervalId) {
                  clearInterval(this._intervalId);
                }

                this._intervalId = setInterval(this._didAccelerateFunc, this._intervalInSeconds * 1000);
                jsb.device.setAccelerometerInterval(this._intervalInSeconds);
                jsb.device.setAccelerometerEnabled(true);
                this._isEnabled = true;
              }

              stop() {
                if (this._intervalId) {
                  clearInterval(this._intervalId);
                  this._intervalId = undefined;
                }

                jsb.device.setAccelerometerEnabled(false);
                this._isEnabled = false;
              }

              setInterval(intervalInMileseconds) {
                this._intervalInSeconds = intervalInMileseconds / 1000;
                jsb.device.setAccelerometerInterval(this._intervalInSeconds);

                if (this._isEnabled) {
                  jsb.device.setAccelerometerEnabled(false);
                  jsb.device.setAccelerometerEnabled(true);
                }
              }

              on(eventType, callback, target) {
                this._eventTarget.on(eventType, callback, target);
              }

            }

            class InputSource {}
            class InputSourceAxis1D extends InputSource {
              getValue() {
                throw new Error('Method not implemented.');
              }

            }
            class InputSourceAxis2D extends InputSource {
              getValue() {
                throw new Error('Method not implemented.');
              }

            }
            class InputSourceAxis3D extends InputSource {
              getValue() {
                throw new Error('Method not implemented.');
              }

            }
            class InputSourceQuat extends InputSource {
              getValue() {
                throw new Error('Method not implemented.');
              }

            }
            class CompositeInputSourceAxis1D extends InputSourceAxis1D {
              constructor(options) {
                super();
                this.positive = void 0;
                this.negative = void 0;
                this.positive = options.positive;
                this.negative = options.negative;
              }

              getValue() {
                const positiveValue = this.positive.getValue();
                const negativeValue = this.negative.getValue();

                if (Math.abs(positiveValue) > Math.abs(negativeValue)) {
                  return positiveValue;
                }

                return -negativeValue;
              }

            }
            class CompositeInputSourceAxis2D extends InputSourceAxis2D {
              constructor(options) {
                super();
                this.up = void 0;
                this.down = void 0;
                this.left = void 0;
                this.right = void 0;
                this.xAxis = void 0;
                this.yAxis = void 0;
                this.up = options.up;
                this.down = options.down;
                this.left = options.left;
                this.right = options.right;
                this.xAxis = new CompositeInputSourceAxis1D({
                  positive: this.right,
                  negative: this.left
                });
                this.yAxis = new CompositeInputSourceAxis1D({
                  positive: this.up,
                  negative: this.down
                });
              }

              getValue() {
                return new Vec2(this.xAxis.getValue(), this.yAxis.getValue());
              }

            }
            class InputSourceButton extends InputSourceAxis1D {
              getValue() {
                return super.getValue();
              }

            }
            class InputSourceDpad extends CompositeInputSourceAxis2D {}
            class InputSourceStick extends CompositeInputSourceAxis2D {}
            class InputSourceOrientation extends InputSourceQuat {
              getValue() {
                return super.getValue();
              }

            }
            class InputSourcePosition extends InputSourceAxis3D {
              getValue() {
                return super.getValue();
              }

            }

            var Button;

            (function (Button) {
              Button[Button["BUTTON_SOUTH"] = 0] = "BUTTON_SOUTH";
              Button[Button["BUTTON_EAST"] = 1] = "BUTTON_EAST";
              Button[Button["BUTTON_WEST"] = 2] = "BUTTON_WEST";
              Button[Button["BUTTON_NORTH"] = 3] = "BUTTON_NORTH";
              Button[Button["NS_MINUS"] = 4] = "NS_MINUS";
              Button[Button["NS_PLUS"] = 5] = "NS_PLUS";
              Button[Button["BUTTON_L1"] = 6] = "BUTTON_L1";
              Button[Button["BUTTON_L2"] = 7] = "BUTTON_L2";
              Button[Button["BUTTON_L3"] = 8] = "BUTTON_L3";
              Button[Button["BUTTON_R1"] = 9] = "BUTTON_R1";
              Button[Button["BUTTON_R2"] = 10] = "BUTTON_R2";
              Button[Button["BUTTON_R3"] = 11] = "BUTTON_R3";
              Button[Button["DPAD_UP"] = 12] = "DPAD_UP";
              Button[Button["DPAD_DOWN"] = 13] = "DPAD_DOWN";
              Button[Button["DPAD_LEFT"] = 14] = "DPAD_LEFT";
              Button[Button["DPAD_RIGHT"] = 15] = "DPAD_RIGHT";
              Button[Button["LEFT_STICK_UP"] = 16] = "LEFT_STICK_UP";
              Button[Button["LEFT_STICK_DOWN"] = 17] = "LEFT_STICK_DOWN";
              Button[Button["LEFT_STICK_LEFT"] = 18] = "LEFT_STICK_LEFT";
              Button[Button["LEFT_STICK_RIGHT"] = 19] = "LEFT_STICK_RIGHT";
              Button[Button["RIGHT_STICK_UP"] = 20] = "RIGHT_STICK_UP";
              Button[Button["RIGHT_STICK_DOWN"] = 21] = "RIGHT_STICK_DOWN";
              Button[Button["RIGHT_STICK_LEFT"] = 22] = "RIGHT_STICK_LEFT";
              Button[Button["RIGHT_STICK_RIGHT"] = 23] = "RIGHT_STICK_RIGHT";
              Button[Button["ROKID_MENU"] = 24] = "ROKID_MENU";
              Button[Button["ROKID_START"] = 25] = "ROKID_START";
            })(Button || (Button = {}));

            const _nativeButtonMap = {
              1: Button.BUTTON_EAST,
              2: Button.BUTTON_SOUTH,
              3: Button.BUTTON_NORTH,
              4: Button.BUTTON_WEST,
              5: Button.BUTTON_L1,
              6: Button.BUTTON_R1,
              7: Button.NS_MINUS,
              8: Button.NS_PLUS,
              9: Button.BUTTON_L3,
              10: Button.BUTTON_R3,
              11: Button.ROKID_MENU,
              12: Button.ROKID_START
            };
            class GamepadInputDevice {
              get buttonNorth() {
                return this._buttonNorth;
              }

              get buttonEast() {
                return this._buttonEast;
              }

              get buttonWest() {
                return this._buttonWest;
              }

              get buttonSouth() {
                return this._buttonSouth;
              }

              get buttonL1() {
                return this._buttonL1;
              }

              get buttonL2() {
                return this._buttonL2;
              }

              get buttonL3() {
                return this._buttonL3;
              }

              get buttonR1() {
                return this._buttonR1;
              }

              get buttonR2() {
                return this._buttonR2;
              }

              get buttonR3() {
                return this._buttonR3;
              }

              get buttonShare() {
                return this._buttonShare;
              }

              get buttonOptions() {
                return this._buttonOptions;
              }

              get dpad() {
                return this._dpad;
              }

              get leftStick() {
                return this._leftStick;
              }

              get rightStick() {
                return this._rightStick;
              }

              get buttonStart() {
                return this._buttonStart;
              }

              get deviceId() {
                return this._deviceId;
              }

              get connected() {
                return this._connected;
              }

              constructor(deviceId) {
                this._deviceId = -1;
                this._connected = false;
                this._nativeButtonState = {
                  [Button.BUTTON_SOUTH]: 0,
                  [Button.BUTTON_EAST]: 0,
                  [Button.BUTTON_WEST]: 0,
                  [Button.BUTTON_NORTH]: 0,
                  [Button.NS_MINUS]: 0,
                  [Button.NS_PLUS]: 0,
                  [Button.BUTTON_L1]: 0,
                  [Button.BUTTON_L2]: 0,
                  [Button.BUTTON_L3]: 0,
                  [Button.BUTTON_R1]: 0,
                  [Button.BUTTON_R2]: 0,
                  [Button.BUTTON_R3]: 0,
                  [Button.DPAD_UP]: 0,
                  [Button.DPAD_DOWN]: 0,
                  [Button.DPAD_LEFT]: 0,
                  [Button.DPAD_RIGHT]: 0,
                  [Button.LEFT_STICK_UP]: 0,
                  [Button.LEFT_STICK_DOWN]: 0,
                  [Button.LEFT_STICK_LEFT]: 0,
                  [Button.LEFT_STICK_RIGHT]: 0,
                  [Button.RIGHT_STICK_UP]: 0,
                  [Button.RIGHT_STICK_DOWN]: 0,
                  [Button.RIGHT_STICK_LEFT]: 0,
                  [Button.RIGHT_STICK_RIGHT]: 0,
                  [Button.ROKID_MENU]: 0,
                  [Button.ROKID_START]: 0
                };
                this._deviceId = deviceId;

                this._initInputSource();
              }

              static _init() {
                if (!systemInfo.hasFeature(Feature$1.EVENT_GAMEPAD)) {
                  return;
                }

                GamepadInputDevice._registerEvent();
              }

              static _on(eventType, cb, target) {
                GamepadInputDevice._eventTarget.on(eventType, cb, target);
              }

              static _removeInputDevice(id) {
                const removeIndex = GamepadInputDevice.all.findIndex(device => device.deviceId === id);

                if (removeIndex === -1) {
                  return;
                }

                fastRemoveAt(GamepadInputDevice.all, removeIndex);
              }

              static _getInputDevice(id) {
                return GamepadInputDevice.all.find(device => device.deviceId === id);
              }

              static _createInputDevice(id, connected) {
                const device = new GamepadInputDevice(id);
                device._connected = connected;
                GamepadInputDevice.all.push(device);
                return device;
              }

              static _getOrCreateInputDevice(id, connected) {
                let device = GamepadInputDevice._getInputDevice(id);

                if (!device) {
                  device = GamepadInputDevice._createInputDevice(id, connected);
                }

                device._connected = connected;
                return device;
              }

              static _registerEvent() {
                jsb.onControllerInput = infoList => {
                  for (let i = 0; i < infoList.length; ++i) {
                    const info = infoList[i];

                    const device = GamepadInputDevice._getOrCreateInputDevice(info.id, true);

                    device._updateNativeButtonState(info);

                    GamepadInputDevice._eventTarget.emit(InputEventType.GAMEPAD_INPUT, new EventGamepad(InputEventType.GAMEPAD_INPUT, device));
                  }
                };

                jsb.onControllerChange = controllerIds => {
                  for (let i = 0; i < controllerIds.length; ++i) {
                    const id = controllerIds[i];

                    let device = GamepadInputDevice._getInputDevice(id);

                    if (!device) {
                      device = GamepadInputDevice._createInputDevice(id, true);

                      GamepadInputDevice._eventTarget.emit(InputEventType.GAMEPAD_CHANGE, new EventGamepad(InputEventType.GAMEPAD_CHANGE, device));
                    }
                  }

                  const allDevices = GamepadInputDevice.all;

                  for (let i = 0; i < allDevices.length; ++i) {
                    const device = allDevices[i];

                    if (!controllerIds.includes(device.deviceId)) {
                      GamepadInputDevice._removeInputDevice(device.deviceId);

                      device._connected = false;

                      GamepadInputDevice._eventTarget.emit(InputEventType.GAMEPAD_CHANGE, new EventGamepad(InputEventType.GAMEPAD_CHANGE, device));
                    }
                  }
                };
              }

              _axisToButtons(axisValue) {
                const value = Math.abs(axisValue);

                if (axisValue > 0) {
                  return {
                    negative: 0,
                    positive: value
                  };
                } else if (axisValue < 0) {
                  return {
                    negative: value,
                    positive: 0
                  };
                } else {
                  return {
                    negative: 0,
                    positive: 0
                  };
                }
              }

              _updateNativeButtonState(info) {
                const {
                  buttonInfoList,
                  axisInfoList
                } = info;

                for (let i = 0; i < buttonInfoList.length; ++i) {
                  const buttonInfo = buttonInfoList[i];
                  const button = _nativeButtonMap[buttonInfo.code];
                  this._nativeButtonState[button] = buttonInfo.isPressed ? 1 : 0;
                }

                for (let i = 0; i < axisInfoList.length; ++i) {
                  const axisInfo = axisInfoList[i];
                  const {
                    code,
                    value
                  } = axisInfo;
                  let negativeButton;
                  let positiveButton;
                  let axisValue;

                  switch (code) {
                    case 1:
                      negativeButton = Button.DPAD_LEFT;
                      positiveButton = Button.DPAD_RIGHT;
                      axisValue = this._axisToButtons(value);
                      break;

                    case 2:
                      negativeButton = Button.DPAD_DOWN;
                      positiveButton = Button.DPAD_UP;
                      axisValue = this._axisToButtons(value);
                      break;

                    case 3:
                      negativeButton = Button.LEFT_STICK_LEFT;
                      positiveButton = Button.LEFT_STICK_RIGHT;
                      axisValue = this._axisToButtons(value);
                      break;

                    case 4:
                      negativeButton = Button.LEFT_STICK_DOWN;
                      positiveButton = Button.LEFT_STICK_UP;
                      axisValue = this._axisToButtons(value);
                      break;

                    case 5:
                      negativeButton = Button.RIGHT_STICK_LEFT;
                      positiveButton = Button.RIGHT_STICK_RIGHT;
                      axisValue = this._axisToButtons(value);
                      break;

                    case 6:
                      negativeButton = Button.RIGHT_STICK_DOWN;
                      positiveButton = Button.RIGHT_STICK_UP;
                      axisValue = this._axisToButtons(value);
                      break;

                    default:
                      if (code === 7) {
                        this._nativeButtonState[Button.BUTTON_L2] = value;
                      } else if (code === 8) {
                        this._nativeButtonState[Button.BUTTON_R2] = value;
                      }

                      break;
                  }

                  if (negativeButton && positiveButton && axisValue) {
                    this._nativeButtonState[negativeButton] = axisValue.negative;
                    this._nativeButtonState[positiveButton] = axisValue.positive;
                  }
                }
              }

              _initInputSource() {
                this._buttonNorth = new InputSourceButton();

                this._buttonNorth.getValue = () => this._nativeButtonState[Button.BUTTON_NORTH];

                this._buttonEast = new InputSourceButton();

                this._buttonEast.getValue = () => this._nativeButtonState[Button.BUTTON_EAST];

                this._buttonWest = new InputSourceButton();

                this._buttonWest.getValue = () => this._nativeButtonState[Button.BUTTON_WEST];

                this._buttonSouth = new InputSourceButton();

                this._buttonSouth.getValue = () => this._nativeButtonState[Button.BUTTON_SOUTH];

                this._buttonL1 = new InputSourceButton();

                this._buttonL1.getValue = () => this._nativeButtonState[Button.BUTTON_L1];

                this._buttonL2 = new InputSourceButton();

                this._buttonL2.getValue = () => this._nativeButtonState[Button.BUTTON_L2];

                this._buttonL3 = new InputSourceButton();

                this._buttonL3.getValue = () => this._nativeButtonState[Button.BUTTON_L3];

                this._buttonR1 = new InputSourceButton();

                this._buttonR1.getValue = () => this._nativeButtonState[Button.BUTTON_R1];

                this._buttonR2 = new InputSourceButton();

                this._buttonR2.getValue = () => this._nativeButtonState[Button.BUTTON_R2];

                this._buttonR3 = new InputSourceButton();

                this._buttonR3.getValue = () => this._nativeButtonState[Button.BUTTON_R3];

                this._buttonShare = new InputSourceButton();

                this._buttonShare.getValue = () => this._nativeButtonState[Button.NS_MINUS];

                this._buttonOptions = new InputSourceButton();

                this._buttonOptions.getValue = () => this._nativeButtonState[Button.NS_PLUS] || this._nativeButtonState[Button.ROKID_MENU];

                const dpadUp = new InputSourceButton();

                dpadUp.getValue = () => this._nativeButtonState[Button.DPAD_UP];

                const dpadDown = new InputSourceButton();

                dpadDown.getValue = () => this._nativeButtonState[Button.DPAD_DOWN];

                const dpadLeft = new InputSourceButton();

                dpadLeft.getValue = () => this._nativeButtonState[Button.DPAD_LEFT];

                const dpadRight = new InputSourceButton();

                dpadRight.getValue = () => this._nativeButtonState[Button.DPAD_RIGHT];

                this._dpad = new InputSourceDpad({
                  up: dpadUp,
                  down: dpadDown,
                  left: dpadLeft,
                  right: dpadRight
                });
                const leftStickUp = new InputSourceButton();

                leftStickUp.getValue = () => this._nativeButtonState[Button.LEFT_STICK_UP];

                const leftStickDown = new InputSourceButton();

                leftStickDown.getValue = () => this._nativeButtonState[Button.LEFT_STICK_DOWN];

                const leftStickLeft = new InputSourceButton();

                leftStickLeft.getValue = () => this._nativeButtonState[Button.LEFT_STICK_LEFT];

                const leftStickRight = new InputSourceButton();

                leftStickRight.getValue = () => this._nativeButtonState[Button.LEFT_STICK_RIGHT];

                this._leftStick = new InputSourceStick({
                  up: leftStickUp,
                  down: leftStickDown,
                  left: leftStickLeft,
                  right: leftStickRight
                });
                const rightStickUp = new InputSourceButton();

                rightStickUp.getValue = () => this._nativeButtonState[Button.RIGHT_STICK_UP];

                const rightStickDown = new InputSourceButton();

                rightStickDown.getValue = () => this._nativeButtonState[Button.RIGHT_STICK_DOWN];

                const rightStickLeft = new InputSourceButton();

                rightStickLeft.getValue = () => this._nativeButtonState[Button.RIGHT_STICK_LEFT];

                const rightStickRight = new InputSourceButton();

                rightStickRight.getValue = () => this._nativeButtonState[Button.RIGHT_STICK_RIGHT];

                this._rightStick = new InputSourceStick({
                  up: rightStickUp,
                  down: rightStickDown,
                  left: rightStickLeft,
                  right: rightStickRight
                });
                this._buttonStart = new InputSourceButton();

                this._buttonStart.getValue = () => this._nativeButtonState[Button.ROKID_START];
              }

            }
            GamepadInputDevice.all = [];
            GamepadInputDevice._eventTarget = new EventTarget();

            var Button$1;

            (function (Button) {
              Button[Button["BUTTON_EAST"] = 0] = "BUTTON_EAST";
              Button[Button["BUTTON_SOUTH"] = 1] = "BUTTON_SOUTH";
              Button[Button["BUTTON_WEST"] = 2] = "BUTTON_WEST";
              Button[Button["BUTTON_NORTH"] = 3] = "BUTTON_NORTH";
              Button[Button["BUTTON_TRIGGER_LEFT"] = 4] = "BUTTON_TRIGGER_LEFT";
              Button[Button["BUTTON_TRIGGER_RIGHT"] = 5] = "BUTTON_TRIGGER_RIGHT";
              Button[Button["TRIGGER_LEFT"] = 6] = "TRIGGER_LEFT";
              Button[Button["TRIGGER_RIGHT"] = 7] = "TRIGGER_RIGHT";
              Button[Button["GRIP_LEFT"] = 8] = "GRIP_LEFT";
              Button[Button["GRIP_RIGHT"] = 9] = "GRIP_RIGHT";
              Button[Button["BUTTON_LEFT_STICK"] = 10] = "BUTTON_LEFT_STICK";
              Button[Button["LEFT_STICK_UP"] = 11] = "LEFT_STICK_UP";
              Button[Button["LEFT_STICK_DOWN"] = 12] = "LEFT_STICK_DOWN";
              Button[Button["LEFT_STICK_LEFT"] = 13] = "LEFT_STICK_LEFT";
              Button[Button["LEFT_STICK_RIGHT"] = 14] = "LEFT_STICK_RIGHT";
              Button[Button["BUTTON_RIGHT_STICK"] = 15] = "BUTTON_RIGHT_STICK";
              Button[Button["RIGHT_STICK_UP"] = 16] = "RIGHT_STICK_UP";
              Button[Button["RIGHT_STICK_DOWN"] = 17] = "RIGHT_STICK_DOWN";
              Button[Button["RIGHT_STICK_LEFT"] = 18] = "RIGHT_STICK_LEFT";
              Button[Button["RIGHT_STICK_RIGHT"] = 19] = "RIGHT_STICK_RIGHT";
            })(Button$1 || (Button$1 = {}));

            var Pose;

            (function (Pose) {
              Pose[Pose["HAND_LEFT"] = 0] = "HAND_LEFT";
              Pose[Pose["HAND_RIGHT"] = 1] = "HAND_RIGHT";
              Pose[Pose["AIM_LEFT"] = 2] = "AIM_LEFT";
              Pose[Pose["AIM_RIGHT"] = 3] = "AIM_RIGHT";
            })(Pose || (Pose = {}));

            const _nativeButtonMap$1 = {
              1: Button$1.BUTTON_EAST,
              2: Button$1.BUTTON_SOUTH,
              3: Button$1.BUTTON_NORTH,
              4: Button$1.BUTTON_WEST,
              9: Button$1.BUTTON_LEFT_STICK,
              10: Button$1.BUTTON_RIGHT_STICK,
              13: Button$1.BUTTON_TRIGGER_LEFT,
              14: Button$1.BUTTON_TRIGGER_RIGHT
            };
            class HandleInputDevice {
              get buttonNorth() {
                return this._buttonNorth;
              }

              get buttonEast() {
                return this._buttonEast;
              }

              get buttonWest() {
                return this._buttonWest;
              }

              get buttonSouth() {
                return this._buttonSouth;
              }

              get buttonTriggerLeft() {
                return this._buttonTriggerLeft;
              }

              get buttonTriggerRight() {
                return this._buttonTriggerRight;
              }

              get triggerLeft() {
                return this._triggerLeft;
              }

              get triggerRight() {
                return this._triggerRight;
              }

              get gripLeft() {
                return this._gripLeft;
              }

              get gripRight() {
                return this._gripRight;
              }

              get leftStick() {
                return this._leftStick;
              }

              get rightStick() {
                return this._rightStick;
              }

              get buttonLeftStick() {
                return this._buttonLeftStick;
              }

              get buttonRightStick() {
                return this._buttonRightStick;
              }

              get handLeftPosition() {
                return this._handLeftPosition;
              }

              get handLeftOrientation() {
                return this._handLeftOrientation;
              }

              get handRightPosition() {
                return this._handRightPosition;
              }

              get handRightOrientation() {
                return this._handRightOrientation;
              }

              get aimLeftPosition() {
                return this._aimLeftPosition;
              }

              get aimLeftOrientation() {
                return this._aimLeftOrientation;
              }

              get aimRightPosition() {
                return this._aimRightPosition;
              }

              get aimRightOrientation() {
                return this._aimRightOrientation;
              }

              constructor() {
                this._eventTarget = new EventTarget();
                this._nativeButtonState = {
                  [Button$1.BUTTON_SOUTH]: 0,
                  [Button$1.BUTTON_EAST]: 0,
                  [Button$1.BUTTON_WEST]: 0,
                  [Button$1.BUTTON_NORTH]: 0,
                  [Button$1.BUTTON_TRIGGER_LEFT]: 0,
                  [Button$1.BUTTON_TRIGGER_RIGHT]: 0,
                  [Button$1.TRIGGER_LEFT]: 0,
                  [Button$1.TRIGGER_RIGHT]: 0,
                  [Button$1.GRIP_LEFT]: 0,
                  [Button$1.GRIP_RIGHT]: 0,
                  [Button$1.LEFT_STICK_UP]: 0,
                  [Button$1.LEFT_STICK_DOWN]: 0,
                  [Button$1.LEFT_STICK_LEFT]: 0,
                  [Button$1.LEFT_STICK_RIGHT]: 0,
                  [Button$1.RIGHT_STICK_UP]: 0,
                  [Button$1.RIGHT_STICK_DOWN]: 0,
                  [Button$1.RIGHT_STICK_LEFT]: 0,
                  [Button$1.RIGHT_STICK_RIGHT]: 0,
                  [Button$1.BUTTON_LEFT_STICK]: 0,
                  [Button$1.BUTTON_RIGHT_STICK]: 0
                };
                this._nativePoseState = {
                  [Pose.HAND_LEFT]: {
                    position: Vec3.ZERO,
                    orientation: Quat.IDENTITY
                  },
                  [Pose.HAND_RIGHT]: {
                    position: Vec3.ZERO,
                    orientation: Quat.IDENTITY
                  },
                  [Pose.AIM_LEFT]: {
                    position: Vec3.ZERO,
                    orientation: Quat.IDENTITY
                  },
                  [Pose.AIM_RIGHT]: {
                    position: Vec3.ZERO,
                    orientation: Quat.IDENTITY
                  }
                };

                this._initInputSource();

                this._registerEvent();
              }

              _registerEvent() {
                jsb.onHandleInput = infoList => {
                  for (let i = 0; i < infoList.length; ++i) {
                    const info = infoList[i];

                    this._updateNativeButtonState(info);

                    this._eventTarget.emit(InputEventType.HANDLE_INPUT, new EventHandle(InputEventType.HANDLE_INPUT, this));
                  }
                };

                jsb.onHandlePoseInput = infoList => {
                  for (let i = 0; i < infoList.length; ++i) {
                    const info = infoList[i];

                    this._updateNativePoseState(info);
                  }

                  this._eventTarget.emit(InputEventType.HANDLE_POSE_INPUT, new EventHandle(InputEventType.HANDLE_POSE_INPUT, this));
                };
              }

              _on(eventType, callback, target) {
                this._eventTarget.on(eventType, callback, target);
              }

              _axisToButtons(axisValue) {
                const value = Math.abs(axisValue);

                if (axisValue > 0) {
                  return {
                    negative: 0,
                    positive: value
                  };
                } else if (axisValue < 0) {
                  return {
                    negative: value,
                    positive: 0
                  };
                } else {
                  return {
                    negative: 0,
                    positive: 0
                  };
                }
              }

              _updateNativeButtonState(info) {
                const {
                  buttonInfoList,
                  axisInfoList
                } = info;

                for (let i = 0; i < buttonInfoList.length; ++i) {
                  const buttonInfo = buttonInfoList[i];
                  const button = _nativeButtonMap$1[buttonInfo.code];
                  this._nativeButtonState[button] = buttonInfo.isPressed ? 1 : 0;
                }

                for (let i = 0; i < axisInfoList.length; ++i) {
                  const axisInfo = axisInfoList[i];
                  const {
                    code,
                    value
                  } = axisInfo;
                  let negativeButton;
                  let positiveButton;
                  let axisValue;

                  switch (code) {
                    case 3:
                      negativeButton = Button$1.LEFT_STICK_LEFT;
                      positiveButton = Button$1.LEFT_STICK_RIGHT;
                      axisValue = this._axisToButtons(value);
                      break;

                    case 4:
                      negativeButton = Button$1.LEFT_STICK_DOWN;
                      positiveButton = Button$1.LEFT_STICK_UP;
                      axisValue = this._axisToButtons(value);
                      break;

                    case 5:
                      negativeButton = Button$1.RIGHT_STICK_LEFT;
                      positiveButton = Button$1.RIGHT_STICK_RIGHT;
                      axisValue = this._axisToButtons(value);
                      break;

                    case 6:
                      negativeButton = Button$1.RIGHT_STICK_DOWN;
                      positiveButton = Button$1.RIGHT_STICK_UP;
                      axisValue = this._axisToButtons(value);
                      break;

                    default:
                      if (code === 7) {
                        this._nativeButtonState[Button$1.TRIGGER_LEFT] = value;
                      } else if (code === 8) {
                        this._nativeButtonState[Button$1.TRIGGER_RIGHT] = value;
                      } else if (code === 9) {
                        this._nativeButtonState[Button$1.GRIP_LEFT] = value;
                      } else if (code === 10) {
                        this._nativeButtonState[Button$1.GRIP_RIGHT] = value;
                      }

                      break;
                  }

                  if (negativeButton && positiveButton && axisValue) {
                    this._nativeButtonState[negativeButton] = axisValue.negative;
                    this._nativeButtonState[positiveButton] = axisValue.positive;
                  }
                }
              }

              _updateNativePoseState(info) {
                switch (info.code) {
                  case 1:
                    this._nativePoseState[Pose.HAND_LEFT] = {
                      position: new Vec3(info.x, info.y, info.z),
                      orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
                    };
                    break;

                  case 2:
                    this._nativePoseState[Pose.AIM_LEFT] = {
                      position: new Vec3(info.x, info.y, info.z),
                      orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
                    };
                    break;

                  case 4:
                    this._nativePoseState[Pose.HAND_RIGHT] = {
                      position: new Vec3(info.x, info.y, info.z),
                      orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
                    };
                    break;

                  case 5:
                    this._nativePoseState[Pose.AIM_RIGHT] = {
                      position: new Vec3(info.x, info.y, info.z),
                      orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
                    };
                    break;
                }
              }

              _initInputSource() {
                this._buttonNorth = new InputSourceButton();

                this._buttonNorth.getValue = () => this._nativeButtonState[Button$1.BUTTON_NORTH];

                this._buttonEast = new InputSourceButton();

                this._buttonEast.getValue = () => this._nativeButtonState[Button$1.BUTTON_EAST];

                this._buttonWest = new InputSourceButton();

                this._buttonWest.getValue = () => this._nativeButtonState[Button$1.BUTTON_WEST];

                this._buttonSouth = new InputSourceButton();

                this._buttonSouth.getValue = () => this._nativeButtonState[Button$1.BUTTON_SOUTH];

                this._buttonTriggerLeft = new InputSourceButton();

                this._buttonTriggerLeft.getValue = () => this._nativeButtonState[Button$1.BUTTON_TRIGGER_LEFT];

                this._buttonTriggerRight = new InputSourceButton();

                this._buttonTriggerRight.getValue = () => this._nativeButtonState[Button$1.BUTTON_TRIGGER_RIGHT];

                this._triggerLeft = new InputSourceButton();

                this._triggerLeft.getValue = () => this._nativeButtonState[Button$1.TRIGGER_LEFT];

                this._triggerRight = new InputSourceButton();

                this._triggerRight.getValue = () => this._nativeButtonState[Button$1.TRIGGER_RIGHT];

                this._gripLeft = new InputSourceButton();

                this._gripLeft.getValue = () => this._nativeButtonState[Button$1.GRIP_LEFT];

                this._gripRight = new InputSourceButton();

                this._gripRight.getValue = () => this._nativeButtonState[Button$1.GRIP_RIGHT];

                this._buttonLeftStick = new InputSourceButton();

                this._buttonLeftStick.getValue = () => this._nativeButtonState[Button$1.BUTTON_LEFT_STICK];

                const leftStickUp = new InputSourceButton();

                leftStickUp.getValue = () => this._nativeButtonState[Button$1.LEFT_STICK_UP];

                const leftStickDown = new InputSourceButton();

                leftStickDown.getValue = () => this._nativeButtonState[Button$1.LEFT_STICK_DOWN];

                const leftStickLeft = new InputSourceButton();

                leftStickLeft.getValue = () => this._nativeButtonState[Button$1.LEFT_STICK_LEFT];

                const leftStickRight = new InputSourceButton();

                leftStickRight.getValue = () => this._nativeButtonState[Button$1.LEFT_STICK_RIGHT];

                this._leftStick = new InputSourceStick({
                  up: leftStickUp,
                  down: leftStickDown,
                  left: leftStickLeft,
                  right: leftStickRight
                });
                this._buttonRightStick = new InputSourceButton();

                this._buttonRightStick.getValue = () => this._nativeButtonState[Button$1.BUTTON_RIGHT_STICK];

                const rightStickUp = new InputSourceButton();

                rightStickUp.getValue = () => this._nativeButtonState[Button$1.RIGHT_STICK_UP];

                const rightStickDown = new InputSourceButton();

                rightStickDown.getValue = () => this._nativeButtonState[Button$1.RIGHT_STICK_DOWN];

                const rightStickLeft = new InputSourceButton();

                rightStickLeft.getValue = () => this._nativeButtonState[Button$1.RIGHT_STICK_LEFT];

                const rightStickRight = new InputSourceButton();

                rightStickRight.getValue = () => this._nativeButtonState[Button$1.RIGHT_STICK_RIGHT];

                this._rightStick = new InputSourceStick({
                  up: rightStickUp,
                  down: rightStickDown,
                  left: rightStickLeft,
                  right: rightStickRight
                });
                this._handLeftPosition = new InputSourcePosition();

                this._handLeftPosition.getValue = () => this._nativePoseState[Pose.HAND_LEFT].position;

                this._handLeftOrientation = new InputSourceOrientation();

                this._handLeftOrientation.getValue = () => this._nativePoseState[Pose.HAND_LEFT].orientation;

                this._handRightPosition = new InputSourcePosition();

                this._handRightPosition.getValue = () => this._nativePoseState[Pose.HAND_RIGHT].position;

                this._handRightOrientation = new InputSourceOrientation();

                this._handRightOrientation.getValue = () => this._nativePoseState[Pose.HAND_RIGHT].orientation;

                this._aimLeftPosition = new InputSourcePosition();

                this._aimLeftPosition.getValue = () => this._nativePoseState[Pose.AIM_LEFT].position;

                this._aimLeftOrientation = new InputSourceOrientation();

                this._aimLeftOrientation.getValue = () => this._nativePoseState[Pose.AIM_LEFT].orientation;

                this._aimRightPosition = new InputSourcePosition();

                this._aimRightPosition.getValue = () => this._nativePoseState[Pose.AIM_RIGHT].position;

                this._aimRightOrientation = new InputSourceOrientation();

                this._aimRightOrientation.getValue = () => this._nativePoseState[Pose.AIM_RIGHT].orientation;
              }

            }

            var Pose$1;

            (function (Pose) {
              Pose[Pose["VIEW_LEFT"] = 0] = "VIEW_LEFT";
              Pose[Pose["VIEW_RIGHT"] = 1] = "VIEW_RIGHT";
              Pose[Pose["HEAD_MIDDLE"] = 2] = "HEAD_MIDDLE";
            })(Pose$1 || (Pose$1 = {}));

            class HMDInputDevice {
              get viewLeftPosition() {
                return this._viewLeftPosition;
              }

              get viewLeftOrientation() {
                return this._viewLeftOrientation;
              }

              get viewRightPosition() {
                return this._viewRightPosition;
              }

              get viewRightOrientation() {
                return this._viewRightOrientation;
              }

              get headMiddlePosition() {
                return this._headMiddlePosition;
              }

              get headMiddleOrientation() {
                return this._headMiddleOrientation;
              }

              constructor() {
                this._eventTarget = new EventTarget();
                this._nativePoseState = {
                  [Pose$1.VIEW_LEFT]: {
                    position: Vec3.ZERO,
                    orientation: Quat.IDENTITY
                  },
                  [Pose$1.VIEW_RIGHT]: {
                    position: Vec3.ZERO,
                    orientation: Quat.IDENTITY
                  },
                  [Pose$1.HEAD_MIDDLE]: {
                    position: Vec3.ZERO,
                    orientation: Quat.IDENTITY
                  }
                };

                this._initInputSource();

                this._registerEvent();
              }

              _registerEvent() {
                jsb.onHMDPoseInput = infoList => {
                  for (let i = 0; i < infoList.length; ++i) {
                    const info = infoList[i];

                    this._updateNativePoseState(info);
                  }

                  this._eventTarget.emit(InputEventType.HMD_POSE_INPUT, new EventHMD(InputEventType.HMD_POSE_INPUT, this));
                };
              }

              _on(eventType, callback, target) {
                this._eventTarget.on(eventType, callback, target);
              }

              _updateNativePoseState(info) {
                switch (info.code) {
                  case 0:
                    this._nativePoseState[Pose$1.VIEW_LEFT] = {
                      position: new Vec3(info.x, info.y, info.z),
                      orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
                    };
                    break;

                  case 3:
                    this._nativePoseState[Pose$1.VIEW_RIGHT] = {
                      position: new Vec3(info.x, info.y, info.z),
                      orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
                    };
                    break;

                  case 6:
                    this._nativePoseState[Pose$1.HEAD_MIDDLE] = {
                      position: new Vec3(info.x, info.y, info.z),
                      orientation: new Quat(info.quaternionX, info.quaternionY, info.quaternionZ, info.quaternionW)
                    };
                    break;
                }
              }

              _initInputSource() {
                this._viewLeftPosition = new InputSourcePosition();

                this._viewLeftPosition.getValue = () => this._nativePoseState[Pose$1.VIEW_LEFT].position;

                this._viewLeftOrientation = new InputSourceOrientation();

                this._viewLeftOrientation.getValue = () => this._nativePoseState[Pose$1.VIEW_LEFT].orientation;

                this._viewRightPosition = new InputSourcePosition();

                this._viewRightPosition.getValue = () => this._nativePoseState[Pose$1.VIEW_RIGHT].position;

                this._viewRightOrientation = new InputSourceOrientation();

                this._viewRightOrientation.getValue = () => this._nativePoseState[Pose$1.VIEW_RIGHT].orientation;

                this._headMiddlePosition = new InputSourcePosition();

                this._headMiddlePosition.getValue = () => this._nativePoseState[Pose$1.HEAD_MIDDLE].position;

                this._headMiddleOrientation = new InputSourceOrientation();

                this._headMiddleOrientation.getValue = () => this._nativePoseState[Pose$1.HEAD_MIDDLE].orientation;
              }

            }

            const nativeKeyCode2KeyCode = {
              12: KeyCode.NUM_LOCK,
              10048: KeyCode.NUM_0,
              10049: KeyCode.NUM_1,
              10050: KeyCode.NUM_2,
              10051: KeyCode.NUM_3,
              10052: KeyCode.NUM_4,
              10053: KeyCode.NUM_5,
              10054: KeyCode.NUM_6,
              10055: KeyCode.NUM_7,
              10056: KeyCode.NUM_8,
              10057: KeyCode.NUM_9,
              20013: KeyCode.NUM_ENTER,
              20016: KeyCode.SHIFT_RIGHT,
              20017: KeyCode.CTRL_RIGHT,
              20018: KeyCode.ALT_RIGHT
            };

            function getKeyCode(keyCode) {
              return nativeKeyCode2KeyCode[keyCode] || keyCode;
            }

            class KeyboardInputSource {
              constructor() {
                this._eventTarget = new EventTarget();
                this._keyStateMap = {};

                this._registerEvent();
              }

              _registerEvent() {
                jsb.onKeyDown = event => {
                  const keyCode = getKeyCode(event.keyCode);

                  if (!this._keyStateMap[keyCode]) {
                    const eventKeyDown = this._getInputEvent(event, InputEventType.KEY_DOWN);

                    this._eventTarget.emit(InputEventType.KEY_DOWN, eventKeyDown);
                  } else {
                    const eventKeyPressing = this._getInputEvent(event, InputEventType.KEY_PRESSING);

                    this._eventTarget.emit(InputEventType.KEY_PRESSING, eventKeyPressing);
                  }

                  this._keyStateMap[keyCode] = true;
                };

                jsb.onKeyUp = event => {
                  const keyCode = getKeyCode(event.keyCode);

                  const eventKeyUp = this._getInputEvent(event, InputEventType.KEY_UP);

                  this._keyStateMap[keyCode] = false;

                  this._eventTarget.emit(InputEventType.KEY_UP, eventKeyUp);
                };
              }

              _getInputEvent(event, eventType) {
                const keyCode = getKeyCode(event.keyCode);
                const eventKeyboard = new EventKeyboard(keyCode, eventType);
                return eventKeyboard;
              }

              on(eventType, callback, target) {
                this._eventTarget.on(eventType, callback, target);
              }

            }

            class MouseInputSource {
              constructor() {
                this._eventTarget = new EventTarget();
                this._preMousePos = new Vec2();
                this._isPressed = false;

                this._registerEvent();
              }

              _getLocation(event) {
                const windowSize = screenAdapter.windowSize;
                const dpr = screenAdapter.devicePixelRatio;
                const x = event.x * dpr;
                const y = windowSize.height - event.y * dpr;
                return new Vec2(x, y);
              }

              _registerEvent() {
                jsb.onMouseDown = this._createCallback(InputEventType.MOUSE_DOWN);
                jsb.onMouseMove = this._createCallback(InputEventType.MOUSE_MOVE);
                jsb.onMouseUp = this._createCallback(InputEventType.MOUSE_UP);
                jsb.onMouseWheel = this._handleMouseWheel.bind(this);
              }

              _createCallback(eventType) {
                return mouseEvent => {
                  const location = this._getLocation(mouseEvent);

                  let button = mouseEvent.button;

                  switch (eventType) {
                    case InputEventType.MOUSE_DOWN:
                      this._isPressed = true;
                      break;

                    case InputEventType.MOUSE_UP:
                      this._isPressed = false;
                      break;

                    case InputEventType.MOUSE_MOVE:
                      if (!this._isPressed) {
                        button = EventMouse.BUTTON_MISSING;
                      }

                      break;
                  }

                  const eventMouse = new EventMouse(eventType, false, this._preMousePos);
                  eventMouse.setLocation(location.x, location.y);
                  eventMouse.setButton(button);
                  eventMouse.movementX = location.x - this._preMousePos.x;
                  eventMouse.movementY = this._preMousePos.y - location.y;

                  this._preMousePos.set(location.x, location.y);

                  this._eventTarget.emit(eventType, eventMouse);
                };
              }

              _handleMouseWheel(mouseEvent) {
                const eventType = InputEventType.MOUSE_WHEEL;

                const location = this._getLocation(mouseEvent);

                const button = mouseEvent.button;
                const eventMouse = new EventMouse(eventType, false, this._preMousePos);
                eventMouse.setLocation(location.x, location.y);
                eventMouse.setButton(button);
                eventMouse.movementX = location.x - this._preMousePos.x;
                eventMouse.movementY = this._preMousePos.y - location.y;
                const matchStandardFactor = 120;
                eventMouse.setScrollData(mouseEvent.wheelDeltaX * matchStandardFactor, mouseEvent.wheelDeltaY * matchStandardFactor);

                this._preMousePos.set(location.x, location.y);

                this._eventTarget.emit(eventType, eventMouse);
              }

              on(eventType, callback, target) {
                this._eventTarget.on(eventType, callback, target);
              }

            }

            const tempVec2 = new Vec2();

            class TouchManager {
              constructor() {
                this._touchMap = void 0;
                this._maxTouches = 8;
                this._touchMap = new Map();
              }

              _cloneTouch(touch) {
                const touchID = touch.getID();
                touch.getStartLocation(tempVec2);
                const clonedTouch = new Touch(tempVec2.x, tempVec2.y, touchID);
                touch.getLocation(tempVec2);
                clonedTouch.setPoint(tempVec2.x, tempVec2.y);
                touch.getPreviousLocation(tempVec2);
                clonedTouch.setPrevPoint(tempVec2);
                return clonedTouch;
              }

              _createTouch(touchID, x, y) {
                if (this._touchMap.has(touchID)) {
                  console.log('Cannot create the same touch object.');
                  return undefined;
                }

                const checkResult = this._checkTouchMapSizeMoreThanMax(touchID);

                if (checkResult) {
                  console.log('The touches is more than MAX_TOUCHES.');
                  return undefined;
                }

                const touch = new Touch(x, y, touchID);

                this._touchMap.set(touchID, touch);

                this._updateTouch(touch, x, y);

                return this._cloneTouch(touch);
              }

              releaseTouch(touchID) {
                if (!this._touchMap.has(touchID)) {
                  return;
                }

                this._touchMap.delete(touchID);
              }

              getTouch(touchID, x, y) {
                let touch = this._touchMap.get(touchID);

                if (!touch) {
                  touch = this._createTouch(touchID, x, y);
                } else {
                  this._updateTouch(touch, x, y);
                }

                return touch ? this._cloneTouch(touch) : undefined;
              }

              getAllTouches() {
                const touches = [];

                this._touchMap.forEach(touch => {
                  if (touch) {
                    const clonedTouch = this._cloneTouch(touch);

                    touches.push(clonedTouch);
                  }
                });

                return touches;
              }

              _updateTouch(touch, x, y) {
                touch.getLocation(tempVec2);
                touch.setPrevPoint(tempVec2);
                touch.setPoint(x, y);
              }

              _checkTouchMapSizeMoreThanMax(touchID) {
                if (this._touchMap.has(touchID)) {
                  return false;
                }

                const maxSize = macro.ENABLE_MULTI_TOUCH ? this._maxTouches : 1;

                if (this._touchMap.size < maxSize) {
                  return false;
                }

                const now = performance.now();

                this._touchMap.forEach(touch => {
                  if (now - touch.lastModified > macro.TOUCH_TIMEOUT) {
                    console.log(`The touches is more than MAX_TOUCHES, release touch id ${touch.getID()}.`);
                    this.releaseTouch(touch.getID());
                  }
                });

                return maxSize >= this._touchMap.size;
              }

            }

            const touchManager = new TouchManager();

            class TouchInputSource {
              constructor() {
                this._eventTarget = new EventTarget();

                this._registerEvent();
              }

              _registerEvent() {
                jsb.onTouchStart = this._createCallback(InputEventType.TOUCH_START);
                jsb.onTouchMove = this._createCallback(InputEventType.TOUCH_MOVE);
                jsb.onTouchEnd = this._createCallback(InputEventType.TOUCH_END);
                jsb.onTouchCancel = this._createCallback(InputEventType.TOUCH_CANCEL);
              }

              _createCallback(eventType) {
                return changedTouches => {
                  const handleTouches = [];
                  const length = changedTouches.length;
                  const windowSize = screenAdapter.windowSize;

                  for (let i = 0; i < length; ++i) {
                    const changedTouch = changedTouches[i];
                    const touchID = changedTouch.identifier;

                    if (touchID === null) {
                      continue;
                    }

                    const location = this._getLocation(changedTouch, windowSize);

                    const touch = touchManager.getTouch(touchID, location.x, location.y);

                    if (!touch) {
                      continue;
                    }

                    if (eventType === InputEventType.TOUCH_END || eventType === InputEventType.TOUCH_CANCEL) {
                      touchManager.releaseTouch(touchID);
                    }

                    handleTouches.push(touch);
                  }

                  if (handleTouches.length > 0) {
                    const eventTouch = new EventTouch(handleTouches, false, eventType, macro.ENABLE_MULTI_TOUCH ? touchManager.getAllTouches() : handleTouches);

                    this._eventTarget.emit(eventType, eventTouch);
                  }
                };
              }

              _getLocation(touch, windowSize) {
                const dpr = screenAdapter.devicePixelRatio;
                const x = touch.clientX * dpr;
                const y = windowSize.height - touch.clientY * dpr;
                return new Vec2(x, y);
              }

              on(eventType, callback, target) {
                this._eventTarget.on(eventType, callback, target);
              }

            }

            let EventDispatcherPriority;

            (function (EventDispatcherPriority) {
              EventDispatcherPriority[EventDispatcherPriority["GLOBAL"] = 0] = "GLOBAL";
              EventDispatcherPriority[EventDispatcherPriority["UI"] = 1] = "UI";
            })(EventDispatcherPriority || (EventDispatcherPriority = exports('eu', {})));

            class InputEventDispatcher {
              constructor(inputEventTarget) {
                this.priority = EventDispatcherPriority.GLOBAL;
                this._inputEventTarget = void 0;
                this._inputEventTarget = inputEventTarget;
              }

              dispatchEvent(event) {
                this._inputEventTarget.emit(event.type, event);

                return true;
              }

            }

            const pointerEventTypeMap = {
              [InputEventType.MOUSE_DOWN]: InputEventType.TOUCH_START,
              [InputEventType.MOUSE_MOVE]: InputEventType.TOUCH_MOVE,
              [InputEventType.MOUSE_UP]: InputEventType.TOUCH_END
            };
            class Input {
              constructor() {
                this._dispatchImmediately = !NATIVE;
                this._eventTarget = new EventTarget();
                this._touchInput = new TouchInputSource();
                this._mouseInput = new MouseInputSource();
                this._keyboardInput = new KeyboardInputSource();
                this._accelerometerInput = new AccelerometerInputSource();
                this._handleInput = new HandleInputDevice();
                this._hmdInput = new HMDInputDevice();
                this._eventTouchList = [];
                this._eventMouseList = [];
                this._eventKeyboardList = [];
                this._eventAccelerationList = [];
                this._eventGamepadList = [];
                this._eventHandleList = [];
                this._eventHMDList = [];
                this._needSimulateTouchMoveEvent = false;
                this._inputEventDispatcher = void 0;
                this._eventDispatcherList = [];

                this._registerEvent();

                this._inputEventDispatcher = new InputEventDispatcher(this._eventTarget);

                this._registerEventDispatcher(this._inputEventDispatcher);

                GamepadInputDevice._init();
              }

              _dispatchMouseDownEvent(nativeMouseEvent) {
                var _this$_mouseInput$dis, _this$_mouseInput;

                (_this$_mouseInput$dis = (_this$_mouseInput = this._mouseInput).dispatchMouseDownEvent) === null || _this$_mouseInput$dis === void 0 ? void 0 : _this$_mouseInput$dis.call(_this$_mouseInput, nativeMouseEvent);
              }

              _dispatchMouseMoveEvent(nativeMouseEvent) {
                var _this$_mouseInput$dis2, _this$_mouseInput2;

                (_this$_mouseInput$dis2 = (_this$_mouseInput2 = this._mouseInput).dispatchMouseMoveEvent) === null || _this$_mouseInput$dis2 === void 0 ? void 0 : _this$_mouseInput$dis2.call(_this$_mouseInput2, nativeMouseEvent);
              }

              _dispatchMouseUpEvent(nativeMouseEvent) {
                var _this$_mouseInput$dis3, _this$_mouseInput3;

                (_this$_mouseInput$dis3 = (_this$_mouseInput3 = this._mouseInput).dispatchMouseUpEvent) === null || _this$_mouseInput$dis3 === void 0 ? void 0 : _this$_mouseInput$dis3.call(_this$_mouseInput3, nativeMouseEvent);
              }

              _dispatchMouseScrollEvent(nativeMouseEvent) {
                var _this$_mouseInput$dis4, _this$_mouseInput4;

                (_this$_mouseInput$dis4 = (_this$_mouseInput4 = this._mouseInput).dispatchScrollEvent) === null || _this$_mouseInput$dis4 === void 0 ? void 0 : _this$_mouseInput$dis4.call(_this$_mouseInput4, nativeMouseEvent);
              }

              _dispatchKeyboardDownEvent(nativeKeyboardEvent) {
                var _this$_keyboardInput$, _this$_keyboardInput;

                (_this$_keyboardInput$ = (_this$_keyboardInput = this._keyboardInput).dispatchKeyboardDownEvent) === null || _this$_keyboardInput$ === void 0 ? void 0 : _this$_keyboardInput$.call(_this$_keyboardInput, nativeKeyboardEvent);
              }

              _dispatchKeyboardUpEvent(nativeKeyboardEvent) {
                var _this$_keyboardInput$2, _this$_keyboardInput2;

                (_this$_keyboardInput$2 = (_this$_keyboardInput2 = this._keyboardInput).dispatchKeyboardUpEvent) === null || _this$_keyboardInput$2 === void 0 ? void 0 : _this$_keyboardInput$2.call(_this$_keyboardInput2, nativeKeyboardEvent);
              }

              on(eventType, callback, target) {
                this._eventTarget.on(eventType, callback, target);

                return callback;
              }

              once(eventType, callback, target) {
                this._eventTarget.once(eventType, callback, target);

                return callback;
              }

              off(eventType, callback, target) {

                this._eventTarget.off(eventType, callback, target);
              }

              setAccelerometerEnabled(isEnable) {

                if (isEnable) {
                  this._accelerometerInput.start();
                } else {
                  this._accelerometerInput.stop();
                }
              }

              setAccelerometerInterval(intervalInMileSeconds) {

                this._accelerometerInput.setInterval(intervalInMileSeconds);
              }

              _simulateEventTouch(eventMouse) {
                const eventType = pointerEventTypeMap[eventMouse.type];
                const touchID = 0;
                const touch = touchManager.getTouch(touchID, eventMouse.getLocationX(), eventMouse.getLocationY());

                if (!touch) {
                  return;
                }

                const changedTouches = [touch];
                const eventTouch = new EventTouch(changedTouches, false, eventType, changedTouches);

                if (eventType === InputEventType.TOUCH_END) {
                  touchManager.releaseTouch(touchID);
                }

                this._dispatchOrPushEventTouch(eventTouch, this._eventTouchList);
              }

              _registerEventDispatcher(eventDispatcher) {
                this._eventDispatcherList.push(eventDispatcher);

                this._eventDispatcherList.sort((a, b) => b.priority - a.priority);
              }

              _emitEvent(event) {
                const length = this._eventDispatcherList.length;

                for (let i = 0; i < length; ++i) {
                  const dispatcher = this._eventDispatcherList[i];

                  if (!dispatcher.dispatchEvent(event)) {
                    break;
                  }
                }
              }

              _registerEvent() {
                if (sys.hasFeature(sys.Feature.INPUT_TOUCH)) {
                  const eventTouchList = this._eventTouchList;

                  this._touchInput.on(InputEventType.TOUCH_START, event => {
                    this._dispatchOrPushEventTouch(event, eventTouchList);
                  });

                  this._touchInput.on(InputEventType.TOUCH_MOVE, event => {
                    this._dispatchOrPushEventTouch(event, eventTouchList);
                  });

                  this._touchInput.on(InputEventType.TOUCH_END, event => {
                    this._dispatchOrPushEventTouch(event, eventTouchList);
                  });

                  this._touchInput.on(InputEventType.TOUCH_CANCEL, event => {
                    this._dispatchOrPushEventTouch(event, eventTouchList);
                  });
                }

                if (sys.hasFeature(sys.Feature.EVENT_MOUSE)) {
                  const eventMouseList = this._eventMouseList;

                  this._mouseInput.on(InputEventType.MOUSE_DOWN, event => {
                    this._needSimulateTouchMoveEvent = true;

                    this._simulateEventTouch(event);

                    this._dispatchOrPushEvent(event, eventMouseList);
                  });

                  this._mouseInput.on(InputEventType.MOUSE_MOVE, event => {
                    if (this._needSimulateTouchMoveEvent) {
                      this._simulateEventTouch(event);
                    }

                    this._dispatchOrPushEvent(event, eventMouseList);
                  });

                  this._mouseInput.on(InputEventType.MOUSE_UP, event => {
                    this._needSimulateTouchMoveEvent = false;

                    this._simulateEventTouch(event);

                    this._dispatchOrPushEvent(event, eventMouseList);
                  });

                  this._mouseInput.on(InputEventType.MOUSE_WHEEL, event => {
                    this._dispatchOrPushEvent(event, eventMouseList);
                  });
                }

                if (sys.hasFeature(sys.Feature.EVENT_KEYBOARD)) {
                  const eventKeyboardList = this._eventKeyboardList;

                  this._keyboardInput.on(InputEventType.KEY_DOWN, event => {
                    this._dispatchOrPushEvent(event, eventKeyboardList);
                  });

                  this._keyboardInput.on(InputEventType.KEY_PRESSING, event => {
                    this._dispatchOrPushEvent(event, eventKeyboardList);
                  });

                  this._keyboardInput.on(InputEventType.KEY_UP, event => {
                    this._dispatchOrPushEvent(event, eventKeyboardList);
                  });
                }

                if (sys.hasFeature(sys.Feature.EVENT_ACCELEROMETER)) {
                  const eventAccelerationList = this._eventAccelerationList;

                  this._accelerometerInput.on(InputEventType.DEVICEMOTION, event => {
                    this._dispatchOrPushEvent(event, eventAccelerationList);
                  });
                }

                if (sys.hasFeature(sys.Feature.EVENT_GAMEPAD)) {
                  const eventGamepadList = this._eventGamepadList;

                  GamepadInputDevice._on(InputEventType.GAMEPAD_CHANGE, event => {
                    this._dispatchOrPushEvent(event, eventGamepadList);
                  });

                  GamepadInputDevice._on(InputEventType.GAMEPAD_INPUT, event => {
                    this._dispatchOrPushEvent(event, eventGamepadList);
                  });
                }

                if (sys.hasFeature(sys.Feature.EVENT_HANDLE)) {
                  const eventHandleList = this._eventHandleList;

                  this._handleInput._on(InputEventType.HANDLE_INPUT, event => {
                    this._dispatchOrPushEvent(event, eventHandleList);
                  });

                  this._handleInput._on(InputEventType.HANDLE_POSE_INPUT, event => {
                    this._dispatchOrPushEvent(event, eventHandleList);
                  });
                }

                if (sys.hasFeature(sys.Feature.EVENT_HMD)) {
                  const eventHMDList = this._eventHMDList;

                  this._hmdInput._on(InputEventType.HMD_POSE_INPUT, event => {
                    this._dispatchOrPushEvent(event, eventHMDList);
                  });
                }
              }

              _clearEvents() {
                this._eventMouseList.length = 0;
                this._eventTouchList.length = 0;
                this._eventKeyboardList.length = 0;
                this._eventAccelerationList.length = 0;
                this._eventGamepadList.length = 0;
                this._eventHandleList.length = 0;
                this._eventHMDList.length = 0;
              }

              _dispatchOrPushEvent(event, eventList) {
                if (this._dispatchImmediately) {
                  this._emitEvent(event);
                } else {
                  eventList.push(event);
                }
              }

              _dispatchOrPushEventTouch(eventTouch, touchEventList) {
                if (this._dispatchImmediately) {
                  const touches = eventTouch.getTouches();
                  const touchesLength = touches.length;

                  for (let i = 0; i < touchesLength; ++i) {
                    eventTouch.touch = touches[i];
                    eventTouch.propagationStopped = eventTouch.propagationImmediateStopped = false;

                    this._emitEvent(eventTouch);
                  }
                } else {
                  touchEventList.push(eventTouch);
                }
              }

              _frameDispatchEvents() {
                const eventMouseList = this._eventMouseList;

                for (let i = 0, length = eventMouseList.length; i < length; ++i) {
                  const eventMouse = eventMouseList[i];

                  this._emitEvent(eventMouse);
                }

                const eventTouchList = this._eventTouchList;

                for (let i = 0, length = eventTouchList.length; i < length; ++i) {
                  const eventTouch = eventTouchList[i];
                  const touches = eventTouch.getTouches();
                  const touchesLength = touches.length;

                  for (let j = 0; j < touchesLength; ++j) {
                    eventTouch.touch = touches[j];
                    eventTouch.propagationStopped = eventTouch.propagationImmediateStopped = false;

                    this._emitEvent(eventTouch);
                  }
                }

                const eventKeyboardList = this._eventKeyboardList;

                for (let i = 0, length = eventKeyboardList.length; i < length; ++i) {
                  const eventKeyboard = eventKeyboardList[i];

                  this._emitEvent(eventKeyboard);
                }

                const eventAccelerationList = this._eventAccelerationList;

                for (let i = 0, length = eventAccelerationList.length; i < length; ++i) {
                  const eventAcceleration = eventAccelerationList[i];

                  this._emitEvent(eventAcceleration);
                }

                const eventGamepadList = this._eventGamepadList;

                for (let i = 0, length = eventGamepadList.length; i < length; ++i) {
                  const eventGamepad = eventGamepadList[i];

                  this._emitEvent(eventGamepad);
                }

                const eventHandleList = this._eventHandleList;

                for (let i = 0, length = eventHandleList.length; i < length; ++i) {
                  const eventHandle = eventHandleList[i];

                  this._emitEvent(eventHandle);
                }

                const eventHMDList = this._eventHMDList;

                for (let i = 0, length = eventHMDList.length; i < length; ++i) {
                  const eventHMD = eventHMDList[i];

                  this._emitEvent(eventHMD);
                }

                this._clearEvents();
              }

            } exports('et', Input);
            Input.EventType = InputEventType;
            const input = exports('ev', new Input());

            class SystemEvent extends EventTarget {
              constructor() {
                super();
                input.on(InputEventType.MOUSE_DOWN, e => {
                  this.emit(SystemEventType.MOUSE_DOWN, e);
                });
                input.on(InputEventType.MOUSE_MOVE, e => {
                  this.emit(SystemEventType.MOUSE_MOVE, e);
                });
                input.on(InputEventType.MOUSE_UP, e => {
                  this.emit(SystemEventType.MOUSE_UP, e);
                });
                input.on(InputEventType.MOUSE_WHEEL, e => {
                  this.emit(SystemEventType.MOUSE_WHEEL, e);
                });
                input.on(InputEventType.TOUCH_START, e => {
                  this.emit(SystemEventType.TOUCH_START, e.touch, e);
                });
                input.on(InputEventType.TOUCH_MOVE, e => {
                  this.emit(SystemEventType.TOUCH_MOVE, e.touch, e);
                });
                input.on(InputEventType.TOUCH_END, e => {
                  this.emit(SystemEventType.TOUCH_END, e.touch, e);
                });
                input.on(InputEventType.TOUCH_CANCEL, e => {
                  this.emit(SystemEventType.TOUCH_CANCEL, e.touch, e);
                });
                input.on(InputEventType.KEY_DOWN, e => {
                  this.emit(SystemEventType.KEY_DOWN, e);
                });
                input.on(InputEventType.KEY_PRESSING, e => {
                  this.emit(SystemEventType.KEY_DOWN, e);
                });
                input.on(InputEventType.KEY_UP, e => {
                  this.emit(SystemEventType.KEY_UP, e);
                });
                input.on(InputEventType.DEVICEMOTION, e => {
                  this.emit(SystemEventType.DEVICEMOTION, e);
                });
              }

              setAccelerometerEnabled(isEnabled) {
                input.setAccelerometerEnabled(isEnabled);
              }

              setAccelerometerInterval(interval) {
                input.setAccelerometerInterval(interval);
              }

              on(type, callback, target, once) {
                super.on(type, callback, target, once);
                return callback;
              }

              off(type, callback, target) {
                super.off(type, callback, target);
              }

            } exports('hc', SystemEvent);
            SystemEvent.EventType = SystemEventType;
            legacyCC.SystemEvent = SystemEvent;
            const systemEvent = exports('hb', new SystemEvent());
            legacyCC.systemEvent = systemEvent;

            replaceProperty(SystemEventType, 'Node.EventType', [{
              name: 'POSITION_PART',
              newName: 'TRANSFORM_CHANGED'
            }, {
              name: 'ROTATION_PART',
              newName: 'TRANSFORM_CHANGED'
            }, {
              name: 'SCALE_PART',
              newName: 'TRANSFORM_CHANGED'
            }]);
            replaceProperty(Event, 'Event', [{
              name: 'ACCELERATION',
              newName: 'DEVICEMOTION',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            markAsWarning(Event, 'Event', [{
              name: 'TOUCH',
              suggest: 'please use SystemEvent.EventType.TOUCH_START, SystemEvent.EventType.TOUCH_MOVE, SystemEvent.EventType.TOUCH_END and SystemEvent.EventType.TOUCH_CANCEL instead'
            }, {
              name: 'MOUSE',
              suggest: 'please use SystemEvent.EventType.MOUSE_DOWN, SystemEvent.EventType.MOUSE_MOVE, SystemEvent.EventType.MOUSE_UP, SystemEvent.EventType.MOUSE_WHEEL, Node.EventType.MOUSE_ENTER and Node.EventType.MOUSE_LEAVE instead'
            }, {
              name: 'KEYBOARD',
              suggest: 'please use SystemEvent.EventType.KEY_DOWN and SystemEvent.EventType.KEY_UP instead'
            }]);
            replaceProperty(EventMouse, 'EventMouse', ['DOWN', 'UP', 'MOVE'].map(item => ({
              name: item,
              newName: `MOUSE_${item}`,
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            })));
            replaceProperty(EventMouse, 'EventMouse', [{
              name: 'SCROLL',
              newName: 'MOUSE_WHEEL',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            markAsWarning(EventMouse.prototype, 'EventMouse.prototype', [{
              name: 'eventType',
              suggest: 'please use EventMouse.prototype.type instead'
            }]);
            replaceProperty(EventTouch, 'EventTouch', [{
              name: 'BEGAN',
              newName: 'TOUCH_START',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            replaceProperty(EventTouch, 'EventTouch', [{
              name: 'MOVED',
              newName: 'TOUCH_MOVE',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            replaceProperty(EventTouch, 'EventTouch', [{
              name: 'ENDED',
              newName: 'TOUCH_END',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            replaceProperty(EventTouch, 'EventTouch', [{
              name: 'CANCELLED',
              newName: 'TOUCH_CANCEL',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            markAsWarning(EventTouch.prototype, 'EventTouch.prototype', [{
              name: 'getEventCode',
              suggest: 'please use EventTouch.prototype.type instead'
            }]);
            replaceProperty(EventTouch.prototype, 'EventTouch.prototype', [{
              name: 'getUILocationInView',
              newName: 'getLocationInView',
              target: EventTouch,
              targetName: 'EventTouch'
            }]);
            markAsWarning(macro.KEY, 'macro.KEY', ['back', 'menu', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '*', '+', '-', '/', ';', '=', ',', '.', '[', ']', 'dpadLeft', 'dpadRight', 'dpadUp', 'dpadDown', 'dpadCenter'].map(item => ({
              name: item
            })));
            markAsWarning(macro.KEY, 'macro.KEY', [{
              name: 'shift',
              suggest: 'please use KeyCode.SHIFT_LEFT instead'
            }]);
            markAsWarning(macro.KEY, 'macro.KEY', [{
              name: 'ctrl',
              suggest: 'please use KeyCode.CTRL_LEFT instead'
            }]);
            markAsWarning(macro.KEY, 'macro.KEY', [{
              name: 'alt',
              suggest: 'please use KeyCode.ALT_LEFT instead'
            }]);
            markAsWarning(macro, 'macro', [{
              name: 'KEY',
              suggest: 'please use KeyCode instead'
            }]);

            var _dec$a, _class$a;

            {
              replaceProperty(Node$1.prototype, 'Node', [{
                name: 'childrenCount',
                newName: 'children.length',

                customGetter() {
                  return this.children.length;
                }

              }]);
            }

            replaceProperty(Node$1.prototype, 'Node', [{
              name: 'width',
              targetName: 'node.getComponent(UITransform)',

              customGetter() {
                return this._uiProps.uiTransformComp.width;
              },

              customSetter(value) {
                this._uiProps.uiTransformComp.width = value;
              }

            }, {
              name: 'height',
              targetName: 'node.getComponent(UITransform)',

              customGetter() {
                return this._uiProps.uiTransformComp.height;
              },

              customSetter(value) {
                this._uiProps.uiTransformComp.height = value;
              }

            }, {
              name: 'anchorX',
              targetName: 'node.getComponent(UITransform)',

              customGetter() {
                return this._uiProps.uiTransformComp.anchorX;
              },

              customSetter(value) {
                this._uiProps.uiTransformComp.anchorX = value;
              }

            }, {
              name: 'anchorY',
              targetName: 'node.getComponent(UITransform)',

              customGetter() {
                return this._uiProps.uiTransformComp.anchorY;
              },

              customSetter(value) {
                this._uiProps.uiTransformComp.anchorY = value;
              }

            }, {
              name: 'getAnchorPoint',
              targetName: 'node.getComponent(UITransform)',

              customFunction(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._uiProps.uiTransformComp.anchorPoint);
                return out;
              }

            }, {
              name: 'setAnchorPoint',
              targetName: 'node.getComponent(UITransform)',

              customFunction(point, y) {
                this._uiProps.uiTransformComp.setAnchorPoint(point, y);
              }

            }, {
              name: 'getContentSize',
              targetName: 'node.getComponent(UITransform)',

              customFunction(out) {
                if (!out) {
                  out = new Size();
                }

                out.set(this._uiProps.uiTransformComp.contentSize);
                return out;
              }

            }, {
              name: 'setContentSize',
              targetName: 'node.getComponent(UITransform)',

              customFunction(size, height) {
                if (typeof size === 'number') {
                  this._uiProps.uiTransformComp.setContentSize(size, height);
                } else {
                  this._uiProps.uiTransformComp.setContentSize(size);
                }
              }

            }]);
            removeProperty(SceneGlobals.prototype, 'SceneGlobals.prototype', [{
              name: 'aspect'
            }, {
              name: 'selfShadow'
            }, {
              name: 'linear'
            }, {
              name: 'packing'
            }, {
              name: 'autoAdapt'
            }, {
              name: 'fixedArea'
            }, {
              name: 'pcf'
            }, {
              name: 'bias'
            }, {
              name: 'normalBias'
            }, {
              name: 'near'
            }, {
              name: 'far'
            }, {
              name: 'shadowDistance'
            }, {
              name: 'invisibleOcclusionRange'
            }, {
              name: 'orthoSize'
            }, {
              name: 'saturation'
            }]);
            replaceProperty(SceneGlobals.prototype, 'SceneGlobals.prototype', [{
              name: 'distance',
              newName: 'planeHeight'
            }, {
              name: 'normal',
              newName: 'planeDirection'
            }, {
              name: 'size',
              newName: 'shadowMapSize'
            }]);
            removeProperty(Node$1.prototype, 'Node.prototype', [{
              name: 'addLayer'
            }, {
              name: 'removeLayer'
            }]);
            replaceProperty(NodeUIProperties.prototype, 'NodeUIProperties', [{
              name: 'opacityDirty',
              newName: 'colorDirty'
            }]);
            removeProperty(Layers, 'Layers', [{
              name: 'All'
            }, {
              name: 'RaycastMask'
            }, {
              name: 'check'
            }]);
            replaceProperty(Layers, 'Layers', [{
              name: 'Default',
              newName: 'DEFAULT',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'Always',
              newName: 'ALWAYS',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'IgnoreRaycast',
              newName: 'IGNORE_RAYCAST',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'Gizmos',
              newName: 'GIZMOS',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'Editor',
              newName: 'EDITOR',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'UI',
              newName: 'UI_3D',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'UI2D',
              newName: 'UI_2D',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'SceneGizmo',
              newName: 'SCENE_GIZMO',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'makeInclusiveMask',
              newName: 'makeMaskInclude',
              target: Layers,
              targetName: 'Layers'
            }, {
              name: 'makeExclusiveMask',
              newName: 'makeMaskExclude',
              target: Layers,
              targetName: 'Layers'
            }]);
            removeProperty(Layers.Enum, 'Layers.Enum', [{
              name: 'ALWAYS'
            }]);
            removeProperty(Layers.BitMask, 'Layers.BitMask', [{
              name: 'ALWAYS'
            }]);
            const HideInHierarchy$1 = CCObject.Flags.HideInHierarchy;
            const DontSave$1 = CCObject.Flags.DontSave;
            let PrivateNode = exports('gV', (_dec$a = ccclass('cc.PrivateNode'), _dec$a(_class$a = class PrivateNode extends Node$1 {
              constructor(name) {
                super(name);
                warnID(12003, this.name);
                this.hideFlags |= DontSave$1 | HideInHierarchy$1;
              }

            }) || _class$a));

            replaceProperty(SystemEventType, 'SystemEventType', ['MOUSE_ENTER', 'MOUSE_LEAVE', 'TRANSFORM_CHANGED', 'SCENE_CHANGED_FOR_PERSISTS', 'SIZE_CHANGED', 'ANCHOR_CHANGED', 'COLOR_CHANGED', 'CHILD_ADDED', 'CHILD_REMOVED', 'PARENT_CHANGED', 'NODE_DESTROYED', 'LAYER_CHANGED', 'SIBLING_ORDER_CHANGED'].map(name => ({
              name,
              target: Node$1.EventType,
              targetName: 'Node.EventType'
            })));
            replaceProperty(Node$1.EventType, 'Node.EventType', [{
              name: 'DEVICEMOTION',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }, {
              name: 'KEY_DOWN',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }, {
              name: 'KEY_UP',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            legacyCC.PrivateNode = PrivateNode;

            function find(path, referenceNode) {
              if (!referenceNode) {
                const scene = legacyCC.director.getScene();

                if (!scene) {

                  return null;
                }

                referenceNode = scene;
              }

              return referenceNode.getChildByPath(path);
            }
            legacyCC.find = find;

            const fastRemoveAt$2 = array.fastRemoveAt;
            const IsStartCalled$1 = CCObject.Flags.IsStartCalled;
            const IsOnEnableCalled$1 = CCObject.Flags.IsOnEnableCalled;
            const IsEditorOnEnableCalled$1 = CCObject.Flags.IsEditorOnEnableCalled;

            function sortedIndex(array, comp) {
              const order = comp.constructor._executionOrder;
              const id = comp._id;
              let l = 0;

              for (let h = array.length - 1, m = h >>> 1; l <= h; m = l + h >>> 1) {
                const test = array[m];
                const testOrder = test.constructor._executionOrder;

                if (testOrder > order) {
                  h = m - 1;
                } else if (testOrder < order) {
                  l = m + 1;
                } else {
                  const testId = test._id;

                  if (testId > id) {
                    h = m - 1;
                  } else if (testId < id) {
                    l = m + 1;
                  } else {
                    return m;
                  }
                }
              }

              return ~l;
            }

            function stableRemoveInactive(iterator, flagToClear) {
              const array = iterator.array;
              let next = iterator.i + 1;

              while (next < array.length) {
                const comp = array[next];

                if (comp.node._activeInHierarchy) {
                  ++next;
                } else {
                  iterator.removeAt(next);

                  if (flagToClear) {
                    comp._objFlags &= ~flagToClear;
                  }
                }
              }
            }

            class LifeCycleInvoker {
              constructor(invokeFunc) {
                this._zero = void 0;
                this._neg = void 0;
                this._pos = void 0;
                this._invoke = void 0;
                const Iterator = MutableForwardIterator;
                this._zero = new Iterator([]);
                this._neg = new Iterator([]);
                this._pos = new Iterator([]);

                this._invoke = invokeFunc;
              }

            }
            LifeCycleInvoker.stableRemoveInactive = stableRemoveInactive;

            function compareOrder(a, b) {
              return a.constructor._executionOrder - b.constructor._executionOrder;
            }

            class OneOffInvoker extends LifeCycleInvoker {
              add(comp) {
                const order = comp.constructor._executionOrder;
                (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).array.push(comp);
              }

              remove(comp) {
                const order = comp.constructor._executionOrder;
                (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).fastRemove(comp);
              }

              cancelInactive(flagToClear) {
                stableRemoveInactive(this._zero, flagToClear);
                stableRemoveInactive(this._neg, flagToClear);
                stableRemoveInactive(this._pos, flagToClear);
              }

              invoke() {
                const compsNeg = this._neg;

                if (compsNeg.array.length > 0) {
                  compsNeg.array.sort(compareOrder);

                  this._invoke(compsNeg);

                  compsNeg.array.length = 0;
                }

                this._invoke(this._zero);

                this._zero.array.length = 0;
                const compsPos = this._pos;

                if (compsPos.array.length > 0) {
                  compsPos.array.sort(compareOrder);

                  this._invoke(compsPos);

                  compsPos.array.length = 0;
                }
              }

            }

            class ReusableInvoker extends LifeCycleInvoker {
              add(comp) {
                const order = comp.constructor._executionOrder;

                if (order === 0) {
                  this._zero.array.push(comp);
                } else {
                  const array = order < 0 ? this._neg.array : this._pos.array;
                  const i = sortedIndex(array, comp);

                  if (i < 0) {
                    array.splice(~i, 0, comp);
                  }
                }
              }

              remove(comp) {
                const order = comp.constructor._executionOrder;

                if (order === 0) {
                  this._zero.fastRemove(comp);
                } else {
                  const iterator = order < 0 ? this._neg : this._pos;
                  const i = sortedIndex(iterator.array, comp);

                  if (i >= 0) {
                    iterator.removeAt(i);
                  }
                }
              }

              invoke(dt) {
                if (this._neg.array.length > 0) {
                  this._invoke(this._neg, dt);
                }

                this._invoke(this._zero, dt);

                if (this._pos.array.length > 0) {
                  this._invoke(this._pos, dt);
                }
              }

            }

            function createInvokeImplJit(code, useDt, ensureFlag) {
              const body = `${'var a=it.array;' + 'for(it.i=0;it.i<a.length;++it.i){' + 'var c=a[it.i];'}${code}}`;
              const fastPath = useDt ? Function('it', 'dt', body) : Function('it', body);
              const singleInvoke = Function('c', 'dt', code);
              return createInvokeImpl(singleInvoke, fastPath, ensureFlag);
            }
            function createInvokeImpl(singleInvoke, fastPath, ensureFlag) {
              return (iterator, dt) => {
                try {
                  fastPath(iterator, dt);
                } catch (e) {
                  legacyCC._throw(e);

                  const array = iterator.array;

                  if (ensureFlag) {
                    array[iterator.i]._objFlags |= ensureFlag;
                  }

                  ++iterator.i;

                  for (; iterator.i < array.length; ++iterator.i) {
                    try {
                      singleInvoke(array[iterator.i], dt);
                    } catch (e) {
                      legacyCC._throw(e);

                      if (ensureFlag) {
                        array[iterator.i]._objFlags |= ensureFlag;
                      }
                    }
                  }
                }
              };
            }
            const invokeStart =  createInvokeImplJit(`c.start();c._objFlags|=${IsStartCalled$1}`, false, IsStartCalled$1) ;
            const invokeUpdate =  createInvokeImplJit('c.update(dt)', true) ;
            const invokeLateUpdate =  createInvokeImplJit('c.lateUpdate(dt)', true) ;
            const invokeOnEnable =  iterator => {
              const compScheduler = legacyCC.director._compScheduler;
              const array = iterator.array;

              for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
                const comp = array[iterator.i];

                if (comp._enabled) {
                  comp.onEnable();
                  const deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

                  if (!deactivatedDuringOnEnable) {
                    compScheduler._onEnabled(comp);
                  }
                }
              }
            };
            class ComponentScheduler {
              constructor() {
                this._deferredComps = [];
                this.unscheduleAll();
              }

              unscheduleAll() {
                this.startInvoker = new OneOffInvoker(invokeStart);
                this.updateInvoker = new ReusableInvoker(invokeUpdate);
                this.lateUpdateInvoker = new ReusableInvoker(invokeLateUpdate);
                this._updating = false;
              }

              _onEnabled(comp) {
                legacyCC.director.getScheduler().resumeTarget(comp);
                comp._objFlags |= IsOnEnableCalled$1;

                if (this._updating) {
                  this._deferredComps.push(comp);
                } else {
                  this._scheduleImmediate(comp);
                }
              }

              _onDisabled(comp) {
                legacyCC.director.getScheduler().pauseTarget(comp);
                comp._objFlags &= ~IsOnEnableCalled$1;

                const index = this._deferredComps.indexOf(comp);

                if (index >= 0) {
                  fastRemoveAt$2(this._deferredComps, index);
                  return;
                }

                if (comp.start && !(comp._objFlags & IsStartCalled$1)) {
                  this.startInvoker.remove(comp);
                }

                if (comp.update) {
                  this.updateInvoker.remove(comp);
                }

                if (comp.lateUpdate) {
                  this.lateUpdateInvoker.remove(comp);
                }
              }

              enableComp(comp, invoker) {
                if (!(comp._objFlags & IsOnEnableCalled$1)) {
                  if (comp.onEnable) {
                    if (invoker) {
                      invoker.add(comp);
                      return;
                    } else {
                      comp.onEnable();
                      const deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

                      if (deactivatedDuringOnEnable) {
                        return;
                      }
                    }
                  }

                  this._onEnabled(comp);
                }
              }

              disableComp(comp) {
                if (comp._objFlags & IsOnEnableCalled$1) {
                  if (comp.onDisable) {
                    comp.onDisable();
                  }

                  this._onDisabled(comp);
                }
              }

              startPhase() {
                this._updating = true;
                this.startInvoker.invoke();

                this._startForNewComps();
              }

              updatePhase(dt) {
                this.updateInvoker.invoke(dt);
              }

              lateUpdatePhase(dt) {
                this.lateUpdateInvoker.invoke(dt);
                this._updating = false;

                this._startForNewComps();
              }

              _startForNewComps() {
                if (this._deferredComps.length > 0) {
                  this._deferredSchedule();

                  this.startInvoker.invoke();
                }
              }

              _scheduleImmediate(comp) {
                if (typeof comp.start === 'function' && !(comp._objFlags & IsStartCalled$1)) {
                  this.startInvoker.add(comp);
                }

                if (typeof comp.update === 'function') {
                  this.updateInvoker.add(comp);
                }

                if (typeof comp.lateUpdate === 'function') {
                  this.lateUpdateInvoker.add(comp);
                }
              }

              _deferredSchedule() {
                const comps = this._deferredComps;

                for (let i = 0, len = comps.length; i < len; i++) {
                  this._scheduleImmediate(comps[i]);
                }

                comps.length = 0;
              }

            }

            const MAX_POOL_SIZE$1 = 4;
            const IsPreloadStarted$1 = CCObject.Flags.IsPreloadStarted;
            const IsOnLoadStarted$1 = CCObject.Flags.IsOnLoadStarted;
            const IsOnLoadCalled$2 = CCObject.Flags.IsOnLoadCalled;
            const Deactivating$1 = CCObject.Flags.Deactivating;

            class UnsortedInvoker extends LifeCycleInvoker {
              add(comp) {
                this._zero.array.push(comp);
              }

              remove(comp) {
                this._zero.fastRemove(comp);
              }

              cancelInactive(flagToClear) {
                LifeCycleInvoker.stableRemoveInactive(this._zero, flagToClear);
              }

              invoke() {
                this._invoke(this._zero);

                this._zero.array.length = 0;
              }

            }

            const invokePreload =  createInvokeImplJit('c.__preload();') ;
            const invokeOnLoad =  createInvokeImplJit(`c.onLoad();c._objFlags|=${IsOnLoadCalled$2}`, false, IsOnLoadCalled$2) ;
            const activateTasksPool = new Pool(MAX_POOL_SIZE$1);

            activateTasksPool.get = function getActivateTask() {
              const task = this._get() || {
                preload: new UnsortedInvoker(invokePreload),
                onLoad: new OneOffInvoker(invokeOnLoad),
                onEnable: new OneOffInvoker(invokeOnEnable)
              };
              task.preload._zero.i = -1;
              let invoker = task.onLoad;
              invoker._zero.i = -1;
              invoker._neg.i = -1;
              invoker._pos.i = -1;
              invoker = task.onEnable;
              invoker._zero.i = -1;
              invoker._neg.i = -1;
              invoker._pos.i = -1;
              return task;
            };

            function _componentCorrupted(node, comp, index) {
              errorID(3817, node.name, index);
              console.log('Corrupted component value:', comp);

              if (comp) {
                node._removeComponent(comp);
              } else {
                array.removeAt(node._components, index);
              }
            }

            class NodeActivator {
              constructor() {
                this.resetComp = void 0;
                this.reset();
              }

              reset() {
                this._activatingStack = [];
              }

              activateNode(node, active) {
                if (active) {
                  const task = activateTasksPool.get();

                  this._activatingStack.push(task);

                  this._activateNodeRecursively(node, task.preload, task.onLoad, task.onEnable);

                  task.preload.invoke();
                  task.onLoad.invoke();
                  task.onEnable.invoke();

                  this._activatingStack.pop();

                  activateTasksPool.put(task);
                } else {
                  this._deactivateNodeRecursively(node);

                  const stack = this._activatingStack;

                  for (const lastTask of stack) {
                    lastTask.preload.cancelInactive(IsPreloadStarted$1);
                    lastTask.onLoad.cancelInactive(IsOnLoadStarted$1);
                    lastTask.onEnable.cancelInactive();
                  }
                }

                node.emit(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, node);
              }

              activateComp(comp, preloadInvoker, onLoadInvoker, onEnableInvoker) {
                if (!isValid(comp, true)) {
                  return;
                }

                if (!(comp._objFlags & IsPreloadStarted$1)) {
                  comp._objFlags |= IsPreloadStarted$1;

                  if (comp.__preload) {
                    if (preloadInvoker) {
                      preloadInvoker.add(comp);
                    } else {
                      comp.__preload();
                    }
                  }
                }

                if (!(comp._objFlags & IsOnLoadStarted$1)) {
                  comp._objFlags |= IsOnLoadStarted$1;

                  if (comp.onLoad) {
                    if (onLoadInvoker) {
                      onLoadInvoker.add(comp);
                    } else {
                      comp.onLoad();
                      comp._objFlags |= IsOnLoadCalled$2;
                    }
                  } else {
                    comp._objFlags |= IsOnLoadCalled$2;
                  }
                }

                if (comp._enabled) {
                  {
                    assertIsTrue(comp.node, getError(3823, comp.uuid, comp.name));
                  }

                  const deactivatedOnLoading = !comp.node._activeInHierarchy;

                  if (deactivatedOnLoading) {
                    return;
                  }

                  legacyCC.director._compScheduler.enableComp(comp, onEnableInvoker);
                }
              }

              destroyComp(comp) {
                legacyCC.director._compScheduler.disableComp(comp);

                if (comp.onDestroy && comp._objFlags & IsOnLoadCalled$2) {
                  comp.onDestroy();
                }
              }

              _activateNodeRecursively(node, preloadInvoker, onLoadInvoker, onEnableInvoker) {
                if (node._objFlags & Deactivating$1) {
                  errorID(3816, node.name);
                  return;
                }

                node._activeInHierarchy = true;
                let originCount = node._components.length;

                for (let i = 0; i < originCount; ++i) {
                  const component = node._components[i];

                  if (component instanceof legacyCC.Component) {
                    this.activateComp(component, preloadInvoker, onLoadInvoker, onEnableInvoker);
                  } else {
                    _componentCorrupted(node, component, i);

                    --i;
                    --originCount;
                  }
                }

                for (let i = 0, len = node._children.length; i < len; ++i) {
                  const child = node._children[i];

                  if (child._active) {
                    this._activateNodeRecursively(child, preloadInvoker, onLoadInvoker, onEnableInvoker);
                  }
                }

                node._onPostActivated(true);
              }

              _deactivateNodeRecursively(node) {

                node._objFlags |= Deactivating$1;
                node._activeInHierarchy = false;
                const originCount = node._components.length;

                for (let c = 0; c < originCount; ++c) {
                  const component = node._components[c];

                  if (component._enabled) {
                    legacyCC.director._compScheduler.disableComp(component);

                    if (node._activeInHierarchy) {
                      node._objFlags &= ~Deactivating$1;
                      return;
                    }
                  }
                }

                for (let i = 0, len = node._children.length; i < len; ++i) {
                  const child = node._children[i];

                  if (child._activeInHierarchy) {
                    this._deactivateNodeRecursively(child);

                    if (node._activeInHierarchy) {
                      node._objFlags &= ~Deactivating$1;
                      return;
                    }
                  }
                }

                node._onPostActivated(false);

                node._objFlags &= ~Deactivating$1;
              }

            } exports('gT', NodeActivator);

            var _dec$b, _class$b, _class2$9, _descriptor$8, _temp$8, _dec2$7, _dec3$5, _dec4$4, _dec5$3, _dec6$1, _class4$1, _class5$1, _descriptor2$5, _descriptor3$5, _descriptor4$4, _descriptor5$3, _descriptor6$1, _temp2$1, _dec7$1, _class7, _class8, _descriptor7$1, _temp3, _dec8$1, _dec9$1, _class10, _class11, _descriptor8$1, _descriptor9$1, _descriptor10$1, _temp4, _dec10$1, _dec11$1, _dec12$1, _class13, _class14, _descriptor11$1, _descriptor12$1, _temp5, _dec13$1, _dec14$1, _dec15$1, _class16, _class17, _descriptor13$1, _descriptor14$1, _temp6, _dec16$1, _dec17$1, _dec18$1, _dec19$1, _dec20$1, _dec21$1, _class19, _class20, _descriptor15$1, _descriptor16$1, _descriptor17$1, _descriptor18$1, _descriptor19$1, _descriptor20$1, _temp7, _dec22$1, _dec23$1, _dec24$1, _dec25$1, _class22, _class23, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _temp8;

            let TargetInfo = (_dec$b = ccclass('cc.TargetInfo'), _dec$b(_class$b = (_class2$9 = (_temp$8 = class TargetInfo {
              constructor() {
                _initializerDefineProperty(this, "localID", _descriptor$8, this);
              }

            }, _temp$8), (_descriptor$8 = _applyDecoratedDescriptor(_class2$9.prototype, "localID", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class2$9)) || _class$b);
            let TargetOverrideInfo = (_dec2$7 = ccclass('cc.TargetOverrideInfo'), _dec3$5 = type(CCObject), _dec4$4 = type(TargetInfo), _dec5$3 = type(Node$1), _dec6$1 = type(TargetInfo), _dec2$7(_class4$1 = (_class5$1 = (_temp2$1 = class TargetOverrideInfo {
              constructor() {
                _initializerDefineProperty(this, "source", _descriptor2$5, this);

                _initializerDefineProperty(this, "sourceInfo", _descriptor3$5, this);

                _initializerDefineProperty(this, "propertyPath", _descriptor4$4, this);

                _initializerDefineProperty(this, "target", _descriptor5$3, this);

                _initializerDefineProperty(this, "targetInfo", _descriptor6$1, this);
              }

            }, _temp2$1), (_descriptor2$5 = _applyDecoratedDescriptor(_class5$1.prototype, "source", [serializable, _dec3$5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor3$5 = _applyDecoratedDescriptor(_class5$1.prototype, "sourceInfo", [serializable, _dec4$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor4$4 = _applyDecoratedDescriptor(_class5$1.prototype, "propertyPath", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor5$3 = _applyDecoratedDescriptor(_class5$1.prototype, "target", [serializable, _dec5$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor6$1 = _applyDecoratedDescriptor(_class5$1.prototype, "targetInfo", [serializable, _dec6$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class5$1)) || _class4$1);
            let CompPrefabInfo = (_dec7$1 = ccclass('cc.CompPrefabInfo'), _dec7$1(_class7 = (_class8 = (_temp3 = class CompPrefabInfo {
              constructor() {
                _initializerDefineProperty(this, "fileId", _descriptor7$1, this);
              }

            }, _temp3), (_descriptor7$1 = _applyDecoratedDescriptor(_class8.prototype, "fileId", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            })), _class8)) || _class7);
            let PropertyOverrideInfo = (_dec8$1 = ccclass('CCPropertyOverrideInfo'), _dec9$1 = type(TargetInfo), _dec8$1(_class10 = (_class11 = (_temp4 = class PropertyOverrideInfo {
              constructor() {
                _initializerDefineProperty(this, "targetInfo", _descriptor8$1, this);

                _initializerDefineProperty(this, "propertyPath", _descriptor9$1, this);

                _initializerDefineProperty(this, "value", _descriptor10$1, this);
              }

              isTarget(localID, propPath) {
              }

            }, _temp4), (_descriptor8$1 = _applyDecoratedDescriptor(_class11.prototype, "targetInfo", [serializable, _dec9$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor9$1 = _applyDecoratedDescriptor(_class11.prototype, "propertyPath", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor10$1 = _applyDecoratedDescriptor(_class11.prototype, "value", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class11)) || _class10);
            let MountedChildrenInfo = (_dec10$1 = ccclass('cc.MountedChildrenInfo'), _dec11$1 = type(TargetInfo), _dec12$1 = type([Node$1]), _dec10$1(_class13 = (_class14 = (_temp5 = class MountedChildrenInfo {
              constructor() {
                _initializerDefineProperty(this, "targetInfo", _descriptor11$1, this);

                _initializerDefineProperty(this, "nodes", _descriptor12$1, this);
              }

              isTarget(localID) {
              }

            }, _temp5), (_descriptor11$1 = _applyDecoratedDescriptor(_class14.prototype, "targetInfo", [serializable, _dec11$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor12$1 = _applyDecoratedDescriptor(_class14.prototype, "nodes", [serializable, _dec12$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class14)) || _class13);
            let MountedComponentsInfo = (_dec13$1 = ccclass('cc.MountedComponentsInfo'), _dec14$1 = type(TargetInfo), _dec15$1 = type([Component]), _dec13$1(_class16 = (_class17 = (_temp6 = class MountedComponentsInfo {
              constructor() {
                _initializerDefineProperty(this, "targetInfo", _descriptor13$1, this);

                _initializerDefineProperty(this, "components", _descriptor14$1, this);
              }

              isTarget(localID) {
              }

            }, _temp6), (_descriptor13$1 = _applyDecoratedDescriptor(_class17.prototype, "targetInfo", [serializable, _dec14$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor14$1 = _applyDecoratedDescriptor(_class17.prototype, "components", [serializable, _dec15$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class17)) || _class16);
            let PrefabInstance = (_dec16$1 = ccclass('cc.PrefabInstance'), _dec17$1 = type(Node$1), _dec18$1 = type([MountedChildrenInfo]), _dec19$1 = type([MountedComponentsInfo]), _dec20$1 = type([PropertyOverrideInfo]), _dec21$1 = type([TargetInfo]), _dec16$1(_class19 = (_class20 = (_temp7 = class PrefabInstance {
              constructor() {
                _initializerDefineProperty(this, "fileId", _descriptor15$1, this);

                _initializerDefineProperty(this, "prefabRootNode", _descriptor16$1, this);

                _initializerDefineProperty(this, "mountedChildren", _descriptor17$1, this);

                _initializerDefineProperty(this, "mountedComponents", _descriptor18$1, this);

                _initializerDefineProperty(this, "propertyOverrides", _descriptor19$1, this);

                _initializerDefineProperty(this, "removedComponents", _descriptor20$1, this);

                this.targetMap = {};
                this.expanded = false;
              }

              findPropertyOverride(localID, propPath) {
              }

              removePropertyOverride(localID, propPath) {
              }

            }, _temp7), (_descriptor15$1 = _applyDecoratedDescriptor(_class20.prototype, "fileId", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor16$1 = _applyDecoratedDescriptor(_class20.prototype, "prefabRootNode", [serializable, _dec17$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor17$1 = _applyDecoratedDescriptor(_class20.prototype, "mountedChildren", [serializable, _dec18$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor18$1 = _applyDecoratedDescriptor(_class20.prototype, "mountedComponents", [serializable, _dec19$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor19$1 = _applyDecoratedDescriptor(_class20.prototype, "propertyOverrides", [serializable, _dec20$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor20$1 = _applyDecoratedDescriptor(_class20.prototype, "removedComponents", [serializable, _dec21$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class20)) || _class19);
            let PrefabInfo = (_dec22$1 = ccclass('cc.PrefabInfo'), _dec23$1 = type(Node$1), _dec24$1 = type(PrefabInstance), _dec25$1 = type([TargetOverrideInfo]), _dec22$1(_class22 = (_class23 = (_temp8 = class PrefabInfo {
              constructor() {
                _initializerDefineProperty(this, "root", _descriptor21, this);

                _initializerDefineProperty(this, "asset", _descriptor22, this);

                _initializerDefineProperty(this, "fileId", _descriptor23, this);

                _initializerDefineProperty(this, "instance", _descriptor24, this);

                _initializerDefineProperty(this, "targetOverrides", _descriptor25, this);

                _initializerDefineProperty(this, "nestedPrefabInstanceRoots", _descriptor26, this);
              }

            }, _temp8), (_descriptor21 = _applyDecoratedDescriptor(_class23.prototype, "root", [serializable, _dec23$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor22 = _applyDecoratedDescriptor(_class23.prototype, "asset", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor23 = _applyDecoratedDescriptor(_class23.prototype, "fileId", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor24 = _applyDecoratedDescriptor(_class23.prototype, "instance", [serializable, _dec24$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor25 = _applyDecoratedDescriptor(_class23.prototype, "targetOverrides", [serializable, _dec25$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor26 = _applyDecoratedDescriptor(_class23.prototype, "nestedPrefabInstanceRoots", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class23)) || _class22);
            legacyCC._PrefabInfo = PrefabInfo;

            var utils = /*#__PURE__*/Object.freeze({
                __proto__: null,
                TargetInfo: TargetInfo,
                TargetOverrideInfo: TargetOverrideInfo,
                CompPrefabInfo: CompPrefabInfo,
                PropertyOverrideInfo: PropertyOverrideInfo,
                MountedChildrenInfo: MountedChildrenInfo,
                MountedComponentsInfo: MountedComponentsInfo,
                PrefabInstance: PrefabInstance,
                PrefabInfo: PrefabInfo,
                createNodeWithPrefab: createNodeWithPrefab,
                generateTargetMap: generateTargetMap,
                getTarget: getTarget,
                applyMountedChildren: applyMountedChildren,
                applyMountedComponents: applyMountedComponents,
                applyRemovedComponents: applyRemovedComponents,
                applyPropertyOverrides: applyPropertyOverrides,
                applyTargetOverrides: applyTargetOverrides,
                expandPrefabInstanceNode: expandPrefabInstanceNode,
                expandNestedPrefabInstanceNode: expandNestedPrefabInstanceNode,
                applyNodeAndComponentId: applyNodeAndComponentId
            });

            var _dec$c, _class$c, _class2$a, _descriptor$9, _descriptor2$6, _descriptor3$6, _class3$4, _temp$9;
            const OptimizationPolicy = Enum({
              AUTO: 0,
              SINGLE_INSTANCE: 1,
              MULTI_INSTANCE: 2
            });
            let Prefab = exports('gq', (_dec$c = ccclass('cc.Prefab'), _dec$c(_class$c = (_class2$a = (_temp$9 = _class3$4 = class Prefab extends Asset {
              constructor() {
                super();

                _initializerDefineProperty(this, "data", _descriptor$9, this);

                _initializerDefineProperty(this, "optimizationPolicy", _descriptor2$6, this);

                _initializerDefineProperty(this, "persistent", _descriptor3$6, this);

                this._createFunction = void 0;
                this._instantiatedTimes = void 0;
                this._createFunction = null;
                this._instantiatedTimes = 0;
              }

              createNode(cb) {
                const node = legacyCC.instantiate(this);
                node.name = this.name;
                cb(null, node);
              }

              compileCreateFunction() {
                this._createFunction = compile(this.data);
              }

              _doInstantiate(rootToRedirect) {
                if (!this.data._prefab) {
                  warnID(3700);
                }

                if (!this._createFunction) {
                  this.compileCreateFunction();
                }

                return this._createFunction(rootToRedirect);
              }

              _instantiate() {
                let node;
                let useJit = false;

                {
                  if (this.optimizationPolicy === OptimizationPolicy.SINGLE_INSTANCE) {
                    useJit = false;
                  } else if (this.optimizationPolicy === OptimizationPolicy.MULTI_INSTANCE) {
                    useJit = true;
                  } else {
                    useJit = this._instantiatedTimes + 1 >= Prefab.OptimizationPolicyThreshold;
                  }
                }

                if (useJit) {
                  node = this._doInstantiate();

                  this.data._instantiate(node);
                } else {
                  node = this.data._instantiate();
                }

                ++this._instantiatedTimes;
                return node;
              }

              initDefault(uuid) {
                super.initDefault(uuid);
                this.data = new Node$1();
                this.data.name = '(Missing Node)';
                const prefabInfo = new legacyCC._PrefabInfo();
                prefabInfo.asset = this;
                prefabInfo.root = this.data;
                this.data._prefab = prefabInfo;
              }

              validate() {
                return !!this.data;
              }

              onLoaded() {
                const rootNode = this.data;
                expandNestedPrefabInstanceNode(rootNode);
                applyTargetOverrides(rootNode);
              }

            }, _class3$4.OptimizationPolicy = OptimizationPolicy, _class3$4.OptimizationPolicyThreshold = 3, _temp$9), (_descriptor$9 = _applyDecoratedDescriptor(_class2$a.prototype, "data", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor2$6 = _applyDecoratedDescriptor(_class2$a.prototype, "optimizationPolicy", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return OptimizationPolicy.AUTO;
              }
            }), _descriptor3$6 = _applyDecoratedDescriptor(_class2$a.prototype, "persistent", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            })), _class2$a)) || _class$c));
            js.value(Prefab, '_utils', utils);
            legacyCC.Prefab = Prefab;

            {
              obsolete(legacyCC, 'cc._Prefab', 'Prefab');
            }

            const RenderingSubMesh = exports('eb', jsb.RenderingSubMesh);
            const renderingSubMeshProto = RenderingSubMesh.prototype;

            renderingSubMeshProto._ctor = function (vertexBuffers, attributes, primitiveMode, indexBuffer = null, indirectBuffer = null) {
              jsb.Asset.prototype._ctor.apply(this, arguments);

              this._attributes = attributes;
              this._vertexBuffers = vertexBuffers;
              this._indexBuffer = indexBuffer;
              this._indirectBuffer = indirectBuffer;
            };

            Object.defineProperty(renderingSubMeshProto, 'geometricInfo', {
              configurable: true,
              enumerable: true,

              get() {
                let r = this.getGeometricInfo();

                if (!r.positions && !r.indices) {
                  r.positions = new Float32Array();
                  r.indices = new Uint8Array();
                }

                return r;
              }

            });
            Object.defineProperty(renderingSubMeshProto, 'attributes', {
              configurable: true,
              enumerable: true,

              get() {
                if (!this._attributes) {
                  this._attributes = this.getAttributes();
                }

                return this._attributes;
              }

            });
            Object.defineProperty(renderingSubMeshProto, 'vertexBuffers', {
              configurable: true,
              enumerable: true,

              get() {
                if (!this._vertexBuffers) {
                  this._vertexBuffers = this.getVertexBuffers();
                }

                return this._vertexBuffers;
              }

            });
            Object.defineProperty(renderingSubMeshProto, 'indexBuffer', {
              configurable: true,
              enumerable: true,

              get() {
                if (!this._indexBuffer) {
                  this._indexBuffer = this.getIndexBuffer();
                }

                return this._indexBuffer;
              }

            });
            Object.defineProperty(renderingSubMeshProto, 'indirectBuffer', {
              configurable: true,
              enumerable: true,

              get() {
                if (!this._indirectBuffer) {
                  this._indirectBuffer = this.getIndexBuffer();
                }

                return this._indirectBuffer;
              }

            });

            const SceneAsset = exports('gr', jsb.SceneAsset);
            legacyCC.SceneAsset = SceneAsset;
            const sceneAssetProto = SceneAsset.prototype;
            Object.defineProperty(sceneAssetProto, 'scene', {
              enumerable: true,
              configurable: true,

              get() {
                if (!this._scene) {
                  this._scene = this.getScene();
                }

                return this._scene;
              },

              set(v) {
                this._scene = v;
                this.setScene(v);
              }

            });

            sceneAssetProto._ctor = function () {
              jsb.Asset.prototype._ctor.apply(this, arguments);

              this._scene = null;
            };

            const SceneAssetProto = SceneAsset.prototype;
            serializable(SceneAssetProto, 'scene');
            ccclass('cc.SceneAsset')(SceneAsset);

            var _dec$d, _class$d, _class2$b, _descriptor$a, _temp$a;
            let TextAsset = exports('fM', (_dec$d = ccclass('cc.TextAsset'), _dec$d(_class$d = (_class2$b = (_temp$a = class TextAsset extends Asset {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "text", _descriptor$a, this);
              }

              toString() {
                return this.text;
              }

            }, _temp$a), (_descriptor$a = _applyDecoratedDescriptor(_class2$b.prototype, "text", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            })), _class2$b)) || _class$d));
            legacyCC.TextAsset = TextAsset;

            var _dec$e, _class$e, _class2$c, _descriptor$b, _temp$b;
            let JsonAsset = exports('gs', (_dec$e = ccclass('cc.JsonAsset'), _dec$e(_class$e = (_class2$c = (_temp$b = class JsonAsset extends Asset {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "json", _descriptor$b, this);
              }

            }, _temp$b), (_descriptor$b = _applyDecoratedDescriptor(_class2$c.prototype, "json", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$c)) || _class$e));
            legacyCC.JsonAsset = JsonAsset;

            const ImageAsset = exports('dx', jsb.ImageAsset);
            const extnames = ['.png', '.jpg', '.jpeg', '.bmp', '.webp', '.pvr', '.pkm', '.astc'];

            function isImageBitmap(imageSource) {
              return !!(sys.hasFeature(sys.Feature.IMAGE_BITMAP) && imageSource instanceof ImageBitmap);
            }

            function isNativeImage(imageSource) {

              if ( imageSource._compressed === true) {
                return false;
              }

              return imageSource instanceof HTMLImageElement || imageSource instanceof HTMLCanvasElement || isImageBitmap(imageSource);
            }

            const imageAssetProto = ImageAsset.prototype;

            imageAssetProto._ctor = function (nativeAsset) {
              jsb.Asset.prototype._ctor.apply(this, arguments);

              this._width = 0;
              this._height = 0;
              this._nativeData = {
                _data: null,
                width: 0,
                height: 0,
                format: 0,
                _compressed: false
              };

              if (nativeAsset !== undefined) {
                this.reset(nativeAsset);
              }
            };

            Object.defineProperty(imageAssetProto, '_nativeAsset', {
              configurable: true,
              enumerable: true,

              get() {
                return this._nativeData;
              },

              set(value) {
                if (!(value instanceof HTMLElement) && !isImageBitmap(value)) {
                  value.format = value.format || this.format;
                }

                this.reset(value);
              }

            });
            Object.defineProperty(imageAssetProto, 'data', {
              configurable: true,
              enumerable: true,

              get() {
                if (this._nativeData && isNativeImage(this._nativeData)) {
                  return this._nativeData;
                }

                return this._nativeData && this._nativeData._data;
              }

            });

            imageAssetProto._setRawAsset = function (filename, inLibrary = true) {
              if (inLibrary !== false) {
                this._native = filename || '';
              } else {
                this._native = `/${filename}`;
              }
            };

            imageAssetProto.reset = function (data) {
              this._nativeData = data;

              if (!(data instanceof HTMLElement)) {
                this.format = data.format;
              }

              this._syncDataToNative();
            };

            const superDestroy = jsb.Asset.prototype.destroy;

            imageAssetProto.destroy = function () {
              if (this.data && this.data instanceof HTMLImageElement) {
                this.data.src = '';

                this._setRawAsset('');

                this.data.destroy();
              } else if (isImageBitmap(this.data)) {
                this.data.close && this.data.close();
              }

              return superDestroy.call(this);
            };

            Object.defineProperty(imageAssetProto, 'width', {
              configurable: true,
              enumerable: true,

              get() {
                return this._nativeData.width || this._width;
              }

            });
            Object.defineProperty(imageAssetProto, 'height', {
              configurable: true,
              enumerable: true,

              get() {
                return this._nativeData.height || this._height;
              }

            });

            imageAssetProto._syncDataToNative = function () {
              const data = this._nativeData;
              this._width = data.width;
              this._height = data.height;
              this.setWidth(this._width);
              this.setHeight(this._height);
              this.url = this.nativeUrl;

              if (data instanceof HTMLCanvasElement) {
                this.setData(data._data.data);
              } else if (data instanceof HTMLImageElement) {
                this.setData(data._data);
              } else {
                this.setData(this._nativeData._data);
              }
            };

            imageAssetProto._serialize = function () {
              if (EDITOR || TEST$1) {
                let targetExtensions;

                if (this._native) {
                  targetExtensions = [this._native];
                }

                if (!targetExtensions) {
                  return '';
                }

                const extensionIndices = [];

                for (const targetExtension of targetExtensions) {
                  const extensionFormat = targetExtension.split('@');
                  const i = extnames.indexOf(extensionFormat[0]);
                  let exportedExtensionID = i < 0 ? targetExtension : `${i}`;

                  if (extensionFormat[1]) {
                    exportedExtensionID += `@${extensionFormat[1]}`;
                  }

                  extensionIndices.push(exportedExtensionID);
                }

                return {
                  fmt: extensionIndices.join('_'),
                  w: this.width,
                  h: this.height
                };
              }
            };

            imageAssetProto._deserialize = function (data) {
              let fmtStr = '';

              if (typeof data === 'string') {
                fmtStr = data;
              } else {
                this._width = data.w;
                this._height = data.h;
                fmtStr = data.fmt;
              }

              const device = deviceManager.gfxDevice;
              const extensionIDs = fmtStr.split('_');
              let preferedExtensionIndex = Number.MAX_VALUE;
              let format = this.format;
              let ext = '';
              const SupportTextureFormats = macro.SUPPORT_TEXTURE_FORMATS;

              for (const extensionID of extensionIDs) {
                const extFormat = extensionID.split('@');
                const i = parseInt(extFormat[0], undefined);
                const tmpExt = extnames[i] || extFormat[0];
                const index = SupportTextureFormats.indexOf(tmpExt);

                if (index !== -1 && index < preferedExtensionIndex) {
                  const fmt = extFormat[1] ? parseInt(extFormat[1]) : this.format;

                  if (tmpExt === '.astc' && (!device || !(device.getFormatFeatures(Format.ASTC_RGBA_4X4) & FormatFeatureBit.SAMPLED_TEXTURE))) {
                    continue;
                  } else if (tmpExt === '.pvr' && (!device || !(device.getFormatFeatures(Format.PVRTC_RGBA4) & FormatFeatureBit.SAMPLED_TEXTURE))) {
                    continue;
                  } else if ((fmt === PixelFormat.RGB_ETC1 || fmt === PixelFormat.RGBA_ETC1) && (!device || !(device.getFormatFeatures(Format.ETC_RGB8) & FormatFeatureBit.SAMPLED_TEXTURE))) {
                    continue;
                  } else if ((fmt === PixelFormat.RGB_ETC2 || fmt === PixelFormat.RGBA_ETC2) && (!device || !(device.getFormatFeatures(Format.ETC2_RGB8) & FormatFeatureBit.SAMPLED_TEXTURE))) {
                    continue;
                  } else if (tmpExt === '.webp' && !sys.hasFeature(sys.Feature.WEBP)) {
                    continue;
                  }

                  preferedExtensionIndex = index;
                  ext = tmpExt;
                  format = fmt;
                }
              }

              if (ext) {
                this._setRawAsset(ext);

                this.format = format;
              } else {
                warnID(3121);
              }
            };

            legacyCC.ImageAsset = jsb.ImageAsset;
            const ImageAssetProto = ImageAsset.prototype;

            const _nativeAssetDescriptor$2 = Object.getOwnPropertyDescriptor(ImageAssetProto, '_nativeAsset');

            override(ImageAssetProto, '_nativeAsset', _nativeAssetDescriptor$2);
            ccclass('cc.ImageAsset')(ImageAsset);

            const texture2DProto = jsb.Texture2D.prototype;
            texture2DProto.createNode = null;
            const Texture2D = exports('dq', jsb.Texture2D);
            Texture2D.Filter = Filter$1;
            Texture2D.PixelFormat = PixelFormat;
            Texture2D.WrapMode = WrapMode$1;

            texture2DProto._ctor = function () {
              SimpleTexture.prototype._ctor.apply(this, arguments);

              this._mipmaps = [];
            };

            texture2DProto._serialize = function (ctxForExporting) {
              if (EDITOR || TEST) {
                return {
                  base: TextureBase.prototype._serialize(ctxForExporting),
                  mipmaps: this._mipmaps.map(mipmap => {
                    if (!mipmap || !mipmap._uuid) {
                      return null;
                    }

                    if (ctxForExporting && ctxForExporting._compressUuid) {
                      return EditorExtends.UuidUtils.compressUuid(mipmap._uuid, true);
                    }

                    return mipmap._uuid;
                  })
                };
              }

              return null;
            };

            texture2DProto._deserialize = function (serializedData, handle) {
              const data = serializedData;

              TextureBase.prototype._deserialize.call(this, data.base);

              this._mipmaps = new Array(data.mipmaps.length);

              for (let i = 0; i < data.mipmaps.length; ++i) {
                this._mipmaps[i] = new ImageAsset();

                if (!data.mipmaps[i]) {
                  continue;
                }

                const mipmapUUID = data.mipmaps[i];
                handle.result.push(this._mipmaps, `${i}`, mipmapUUID, js.getClassId(ImageAsset));
              }
            };

            const oldOnLoaded$2 = texture2DProto.onLoaded;

            texture2DProto.onLoaded = function () {
              this.syncMipmapsForJS(this._mipmaps);
              oldOnLoaded$2.call(this);
            };

            Object.defineProperty(texture2DProto, 'image', {
              configurable: true,
              enumerable: true,

              get() {
                return this._mipmaps.length === 0 ? null : this._mipmaps[0];
              },

              set(value) {
                this.mipmaps = value ? [value] : [];
              }

            });
            Object.defineProperty(texture2DProto, 'mipmaps', {
              configurable: true,
              enumerable: true,

              get() {
                return this._mipmaps;
              },

              set(arr) {
                for (let i = 0, len = arr.length; i < len; ++i) {
                  arr[i]._syncDataToNative();
                }

                this._mipmaps = arr;
                this.setMipmaps(arr);
              }

            });
            legacyCC.Texture2D = jsb.Texture2D;
            const Texture2DProto = Texture2D.prototype;
            type([ImageAsset])(Texture2DProto, '_mipmaps');
            ccclass('cc.Texture2D')(Texture2D);

            let _Symbol$iterator$1, _Symbol$iterator3, _Symbol$iterator5;

            const directional = {
              undirected: 0,
              directed: 1,
              bidirectional: 2
            };
            const parallel = {
              disallow: 0,
              allow: 1
            };
            const traversal = {
              none: 0,
              incidence: 1,
              bidirectional: 2,
              adjacency: 4,
              vertex_list: 8,
              edge_list: 16
            };
            class ED {
              constructor(source, target) {
                this.source = void 0;
                this.target = void 0;
                this.source = source;
                this.target = target;
              }

              equals(rhs) {
                return this.source === rhs.source && this.target === rhs.target;
              }

            }
            class OutE {
              constructor(target) {
                this.target = void 0;
                this.target = target;
              }

              equals(rhs) {
                return this.target === rhs.target;
              }

            }
            _Symbol$iterator$1 = Symbol.iterator;
            class OutEI {
              constructor(iterator, source) {
                this.iterator = void 0;
                this.source = void 0;
                this.iterator = iterator;
                this.source = source;
              }

              [_Symbol$iterator$1]() {
                return this;
              }

              next() {
                const res = this.iterator.next();

                if (res.done) {
                  return {
                    value: undefined,
                    done: true
                  };
                } else {
                  return {
                    value: new ED(this.source, res.value.target),
                    done: false
                  };
                }
              }

            }
            _Symbol$iterator3 = Symbol.iterator;
            class InEI {
              constructor(iterator, source) {
                this.iterator = void 0;
                this.source = void 0;
                this.iterator = iterator;
                this.source = source;
              }

              [_Symbol$iterator3]() {
                return this;
              }

              next() {
                const res = this.iterator.next();

                if (res.done) {
                  return {
                    value: undefined,
                    done: true
                  };
                } else {
                  return {
                    value: new ED(res.value.target, this.source),
                    done: false
                  };
                }
              }

            }
            _Symbol$iterator5 = Symbol.iterator;
            class AdjI {
              constructor(graph, iterator) {
                this.graph = void 0;
                this.iterator = void 0;
                this.graph = graph;
                this.iterator = iterator;
              }

              [_Symbol$iterator5]() {
                return this;
              }

              next() {
                const res = this.iterator.next();

                if (res.done) {
                  return {
                    value: undefined,
                    done: true
                  };
                } else {
                  return {
                    value: this.graph.target(res.value),
                    done: false
                  };
                }
              }

            }
            function reindexEdgeList(el, u) {
              for (const e of el) {
                if (e.target > u) {
                  --e.target;
                }
              }
            }
            function getPath(g, v) {
              if (v === g.nullVertex()) {
                return '';
              }

              const paths = [];

              for (; v !== g.nullVertex(); v = g.getParent(v)) {
                paths.push(g.vertexName(v));
              }

              let path = '';

              for (let i = paths.length; i-- > 0;) {
                path += '/';
                path += paths[i];
              }

              return path;
            }
            function findRelative(g, v, path) {
              const pseudo = g.nullVertex();
              const names = path.split('/');

              if (names.length === 0) {
                return v;
              }

              let curr = v;
              let start = 0;

              if (names[0] === '') {
                curr = pseudo;
                ++start;
              }

              for (let i = start; i !== names.length; ++i) {
                const name = names[i];

                if (name === '') {
                  continue;
                }

                if (name === '.') {
                  continue;
                }

                if (name === '..') {
                  if (curr === pseudo) {
                    return pseudo;
                  }

                  curr = g.getParent(curr);
                  continue;
                }

                curr = g.locateChild(curr, name);

                if (curr === pseudo) {
                  return pseudo;
                }
              }

              return curr;
            }

            class NoTermination {
              terminate(v, g) {
                return false;
              }

            }

            function getDefaultStartingVertex(g) {
              const iter = g.vertices();
              const v = iter.next();

              if (v.done) {
                return g.nullVertex();
              } else {
                return v.value;
              }
            }

            let GraphColor;

            (function (GraphColor) {
              GraphColor[GraphColor["WHITE"] = 0] = "WHITE";
              GraphColor[GraphColor["GRAY"] = 1] = "GRAY";
              GraphColor[GraphColor["GREEN"] = 2] = "GREEN";
              GraphColor[GraphColor["RED"] = 3] = "RED";
              GraphColor[GraphColor["BLACK"] = 4] = "BLACK";
            })(GraphColor || (GraphColor = {}));

            class VertexInfo {
              constructor(v, e, iter) {
                this.v = void 0;
                this.e = void 0;
                this.iter = void 0;
                this.v = v;
                this.e = e;
                this.iter = iter;
              }

            }

            function depthFirstVisitImpl(g, u, visitor, color, func) {
              let srcE = null;
              let ei = null;
              const stack = new Array();
              color.put(u, GraphColor.GRAY);
              visitor.discoverVertex(u, g);
              ei = g.outEdges(u);

              if (func.terminate(u, g)) {
                stack.push(new VertexInfo(u, null, null));
              } else {
                stack.push(new VertexInfo(u, null, ei));
              }

              while (stack.length) {
                const back = stack.pop();
                u = back.v;
                srcE = back.e;
                ei = back.iter;

                if (srcE !== null) {
                  visitor.finishEdge(srcE, g);
                }

                if (ei) {
                  for (let ev = ei.next(); !ev.done; ev = ei.next()) {
                    const e = ev.value;
                    const v = e.target;
                    visitor.examineEdge(e, g);
                    const vColor = color.get(v);

                    if (vColor === GraphColor.WHITE) {
                      visitor.treeEdge(e, g);
                      srcE = e;
                      stack.push(new VertexInfo(u, srcE, ei));
                      u = v;
                      color.put(u, GraphColor.GRAY);
                      visitor.discoverVertex(u, g);
                      ei = g.outEdges(u);

                      if (func.terminate(u, g)) {
                        break;
                      }
                    } else {
                      if (vColor === GraphColor.GRAY) {
                        visitor.backEdge(e, g);
                      } else {
                        visitor.forwardOrCrossEdge(e, g);
                      }

                      visitor.finishEdge(e, g);
                    }
                  }
                }

                color.put(u, GraphColor.BLACK);
                visitor.finishVertex(u, g);
              }
            }

            function depthFirstSearch(g, visitor, color, startVertex = null) {
              startVertex = startVertex || getDefaultStartingVertex(g);

              if (startVertex === null || g.numVertices() === 0) {
                return;
              }

              for (const u of g.vertices()) {
                color.put(u, GraphColor.WHITE);
                visitor.initializeVertex(u, g);
              }

              const terminator = new NoTermination();

              if (startVertex !== getDefaultStartingVertex(g)) {
                visitor.startVertex(startVertex, g);
                depthFirstVisitImpl(g, startVertex, visitor, color, terminator);
              }

              for (const u of g.vertices()) {
                if (color.get(u) === GraphColor.WHITE) {
                  visitor.startVertex(u, g);
                  depthFirstVisitImpl(g, u, visitor, color, terminator);
                }
              }
            }
            class DefaultVisitor {
              initializeVertex(v, g) {}

              startVertex(v, g) {}

              discoverVertex(v, g) {}

              examineEdge(e, g) {}

              treeEdge(e, g) {}

              backEdge(e, g) {}

              forwardOrCrossEdge(e, g) {}

              finishEdge(e, g) {}

              finishVertex(v, g) {}

            }

            const UpdateFrequency = {
              PER_INSTANCE: 0,
              PER_BATCH: 1,
              PER_QUEUE: 2,
              PER_PASS: 3,
              COUNT: 4
            };
            const ParameterType = {
              CONSTANTS: 0,
              CBV: 1,
              UAV: 2,
              SRV: 3,
              TABLE: 4,
              SSV: 5
            };
            const ResourceResidency = exports('dg', {
              MANAGED: 0,
              MEMORYLESS: 1,
              PERSISTENT: 2,
              EXTERNAL: 3,
              BACKBUFFER: 4
            });
            const QueueHint = exports('dk', {
              NONE: 0,
              RENDER_OPAQUE: 1,
              RENDER_CUTOUT: 2,
              RENDER_TRANSPARENT: 3
            });
            const SceneFlags = exports('dm', {
              NONE: 0,
              OPAQUE_OBJECT: 1,
              CUTOUT_OBJECT: 2,
              TRANSPARENT_OBJECT: 4,
              SHADOW_CASTER: 8,
              UI: 16,
              DEFAULT_LIGHTING: 32,
              VOLUMETRIC_LIGHTING: 64,
              CLUSTERED_LIGHTING: 128,
              PLANAR_SHADOW: 256,
              GEOMETRY: 512,
              PROFILER: 1024,
              ALL: 4294967295
            });
            const AttachmentType = exports('dj', {
              RENDER_TARGET: 0,
              DEPTH_STENCIL: 1
            });
            const AccessType = exports('di', {
              READ: 0,
              READ_WRITE: 1,
              WRITE: 2
            });
            class RasterView {
              constructor(slotName = '', accessType = AccessType.WRITE, attachmentType = AttachmentType.RENDER_TARGET, loadOp = LoadOp.LOAD, storeOp = StoreOp.STORE, clearFlags = ClearFlagBit.ALL, clearColor = new Color$1()) {
                this.slotName = void 0;
                this.accessType = void 0;
                this.attachmentType = void 0;
                this.loadOp = void 0;
                this.storeOp = void 0;
                this.clearFlags = void 0;
                this.clearColor = void 0;
                this.slotName = slotName;
                this.accessType = accessType;
                this.attachmentType = attachmentType;
                this.loadOp = loadOp;
                this.storeOp = storeOp;
                this.clearFlags = clearFlags;
                this.clearColor = clearColor;
              }

            } exports('dh', RasterView);
            const ClearValueType = {
              FLOAT_TYPE: 0,
              INT_TYPE: 1
            };
            class ComputeView {
              constructor() {
                this.name = '';
                this.accessType = AccessType.READ;
                this.clearFlags = ClearFlagBit.NONE;
                this.clearColor = new Color$1();
                this.clearValueType = ClearValueType.FLOAT_TYPE;
              }

            } exports('dn', ComputeView);
            class LightInfo {
              constructor(light = null, level = 0) {
                this.light = void 0;
                this.level = void 0;
                this.light = light;
                this.level = level;
              }

            } exports('dl', LightInfo);

            const DescriptorTypeOrder = {
              UNIFORM_BUFFER: 0,
              DYNAMIC_UNIFORM_BUFFER: 1,
              SAMPLER_TEXTURE: 2,
              SAMPLER: 3,
              TEXTURE: 4,
              STORAGE_BUFFER: 5,
              DYNAMIC_STORAGE_BUFFER: 6,
              STORAGE_IMAGE: 7,
              INPUT_ATTACHMENT: 8
            };
            class Descriptor {
              constructor(type = Type.UNKNOWN) {
                this.type = void 0;
                this.count = 1;
                this.type = type;
              }

            }
            class DescriptorBlock {
              constructor() {
                this.descriptors = new Map();
                this.uniformBlocks = new Map();
                this.capacity = 0;
                this.count = 0;
              }

            }
            class DescriptorBlockFlattened {
              constructor() {
                this.descriptorNames = [];
                this.uniformBlockNames = [];
                this.descriptors = [];
                this.uniformBlocks = [];
                this.capacity = 0;
                this.count = 0;
              }

            }
            class DescriptorBlockIndex {
              constructor(updateFrequency = UpdateFrequency.PER_INSTANCE, parameterType = ParameterType.CONSTANTS, descriptorType = DescriptorTypeOrder.UNIFORM_BUFFER, visibility = ShaderStageFlagBit.NONE) {
                this.updateFrequency = void 0;
                this.parameterType = void 0;
                this.descriptorType = void 0;
                this.visibility = void 0;
                this.updateFrequency = updateFrequency;
                this.parameterType = parameterType;
                this.descriptorType = descriptorType;
                this.visibility = visibility;
              }

            }
            class DescriptorDB {
              constructor() {
                this.blocks = new Map();
              }

            }
            class RenderPhase {
              constructor() {
                this.shaders = new Set();
              }

            }
            const LayoutGraphValue = {
              RenderStage: 0,
              RenderPhase: 1
            };
            class LayoutGraphVertex {
              constructor(id, object) {
                this._outEdges = [];
                this._inEdges = [];
                this._id = void 0;
                this._object = void 0;
                this.id = id;
                this.object = object;
                this._id = id;
                this._object = object;
              }

            }
            class LayoutGraphNameMap {
              constructor(names) {
                this._names = void 0;
                this.names = names;
                this._names = names;
              }

              get(v) {
                return this._names[v];
              }

            }
            class LayoutGraphDescriptorsMap {
              constructor(descriptors) {
                this._descriptors = void 0;
                this.descriptors = descriptors;
                this._descriptors = descriptors;
              }

              get(v) {
                return this._descriptors[v];
              }

            }
            const LayoutGraphComponent = {
              Name: 0,
              Descriptors: 1
            };
            class LayoutGraph {
              constructor() {
                this.directed_category = directional.bidirectional;
                this.edge_parallel_category = parallel.allow;
                this.traversal_category = traversal.incidence | traversal.bidirectional | traversal.adjacency | traversal.vertex_list;
                this.components = ['Name', 'Descriptors'];
                this._vertices = [];
                this._names = [];
                this._descriptors = [];
              }

              nullVertex() {
                return 0xFFFFFFFF;
              }

              edge(u, v) {
                for (const oe of this._vertices[u]._outEdges) {
                  if (v === oe.target) {
                    return true;
                  }
                }

                return false;
              }

              source(e) {
                return e.source;
              }

              target(e) {
                return e.target;
              }

              outEdges(v) {
                return new OutEI(this._vertices[v]._outEdges.values(), v);
              }

              outDegree(v) {
                return this._vertices[v]._outEdges.length;
              }

              inEdges(v) {
                return new InEI(this._vertices[v]._inEdges.values(), v);
              }

              inDegree(v) {
                return this._vertices[v]._inEdges.length;
              }

              degree(v) {
                return this.outDegree(v) + this.inDegree(v);
              }

              adjacentVertices(v) {
                return new AdjI(this, this.outEdges(v));
              }

              vertices() {
                return this._vertices.keys();
              }

              numVertices() {
                return this._vertices.length;
              }

              clear() {
                this._names.length = 0;
                this._descriptors.length = 0;
                this._vertices.length = 0;
              }

              addVertex(id, object, name, descriptors, u = 0xFFFFFFFF) {
                const vert = new LayoutGraphVertex(id, object);
                const v = this._vertices.length;

                this._vertices.push(vert);

                this._names.push(name);

                this._descriptors.push(descriptors);

                if (u !== 0xFFFFFFFF) {
                  this.addEdge(u, v);
                }

                return v;
              }

              clearVertex(v) {
                const vert = this._vertices[v];

                for (const oe of vert._outEdges) {
                  const target = this._vertices[oe.target];

                  for (let i = 0; i !== target._inEdges.length;) {
                    if (target._inEdges[i].target === v) {
                      target._inEdges.splice(i, 1);
                    } else {
                      ++i;
                    }
                  }
                }

                vert._outEdges.length = 0;

                for (const ie of vert._inEdges) {
                  const source = this._vertices[ie.target];

                  for (let i = 0; i !== source._outEdges.length;) {
                    if (source._outEdges[i].target === v) {
                      source._outEdges.splice(i, 1);
                    } else {
                      ++i;
                    }
                  }
                }

                vert._inEdges.length = 0;
              }

              removeVertex(u) {
                this._vertices.splice(u, 1);

                this._names.splice(u, 1);

                this._descriptors.splice(u, 1);

                const sz = this._vertices.length;

                if (u === sz) {
                  return;
                }

                for (let v = 0; v !== sz; ++v) {
                  const vert = this._vertices[v];
                  reindexEdgeList(vert._outEdges, u);
                  reindexEdgeList(vert._inEdges, u);
                }
              }

              addEdge(u, v) {
                this._vertices[u]._outEdges.push(new OutE(v));

                this._vertices[v]._inEdges.push(new OutE(u));

                return new ED(u, v);
              }

              removeEdges(u, v) {
                const source = this._vertices[u];

                for (let i = 0; i !== source._outEdges.length;) {
                  if (source._outEdges[i].target === v) {
                    source._outEdges.splice(i, 1);
                  } else {
                    ++i;
                  }
                }

                const target = this._vertices[v];

                for (let i = 0; i !== target._inEdges.length;) {
                  if (target._inEdges[i].target === u) {
                    target._inEdges.splice(i, 1);
                  } else {
                    ++i;
                  }
                }
              }

              removeEdge(e) {
                const u = e.source;
                const v = e.target;
                const source = this._vertices[u];

                for (let i = 0; i !== source._outEdges.length;) {
                  if (source._outEdges[i].target === v) {
                    source._outEdges.splice(i, 1);

                    break;
                  } else {
                    ++i;
                  }
                }

                const target = this._vertices[v];

                for (let i = 0; i !== target._inEdges.length;) {
                  if (target._inEdges[i].target === u) {
                    target._inEdges.splice(i, 1);

                    break;
                  } else {
                    ++i;
                  }
                }
              }

              vertexName(v) {
                return this._names[v];
              }

              vertexNameMap() {
                return new LayoutGraphNameMap(this._names);
              }

              get(tag) {
                switch (tag) {
                  case 'Name':
                    return new LayoutGraphNameMap(this._names);

                  case 'Descriptors':
                    return new LayoutGraphDescriptorsMap(this._descriptors);

                  default:
                    throw Error('property map not found');
                }
              }

              component(id, v) {
                switch (id) {
                  case LayoutGraphComponent.Name:
                    return this._names[v];

                  case LayoutGraphComponent.Descriptors:
                    return this._descriptors[v];

                  default:
                    throw Error('component not found');
                }
              }

              componentMap(id) {
                switch (id) {
                  case LayoutGraphComponent.Name:
                    return new LayoutGraphNameMap(this._names);

                  case LayoutGraphComponent.Descriptors:
                    return new LayoutGraphDescriptorsMap(this._descriptors);

                  default:
                    throw Error('component map not found');
                }
              }

              getName(v) {
                return this._names[v];
              }

              getDescriptors(v) {
                return this._descriptors[v];
              }

              holds(id, v) {
                return this._vertices[v]._id === id;
              }

              id(v) {
                return this._vertices[v]._id;
              }

              object(v) {
                return this._vertices[v]._object;
              }

              value(id, v) {
                if (this._vertices[v]._id === id) {
                  return this._vertices[v]._object;
                } else {
                  throw Error('value id not match');
                }
              }

              tryValue(id, v) {
                if (this._vertices[v]._id === id) {
                  return this._vertices[v]._object;
                } else {
                  return null;
                }
              }

              visitVertex(visitor, v) {
                const vert = this._vertices[v];

                switch (vert._id) {
                  case LayoutGraphValue.RenderStage:
                    return visitor.renderStage(vert._object);

                  case LayoutGraphValue.RenderPhase:
                    return visitor.renderPhase(vert._object);

                  default:
                    throw Error('polymorphic type not found');
                }
              }

              getRenderStage(v) {
                if (this._vertices[v]._id === LayoutGraphValue.RenderStage) {
                  return this._vertices[v]._object;
                } else {
                  throw Error('value id not match');
                }
              }

              getRenderPhase(v) {
                if (this._vertices[v]._id === LayoutGraphValue.RenderPhase) {
                  return this._vertices[v]._object;
                } else {
                  throw Error('value id not match');
                }
              }

              tryGetRenderStage(v) {
                if (this._vertices[v]._id === LayoutGraphValue.RenderStage) {
                  return this._vertices[v]._object;
                } else {
                  return null;
                }
              }

              tryGetRenderPhase(v) {
                if (this._vertices[v]._id === LayoutGraphValue.RenderPhase) {
                  return this._vertices[v]._object;
                } else {
                  return null;
                }
              }

              reference(u, v) {
                for (const oe of this._vertices[u]._outEdges) {
                  if (v === oe.target) {
                    return true;
                  }
                }

                return false;
              }

              parent(e) {
                return e.source;
              }

              child(e) {
                return e.target;
              }

              parents(v) {
                return new InEI(this._vertices[v]._inEdges.values(), v);
              }

              children(v) {
                return new OutEI(this._vertices[v]._outEdges.values(), v);
              }

              numParents(v) {
                return this._vertices[v]._inEdges.length;
              }

              numChildren(v) {
                return this._vertices[v]._outEdges.length;
              }

              getParent(v) {
                if (v === 0xFFFFFFFF) {
                  return 0xFFFFFFFF;
                }

                const list = this._vertices[v]._inEdges;

                if (list.length === 0) {
                  return 0xFFFFFFFF;
                } else {
                  return list[0].target;
                }
              }

              isAncestor(ancestor, descendent) {
                const pseudo = 0xFFFFFFFF;

                if (ancestor === descendent) {
                  return false;
                }

                if (ancestor === pseudo) {
                  return true;
                }

                if (descendent === pseudo) {
                  return false;
                }

                for (let parent = this.getParent(descendent); parent !== pseudo;) {
                  if (ancestor === parent) {
                    return true;
                  }

                  parent = this.getParent(parent);
                }

                return false;
              }

              addReference(u, v) {
                return this.addEdge(u, v);
              }

              removeReference(e) {
                return this.removeEdge(e);
              }

              removeReferences(u, v) {
                return this.removeEdges(u, v);
              }

              locateChild(u, name) {
                if (u === 0xFFFFFFFF) {
                  for (const v of this._vertices.keys()) {
                    const vert = this._vertices[v];

                    if (vert._inEdges.length === 0 && this._names[v] === name) {
                      return v;
                    }
                  }

                  return 0xFFFFFFFF;
                }

                for (const oe of this._vertices[u]._outEdges) {
                  const child = oe.target;

                  if (name === this._names[child]) {
                    return child;
                  }
                }

                return 0xFFFFFFFF;
              }

              addressable(absPath) {
                return findRelative(this, 0xFFFFFFFF, absPath) !== 0xFFFFFFFF;
              }

              locate(absPath) {
                return findRelative(this, 0xFFFFFFFF, absPath);
              }

              locateRelative(path, start = 0xFFFFFFFF) {
                return findRelative(this, start, path);
              }

              path(v) {
                return getPath(this, v);
              }

            }

            class WebDescriptorHierarchy {
              constructor() {
                this.uniformBlockIndex = void 0;
                this.blockMerged = void 0;
                this.dbsToMerge = void 0;
                this._layoutGraph = void 0;
                this._layoutGraph = new LayoutGraph();
                this.uniformBlockIndex = new Map();
                this.blockMerged = new Map();
                this.dbsToMerge = new Map();
              }

              getLayoutBlock(freq, paraType, descType, vis, descriptorDB) {
                const blockIndex = new DescriptorBlockIndex(freq, paraType, descType, vis);
                const key = JSON.stringify(blockIndex);

                if (descriptorDB.blocks.get(key) === undefined) {
                  const uniformBlock = new DescriptorBlock();
                  descriptorDB.blocks.set(key, uniformBlock);
                  this.uniformBlockIndex.set(uniformBlock, blockIndex);
                }

                return descriptorDB.blocks.get(key);
              }

              getLayoutBlockByKey(key, descriptorDB) {
                if (descriptorDB.blocks.get(key) === undefined) {
                  const uniformBlock = new DescriptorBlock();
                  descriptorDB.blocks.set(key, uniformBlock);
                  const blockIndedx = JSON.parse(key);
                  this.uniformBlockIndex.set(uniformBlock, blockIndedx);
                }

                return descriptorDB.blocks.get(key);
              }

              getUniformBlock(set, binding, blockName, targetBlock) {
                if (targetBlock.uniformBlocks.get(blockName) === undefined) {
                  const uniformDB = new UniformBlock(set, binding, blockName, [], 1);
                  targetBlock.uniformBlocks.set(blockName, uniformDB);
                }

                return targetBlock.uniformBlocks.get(blockName);
              }

              setUniform(uniformDB, name, type, count) {
                const uniform = new Uniform(name, type, count);
                uniformDB.members.push(uniform);
              }

              setDescriptor(targetBlock, name, type) {
                const descriptor = new Descriptor(type);
                targetBlock.descriptors.set(name, descriptor);
              }

              merge(descriptorDB) {
                for (const entry of descriptorDB.blocks) {
                  const block = entry[1];
                  const typeMap = new Map();

                  for (const ee of block.descriptors) {
                    const descriptor = ee[1];
                    const type = descriptor.type;

                    if (typeMap.get(type) === undefined) {
                      typeMap.set(type, 1);
                    } else {
                      const before = typeMap.get(type);
                      typeMap.set(type, before + 1);
                    }

                    block.capacity++;
                  }

                  for (const ii of typeMap) {
                    const type = ii[0];
                    const count = ii[1];

                    if (count > 0) {
                      var _this$blockMerged$get;

                      const mergedDescriptor = new Descriptor(type);
                      mergedDescriptor.count = count;
                      let merged;

                      if (this.blockMerged.get(block) === undefined) {
                        merged = new Map();
                        this.blockMerged.set(block, merged);
                      }

                      (_this$blockMerged$get = this.blockMerged.get(block)) === null || _this$blockMerged$get === void 0 ? void 0 : _this$blockMerged$get.set(type, mergedDescriptor);
                    }
                  }
                }
              }

              mergeDBs(descriptorDBs, target) {
                for (let i = 0; i < descriptorDBs.length; ++i) {
                  const db = descriptorDBs[i];

                  for (const e of db.blocks) {
                    const key = e[0];
                    const block = e[1];
                    let merged;

                    if (this.blockMerged.get(block) === undefined) {
                      merged = new Map();
                      this.blockMerged.set(block, merged);
                    } else {
                      merged = this.blockMerged.get(block);
                    }

                    if (merged.size > 0) {
                      const targetBlock = this.getLayoutBlockByKey(key, target);
                      let targetMerged;

                      if (this.blockMerged.get(targetBlock) === undefined) {
                        targetMerged = new Map();
                        this.blockMerged.set(targetBlock, targetMerged);
                      } else {
                        targetMerged = this.blockMerged.get(targetBlock);
                      }

                      for (const ee of merged) {
                        const type = ee[0];
                        const descriptor = ee[1];

                        if (!targetMerged.has(type)) {
                          const ds = new Descriptor(descriptor.type);
                          ds.count = descriptor.count;
                          targetMerged.set(type, ds);
                        } else {
                          const ds = targetMerged.get(type);

                          if (ds !== undefined) {
                            ds.count = ds.count > descriptor.count ? ds.count : descriptor.count;
                          }
                        }
                      }

                      targetBlock.capacity = block.capacity > targetBlock.capacity ? block.capacity : targetBlock.capacity;
                    }
                  }
                }
              }

              sort(descriptorDB) {
                const sortedMap = new Map(Array.from(descriptorDB.blocks).sort((a, b) => String(a[0]).localeCompare(b[0])));
                descriptorDB.blocks.clear();

                for (const e of sortedMap) {
                  descriptorDB.blocks.set(e[0], e[1]);
                }
              }

              addEffect(asset, parent) {
                const sz = asset.shaders.length;

                for (let i = 0; i !== sz; ++i) {
                  var _this$dbsToMerge$get;

                  const shader = asset.shaders[i];
                  const queueDB = new DescriptorDB();

                  for (let k = 0; k < shader.blocks.length; ++k) {
                    const blockInfo = shader.blocks[k];
                    const targetBlock = this.getLayoutBlock(UpdateFrequency.PER_INSTANCE, ParameterType.TABLE, DescriptorTypeOrder.UNIFORM_BUFFER, blockInfo.stageFlags, queueDB);
                    const uniformDB = this.getUniformBlock(SetIndex.MATERIAL, blockInfo.binding, blockInfo.name, targetBlock);

                    for (let kk = 0; kk < blockInfo.members.length; ++kk) {
                      const uniform = blockInfo.members[kk];
                      uniformDB.members.push(uniform);
                    }
                  }

                  for (let k = 0; k < shader.buffers.length; ++k) {
                    const bufferInfo = shader.buffers[k];
                    const targetBlock = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.STORAGE_BUFFER, bufferInfo.stageFlags, queueDB);
                    this.setDescriptor(targetBlock, bufferInfo.name, Type.UNKNOWN);
                  }

                  for (let k = 0; k < shader.images.length; ++k) {
                    const imageInfo = shader.images[k];
                    const targetBlock = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.STORAGE_IMAGE, imageInfo.stageFlags, queueDB);
                    this.setDescriptor(targetBlock, imageInfo.name, imageInfo.type);
                  }

                  for (let k = 0; k < shader.samplerTextures.length; ++k) {
                    const samplerTexInfo = shader.samplerTextures[k];
                    const targetBlock = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.SAMPLER_TEXTURE, samplerTexInfo.stageFlags, queueDB);
                    this.setDescriptor(targetBlock, samplerTexInfo.name, samplerTexInfo.type);
                  }

                  for (let k = 0; k < shader.samplers.length; ++k) {
                    const samplerInfo = shader.samplers[k];
                    const targetBlock = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.SAMPLER, samplerInfo.stageFlags, queueDB);
                    this.setDescriptor(targetBlock, samplerInfo.name, Type.SAMPLER);
                  }

                  for (let k = 0; k < shader.textures.length; ++k) {
                    const texInfo = shader.textures[k];
                    const targetBlock = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.TEXTURE, texInfo.stageFlags, queueDB);
                    this.setDescriptor(targetBlock, texInfo.name, texInfo.type);
                  }

                  for (let k = 0; k < shader.subpassInputs.length; ++k) {
                    const subpassInfo = shader.subpassInputs[k];
                    const targetBlock = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.INPUT_ATTACHMENT, subpassInfo.stageFlags, queueDB);
                    this.setDescriptor(targetBlock, subpassInfo.name, Type.SUBPASS_INPUT);
                  }

                  const localUniformTarget = this.getLayoutBlock(UpdateFrequency.PER_INSTANCE, ParameterType.TABLE, DescriptorTypeOrder.UNIFORM_BUFFER, ShaderStageFlagBit.VERTEX, queueDB);
                  const localLightTarget = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.DYNAMIC_UNIFORM_BUFFER, ShaderStageFlagBit.FRAGMENT, queueDB);
                  const localUITarget = this.getLayoutBlock(UpdateFrequency.PER_INSTANCE, ParameterType.TABLE, DescriptorTypeOrder.DYNAMIC_UNIFORM_BUFFER, ShaderStageFlagBit.VERTEX, queueDB);
                  const localModelTarget = this.getLayoutBlock(UpdateFrequency.PER_INSTANCE, ParameterType.TABLE, DescriptorTypeOrder.UNIFORM_BUFFER, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE, queueDB);
                  const localSamplerVertTarget = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.SAMPLER_TEXTURE, ShaderStageFlagBit.VERTEX, queueDB);
                  const localSamplerFragTarget = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.SAMPLER_TEXTURE, ShaderStageFlagBit.FRAGMENT, queueDB);
                  const localSamplerCompTarget = this.getLayoutBlock(UpdateFrequency.PER_BATCH, ParameterType.TABLE, DescriptorTypeOrder.SAMPLER_TEXTURE, ShaderStageFlagBit.COMPUTE, queueDB);

                  for (let k = 0; k < shader.builtins.locals.blocks.length; ++k) {
                    const blockName = shader.builtins.locals.blocks[k].name;

                    if (blockName === 'CCMorph') {
                      const morphDB = this.getUniformBlock(SetIndex.LOCAL, UBOMorph.BINDING, 'CCMorph', localUniformTarget);
                      this.setUniform(morphDB, 'cc_displacementWeights', Type.FLOAT4, UBOMorph.MAX_MORPH_TARGET_COUNT / 4);
                      this.setUniform(morphDB, 'cc_displacementTextureInfo', Type.FLOAT4, 1);
                    } else if (blockName === 'CCSkinningTexture') {
                      const skinningTexDB = this.getUniformBlock(SetIndex.LOCAL, UBOSkinningTexture.BINDING, 'CCSkinningTexture', localUniformTarget);
                      this.setUniform(skinningTexDB, 'cc_jointTextureInfo', Type.FLOAT4, 1);
                    } else if (blockName === 'CCSkinningAnimation') {
                      const skinningAnimDB = this.getUniformBlock(SetIndex.LOCAL, UBOSkinningAnimation.BINDING, 'CCSkinningAnimation', localUniformTarget);
                      this.setUniform(skinningAnimDB, 'cc_jointAnimInfo', Type.FLOAT4, 1);
                    } else if (blockName === 'CCSkinning') {
                      const skinningDB = this.getUniformBlock(SetIndex.LOCAL, UBOSkinning.BINDING, 'CCSkinning', localUniformTarget);
                      this.setUniform(skinningDB, 'cc_joints', Type.FLOAT4, JOINT_UNIFORM_CAPACITY * 3);
                    } else if (blockName === 'CCUILocal') {
                      const uiDB = this.getUniformBlock(SetIndex.LOCAL, UBOUILocal.BINDING, 'CCUILocal', localUITarget);
                      this.setUniform(uiDB, 'cc_local_data', Type.FLOAT4, 1);
                    } else if (blockName === 'CCForwardLight') {
                      const lightDB = this.getUniformBlock(SetIndex.LOCAL, UBOForwardLight.BINDING, 'CCForwardLight', localLightTarget);
                      this.setUniform(lightDB, 'cc_lightPos', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS);
                      this.setUniform(lightDB, 'cc_lightColor', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS);
                      this.setUniform(lightDB, 'cc_lightSizeRangeAngle', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS);
                      this.setUniform(lightDB, 'cc_lightDir', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS);
                    } else if (blockName === 'CCLocal') {
                      const localDB = this.getUniformBlock(SetIndex.LOCAL, UBOLocal.BINDING, 'CCLocal', localModelTarget);
                      this.setUniform(localDB, 'cc_matWorld', Type.MAT4, 1);
                      this.setUniform(localDB, 'cc_matWorldIT', Type.MAT4, 1);
                      this.setUniform(localDB, 'cc_lightingMapUVParam', Type.FLOAT4, 1);
                    } else if (blockName === 'CCLocalBatched') {
                      const batchDB = this.getUniformBlock(SetIndex.LOCAL, UBOLocalBatched.BINDING, 'CCLocalBatched', localModelTarget);
                      this.setUniform(batchDB, 'cc_matWorlds', Type.MAT4, UBOLocalBatched.BATCHING_COUNT);
                    } else if (blockName === 'CCWorldBound') {
                      const boundDB = this.getUniformBlock(SetIndex.LOCAL, UBOWorldBound.BINDING, 'CCWorldBound', localModelTarget);
                      this.setUniform(boundDB, 'cc_worldBoundCenter', Type.FLOAT4, 1);
                      this.setUniform(boundDB, 'cc_worldBoundHalfExtents', Type.FLOAT4, 1);
                    }
                  }

                  for (let k = 0; k < shader.builtins.locals.samplerTextures.length; ++k) {
                    const samplerName = shader.builtins.locals.samplerTextures[k].name;

                    if (samplerName === 'cc_jointTexture') {
                      this.setDescriptor(localSamplerVertTarget, 'cc_jointTexture', Type.SAMPLER2D);
                    } else if (samplerName === 'cc_PositionDisplacements') {
                      this.setDescriptor(localSamplerVertTarget, 'cc_PositionDisplacements', Type.SAMPLER2D);
                    } else if (samplerName === 'cc_NormalDisplacements') {
                      this.setDescriptor(localSamplerVertTarget, 'cc_NormalDisplacements', Type.SAMPLER2D);
                    } else if (samplerName === 'cc_TangentDisplacements') {
                      this.setDescriptor(localSamplerVertTarget, 'cc_TangentDisplacements', Type.SAMPLER2D);
                    } else if (samplerName === 'cc_lightingMap') {
                      this.setDescriptor(localSamplerFragTarget, 'cc_lightingMap', Type.SAMPLER2D);
                    } else if (samplerName === 'cc_spriteTexture') {
                      this.setDescriptor(localSamplerFragTarget, 'cc_spriteTexture', Type.SAMPLER2D);
                    } else if (samplerName === 'cc_reflectionTexture') {
                      this.setDescriptor(localSamplerFragTarget, 'cc_reflectionTexture', Type.SAMPLER2D);
                    }
                  }

                  for (let k = 0; k < shader.builtins.locals.images.length; ++k) {
                    const imgName = shader.builtins.locals.images[k].name;

                    if (imgName === 'cc_reflectionStorage') {
                      this.setDescriptor(localSamplerCompTarget, 'cc_reflectionStorage', Type.IMAGE2D);
                    }
                  }

                  const phase = new RenderPhase();
                  phase.shaders.add(shader.name);

                  this._layoutGraph.addVertex(LayoutGraphValue.RenderPhase, phase, shader.name, queueDB, parent);

                  this.merge(queueDB);
                  this.sort(queueDB);

                  const parentDB = this._layoutGraph.getDescriptors(parent);

                  if (this.dbsToMerge.get(parentDB) === undefined) {
                    this.dbsToMerge.set(parentDB, []);
                  }

                  (_this$dbsToMerge$get = this.dbsToMerge.get(parentDB)) === null || _this$dbsToMerge$get === void 0 ? void 0 : _this$dbsToMerge$get.push(queueDB);
                }
              }

              addGlobal(vName, hasCCGlobal, hasCCCamera, hasCCShadow, hasShadowmap, hasEnv, hasDiffuse, hasSpot) {
                const passDB = new DescriptorDB();
                const globalUniformTarget = this.getLayoutBlock(UpdateFrequency.PER_PASS, ParameterType.TABLE, DescriptorTypeOrder.UNIFORM_BUFFER, ShaderStageFlagBit.ALL, passDB);
                const globalSamplerTexTarget = this.getLayoutBlock(UpdateFrequency.PER_PASS, ParameterType.TABLE, DescriptorTypeOrder.SAMPLER_TEXTURE, ShaderStageFlagBit.FRAGMENT, passDB);

                if (hasCCGlobal) {
                  const globalDB = this.getUniformBlock(SetIndex.GLOBAL, UBOGlobal.BINDING, 'CCGlobal', globalUniformTarget);
                  this.setUniform(globalDB, 'cc_time', Type.FLOAT4, 1);
                  this.setUniform(globalDB, 'cc_screenSize', Type.FLOAT4, 1);
                  this.setUniform(globalDB, 'cc_nativeSize', Type.FLOAT4, 1);
                  this.setDescriptor(globalUniformTarget, 'CCGlobal', Type.UNKNOWN);
                }

                if (hasCCCamera) {
                  const cameraDB = this.getUniformBlock(SetIndex.GLOBAL, UBOCamera.BINDING, 'CCCamera', globalUniformTarget);
                  this.setUniform(cameraDB, 'cc_matView', Type.MAT4, 1);
                  this.setUniform(cameraDB, 'cc_matViewInv', Type.MAT4, 1);
                  this.setUniform(cameraDB, 'cc_matProj', Type.MAT4, 1);
                  this.setUniform(cameraDB, 'cc_matProjInv', Type.MAT4, 1);
                  this.setUniform(cameraDB, 'cc_matViewProj', Type.MAT4, 1);
                  this.setUniform(cameraDB, 'cc_matViewProjInv', Type.MAT4, 1);
                  this.setUniform(cameraDB, 'cc_cameraPos', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_surfaceTransform', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_screenScale', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_exposure', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_mainLitDir', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_mainLitColor', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_ambientSky', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_ambientGround', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_fogColor', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_fogBase', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_fogAdd', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_nearFar', Type.FLOAT4, 1);
                  this.setUniform(cameraDB, 'cc_viewPort', Type.FLOAT4, 1);
                  this.setDescriptor(globalUniformTarget, 'CCCamera', Type.UNKNOWN);
                }

                if (hasCCShadow) {
                  const shadowDB = this.getUniformBlock(SetIndex.GLOBAL, UBOShadow.BINDING, 'CCShadow', globalUniformTarget);
                  this.setUniform(shadowDB, 'cc_matLightView', Type.MAT4, 1);
                  this.setUniform(shadowDB, 'cc_matLightViewProj', Type.MAT4, 1);
                  this.setUniform(shadowDB, 'cc_shadowInvProjDepthInfo', Type.FLOAT4, 1);
                  this.setUniform(shadowDB, 'cc_shadowProjDepthInfo', Type.FLOAT4, 1);
                  this.setUniform(shadowDB, 'cc_shadowProjInfo', Type.FLOAT4, 1);
                  this.setUniform(shadowDB, 'cc_shadowNFLSInfo', Type.FLOAT4, 1);
                  this.setUniform(shadowDB, 'cc_shadowWHPBInfo', Type.FLOAT4, 1);
                  this.setUniform(shadowDB, 'cc_shadowLPNNInfo', Type.FLOAT4, 1);
                  this.setUniform(shadowDB, 'cc_shadowColor', Type.FLOAT4, 1);
                  this.setUniform(shadowDB, 'cc_planarNDInfo', Type.FLOAT4, 1);
                  this.setDescriptor(globalUniformTarget, 'CCShadow', Type.UNKNOWN);
                }

                if (hasShadowmap) {
                  this.setDescriptor(globalSamplerTexTarget, 'cc_shadowMap', Type.SAMPLER2D);
                }

                if (hasEnv) {
                  this.setDescriptor(globalSamplerTexTarget, 'cc_environment', Type.SAMPLER_CUBE);
                }

                if (hasDiffuse) {
                  this.setDescriptor(globalSamplerTexTarget, 'cc_diffuseMap', Type.SAMPLER_CUBE);
                }

                if (hasSpot) {
                  this.setDescriptor(globalSamplerTexTarget, 'cc_spotShadowMap', Type.SAMPLER2D);
                }

                this.merge(passDB);

                const vid = this._layoutGraph.addVertex(LayoutGraphValue.RenderStage, RenderPassStage.DEFAULT, vName, passDB);

                return vid;
              }

              mergeDescriptors(vid) {
                const target = this._layoutGraph.getDescriptors(vid);

                const toMerge = this.dbsToMerge.get(target);

                if (toMerge !== undefined) {
                  this.mergeDBs(toMerge, target);
                  this.sort(target);
                }
              }

              addRenderStage(name, stageID) {
                const passDB = new DescriptorDB();
                return this._layoutGraph.addVertex(LayoutGraphValue.RenderStage, stageID, name, passDB);
              }

              addRenderPhase(name, parentStageID) {
                const passDB = new DescriptorDB();
                return this._layoutGraph.addVertex(LayoutGraphValue.RenderPhase, new RenderPhase(), name, passDB, parentStageID);
              }

              get layoutGraph() {
                return this._layoutGraph;
              }

            }

            function getNumDescriptors(block) {
              let count = 0;

              for (const [, d] of block.descriptors) {
                count += d.count;
              }

              return count;
            }

            function checkDescriptorConsistency(lhs, rhs) {
              if (lhs.type !== rhs.type) {
                return false;
              }

              if (lhs.count !== rhs.count) {
                return false;
              }

              return true;
            }

            class CollectVisitor extends DefaultVisitor {
              constructor(...args) {
                super(...args);
                this._error = '';
              }

              getFrequency(g, v) {
                let freq;

                if (g.holds(LayoutGraphValue.RenderStage, v)) {
                  freq = UpdateFrequency.PER_PASS;
                } else {
                  freq = UpdateFrequency.PER_QUEUE;
                }

                return freq;
              }

              mergeDescriptors(srcBlock, dstBlock) {
                for (const [name, src] of srcBlock.descriptors) {
                  const dst = dstBlock.descriptors.get(name);

                  if (dst !== undefined) {
                    if (!checkDescriptorConsistency(src, dst)) {
                      return `Descriptor ${name} is inconsistent`;
                    }
                  } else {
                    dstBlock.descriptors.set(name, src);
                  }
                }

                return '';
              }

              mergeParent(freq, src, dst) {
                for (const [key, srcBlock] of src.blocks) {
                  let dstBlock = dst.blocks.get(key);

                  if (dstBlock === undefined) {
                    dstBlock = new DescriptorBlock();
                    dst.blocks.set(key, dstBlock);
                  }

                  const index = JSON.parse(key);

                  if (index.updateFrequency > freq) {
                    const error = this.mergeDescriptors(srcBlock, dstBlock);

                    if (error) {
                      return error;
                    }
                  }
                }

                return '';
              }

              updateInfo(freq, db) {
                db.blocks.forEach((block, key) => {
                  const index = JSON.parse(key);

                  if (index.updateFrequency >= freq) {
                    block.count = getNumDescriptors(block);
                    block.capacity = block.count;
                  }
                });
              }

              backEdge(e, g) {
                this._error = 'Cycle detected in graph';
              }

              finishEdge(e, g) {
                if (this._error !== '') {
                  return;
                }

                const parentID = g.source(e);
                const v = g.target(e);
                const dst = g.getDescriptors(parentID);
                const src = g.getDescriptors(v);
                const freq = this.getFrequency(g, v);
                this.mergeParent(freq, src, dst);
              }

              finishVertex(v, g) {
                if (this._error !== '') {
                  return;
                }

                const freq = this.getFrequency(g, v);
                const db = g.getDescriptors(v);
                this.updateInfo(freq, db);
              }

              get error() {
                return this._error;
              }

            }

            function descriptorBlock2Flattened(block, flattened) {
              block.descriptors.forEach((value, key) => {
                const name = key;
                const d = value;
                flattened.descriptorNames.push(name);
                flattened.descriptors.push(d);
              });
              block.uniformBlocks.forEach((value, key) => {
                const name = key;
                const u = value;
                flattened.uniformBlockNames.push(name);
                flattened.uniformBlocks.push(u);
              });
              flattened.count = block.count;
              flattened.capacity = block.capacity;
            }

            function buildLayoutGraphDataImpl(graph, lgData) {
              for (const v of graph.vertices()) {
                const db = graph.getDescriptors(v);
                let vid = 0;

                if (graph.id(v) === LayoutGraphValue.RenderStage) {
                  vid = lgData.addRenderStage(graph.getName(v));
                }

                if (graph.id(v) === LayoutGraphValue.RenderPhase) {
                  vid = lgData.addRenderPhase(graph.getName(v), graph.getParent(v));
                  const phase = graph.getRenderPhase(vid);

                  for (const shaderName of phase.shaders) {
                    lgData.addShader(shaderName, vid);
                  }
                }

                db.blocks.forEach((value, key) => {
                  const index = JSON.parse(key);
                  const block = value;
                  const flattened = new DescriptorBlockFlattened();
                  descriptorBlock2Flattened(block, flattened);

                  if (block.capacity > 0) {
                    lgData.addDescriptorBlock(vid, index, flattened);
                  }

                  for (let i = 0; i < flattened.uniformBlockNames.length; ++i) {
                    lgData.addUniformBlock(vid, index, flattened.uniformBlockNames[i], flattened.uniformBlocks[i]);
                  }
                });
              }
            }

            function buildForwardLayout(ppl) {
              const lg = new WebDescriptorHierarchy();

              {
                const defaultID = lg.addGlobal('default', true, true, true, true, true, true, true);
                lg.mergeDescriptors(defaultID);
              }

              const builder = ppl.layoutGraphBuilder;
              builder.clear();
              buildLayoutGraphDataImpl(lg.layoutGraph, builder);
            }
            var DeferredStage;

            (function (DeferredStage) {
              DeferredStage[DeferredStage["GEOMETRY"] = 0] = "GEOMETRY";
              DeferredStage[DeferredStage["LIGHTING"] = 1] = "LIGHTING";
              DeferredStage[DeferredStage["POST"] = 2] = "POST";
            })(DeferredStage || (DeferredStage = {}));

            class VectorGraphColorMap {
              constructor(sz) {
                this.colors = void 0;
                this.colors = new Array(sz);
              }

              get(u) {
                return this.colors[u];
              }

              put(u, value) {
                this.colors[u] = value;
              }

            }
            function buildDeferredLayout(ppl) {
              const lg = new WebDescriptorHierarchy();
              const defaultID = lg.addGlobal('default', true, true, true, true, true, true, true);
              lg.mergeDescriptors(defaultID);
              const geometryPassID = lg.addRenderStage('Geometry', DeferredStage.GEOMETRY);
              const lightingPassID = lg.addRenderStage('Lighting', DeferredStage.LIGHTING);
              const postPassID = lg.addRenderStage('Postprocess', DeferredStage.POST);
              const geometryQueueID = lg.addRenderPhase('Queue', geometryPassID);
              const lightingQueueID = lg.addRenderPhase('Queue', lightingPassID);
              const postQueueID = lg.addRenderPhase('Queue', postPassID);
              const lightingDescriptors = lg.layoutGraph.getDescriptors(lightingQueueID);
              const lightingPassBlock = lg.getLayoutBlock(UpdateFrequency.PER_PASS, ParameterType.TABLE, DescriptorTypeOrder.SAMPLER_TEXTURE, ShaderStageFlagBit.FRAGMENT, lightingDescriptors);
              lg.setDescriptor(lightingPassBlock, 'gbuffer_albedoMap', Type.FLOAT4);
              lg.setDescriptor(lightingPassBlock, 'gbuffer_normalMap', Type.FLOAT4);
              lg.setDescriptor(lightingPassBlock, 'gbuffer_emissiveMap', Type.FLOAT4);
              lg.setDescriptor(lightingPassBlock, 'depth_stencil', Type.FLOAT4);
              const visitor = new CollectVisitor();
              const colorMap = new VectorGraphColorMap(lg.layoutGraph.numVertices());
              depthFirstSearch(lg.layoutGraph, visitor, colorMap);
              lg.mergeDescriptors(lightingPassID);
              const postDescriptors = lg.layoutGraph.getDescriptors(postPassID);
              const postPassBlock = lg.getLayoutBlock(UpdateFrequency.PER_PASS, ParameterType.TABLE, DescriptorTypeOrder.SAMPLER_TEXTURE, ShaderStageFlagBit.FRAGMENT, postDescriptors);
              lg.setDescriptor(postPassBlock, 'outputResultMap', Type.FLOAT4);
              lg.merge(postDescriptors);
              lg.mergeDescriptors(postPassID);

              if (visitor.error) {
                console.log(visitor.error);
              }

              const builder = ppl.layoutGraphBuilder;
              builder.clear();
              buildLayoutGraphDataImpl(lg.layoutGraph, builder);
            }

            const Root = exports('cP', jsb.Root);
            var LightType$1;

            (function (LightType) {
              LightType[LightType["DIRECTIONAL"] = 0] = "DIRECTIONAL";
              LightType[LightType["SPHERE"] = 1] = "SPHERE";
              LightType[LightType["SPOT"] = 2] = "SPOT";
              LightType[LightType["UNKNOWN"] = 3] = "UNKNOWN";
            })(LightType$1 || (LightType$1 = {}));

            const rootProto = Root.prototype;

            rootProto._createBatcher2D = function () {
              if (!this._batcher && legacyCC.internal.Batcher2D) {
                this._batcher = new legacyCC.internal.Batcher2D(this);

                if (!this._batcher.initialize()) {
                  this._batcher = null;
                  this.destroy();
                  return;
                }

                this._batcher._nativeObj = this.getBatcher2D();
              }
            };

            Object.defineProperty(rootProto, 'batcher2D', {
              configurable: true,
              enumerable: true,

              get() {
                return this._batcher;
              }

            });
            Object.defineProperty(rootProto, 'dataPoolManager', {
              configurable: true,
              enumerable: true,

              get() {
                return this._dataPoolMgr;
              }

            });
            Object.defineProperty(rootProto, 'pipelineEvent', {
              configurable: true,
              enumerable: true,

              get() {
                return this._pipelineEvent;
              }

            });
            Object.defineProperty(rootProto, 'debugView', {
              configurable: true,
              enumerable: true,

              get() {
                return this._debugView;
              }

            });

            class DummyPipelineEvent {
              on(type, callback, target, once) {}

              once(type, callback, target) {}

              off(type, callback, target) {}

              emit(type, arg0, arg1, arg2, arg3, arg4) {}

              targetOff(typeOrTarget) {}

              removeAll(typeOrTarget) {}

              hasEventListener(type, callback, target) {
                return false;
              }

            }

            rootProto._ctor = function (device) {
              this._device = device;
              this._dataPoolMgr = legacyCC.internal.DataPoolManager && new legacyCC.internal.DataPoolManager(device);
              this._modelPools = new Map();
              this._lightPools = new Map();
              this._batcher = null;
              this._pipelineEvent = new DummyPipelineEvent();
              this._debugView = new DebugView();
              this.setDebugViewConfig(this._debugView._nativeConfig);

              this._registerListeners();
            };

            rootProto.initialize = function (info) {
              this._initialize(deviceManager.swapchain);
            };

            rootProto.createModel = function (ModelCtor) {
              let p = this._modelPools.get(ModelCtor);

              if (!p) {
                this._modelPools.set(ModelCtor, new Pool$1(() => new ModelCtor(), 10, obj => obj.destroy()));

                p = this._modelPools.get(ModelCtor);
              }

              const model = p.alloc();
              model.initialize();
              return model;
            };

            rootProto.removeModel = function (m) {
              const p = this._modelPools.get(m.constructor);

              if (p) {
                p.free(m);
                m.destroy();

                if (m.scene) {
                  m.scene.removeModel(m);
                }
              } else {
                warnID(1300, m.constructor.name);
              }
            };

            rootProto.createLight = function (LightCtor) {
              let l = this._lightPools.get(LightCtor);

              if (!l) {
                this._lightPools.set(LightCtor, new Pool$1(() => new LightCtor(), 4, obj => obj.destroy()));

                l = this._lightPools.get(LightCtor);
              }

              const light = l.alloc();
              light.initialize();
              return light;
            };

            rootProto.destroyLight = function (l) {
              if (l.scene) {
                switch (l.type) {
                  case LightType$1.DIRECTIONAL:
                    l.scene.removeDirectionalLight(l);
                    break;

                  case LightType$1.SPHERE:
                    l.scene.removeSphereLight(l);
                    break;

                  case LightType$1.SPOT:
                    l.scene.removeSpotLight(l);
                    break;
                }
              }

              l.destroy();
            };

            rootProto.recycleLight = function (l) {
              const p = this._lightPools.get(l.constructor);

              if (p) {
                p.free(l);

                if (l.scene) {
                  switch (l.type) {
                    case LightType$1.DIRECTIONAL:
                      l.scene.removeDirectionalLight(l);
                      break;

                    case LightType$1.SPHERE:
                      l.scene.removeSphereLight(l);
                      break;

                    case LightType$1.SPOT:
                      l.scene.removeSpotLight(l);
                      break;
                  }
                }
              }
            };

            rootProto._onDirectorBeforeCommit = function () {
              legacyCC.director.emit(legacyCC.Director.EVENT_BEFORE_COMMIT);
            };

            const oldFrameMove = rootProto.frameMove;

            rootProto.frameMove = function (deltaTime) {
              oldFrameMove.call(this, deltaTime, legacyCC.director.getTotalFrames());
            };

            const oldSetPipeline = rootProto.setRenderPipeline;

            rootProto.setRenderPipeline = function (pipeline) {
              let ppl;

              if (this.usesCustomPipeline) {
                const result = oldSetPipeline.call(this, null);
                const ppl = this.customPipeline;

                if (this.useDeferredPipeline) {
                  buildDeferredLayout(ppl);
                } else {
                  buildForwardLayout(ppl);
                }

                ppl.layoutGraphBuilder.compile();
                return result;
              } else {
                if (!pipeline) {
                  pipeline = new nr.ForwardPipeline();
                  pipeline.init();
                }

                ppl = oldSetPipeline.call(this, pipeline);
              }

              this._createBatcher2D();

              return ppl;
            };

            rootProto.addBatch = function (batch) {
              console.error('The Draw Batch class is implemented differently in the native platform and does not support this interface.');
            };

            rootProto.removeBatch = function (batch) {
              console.error('The Draw Batch class is implemented differently in the native platform and does not support this interface.');
            };

            rootProto.removeBatches = function () {
              console.error('The Draw Batch class is implemented differently in the native platform and does not support this interface.');
            };

            function findCanvas() {
              const container = document.createElement('div');
              const frame = document.documentElement;
              const canvas = window.__canvas;
              return {
                frame,
                canvas,
                container
              };
            }
            function loadJsFile(path) {
              return require(`${path}`);
            }

            class Pacer {
              constructor() {
                this._rafHandle = 0;
                this._onTick = null;
                this._targetFrameRate = 60;
                this._isPlaying = false;
                this._updateCallback = void 0;

                this._updateCallback = () => {
                  if (this._isPlaying) {
                    this._rafHandle = requestAnimationFrame(this._updateCallback);
                  }

                  if (this._onTick) {
                    this._onTick();
                  }
                };
              }

              get targetFrameRate() {
                return this._targetFrameRate;
              }

              set targetFrameRate(val) {
                if (this._targetFrameRate !== val) {
                  assertIsTrue(val > 0);
                  this._targetFrameRate = val;
                  jsb.setPreferredFramesPerSecond(this._targetFrameRate);

                  if (this._isPlaying) {
                    this.stop();
                    this.start();
                  }
                }
              }

              set onTick(val) {
                this._onTick = val;
              }

              get onTick() {
                return this._onTick;
              }

              start() {
                if (this._isPlaying) return;
                this._rafHandle = requestAnimationFrame(this._updateCallback);
                this._isPlaying = true;
              }

              stop() {
                if (!this._isPlaying) return;
                cancelAnimationFrame(this._rafHandle);
                this._rafHandle = 0;
                this._isPlaying = false;
              }

            }

            const isMatchByWord = (path, test) => {
              if (path.length > test.length) {
                const nextAscii = path.charCodeAt(test.length);
                return nextAscii === 47;
              }

              return true;
            };

            const processOptions = options => {

              let uuids = options.uuids;
              const paths = options.paths;
              const types = options.types;
              const bundles = options.deps;
              const realEntries = options.paths = Object.create(null);

              if (options.debug === false) {
                for (let i = 0, l = uuids.length; i < l; i++) {
                  uuids[i] = decodeUuid(uuids[i]);
                }

                for (const id in paths) {
                  const entry = paths[id];
                  const type = entry[1];
                  entry[1] = types[type];
                }
              } else {
                const out = Object.create(null);

                for (let i = 0, l = uuids.length; i < l; i++) {
                  const uuid = uuids[i];
                  uuids[i] = out[uuid] = decodeUuid(uuid);
                }

                uuids = out;
              }

              for (const id in paths) {
                const entry = paths[id];
                realEntries[uuids[id]] = entry;
              }

              const scenes = options.scenes;

              for (const name in scenes) {
                const uuid = scenes[name];
                scenes[name] = uuids[uuid];
              }

              const packs = options.packs;

              for (const packId in packs) {
                const packedIds = packs[packId];

                for (let j = 0; j < packedIds.length; ++j) {
                  packedIds[j] = uuids[packedIds[j]];
                }
              }

              const versions = options.versions;

              if (versions) {
                for (const folder in versions) {
                  const entries = versions[folder];

                  for (let i = 0; i < entries.length; i += 2) {
                    const uuid = entries[i];
                    entries[i] = uuids[uuid] || uuid;
                  }
                }
              }

              const redirect = options.redirect;

              if (redirect) {
                for (let i = 0; i < redirect.length; i += 2) {
                  redirect[i] = uuids[redirect[i]];
                  redirect[i + 1] = bundles[redirect[i + 1]];
                }
              }

              const extensionMap = options.extensionMap;

              if (extensionMap) {
                for (const ext in options.extensionMap) {
                  if (!Object.prototype.hasOwnProperty.call(options.extensionMap, ext)) {
                    continue;
                  }

                  options.extensionMap[ext].forEach((uuid, index) => {
                    options.extensionMap[ext][index] = uuids[uuid] || uuid;
                  });
                }
              }
            };

            class Config {
              constructor() {
                this.name = '';
                this.base = '';
                this.importBase = '';
                this.nativeBase = '';
                this.deps = null;
                this.assetInfos = new Cache();
                this.scenes = new Cache();
                this.paths = new Cache();
              }

              init(options) {
                processOptions(options);
                this.importBase = options.importBase || '';
                this.nativeBase = options.nativeBase || '';
                this.base = options.base || '';
                this.name = options.name || '';
                this.deps = options.deps || [];

                this._initUuid(options.uuids);

                this._initPath(options.paths);

                this._initScene(options.scenes);

                this._initPackage(options.packs);

                this._initVersion(options.versions);

                this._initRedirect(options.redirect);

                for (const ext in options.extensionMap) {
                  if (!Object.prototype.hasOwnProperty.call(options.extensionMap, ext)) {
                    continue;
                  }

                  options.extensionMap[ext].forEach(uuid => {
                    const assetInfo = this.assetInfos.get(uuid);

                    if (assetInfo) {
                      assetInfo.extension = ext;
                    }
                  });
                }
              }

              getInfoWithPath(path, type) {
                if (!path) {
                  return null;
                }

                path = normalize(path);
                const items = this.paths.get(path);

                if (items) {
                  if (type) {
                    for (let i = 0, l = items.length; i < l; i++) {
                      const assetInfo = items[i];

                      if (js.isChildClassOf(assetInfo.ctor, type)) {
                        return assetInfo;
                      }
                    }
                  } else {
                    return items[0];
                  }
                }

                return null;
              }

              getDirWithPath(path, type, out) {
                path = normalize(path);

                if (path[path.length - 1] === '/') {
                  path = path.slice(0, -1);
                }

                const infos = out || [];
                this.paths.forEach((items, p) => {
                  if (p.startsWith(path) && isMatchByWord(p, path) || !path) {
                    for (let i = 0, l = items.length; i < l; i++) {
                      const entry = items[i];

                      if (!type || js.isChildClassOf(entry.ctor, type)) {
                        infos.push(entry);
                      }
                    }
                  }
                });
                return infos;
              }

              getAssetInfo(uuid) {
                return this.assetInfos.get(uuid) || null;
              }

              getSceneInfo(name) {
                if (!name.endsWith('.scene')) {
                  name += '.scene';
                }

                if (name[0] !== '/' && !name.startsWith('db://')) {
                  name = `/${name}`;
                }

                const info = this.scenes.find((val, key) => key.endsWith(name));
                return info;
              }

              destroy() {
                this.paths.destroy();
                this.scenes.destroy();
                this.assetInfos.destroy();
              }

              _initUuid(uuidList) {
                if (!uuidList) {
                  return;
                }

                this.assetInfos.clear();

                for (let i = 0, l = uuidList.length; i < l; i++) {
                  const uuid = uuidList[i];
                  this.assetInfos.add(uuid, {
                    uuid
                  });
                }
              }

              _initPath(pathList) {
                if (!pathList) {
                  return;
                }

                const paths = this.paths;
                paths.clear();

                for (const uuid in pathList) {
                  const info = pathList[uuid];
                  const path = info[0];
                  const type = info[1];
                  const isSubAsset = info.length === 3;
                  const assetInfo = this.assetInfos.get(uuid);
                  assetInfo.path = path;
                  assetInfo.ctor = js.getClassById(type);

                  if (paths.has(path)) {
                    if (isSubAsset) {
                      paths.get(path).push(assetInfo);
                    } else {
                      paths.get(path).unshift(assetInfo);
                    }
                  } else {
                    paths.add(path, [assetInfo]);
                  }
                }
              }

              _initScene(sceneList) {
                if (!sceneList) {
                  return;
                }

                const scenes = this.scenes;
                scenes.clear();
                const assetInfos = this.assetInfos;

                for (const sceneName in sceneList) {
                  const uuid = sceneList[sceneName];
                  const assetInfo = assetInfos.get(uuid);
                  assetInfo.url = sceneName;
                  scenes.add(sceneName, assetInfo);
                }
              }

              _initPackage(packageList) {
                if (!packageList) {
                  return;
                }

                const assetInfos = this.assetInfos;

                for (const packUuid in packageList) {
                  const uuids = packageList[packUuid];
                  const pack = {
                    uuid: packUuid,
                    packedUuids: uuids,
                    ext: '.json'
                  };
                  assetInfos.add(packUuid, pack);

                  for (let i = 0, l = uuids.length; i < l; i++) {
                    const uuid = uuids[i];
                    const assetInfo = assetInfos.get(uuid);
                    const assetPacks = assetInfo.packs;

                    if (assetPacks) {
                      if (l === 1) {
                        assetPacks.unshift(pack);
                      } else {
                        assetPacks.push(pack);
                      }
                    } else {
                      assetInfo.packs = [pack];
                    }
                  }
                }
              }

              _initVersion(versions) {
                if (!versions) {
                  return;
                }

                const assetInfos = this.assetInfos;
                let entries = versions.import;

                if (entries) {
                  for (let i = 0, l = entries.length; i < l; i += 2) {
                    const uuid = entries[i];
                    const assetInfo = assetInfos.get(uuid);
                    assetInfo.ver = entries[i + 1];
                  }
                }

                entries = versions.native;

                if (entries) {
                  for (let i = 0, l = entries.length; i < l; i += 2) {
                    const uuid = entries[i];
                    const assetInfo = assetInfos.get(uuid);
                    assetInfo.nativeVer = entries[i + 1];
                  }
                }
              }

              _initRedirect(redirect) {
                if (!redirect) {
                  return;
                }

                const assetInfos = this.assetInfos;

                for (let i = 0, l = redirect.length; i < l; i += 2) {
                  const uuid = redirect[i];
                  const assetInfo = assetInfos.get(uuid);
                  assetInfo.redirect = redirect[i + 1];
                }
              }

            }

            function visitAsset(asset, deps) {
              if (!asset._uuid) {
                return;
              }

              deps.push(asset._uuid);
            }

            function visitComponent(comp, deps) {
              const props = Object.getOwnPropertyNames(comp);

              for (let i = 0; i < props.length; i++) {
                const propName = props[i];

                if (propName === 'node' || propName === '__eventTargets') {
                  continue;
                }

                const value = comp[propName];

                if (typeof value === 'object' && value) {
                  if (Array.isArray(value)) {
                    for (let j = 0; j < value.length; j++) {
                      const val = value[j];

                      if (val instanceof Asset) {
                        visitAsset(val, deps);
                      }
                    }
                  } else if (!value.constructor || value.constructor === Object) {
                    const keys = Object.getOwnPropertyNames(value);

                    for (let j = 0; j < keys.length; j++) {
                      const val = value[keys[j]];

                      if (val instanceof Asset) {
                        visitAsset(val, deps);
                      }
                    }
                  } else if (value instanceof Asset) {
                    visitAsset(value, deps);
                  }
                }
              }
            }

            function visitNode(node, deps) {
              for (let i = 0; i < node._components.length; i++) {
                visitComponent(node._components[i], deps);
              }

              for (let i = 0; i < node._children.length; i++) {
                visitNode(node._children[i], deps);
              }
            }

            function descendOpRef(asset, refs, exclude, op) {
              exclude.push(asset._uuid);
              const depends = dependUtil.getDeps(asset._uuid);

              for (let i = 0, l = depends.length; i < l; i++) {
                const dependAsset = assets.get(depends[i]);

                if (!dependAsset) {
                  continue;
                }

                const uuid = dependAsset._uuid;

                if (!(uuid in refs)) {
                  refs[uuid] = dependAsset.refCount + op;
                } else {
                  refs[uuid] += op;
                }

                if (exclude.includes(uuid)) {
                  continue;
                }

                descendOpRef(dependAsset, refs, exclude, op);
              }
            }

            const _temp$c = [];

            function checkCircularReference(asset) {
              const refs = Object.create(null);
              refs[asset._uuid] = asset.refCount;
              descendOpRef(asset, refs, _temp$c, -1);
              _temp$c.length = 0;

              if (refs[asset._uuid] !== 0) {
                return refs[asset._uuid];
              }

              for (const uuid in refs) {
                if (refs[uuid] !== 0) {
                  descendOpRef(assets.get(uuid), refs, _temp$c, 1);
                }
              }

              _temp$c.length = 0;
              return refs[asset._uuid];
            }

            class ReleaseManager {
              constructor() {
                this._persistNodeDeps = new Cache();
                this._toDelete = new Cache();
                this._eventListener = false;
                this._dontDestroyAssets = [];
              }

              addIgnoredAsset(asset) {
                this._dontDestroyAssets.push(asset._uuid);
              }

              init() {
                this._persistNodeDeps.clear();

                this._toDelete.clear();
              }

              _addPersistNodeRef(node) {
                const deps = [];
                visitNode(node, deps);

                for (let i = 0, l = deps.length; i < l; i++) {
                  const dependAsset = assets.get(deps[i]);

                  if (dependAsset) {
                    dependAsset.addRef();
                  }
                }

                this._persistNodeDeps.add(node.uuid, deps);
              }

              _removePersistNodeRef(node) {
                if (!this._persistNodeDeps.has(node.uuid)) {
                  return;
                }

                const deps = this._persistNodeDeps.get(node.uuid);

                for (let i = 0, l = deps.length; i < l; i++) {
                  const dependAsset = assets.get(deps[i]);

                  if (dependAsset) {
                    dependAsset.decRef();
                  }
                }

                this._persistNodeDeps.remove(node.uuid);
              }

              _autoRelease(oldScene, newScene, persistNodes) {
                if (oldScene) {
                  const childs = dependUtil.getDeps(oldScene.uuid);

                  for (let i = 0, l = childs.length; i < l; i++) {
                    const asset = assets.get(childs[i]);

                    if (asset) {
                      asset.decRef( oldScene.autoReleaseAssets);
                    }
                  }

                  const dependencies = dependUtil._depends.get(oldScene.uuid);

                  if (dependencies && dependencies.persistDeps) {
                    const persistDeps = dependencies.persistDeps;

                    for (let i = 0, l = persistDeps.length; i < l; i++) {
                      const asset = assets.get(persistDeps[i]);

                      if (asset) {
                        asset.decRef( oldScene.autoReleaseAssets);
                      }
                    }
                  }

                  if (oldScene.uuid !== newScene.uuid) {
                    dependUtil.remove(oldScene.uuid);
                  }
                }

                const sceneDeps = dependUtil._depends.get(newScene.uuid);

                if (sceneDeps) {
                  sceneDeps.persistDeps = [];
                }

                for (const key in persistNodes) {
                  const node = persistNodes[key];

                  const deps = this._persistNodeDeps.get(node.uuid);

                  for (const dep of deps) {
                    const dependAsset = assets.get(dep);

                    if (dependAsset) {
                      dependAsset.addRef();
                    }
                  }

                  if (!sceneDeps) {
                    continue;
                  }

                  sceneDeps.persistDeps.push(...deps);
                }
              }

              tryRelease(asset, force = false) {
                if (!(asset instanceof Asset)) {
                  return;
                }

                if (force) {
                  this._free(asset, force);

                  return;
                }

                this._toDelete.add(asset._uuid, asset);

                if (!this._eventListener) {
                  this._eventListener = true;
                  callInNextTick(this._freeAssets.bind(this));
                }
              }

              _freeAssets() {
                this._eventListener = false;

                this._toDelete.forEach(asset => {
                  this._free(asset);
                });

                this._toDelete.clear();
              }

              _free(asset, force = false) {
                const uuid = asset._uuid;

                this._toDelete.remove(uuid);

                if (!isValid(asset, true) || this._dontDestroyAssets.indexOf(uuid) !== -1) {
                  return;
                }

                if (!force) {
                  if (asset.refCount > 0) {
                    if (checkCircularReference(asset) > 0) {
                      return;
                    }
                  }
                }

                assets.remove(uuid);
                const depends = dependUtil.getDeps(uuid);

                for (let i = 0, l = depends.length; i < l; i++) {
                  const dependAsset = assets.get(depends[i]);

                  if (dependAsset) {
                    dependAsset.decRef(false);

                    {
                      this._free(dependAsset, false);
                    }
                  }
                }

                {
                  asset.destroy();
                }

                dependUtil.remove(uuid);
              }

            }

            var releaseManager = exports('d9', new ReleaseManager());

            let defaultProgressCallback = null;
            function setDefaultProgressCallback(onProgress) {
              defaultProgressCallback = onProgress;
            }
            function clear$1(task, clearRef) {
              for (let i = 0, l = task.input.length; i < l; i++) {
                const item = task.input[i];

                if (clearRef) {
                  if (!item.isNative && item.content instanceof Asset) {
                    item.content.decRef(false);
                  }
                }

                item.recycle();
              }

              task.input = null;
            }
            function urlAppendTimestamp(url, append) {
              if (append) {
                if (/\?/.test(url)) {
                  return `${url}&_t=${Date.now()}`;
                }

                return `${url}?_t=${Date.now()}`;
              }

              return url;
            }
            function retry(process, times, wait, onComplete, index = 0) {
              process(index, (err, result) => {
                index++;

                if (!err || index > times) {
                  if (onComplete) {
                    onComplete(err, result);
                  }
                } else {
                  setTimeout(() => {
                    retry(process, times, wait, onComplete, index);
                  }, wait);
                }
              });
            }
            function getDepends(uuid, data, exclude, depends, config) {
              try {
                const info = dependUtil.parse(uuid, data);

                for (let i = 0, l = info.deps.length; i < l; i++) {
                  const dep = info.deps[i];

                  if (!(dep in exclude)) {
                    exclude[dep] = true;
                    depends.push({
                      uuid: dep,
                      bundle: config && config.name
                    });
                  }
                }

                if (info.nativeDep) {
                  if (config) {
                    info.nativeDep.bundle = config.name;
                  }

                  depends.push({ ...info.nativeDep
                  });
                }
              } catch (e) {
                error(e.message, e.stack);
              }
            }
            function cache(id, asset, cacheAsset) {
              if (!asset) {
                return;
              }

              cacheAsset = cacheAsset !== undefined ? cacheAsset : legacyCC.assetManager.cacheAsset;

              if (!isScene(asset) && cacheAsset && !asset.isDefault) {
                assets.add(id, asset);
              }
            }
            function setProperties(uuid, asset, assetsMap) {
              let missingAsset = false;
              const depends = dependMap.get(asset);

              if (depends) {

                for (let i = 0, l = depends.length; i < l; i++) {
                  const depend = depends[i];
                  const dependAsset = assetsMap[`${depend.uuid}@import`];

                  if (!dependAsset) {
                    {
                      error(`The asset ${depend.uuid} is missing!`);
                    }

                    if (depend.type && depend.type !== Asset) {
                      const placeHolder = new depend.type();
                      placeHolder.initDefault(depend.uuid);
                      depend.owner[depend.prop] = placeHolder;
                    }

                    missingAsset = true;
                  } else {
                    depend.owner[depend.prop] = dependAsset.addRef();
                  }
                }

                dependMap.delete(asset);
              }

              if (nativeDependMap.has(asset)) {
                if (assetsMap[`${uuid}@native`]) {
                  asset._nativeAsset = assetsMap[`${uuid}@native`];
                } else {
                  missingAsset = true;
                  console.error(`the native asset of ${uuid} is missing!`);
                }

                nativeDependMap.delete(asset);
              }

              return missingAsset;
            }
            function gatherAsset(task) {
              const source = task.source;

              if (!task.options.__outputAsArray__ && source.length === 1) {
                task.output = source[0].content;
              } else {
                const output = task.output = [];

                for (let i = 0, l = source.length; i < l; i++) {
                  output.push(source[i].content);
                }
              }
            }
            function forEach(array, process, onComplete) {
              let count = 0;
              const errs = [];
              const length = array.length;

              if (length === 0 && onComplete) {
                onComplete(errs);
              }

              const cb = err => {
                if (err) {
                  errs.push(err);
                }

                count++;

                if (count === length) {
                  if (onComplete) {
                    onComplete(errs);
                  }
                }
              };

              for (let i = 0; i < length; i++) {
                process(array[i], cb);
              }
            }
            function parseParameters(options, onProgress, onComplete) {
              let optionsOut = options;
              let onProgressOut = onProgress;
              let onCompleteOut = onComplete;

              if (onComplete === undefined) {
                const isCallback = typeof options === 'function';

                if (onProgress) {
                  onCompleteOut = onProgress;

                  if (!isCallback) {
                    onProgressOut = null;
                  }
                } else if (onProgress === undefined && isCallback) {
                  onCompleteOut = options;
                  optionsOut = null;
                  onProgressOut = null;
                }

                if (onProgress !== undefined && isCallback) {
                  onProgressOut = options;
                  optionsOut = null;
                }
              }

              return {
                options: optionsOut || Object.create(null),
                onProgress: onProgressOut,
                onComplete: onCompleteOut
              };
            }
            function parseLoadResArgs(type, onProgress, onComplete) {
              let typeOut = type;
              let onProgressOut = onProgress;
              let onCompleteOut = onComplete;

              if (onComplete === undefined) {
                const isValidType = js.isChildClassOf(type, Asset);

                if (onProgress) {
                  onCompleteOut = onProgress;

                  if (isValidType) {
                    onProgressOut = null;
                  }
                } else if (onProgress === undefined && !isValidType) {
                  onCompleteOut = type;
                  onProgressOut = null;
                  typeOut = null;
                }

                if (onProgress !== undefined && !isValidType) {
                  onProgressOut = type;
                  typeOut = null;
                }
              }

              return {
                type: typeOut,
                onProgress: onProgressOut || defaultProgressCallback,
                onComplete: onCompleteOut
              };
            }
            function checkCircleReference(owner, uuid, map, checked = {}) {
              const item = map[uuid];

              if (!item || checked[uuid]) {
                return false;
              }

              checked[uuid] = true;
              let result = false;
              const deps = dependUtil.getDeps(uuid);

              if (deps) {
                for (let i = 0, l = deps.length; i < l; i++) {
                  const dep = deps[i];

                  if (dep === owner || checkCircleReference(owner, dep, map, checked)) {
                    result = true;
                    break;
                  }
                }
              }

              return result;
            }
            function asyncify(cb) {
              return (p1, p2) => {
                if (!cb) {
                  return;
                }

                const refs = [];

                if (Array.isArray(p2)) {
                  p2.forEach(x => x instanceof Asset && refs.push(x.addRef()));
                } else if (p2 instanceof Asset) {
                  refs.push(p2.addRef());
                }

                callInNextTick(() => {
                  refs.forEach(x => x.decRef(false));
                  cb(p1, p2);
                });
              };
            }

            class Bundle {
              constructor() {
                this._config = new Config();
              }

              get config() {
                return this._config;
              }

              get name() {
                return this._config.name;
              }

              get deps() {
                return this._config.deps;
              }

              get base() {
                return this._config.base;
              }

              getInfoWithPath(path, type) {
                return this._config.getInfoWithPath(path, type);
              }

              getDirWithPath(path, type, out) {
                return this._config.getDirWithPath(path, type, out);
              }

              getAssetInfo(uuid) {
                return this._config.getAssetInfo(uuid);
              }

              getSceneInfo(name) {
                return this._config.getSceneInfo(name);
              }

              init(options) {
                this._config.init(options);

                bundles.add(options.name, this);
              }

              load(paths, type, onProgress, onComplete) {
                const {
                  type: _type,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseLoadResArgs(type, onProgress, onComplete);
                const options = {
                  __requestType__: RequestType.PATH,
                  type: _type,
                  bundle: this.name,
                  __outputAsArray__: Array.isArray(paths)
                };
                legacyCC.assetManager.loadAny(paths, options, onProg, onComp);
              }

              preload(paths, type, onProgress, onComplete) {
                const {
                  type: _type,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseLoadResArgs(type, onProgress, onComplete);
                legacyCC.assetManager.preloadAny(paths, {
                  __requestType__: RequestType.PATH,
                  type: _type,
                  bundle: this.name
                }, onProg, onComp);
              }

              loadDir(dir, type, onProgress, onComplete) {
                const {
                  type: _type,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseLoadResArgs(type, onProgress, onComplete);
                legacyCC.assetManager.loadAny(dir, {
                  __requestType__: RequestType.DIR,
                  type: _type,
                  bundle: this.name,
                  __outputAsArray__: true
                }, onProg, onComp);
              }

              preloadDir(dir, type, onProgress, onComplete) {
                const {
                  type: _type,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseLoadResArgs(type, onProgress, onComplete);
                legacyCC.assetManager.preloadAny(dir, {
                  __requestType__: RequestType.DIR,
                  type: _type,
                  bundle: this.name
                }, onProg, onComp);
              }

              loadScene(sceneName, options, onProgress, onComplete) {
                const {
                  options: opts,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseParameters(options, onProgress, onComplete);
                opts.preset = opts.preset || 'scene';
                opts.bundle = this.name;
                legacyCC.assetManager.loadAny({
                  scene: sceneName
                }, opts, onProg, (err, sceneAsset) => {
                  if (err) {
                    error(err.message, err.stack);
                  } else if (sceneAsset.scene) {
                    const scene = sceneAsset.scene;
                    scene._id = sceneAsset._uuid;
                    scene.name = sceneAsset.name;
                  } else {
                    err = new Error(`The asset ${sceneAsset._uuid} is not a scene`);
                  }

                  if (onComp) {
                    onComp(err, sceneAsset);
                  }
                });
              }

              preloadScene(sceneName, options, onProgress, onComplete) {
                const {
                  options: opts,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseParameters(options, onProgress, onComplete);
                opts.bundle = this.name;
                legacyCC.assetManager.preloadAny({
                  scene: sceneName
                }, opts, onProg, err => {
                  if (err) {
                    errorID(1210, sceneName, err.message);
                  }

                  if (onComp) {
                    onComp(err);
                  }
                });
              }

              get(path, type) {
                const info = this.getInfoWithPath(path, type);

                if (info) {
                  return assets.get(info.uuid) || null;
                }

                return null;
              }

              release(path, type) {
                const asset = this.get(path, type);

                if (asset) {
                  releaseManager.tryRelease(asset, true);
                }
              }

              releaseUnusedAssets() {
                assets.forEach(asset => {
                  const info = this.getAssetInfo(asset._uuid);

                  if (info && !info.redirect) {
                    releaseManager.tryRelease(asset);
                  }
                });
              }

              releaseAll() {
                assets.forEach(asset => {
                  const info = this.getAssetInfo(asset._uuid);

                  if (info && !info.redirect) {
                    releaseManager.tryRelease(asset, true);
                  }
                });
              }

              _destroy() {
                this._config.destroy();
              }

            }
            const resources = exports('c_', new Bundle());
            legacyCC.resources = resources;

            function downloadDomImage(url, options, onComplete) {
              const img = new Image();

              if (window.location.protocol !== 'file:') {
                img.crossOrigin = 'anonymous';
              }

              function loadCallback() {
                img.removeEventListener('load', loadCallback);
                img.removeEventListener('error', errorCallback);

                if (onComplete) {
                  onComplete(null, img);
                }
              }

              function errorCallback() {
                img.removeEventListener('load', loadCallback);
                img.removeEventListener('error', errorCallback);

                if (onComplete) {
                  onComplete(new Error(getError(4930, url)));
                }
              }

              img.addEventListener('load', loadCallback);
              img.addEventListener('error', errorCallback);
              img.src = url;
              return img;
            }

            function downloadFile(url, options, onProgress, onComplete) {
              const xhr = new XMLHttpRequest();
              const errInfo = `download failed: ${url}, status: `;
              xhr.open('GET', url, true);

              if (options.xhrResponseType !== undefined) {
                xhr.responseType = options.xhrResponseType;
              }

              if (options.xhrWithCredentials !== undefined) {
                xhr.withCredentials = options.xhrWithCredentials;
              }

              if (options.xhrMimeType !== undefined && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.xhrMimeType);
              }

              if (options.xhrTimeout !== undefined) {
                xhr.timeout = options.xhrTimeout;
              }

              if (options.xhrHeader) {
                for (const header in options.xhrHeader) {
                  xhr.setRequestHeader(header, options.xhrHeader[header]);
                }
              }

              xhr.onload = () => {
                if (xhr.status === 200 || xhr.status === 0) {
                  if (onComplete) {
                    onComplete(null, xhr.response);
                  }
                } else if (onComplete) {
                  onComplete(new Error(`${errInfo}${xhr.status}(no response)`));
                }
              };

              if (onProgress) {
                xhr.onprogress = e => {
                  if (e.lengthComputable) {
                    onProgress(e.loaded, e.total);
                  }
                };
              }

              xhr.onerror = () => {
                if (onComplete) {
                  onComplete(new Error(`${errInfo}${xhr.status}(error)`));
                }
              };

              xhr.ontimeout = () => {
                if (onComplete) {
                  onComplete(new Error(`${errInfo}${xhr.status}(time out)`));
                }
              };

              xhr.onabort = () => {
                if (onComplete) {
                  onComplete(new Error(`${errInfo}${xhr.status}(abort)`));
                }
              };

              xhr.send(null);
              return xhr;
            }

            const downloaded = {};
            function downloadScript(url, options, onComplete) {
              if (downloaded[url]) {
                if (onComplete) {
                  onComplete(null);
                }

                return null;
              }

              const script = document.createElement('script');

              if (window.location.protocol !== 'file:') {
                script.crossOrigin = 'anonymous';
              }

              script.async = options.scriptAsyncLoading || false;
              script.src = url;

              function loadHandler() {
                script.parentNode.removeChild(script);
                script.removeEventListener('load', loadHandler, false);
                script.removeEventListener('error', errorHandler, false);
                downloaded[url] = true;

                if (onComplete) {
                  onComplete(null);
                }
              }

              function errorHandler() {
                script.parentNode.removeChild(script);
                script.removeEventListener('load', loadHandler, false);
                script.removeEventListener('error', errorHandler, false);

                if (onComplete) {
                  onComplete(new Error(getError(4928, url)));
                }
              }

              script.addEventListener('load', loadHandler, false);
              script.addEventListener('error', errorHandler, false);
              document.body.appendChild(script);
              return script;
            }

            const REGEX = /^(?:\w+:\/\/|\.+\/).+/;

            const downloadImage = (url, options, onComplete) => {
              const func = sys.hasFeature(sys.Feature.IMAGE_BITMAP) && legacyCC.assetManager.allowImageBitmap ? downloadBlob : downloadDomImage;
              func(url, options, onComplete);
            };

            const downloadBlob = (url, options, onComplete) => {
              options.xhrResponseType = 'blob';
              downloadFile(url, options, options.onFileProgress, onComplete);
            };

            const downloadJson = (url, options, onComplete) => {
              options.xhrResponseType = 'json';
              downloadFile(url, options, options.onFileProgress, onComplete);
            };

            const downloadArrayBuffer = (url, options, onComplete) => {
              options.xhrResponseType = 'arraybuffer';
              downloadFile(url, options, options.onFileProgress, onComplete);
            };

            const downloadCCON = (url, options, onComplete) => {
              downloadJson(url, options, (err, json) => {
                if (err) {
                  onComplete(err);
                  return;
                }

                const cconPreface = parseCCONJson(json);
                const chunkPromises = Promise.all(cconPreface.chunks.map(chunk => new Promise((resolve, reject) => {
                  downloadArrayBuffer(`${mainFileName(url)}${chunk}`, {}, (errChunk, chunkBuffer) => {
                    if (err) {
                      reject(err);
                    } else {
                      resolve(new Uint8Array(chunkBuffer));
                    }
                  });
                })));
                chunkPromises.then(chunks => {
                  const ccon = new CCON(cconPreface.document, chunks);
                  onComplete(null, ccon);
                }).catch(err => {
                  onComplete(err);
                });
              });
            };

            const downloadCCONB = (url, options, onComplete) => {
              downloadArrayBuffer(url, options, (err, arrayBuffer) => {
                if (err) {
                  onComplete(err);
                  return;
                }

                try {
                  const ccon = decodeCCONBinary(new Uint8Array(arrayBuffer));
                  onComplete(null, ccon);
                } catch (err) {
                  onComplete(err);
                }
              });
            };

            const downloadText = (url, options, onComplete) => {
              options.xhrResponseType = 'text';
              downloadFile(url, options, options.onFileProgress, onComplete);
            };

            const downloadBundle = (nameOrUrl, options, onComplete) => {
              const bundleName = basename(nameOrUrl);
              let url = nameOrUrl;

              if (!REGEX.test(url)) {
                if (downloader.remoteBundles.indexOf(bundleName) !== -1) {
                  url = `${downloader.remoteServerAddress}remote/${bundleName}`;
                } else {
                  url = `assets/${bundleName}`;
                }
              }

              const version = options.version || downloader.bundleVers[bundleName];
              let count = 0;
              const config = `${url}/config.${version ? `${version}.` : ''}json`;
              let out = null;
              let error = null;
              downloadJson(config, options, (err, response) => {
                error = err;
                out = response;

                if (out) {
                  out.base = `${url}/`;
                }

                if (++count === 2) {
                  onComplete(error, out);
                }
              });
              const jspath = `${url}/index.${version ? `${version}.` : ''}js`;
              downloadScript(jspath, options, err => {
                error = err;

                if (++count === 2) {
                  onComplete(err, out);
                }
              });
            };

            class Downloader {
              constructor() {
                this.maxConcurrency = 6;
                this.maxRequestsPerFrame = 6;
                this.maxRetryCount =  3 ;
                this.appendTimeStamp = !!EDITOR$1;
                this.limited = !EDITOR$1;
                this.retryInterval = 2000;
                this.bundleVers = null;
                this.remoteBundles = [];
                this.downloadDomImage = downloadDomImage;
                this.downloadDomAudio = null;
                this.downloadFile = downloadFile;
                this.downloadScript = downloadScript;
                this._downloaders = {
                  '.png': downloadImage,
                  '.jpg': downloadImage,
                  '.bmp': downloadImage,
                  '.jpeg': downloadImage,
                  '.gif': downloadImage,
                  '.ico': downloadImage,
                  '.tiff': downloadImage,
                  '.webp': downloadImage,
                  '.image': downloadImage,
                  '.pvr': downloadArrayBuffer,
                  '.pkm': downloadArrayBuffer,
                  '.astc': downloadArrayBuffer,
                  '.txt': downloadText,
                  '.xml': downloadText,
                  '.vsh': downloadText,
                  '.fsh': downloadText,
                  '.atlas': downloadText,
                  '.tmx': downloadText,
                  '.tsx': downloadText,
                  '.json': downloadJson,
                  '.ExportJson': downloadJson,
                  '.plist': downloadText,
                  '.ccon': downloadCCON,
                  '.cconb': downloadCCONB,
                  '.fnt': downloadText,
                  '.binary': downloadArrayBuffer,
                  '.bin': downloadArrayBuffer,
                  '.dbbin': downloadArrayBuffer,
                  '.skel': downloadArrayBuffer,
                  '.js': downloadScript,
                  bundle: downloadBundle,
                  default: downloadText
                };
                this._downloading = new Cache();
                this._queue = [];
                this._queueDirty = false;
                this._totalNum = 0;
                this._totalNumThisPeriod = 0;
                this._lastDate = -1;
                this._checkNextPeriod = false;
                this._remoteServerAddress = '';
                this._maxInterval = 1 / 30;
              }

              get remoteServerAddress() {
                return this._remoteServerAddress;
              }

              init(remoteServerAddress = '', bundleVers = {}, remoteBundles = []) {
                this._downloading.clear();

                this._queue.length = 0;
                this._remoteServerAddress = remoteServerAddress;
                this.bundleVers = bundleVers;
                this.remoteBundles = remoteBundles;
              }

              register(type, handler) {
                if (typeof type === 'object') {
                  js.mixin(this._downloaders, type);
                } else {
                  this._downloaders[type] = handler;
                }
              }

              download(id, url, type, options, onComplete) {
                const file = files.get(id);

                if (file) {
                  onComplete(null, file);
                  return;
                }

                const downloadCallbacks = this._downloading.get(id);

                if (downloadCallbacks) {
                  downloadCallbacks.push(onComplete);

                  const request = this._queue.find(x => x.id === id);

                  if (!request) {
                    return;
                  }

                  const priority = options.priority || 0;

                  if (request.priority < priority) {
                    request.priority = priority;
                    this._queueDirty = true;
                  }

                  return;
                }

                const maxRetryCount = typeof options.maxRetryCount !== 'undefined' ? options.maxRetryCount : this.maxRetryCount;
                const maxConcurrency = typeof options.maxConcurrency !== 'undefined' ? options.maxConcurrency : this.maxConcurrency;
                const maxRequestsPerFrame = typeof options.maxRequestsPerFrame !== 'undefined' ? options.maxRequestsPerFrame : this.maxRequestsPerFrame;
                const handler = this._downloaders[type] || this._downloaders.default;

                const process = (index, callback) => {
                  if (index === 0) {
                    this._downloading.add(id, [onComplete]);
                  }

                  if (!this.limited) {
                    handler(urlAppendTimestamp(url, this.appendTimeStamp), options, callback);
                    return;
                  }

                  this._updateTime();

                  const done = (err, data) => {
                    this._totalNum--;

                    this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);

                    callback(err, data);
                  };

                  if (this._totalNum < maxConcurrency && this._totalNumThisPeriod < maxRequestsPerFrame) {
                    handler(urlAppendTimestamp(url, this.appendTimeStamp), options, done);
                    this._totalNum++;
                    this._totalNumThisPeriod++;
                  } else {
                    this._queue.push({
                      id,
                      priority: options.priority || 0,
                      url,
                      options,
                      done,
                      handler
                    });

                    this._queueDirty = true;

                    if (this._totalNum < maxConcurrency) {
                      this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);
                    }
                  }
                };

                const finale = (err, result) => {
                  if (!err) {
                    files.add(id, result);
                  }

                  const callbacks = this._downloading.remove(id);

                  for (let i = 0, l = callbacks.length; i < l; i++) {
                    callbacks[i](err, result);
                  }
                };

                retry(process, maxRetryCount, this.retryInterval, finale);
              }

              loadSubpackage(name, completeCallback) {
                legacyCC.assetManager.loadBundle(name, null, completeCallback);
              }

              _updateTime() {
                const now = performance.now();
                const deltaTime = legacyCC.game.deltaTime;
                const interval = deltaTime > this._maxInterval ? this._maxInterval : deltaTime;

                if (now - this._lastDate > interval * 1000) {
                  this._totalNumThisPeriod = 0;
                  this._lastDate = now;
                }
              }

              _handleQueue(maxConcurrency, maxRequestsPerFrame) {
                this._checkNextPeriod = false;

                this._updateTime();

                while (this._queue.length > 0 && this._totalNum < maxConcurrency && this._totalNumThisPeriod < maxRequestsPerFrame) {
                  if (this._queueDirty) {
                    this._queue.sort((a, b) => a.priority - b.priority);

                    this._queueDirty = false;
                  }

                  const request = this._queue.pop();

                  if (!request) {
                    break;
                  }

                  this._totalNum++;
                  this._totalNumThisPeriod++;
                  request.handler(urlAppendTimestamp(request.url, this.appendTimeStamp), request.options, request.done);
                }

                this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);
              }

              _handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame) {
                if (!this._checkNextPeriod && this._queue.length > 0) {
                  callInNextTick(this._handleQueue.bind(this), maxConcurrency, maxRequestsPerFrame);
                  this._checkNextPeriod = true;
                }
              }

            }
            const downloader = exports('d0', new Downloader());

            function createImageAsset(id, data, options, onComplete) {
              let out = null;
              let err = null;

              try {
                out = new ImageAsset();
                out._nativeUrl = id;
                out._nativeAsset = data;
              } catch (e) {
                err = e;
              }

              onComplete(err, out);
            }

            function createJsonAsset(id, data, options, onComplete) {
              const out = new JsonAsset();
              out.json = data;
              onComplete(null, out);
            }

            function createTextAsset(id, data, options, onComplete) {
              const out = new TextAsset();
              out.text = data;
              onComplete(null, out);
            }

            function createBufferAsset(id, data, options, onComplete) {
              const out = new BufferAsset();
              out._nativeUrl = id;
              out._nativeAsset = data;
              onComplete(null, out);
            }

            function createAsset(id, data, options, onComplete) {
              const out = new Asset();
              out._nativeUrl = id;
              out._nativeAsset = data;
              onComplete(null, out);
            }

            function createBundle(id, data, options, onComplete) {
              let bundle = bundles.get(data.name);

              if (!bundle) {
                bundle = data.name === BuiltinBundleName.RESOURCES ? resources : new Bundle();
                data.base = data.base || `${id}/`;
                bundle.init(data);
              }

              {
                module.import(`virtual:///prerequisite-imports/${bundle.name}`).then(() => {
                  onComplete(null, bundle);
                }).catch(onComplete);
              }
            }

            class Factory {
              constructor() {
                this._creating = new Cache();
                this._producers = {
                  '.png': createImageAsset,
                  '.jpg': createImageAsset,
                  '.bmp': createImageAsset,
                  '.jpeg': createImageAsset,
                  '.gif': createImageAsset,
                  '.ico': createImageAsset,
                  '.tiff': createImageAsset,
                  '.webp': createImageAsset,
                  '.image': createImageAsset,
                  '.pvr': createImageAsset,
                  '.pkm': createImageAsset,
                  '.txt': createTextAsset,
                  '.xml': createTextAsset,
                  '.vsh': createTextAsset,
                  '.fsh': createTextAsset,
                  '.atlas': createTextAsset,
                  '.tmx': createTextAsset,
                  '.tsx': createTextAsset,
                  '.fnt': createTextAsset,
                  '.json': createJsonAsset,
                  '.ExportJson': createJsonAsset,
                  '.binary': createBufferAsset,
                  '.bin': createBufferAsset,
                  '.dbbin': createBufferAsset,
                  '.skel': createBufferAsset,
                  bundle: createBundle,
                  default: createAsset
                };
              }

              register(type, handler) {
                if (typeof type === 'object') {
                  js.mixin(this._producers, type);
                } else {
                  this._producers[type] = handler;
                }
              }

              create(id, data, type, options, onComplete) {
                const handler = this._producers[type] || this._producers.default;
                const asset = assets.get(id);

                if (!options.reloadAsset && asset) {
                  onComplete(null, asset);
                  return;
                }

                const creating = this._creating.get(id);

                if (creating) {
                  creating.push(onComplete);
                  return;
                }

                this._creating.add(id, [onComplete]);

                handler(id, data, options, (err, result) => {
                  if (!err && result instanceof Asset) {
                    result._uuid = id;
                    cache(id, result, options.cacheAsset);
                  }

                  const callbacks = this._creating.remove(id);

                  for (let i = 0, l = callbacks.length; i < l; i++) {
                    callbacks[i](err, result);
                  }
                });
              }

            }
            var factory = exports('cY', new Factory());

            class PackManager {
              constructor() {
                this._loading = new Cache();
                this._unpackers = {
                  '.json': this.unpackJson
                };
              }

              unpackJson(pack, json, options, onComplete) {
                let out = js.createMap(true);
                let err = null;

                if (Array.isArray(json)) {
                  json = unpackJSONs(json);

                  if (json.length !== pack.length) {
                    errorID(4915);
                  }

                  for (let i = 0; i < pack.length; i++) {
                    out[`${pack[i]}@import`] = json[i];
                  }
                } else {
                  const textureType = js.getClassId(Texture2D);
                  const imageAssetType = js.getClassId(ImageAsset);

                  if (json.type === textureType && json.data) {
                    const datas = json.data;

                    if (datas.length !== pack.length) {
                      errorID(4915);
                    }

                    for (let i = 0; i < pack.length; i++) {
                      out[`${pack[i]}@import`] = packCustomObjData(textureType, {
                        base: datas[i][0],
                        mipmaps: datas[i][1]
                      });
                    }
                  } else if (json.type === imageAssetType && json.data) {
                    const datas = json.data;

                    if (datas.length !== pack.length) {
                      errorID(4915);
                    }

                    for (let i = 0; i < pack.length; i++) {
                      out[`${pack[i]}@import`] = datas[i];
                    }
                  } else {
                    err = new Error('unmatched type pack!');
                    out = null;
                  }
                }

                onComplete(err, out);
              }

              init() {
                this._loading.clear();
              }

              register(type, handler) {
                if (typeof type === 'object') {
                  js.mixin(this._unpackers, type);
                } else {
                  this._unpackers[type] = handler;
                }
              }

              unpack(pack, data, type, options, onComplete) {
                if (!data) {
                  onComplete(new Error('package data is wrong!'));
                  return;
                }

                const unpacker = this._unpackers[type];
                unpacker(pack, data, options, onComplete);
              }

              load(item, options, onComplete) {
                if (item.isNative || !item.info || !item.info.packs) {
                  downloader.download(item.id, item.url, item.ext, item.options, onComplete);
                  return;
                }

                if (files.has(item.id)) {
                  onComplete(null, files.get(item.id));
                  return;
                }

                const packs = item.info.packs;
                let pack = packs.find(val => this._loading.has(val.uuid));

                if (pack) {
                  this._loading.get(pack.uuid).push({
                    onComplete,
                    id: item.id
                  });

                  return;
                }

                pack = packs[0];

                this._loading.add(pack.uuid, [{
                  onComplete,
                  id: item.id
                }]);

                const url = transform(pack.uuid, {
                  ext: pack.ext,
                  bundle: item.config.name
                });
                downloader.download(pack.uuid, url, pack.ext, item.options, (err, data) => {
                  files.remove(pack.uuid);

                  if (err) {
                    error(err.message, err.stack);
                  }

                  this.unpack(pack.packedUuids, data, pack.ext, item.options, (err2, result) => {
                    if (!err2) {
                      for (const id in result) {
                        files.add(id, result[id]);
                      }
                    }

                    const callbacks = this._loading.remove(pack.uuid);

                    for (let i = 0, l = callbacks.length; i < l; i++) {
                      const cb = callbacks[i];

                      if (err || err2) {
                        cb.onComplete(err || err2);
                        continue;
                      }

                      const unpackedData = result[cb.id];

                      if (!unpackedData) {
                        cb.onComplete(new Error('can not retrieve data from package'));
                      } else {
                        cb.onComplete(null, unpackedData);
                      }
                    }
                  });
                });
              }

            }
            var packManager = new PackManager();

            function fetch$1(task, done) {
              let firstTask = false;

              if (!task.progress) {
                task.progress = {
                  finish: 0,
                  total: task.input.length,
                  canInvoke: true
                };
                firstTask = true;
              }

              const {
                options,
                progress
              } = task;
              const depends = [];
              const total = progress.total;
              const exclude = options.__exclude__ = options.__exclude__ || Object.create(null);
              task.output = [];
              forEach(task.input, (item, cb) => {
                if (!item.isNative && assets.has(item.uuid)) {
                  const asset = assets.get(item.uuid);
                  item.content = asset.addRef();
                  task.output.push(item);

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }

                  cb();
                  return;
                }

                packManager.load(item, task.options, (err, data) => {
                  if (err) {
                    if (!task.isFinish) {
                      if (!legacyCC.assetManager.force || firstTask) {
                        error(err.message, err.stack);
                        progress.canInvoke = false;
                        done(err);
                      } else {
                        task.output.push(item);

                        if (progress.canInvoke) {
                          task.dispatch('progress', ++progress.finish, progress.total, item);
                        }
                      }
                    }
                  } else if (!task.isFinish) {
                    item.file = data;
                    task.output.push(item);

                    if (!item.isNative) {
                      exclude[item.uuid] = true;
                      getDepends(item.uuid, data, exclude, depends, item.config);
                      progress.total = total + depends.length;
                    }

                    if (progress.canInvoke) {
                      task.dispatch('progress', ++progress.finish, progress.total, item);
                    }
                  }

                  cb();
                });
              }, () => {
                if (task.isFinish) {
                  clear$1(task, true);
                  task.dispatch('error');
                  return;
                }

                if (depends.length > 0) {
                  const subTask = Task.create({
                    input: depends,
                    progress,
                    options,
                    onProgress: task.onProgress,
                    onError: Task.prototype.recycle,
                    onComplete: err => {
                      if (!err) {
                        task.output.push(...subTask.output);
                        subTask.recycle();
                      }

                      if (firstTask) {
                        decreaseRef(task);
                      }

                      done(err);
                    }
                  });
                  fetchPipeline.async(subTask);
                  return;
                }

                if (firstTask) {
                  decreaseRef(task);
                }

                done();
              });
            }

            function decreaseRef(task) {
              const output = task.output;

              for (let i = 0, l = output.length; i < l; i++) {
                if (output[i].content) {
                  output[i].content.decRef(false);
                }
              }
            }

            class SAXParser {
              constructor() {
                this._parser = null;

                if (window.DOMParser) {
                  this._parser = new DOMParser();
                }
              }

              parse(xmlTxt) {
                return this._parseXML(xmlTxt);
              }

              _parseXML(textxml) {
                if (this._parser) {
                  return this._parser.parseFromString(textxml, 'text/xml');
                }

                throw new Error('Dom parser is not supported in this platform!');
              }

            } exports('fL', SAXParser);

            class PlistParser extends SAXParser {
              parse(xmlTxt) {
                const xmlDoc = this._parseXML(xmlTxt);

                const plist = xmlDoc.documentElement;

                if (plist.tagName !== 'plist') {
                  warnID(5100);
                  return {};
                }

                let node = null;

                for (let i = 0, len = plist.childNodes.length; i < len; i++) {
                  node = plist.childNodes[i];

                  if (node.nodeType === 1) {
                    break;
                  }
                }

                return this._parseNode(node);
              }

              _parseNode(node) {
                let data = null;
                const tagName = node.tagName;

                if (tagName === 'dict') {
                  data = this._parseDict(node);
                } else if (tagName === 'array') {
                  data = this._parseArray(node);
                } else if (tagName === 'string') {
                  if (node.childNodes.length === 1) {
                    data = node.firstChild.nodeValue;
                  } else {
                    data = '';

                    for (let i = 0; i < node.childNodes.length; i++) {
                      data += node.childNodes[i].nodeValue;
                    }
                  }
                } else if (tagName === 'false') {
                  data = false;
                } else if (tagName === 'true') {
                  data = true;
                } else if (tagName === 'real') {
                  data = parseFloat(node.firstChild.nodeValue);
                } else if (tagName === 'integer') {
                  data = parseInt(node.firstChild.nodeValue, 10);
                }

                return data;
              }

              _parseArray(node) {
                const data = [];

                for (let i = 0, len = node.childNodes.length; i < len; i++) {
                  const child = node.childNodes[i];

                  if (child.nodeType !== 1) {
                    continue;
                  }

                  data.push(this._parseNode(child));
                }

                return data;
              }

              _parseDict(node) {
                const data = {};
                let key = '';

                for (let i = 0, len = node.childNodes.length; i < len; i++) {
                  const child = node.childNodes[i];

                  if (child.nodeType !== 1) {
                    continue;
                  }

                  if (child.tagName === 'key') {
                    key = child.firstChild.nodeValue;
                  } else {
                    data[key] = this._parseNode(child);
                  }
                }

                return data;
              }

            }

            const plistParser = new PlistParser();

            const PVR_HEADER_LENGTH = 13;
            const PVR_MAGIC = 0x03525650;
            const PVR_HEADER_MAGIC = 0;
            const PVR_HEADER_HEIGHT = 6;
            const PVR_HEADER_WIDTH = 7;
            const PVR_HEADER_METADATA = 12;
            const ETC_PKM_HEADER_SIZE = 16;
            const ETC_PKM_FORMAT_OFFSET = 6;
            const ETC_PKM_ENCODED_WIDTH_OFFSET = 8;
            const ETC_PKM_ENCODED_HEIGHT_OFFSET = 10;
            const ETC_PKM_WIDTH_OFFSET = 12;
            const ETC_PKM_HEIGHT_OFFSET = 14;
            const ETC1_RGB_NO_MIPMAPS = 0;
            const ETC2_RGB_NO_MIPMAPS = 1;
            const ETC2_RGBA_NO_MIPMAPS = 3;
            const ASTC_MAGIC = 0x5CA1AB13;
            const ASTC_HEADER_LENGTH = 16;
            const ASTC_HEADER_MAGIC = 4;
            const ASTC_HEADER_SIZE_X_BEGIN = 7;
            const ASTC_HEADER_SIZE_Y_BEGIN = 10;
            const ASTC_HEADER_SIZE_Z_BEGIN = 13;

            function getASTCFormat(xdim, ydim) {
              if (xdim === 4) {
                return PixelFormat.RGBA_ASTC_4x4;
              }

              if (xdim === 5) {
                if (ydim === 4) {
                  return PixelFormat.RGBA_ASTC_5x4;
                }

                return PixelFormat.RGBA_ASTC_5x5;
              }

              if (xdim === 6) {
                if (ydim === 5) {
                  return PixelFormat.RGBA_ASTC_6x5;
                }

                return PixelFormat.RGBA_ASTC_6x6;
              }

              if (xdim === 8) {
                if (ydim === 5) {
                  return PixelFormat.RGBA_ASTC_8x5;
                }

                if (ydim === 6) {
                  return PixelFormat.RGBA_ASTC_8x6;
                }

                return PixelFormat.RGBA_ASTC_8x8;
              }

              if (xdim === 10) {
                if (ydim === 5) {
                  return PixelFormat.RGBA_ASTC_10x5;
                }

                if (ydim === 6) {
                  return PixelFormat.RGBA_ASTC_10x6;
                }

                if (ydim === 8) {
                  return PixelFormat.RGBA_ASTC_10x8;
                }

                return PixelFormat.RGBA_ASTC_10x10;
              }

              if (ydim === 10) {
                return PixelFormat.RGBA_ASTC_12x10;
              }

              return PixelFormat.RGBA_ASTC_12x12;
            }

            function readBEUint16(header, offset) {
              return header[offset] << 8 | header[offset + 1];
            }

            class Parser$1 {
              constructor() {
                this._parsing = new Cache();
                this._parsers = {
                  '.png': this.parseImage,
                  '.jpg': this.parseImage,
                  '.bmp': this.parseImage,
                  '.jpeg': this.parseImage,
                  '.gif': this.parseImage,
                  '.ico': this.parseImage,
                  '.tiff': this.parseImage,
                  '.webp': this.parseImage,
                  '.image': this.parseImage,
                  '.pvr': this.parsePVRTex,
                  '.pkm': this.parsePKMTex,
                  '.astc': this.parseASTCTex,
                  '.plist': this.parsePlist,
                  import: this.parseImport,
                  '.ccon': this.parseImport,
                  '.cconb': this.parseImport
                };
              }

              parseImage(file, options, onComplete) {
                if (file instanceof HTMLImageElement) {
                  onComplete(null, file);
                  return;
                }

                createImageBitmap(file, {
                  premultiplyAlpha: 'none'
                }).then(result => {
                  onComplete(null, result);
                }, err => {
                  onComplete(err, null);
                });
              }

              parsePVRTex(file, options, onComplete) {
                let err = null;
                let out = null;

                try {
                  const buffer = file instanceof ArrayBuffer ? file : file.buffer;
                  const header = new Int32Array(buffer, 0, PVR_HEADER_LENGTH);

                  if (header[PVR_HEADER_MAGIC] === PVR_MAGIC) {
                    const width = header[PVR_HEADER_WIDTH];
                    const height = header[PVR_HEADER_HEIGHT];
                    const dataOffset = header[PVR_HEADER_METADATA] + 52;
                    const pvrtcData = new Uint8Array(buffer, dataOffset);
                    out = {
                      _data: pvrtcData,
                      _compressed: true,
                      width,
                      height,
                      format: 0
                    };
                  } else if (header[11] === 0x21525650) {
                    const headerLength = header[0];
                    const height = header[1];
                    const width = header[2];
                    const pvrtcData = new Uint8Array(buffer, headerLength);
                    out = {
                      _data: pvrtcData,
                      _compressed: true,
                      width,
                      height,
                      format: 0
                    };
                  } else {
                    throw new Error('Invalid magic number in PVR header');
                  }
                } catch (e) {
                  err = e;
                }

                onComplete(err, out);
              }

              parsePKMTex(file, options, onComplete) {
                let err = null;
                let out = null;

                try {
                  const buffer = file instanceof ArrayBuffer ? file : file.buffer;
                  const header = new Uint8Array(buffer);
                  const format = readBEUint16(header, ETC_PKM_FORMAT_OFFSET);

                  if (format !== ETC1_RGB_NO_MIPMAPS && format !== ETC2_RGB_NO_MIPMAPS && format !== ETC2_RGBA_NO_MIPMAPS) {
                    throw new Error('Invalid magic number in ETC header');
                  }

                  const width = readBEUint16(header, ETC_PKM_WIDTH_OFFSET);
                  const height = readBEUint16(header, ETC_PKM_HEIGHT_OFFSET);
                  const encodedWidth = readBEUint16(header, ETC_PKM_ENCODED_WIDTH_OFFSET);
                  const encodedHeight = readBEUint16(header, ETC_PKM_ENCODED_HEIGHT_OFFSET);
                  const etcData = new Uint8Array(buffer, ETC_PKM_HEADER_SIZE);
                  out = {
                    _data: etcData,
                    _compressed: true,
                    width,
                    height,
                    format: 0
                  };
                } catch (e) {
                  err = e;
                }

                onComplete(err, out);
              }

              parseASTCTex(file, options, onComplete) {
                let err = null;
                let out = null;

                try {
                  const buffer = file instanceof ArrayBuffer ? file : file.buffer;
                  const header = new Uint8Array(buffer);
                  const magicval = header[0] + (header[1] << 8) + (header[2] << 16) + (header[3] << 24);

                  if (magicval !== ASTC_MAGIC) {
                    throw new Error('Invalid magic number in ASTC header');
                  }

                  const xdim = header[ASTC_HEADER_MAGIC];
                  const ydim = header[ASTC_HEADER_MAGIC + 1];
                  const zdim = header[ASTC_HEADER_MAGIC + 2];

                  if ((xdim < 3 || xdim > 6 || ydim < 3 || ydim > 6 || zdim < 3 || zdim > 6) && (xdim < 4 || xdim === 7 || xdim === 9 || xdim === 11 || xdim > 12 || ydim < 4 || ydim === 7 || ydim === 9 || ydim === 11 || ydim > 12 || zdim !== 1)) {
                    throw new Error('Invalid block number in ASTC header');
                  }

                  const format = getASTCFormat(xdim, ydim);
                  const xsize = header[ASTC_HEADER_SIZE_X_BEGIN] + (header[ASTC_HEADER_SIZE_X_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_X_BEGIN + 2] << 16);
                  const ysize = header[ASTC_HEADER_SIZE_Y_BEGIN] + (header[ASTC_HEADER_SIZE_Y_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_Y_BEGIN + 2] << 16);
                  const zsize = header[ASTC_HEADER_SIZE_Z_BEGIN] + (header[ASTC_HEADER_SIZE_Z_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_Z_BEGIN + 2] << 16);
                  const astcData = new Uint8Array(buffer, ASTC_HEADER_LENGTH);
                  out = {
                    _data: astcData,
                    _compressed: true,
                    width: xsize,
                    height: ysize,
                    format
                  };
                } catch (e) {
                  err = e;
                }

                onComplete(err, out);
              }

              parsePlist(file, options, onComplete) {
                let err = null;
                const result = plistParser.parse(file);

                if (!result) {
                  err = new Error('parse failed');
                }

                onComplete(err, result);
              }

              parseImport(file, options, onComplete) {
                if (!file) {
                  onComplete(new Error(`The json file of asset ${options.__uuid__} is empty or missing`));
                  return;
                }

                let result = null;
                let err = null;

                try {
                  result = deserializeAsset(file, options);
                } catch (e) {
                  err = e;
                }

                onComplete(err, result);
              }

              init() {
                this._parsing.clear();
              }

              register(type, handler) {
                if (typeof type === 'object') {
                  js.mixin(this._parsers, type);
                } else {
                  this._parsers[type] = handler;
                }
              }

              parse(id, file, type, options, onComplete) {
                const parsedAsset = parsed.get(id);

                if (parsedAsset) {
                  onComplete(null, parsedAsset);
                  return;
                }

                const parsing = this._parsing.get(id);

                if (parsing) {
                  parsing.push(onComplete);
                  return;
                }

                const parseHandler = this._parsers[type];

                if (!parseHandler) {
                  onComplete(null, file);
                  return;
                }

                this._parsing.add(id, [onComplete]);

                parseHandler(file, options, (err, data) => {
                  if (err) {
                    files.remove(id);
                  } else if (!isScene(data)) {
                    parsed.add(id, data);
                  }

                  const callbacks = this._parsing.remove(id);

                  for (let i = 0, l = callbacks.length; i < l; i++) {
                    callbacks[i](err, data);
                  }
                });
              }

            }
            var parser = exports('d1', new Parser$1());

            function load(task, done) {
              let firstTask = false;

              if (!task.progress) {
                task.progress = {
                  finish: 0,
                  total: task.input.length,
                  canInvoke: true
                };
                firstTask = true;
              }

              const {
                options,
                progress
              } = task;
              options.__exclude__ = options.__exclude__ || Object.create(null);
              task.output = [];
              forEach(task.input, (item, cb) => {
                const subTask = Task.create({
                  input: item,
                  onProgress: task.onProgress,
                  options,
                  progress,
                  onComplete: (err, result) => {
                    if (err && !task.isFinish) {
                      if (!legacyCC.assetManager.force || firstTask) {
                        {
                          error(err.message, err.stack);
                        }

                        progress.canInvoke = false;
                        done(err);
                      } else if (progress.canInvoke) {
                        task.dispatch('progress', ++progress.finish, progress.total, item);
                      }
                    }

                    task.output.push(result);
                    subTask.recycle();
                    cb(null);
                  }
                });
                loadOneAssetPipeline.async(subTask);
              }, () => {
                options.__exclude__ = null;

                if (task.isFinish) {
                  clear$1(task, true);
                  task.dispatch('error');
                  return;
                }

                gatherAsset(task);
                clear$1(task, true);
                done();
              });
            }
            const loadOneAssetPipeline = new Pipeline('loadOneAsset', [function fetch(task, done) {
              const item = task.output = task.input;
              const {
                options,
                isNative,
                uuid,
                file
              } = item;
              const {
                reloadAsset
              } = options;

              if (file || !reloadAsset && !isNative && assets.has(uuid)) {
                done();
                return;
              }

              packManager.load(item, task.options, (err, data) => {
                item.file = data;
                done(err);
              });
            }, function parse(task, done) {
              const item = task.output = task.input;
              const progress = task.progress;
              const exclude = task.options.__exclude__;
              const {
                id,
                file,
                options
              } = item;

              if (item.isNative) {
                parser.parse(id, file, item.ext, options, (err, asset) => {
                  if (err) {
                    done(err);
                    return;
                  }

                  item.content = asset;

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }

                  files.remove(id);
                  parsed.remove(id);
                  done();
                });
              } else {
                const {
                  uuid
                } = item;

                if (uuid in exclude) {
                  const {
                    finish,
                    content,
                    err,
                    callbacks
                  } = exclude[uuid];

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }

                  if (finish || checkCircleReference(uuid, uuid, exclude)) {
                    if (content) {
                      content.addRef();
                    }

                    item.content = content;
                    done(err);
                  } else {
                    callbacks.push({
                      done,
                      item
                    });
                  }
                } else if (!options.reloadAsset && assets.has(uuid)) {
                  const asset = assets.get(uuid);
                  item.content = asset.addRef();

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }

                  done();
                } else {
                  options.__uuid__ = uuid;
                  parser.parse(id, file, 'import', options, (err, asset) => {
                    if (err) {
                      done(err);
                      return;
                    }

                    loadDepends(task, asset, done);
                  });
                }
              }
            }]);

            function loadDepends(task, asset, done) {
              const {
                input: item,
                progress
              } = task;
              const {
                uuid,
                id,
                options,
                config
              } = item;
              const {
                cacheAsset
              } = options;
              const depends = [];

              if (asset.addRef) {
                asset.addRef();
              }

              getDepends(uuid, asset, Object.create(null), depends, config);

              if (progress.canInvoke) {
                task.dispatch('progress', ++progress.finish, progress.total += depends.length, item);
              }

              const repeatItem = task.options.__exclude__[uuid] = {
                content: asset,
                finish: false,
                callbacks: [{
                  done,
                  item
                }]
              };
              const subTask = Task.create({
                input: depends,
                options: task.options,
                onProgress: task.onProgress,
                onError: Task.prototype.recycle,
                progress,
                onComplete: err => {
                  if (asset.decRef) {
                    asset.decRef(false);
                  }

                  repeatItem.finish = true;
                  repeatItem.err = err;

                  if (!err) {
                    const output = Array.isArray(subTask.output) ? subTask.output : [subTask.output];
                    const map = Object.create(null);

                    for (const dependAsset of output) {
                      if (!dependAsset) {
                        continue;
                      }

                      map[dependAsset instanceof Asset ? `${dependAsset._uuid}@import` : `${uuid}@native`] = dependAsset;
                    }

                    setProperties(uuid, asset, map);

                    try {
                      if (typeof asset.onLoaded === 'function' && !onLoadedInvokedMap.has(asset) && !nativeDependMap.has(asset)) {
                        asset.onLoaded();
                        onLoadedInvokedMap.add(asset);
                      }
                    } catch (e) {
                      error(`The asset ${uuid} is invalid for some reason, detail message: ${e.message}, stack: ${e.stack}`);
                    }

                    files.remove(id);
                    parsed.remove(id);

                    cache(uuid, asset, cacheAsset);
                    subTask.recycle();
                  }

                  const callbacks = repeatItem.callbacks;

                  for (let i = 0, l = callbacks.length; i < l; i++) {
                    const cb = callbacks[i];

                    if (asset.addRef) {
                      asset.addRef();
                    }

                    cb.item.content = asset;
                    cb.done(err);
                  }

                  callbacks.length = 0;
                }
              });
              pipeline.async(subTask);
            }

            function preprocess(task, done) {
              const options = task.options;
              const subOptions = Object.create(null);
              const leftOptions = Object.create(null);

              for (const op in options) {
                switch (op) {
                  case RequestType.PATH:
                  case RequestType.UUID:
                  case RequestType.DIR:
                  case RequestType.SCENE:
                  case RequestType.URL:
                    break;

                  case '__requestType__':
                  case '__isNative__':
                  case 'ext':
                  case 'type':
                  case '__nativeName__':
                  case 'audioLoadMode':
                  case 'bundle':
                    subOptions[op] = options[op];
                    break;

                  case '__exclude__':
                  case '__outputAsArray__':
                    leftOptions[op] = options[op];
                    break;

                  default:
                    subOptions[op] = options[op];
                    leftOptions[op] = options[op];
                    break;
                }
              }

              task.options = leftOptions;
              const subTask = Task.create({
                input: task.input,
                options: subOptions
              });
              let err = null;

              try {
                task.output = task.source = transformPipeline.sync(subTask);
              } catch (e) {
                err = e;

                for (let i = 0, l = subTask.output.length; i < l; i++) {
                  subTask.output[i].recycle();
                }
              }

              subTask.recycle();
              done(err);
            }

            class RequestItem {
              constructor() {
                this.uuid = '';
                this.url = '';
                this.ext = '.json';
                this.content = null;
                this.file = null;
                this.info = null;
                this.config = null;
                this.isNative = false;
                this.options = Object.create(null);
                this._id = '';
              }

              get id() {
                if (!this._id) {
                  this._id = `${this.uuid}@${this.isNative ? 'native' : 'import'}`;
                }

                return this._id;
              }

              static create() {
                let out;

                if (RequestItem._deadPool.length !== 0) {
                  out = RequestItem._deadPool.pop();
                } else {
                  out = new RequestItem();
                }

                return out;
              }

              recycle() {
                if (RequestItem._deadPool.length === RequestItem.MAX_DEAD_NUM) {
                  return;
                }

                this._id = '';
                this.uuid = '';
                this.url = '';
                this.ext = '.json';
                this.content = null;
                this.file = null;
                this.info = null;
                this.config = null;
                this.isNative = false;
                this.options = Object.create(null);

                RequestItem._deadPool.push(this);
              }

            }
            RequestItem.MAX_DEAD_NUM = 500;
            RequestItem._deadPool = [];

            const infos = [];
            function parse(task) {
              var _info2;

              const options = task.options;
              const input = Array.isArray(task.input) ? task.input : [task.input];
              task.output = [];

              for (let i = 0; i < input.length; i++) {
                let item = input[i];
                let out = RequestItem.create();
                let config = null;
                let info = null;

                if (typeof item === 'string') {
                  item = Object.create(null);
                  item[options.__requestType__ || RequestType.UUID] = input[i];
                }

                if (typeof item === 'object') {
                  js.addon(item, options);

                  if (item.preset) {
                    js.addon(item, presets[item.preset]);
                  }

                  for (const key in item) {
                    switch (key) {
                      case RequestType.UUID:
                        {
                          var _info;

                          const uuid = out.uuid = decodeUuid(item.uuid);

                          if (!item.bundle) {
                            const bundle = bundles.find(bundle => !!bundle.getAssetInfo(uuid));
                            item.bundle = bundle && bundle.name;
                          }

                          if (bundles.has(item.bundle)) {
                            config = bundles.get(item.bundle).config;
                            info = config.getAssetInfo(uuid);

                            if (info && info.redirect) {
                              if (!bundles.has(info.redirect)) {
                                throw new Error(`Please load bundle ${info.redirect} first`);
                              }

                              config = bundles.get(info.redirect).config;
                              info = config.getAssetInfo(uuid);
                            }

                            out.config = config;
                            out.info = info;
                          }

                          out.ext = item.ext || ((_info = info) === null || _info === void 0 ? void 0 : _info.extension) || '.json';
                          break;
                        }

                      case '__requestType__':
                      case 'ext':
                      case 'bundle':
                      case 'preset':
                      case 'type':
                        break;

                      case RequestType.DIR:
                        if (bundles.has(item.bundle)) {
                          bundles.get(item.bundle).config.getDirWithPath(item.dir, item.type, infos);

                          for (const assetInfo of infos) {
                            input.push({
                              uuid: assetInfo.uuid,
                              __isNative__: false,
                              ext: assetInfo.extension || '.json',
                              bundle: item.bundle
                            });
                          }

                          infos.length = 0;
                        }

                        out.recycle();
                        out = null;
                        break;

                      case RequestType.PATH:
                        if (bundles.has(item.bundle)) {
                          config = bundles.get(item.bundle).config;
                          info = config.getInfoWithPath(item.path, item.type);

                          if (info && info.redirect) {
                            if (!bundles.has(info.redirect)) {
                              throw new Error(`you need to load bundle ${info.redirect} first`);
                            }

                            config = bundles.get(info.redirect).config;
                            info = config.getAssetInfo(info.uuid);
                          }

                          if (!info) {
                            out.recycle();
                            throw new Error(`Bundle ${item.bundle} doesn't contain ${item.path}`);
                          }

                          out.config = config;
                          out.uuid = info.uuid;
                          out.info = info;
                        }

                        out.ext = item.ext || ((_info2 = info) === null || _info2 === void 0 ? void 0 : _info2.extension) || '.json';
                        break;

                      case RequestType.SCENE:
                        if (!item.bundle) {
                          const bundle = bundles.find(bundle => !!bundle.getSceneInfo(item.scene));
                          item.bundle = bundle && bundle.name;
                        }

                        if (bundles.has(item.bundle)) {
                          config = bundles.get(item.bundle).config;
                          info = config.getSceneInfo(item.scene);

                          if (info && info.redirect) {
                            if (!bundles.has(info.redirect)) {
                              throw new Error(`you need to load bundle ${info.redirect} first`);
                            }

                            config = bundles.get(info.redirect).config;
                            info = config.getAssetInfo(info.uuid);
                          }

                          if (!info) {
                            out.recycle();
                            throw new Error(`Bundle ${config.name} doesn't contain scene ${item.scene}`);
                          }

                          out.config = config;
                          out.uuid = info.uuid;
                          out.info = info;
                        }

                        break;

                      case '__isNative__':
                        out.isNative = item.__isNative__;
                        break;

                      case RequestType.URL:
                        out.url = item.url;
                        out.uuid = item.uuid || item.url;
                        out.ext = item.ext || extname(item.url);
                        out.isNative = item.__isNative__ !== undefined ? item.__isNative__ : true;
                        break;

                      default:
                        out.options[key] = item[key];
                    }

                    if (!out) {
                      break;
                    }
                  }
                }

                if (!out) {
                  continue;
                }

                task.output.push(out);

                if (!out.uuid && !out.url) {
                  throw new Error(`Can not parse this input:${JSON.stringify(item)}`);
                }
              }

              return null;
            }
            function combine(task) {
              const input = task.output = task.input;

              for (let i = 0; i < input.length; i++) {
                const item = input[i];

                if (item.url) {
                  continue;
                }

                let url = '';
                let base = '';
                const config = item.config;

                if (item.isNative) {
                  base = config && config.nativeBase ? config.base + config.nativeBase : legacyCC.assetManager.generalNativeBase;
                } else {
                  base = config && config.importBase ? config.base + config.importBase : legacyCC.assetManager.generalImportBase;
                }

                const uuid = item.uuid;
                let ver = '';

                if (item.info) {
                  if (item.isNative) {
                    ver = item.info.nativeVer ? `.${item.info.nativeVer}` : '';
                  } else {
                    ver = item.info.ver ? `.${item.info.ver}` : '';
                  }
                }

                if (item.ext === '.ttf') {
                  url = `${base}/${uuid.slice(0, 2)}/${uuid}${ver}/${item.options.__nativeName__}`;
                } else {
                  url = `${base}/${uuid.slice(0, 2)}/${uuid}${ver}${item.ext}`;
                }

                item.url = url;
              }

              return null;
            }

            class AssetManager {
              constructor() {
                this.pipeline = pipeline.append(preprocess).append(load);
                this.fetchPipeline = fetchPipeline.append(preprocess).append(fetch$1);
                this.transformPipeline = transformPipeline.append(parse).append(combine);
                this.bundles = bundles;
                this.assets = assets;
                this.generalImportBase = '';
                this.generalNativeBase = '';
                this.dependUtil = dependUtil;
                this.force =  PREVIEW;
                this.allowImageBitmap = !sys.isMobile;
                this.utils = helper;
                this.downloader = downloader;
                this.parser = parser;
                this.packManager = packManager;
                this.cacheAsset = true;
                this.cacheManager = null;
                this.presets = presets;
                this.factory = factory;
                this.preprocessPipe = preprocess;
                this.fetchPipe = fetch$1;
                this.loadPipe = load;
                this.references = references;
                this._releaseManager = releaseManager;
                this._files = files;
                this._parsed = parsed;
                this._parsePipeline =  null ;
                this._projectBundles = [];
              }

              get main() {
                return bundles.get(BuiltinBundleName.MAIN) || null;
              }

              get resources() {
                return bundles.get(BuiltinBundleName.RESOURCES) || null;
              }

              init(options = {}) {
                const server = options.server || settings.querySettings(Settings.Category.ASSETS, 'server') || '';
                const bundleVers = options.bundleVers || settings.querySettings(Settings.Category.ASSETS, 'bundleVers') || {};
                const remoteBundles = options.remoteBundles || settings.querySettings(Settings.Category.ASSETS, 'remoteBundles') || [];

                this._files.clear();

                this._parsed.clear();

                this._releaseManager.init();

                this.assets.clear();
                this.bundles.clear();
                this.packManager.init();
                this.downloader.init(server, bundleVers, remoteBundles);
                this.parser.init();
                this.dependUtil.init();
                let importBase = options.importBase || settings.querySettings(Settings.Category.ASSETS, 'importBase') || '';

                if (importBase && importBase.endsWith('/')) {
                  importBase = importBase.substr(0, importBase.length - 1);
                }

                let nativeBase = options.nativeBase || settings.querySettings(Settings.Category.ASSETS, 'nativeBase') || '';

                if (nativeBase && nativeBase.endsWith('/')) {
                  nativeBase = nativeBase.substr(0, nativeBase.length - 1);
                }

                this.generalImportBase = importBase;
                this.generalNativeBase = nativeBase;
                this._projectBundles = settings.querySettings(Settings.Category.ASSETS, 'projectBundles') || [];
              }

              getBundle(name) {
                return bundles.get(name) || null;
              }

              removeBundle(bundle) {
                bundle._destroy();

                bundles.remove(bundle.name);
              }

              loadAny(requests, options, onProgress, onComplete) {
                const {
                  options: opts,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseParameters(options, onProgress, onComplete);
                opts.preset = opts.preset || 'default';
                requests = Array.isArray(requests) ? requests.slice() : requests;
                const task = Task.create({
                  input: requests,
                  onProgress: onProg,
                  onComplete: asyncify(onComp),
                  options: opts
                });
                pipeline.async(task);
              }

              preloadAny(requests, options, onProgress, onComplete) {
                const {
                  options: opts,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseParameters(options, onProgress, onComplete);
                opts.preset = opts.preset || 'preload';
                requests = Array.isArray(requests) ? requests.slice() : requests;
                const task = Task.create({
                  input: requests,
                  onProgress: onProg,
                  onComplete: asyncify(onComp),
                  options: opts
                });
                fetchPipeline.async(task);
              }

              loadRemote(url, options, onComplete) {
                const {
                  options: opts,
                  onComplete: onComp
                } = parseParameters(options, undefined, onComplete);

                if (!opts.reloadAsset && this.assets.has(url)) {
                  asyncify(onComp)(null, this.assets.get(url));
                  return;
                }

                opts.__isNative__ = true;
                opts.preset = opts.preset || 'remote';
                this.loadAny({
                  url
                }, opts, null, (err, data) => {
                  if (err) {
                    error(err.message, err.stack);

                    if (onComp) {
                      onComp(err, data);
                    }
                  } else {
                    factory.create(url, data, opts.ext || extname(url), opts, (p1, p2) => {
                      if (onComp) {
                        onComp(p1, p2);
                      }
                    });
                  }
                });
              }

              loadBundle(nameOrUrl, options, onComplete) {
                const {
                  options: opts,
                  onComplete: onComp
                } = parseParameters(options, undefined, onComplete);
                const bundleName = basename(nameOrUrl);

                if (this.bundles.has(bundleName)) {
                  asyncify(onComp)(null, this.getBundle(bundleName));
                  return;
                }

                opts.preset = opts.preset || 'bundle';
                opts.ext = 'bundle';
                opts.__isNative__ = true;
                this.loadAny({
                  url: nameOrUrl
                }, opts, null, (err, data) => {
                  if (err) {
                    error(err.message, err.stack);

                    if (onComp) {
                      onComp(err, data);
                    }
                  } else {
                    factory.create(nameOrUrl, data, 'bundle', opts, (p1, p2) => {
                      if (onComp) {
                        onComp(p1, p2);
                      }
                    });
                  }
                });
              }

              releaseAsset(asset) {
                releaseManager.tryRelease(asset, true);
              }

              releaseUnusedAssets() {
                assets.forEach(asset => {
                  releaseManager.tryRelease(asset);
                });
              }

              releaseAll() {
                assets.forEach(asset => {
                  releaseManager.tryRelease(asset, true);
                });
              }

              loadWithJson(json, options, onProgress, onComplete) {
                {
                  throw new Error('Only valid in Editor');
                }
              }

            } exports('d5', AssetManager);
            AssetManager.Pipeline = Pipeline;
            AssetManager.Task = Task;
            AssetManager.Cache = Cache;
            AssetManager.RequestItem = RequestItem;
            AssetManager.Bundle = Bundle;
            AssetManager.BuiltinBundleName = BuiltinBundleName;
            var assetManager = exports('cW', legacyCC.assetManager = new AssetManager());
            legacyCC.AssetManager = AssetManager;

            const RenderPipeline$1 = nr.RenderPipeline;
            legacyCC.RenderPipeline = RenderPipeline$1;

            const Texture2D$1 = jsb.Texture2D;
            const ImageAsset$1 = jsb.ImageAsset;
            const BuiltinResMgr = jsb.BuiltinResMgr;
            const builtinResMgrProto = BuiltinResMgr.prototype;

            builtinResMgrProto.init = function () {
              this._resources = {};
              this._materialsToBeCompiled = [];
              const resources = this._resources;
              const len = 2;
              const numChannels = 4;
              const blackValueView = new Uint8Array(len * len * numChannels);
              let offset = 0;

              for (let i = 0; i < len * len; i++) {
                blackValueView[offset] = 0;
                blackValueView[offset + 1] = 0;
                blackValueView[offset + 2] = 0;
                blackValueView[offset + 3] = 255;
              }

              const blackMemImageSource = {
                width: len,
                height: len,
                _data: blackValueView,
                _compressed: false,
                format: Texture2D$1.PixelFormat.RGBA8888
              };
              const imgAsset = new ImageAsset$1(blackMemImageSource);
              const blackTexture = new Texture2D$1();
              blackTexture._uuid = 'black-texture';
              blackTexture.image = imgAsset;
              resources[blackTexture._uuid] = blackTexture;

              if (legacyCC.SpriteFrame) {
                const spriteFrame = new legacyCC.SpriteFrame();
                const image = imgAsset;
                const texture = new Texture2D$1();
                texture.image = image;
                spriteFrame.texture = texture;
                spriteFrame._uuid = 'default-spriteframe';
                resources[spriteFrame._uuid] = spriteFrame;
              }

              this.initBuiltinRes();
            };

            builtinResMgrProto.get = function (uuid) {
              const res = this._resources[uuid];
              return res || this.getAsset(uuid);
            };

            builtinResMgrProto.compileBuiltinMaterial = function () {
              for (let i = 0; i < this._materialsToBeCompiled.length; ++i) {
                const mat = this._materialsToBeCompiled[i];

                for (let j = 0; j < mat.passes.length; ++j) {
                  mat.passes[j].tryCompile();
                }
              }

              this._materialsToBeCompiled.length = 0;
            };

            builtinResMgrProto.loadBuiltinAssets = function () {
              const builtinAssets = settings.querySettings(Settings.Category.ENGINE, 'builtinAssets');
              if ( !builtinAssets) return Promise.resolve();
              const resources = this._resources;
              return new Promise((resolve, reject) => {
                assetManager.loadBundle(BuiltinBundleName.INTERNAL, (err, bundle) => {
                  if (err) {
                    reject(err);
                    return;
                  }

                  assetManager.loadAny(builtinAssets, (err, assets) => {
                    if (err) {
                      reject(err);
                    } else {
                      assets.forEach(asset => {
                        resources[asset.name] = asset;
                        const url = asset.nativeUrl;
                        releaseManager.addIgnoredAsset(asset);
                        this.addAsset(asset.name, asset);

                        if (asset instanceof legacyCC.Material) {
                          this._materialsToBeCompiled.push(asset);
                        }
                      });
                      resolve();
                    }
                  });
                });
              });
            };

            const builtinResMgr = exports('e4', legacyCC.builtinResMgr = BuiltinResMgr.getInstance());

            class UIRendererManager {
              constructor() {
                this._allRenderers = [];
                this._dirtyRenderers = [];
                this._dirtyVersion = 0;
              }

              addRenderer(uiRenderer) {
                if (uiRenderer._internalId === -1) {
                  uiRenderer._internalId = this._allRenderers.length;

                  this._allRenderers.push(uiRenderer);
                }
              }

              removeRenderer(uiRenderer) {
                if (uiRenderer._internalId !== -1) {
                  {
                    assert(this._allRenderers[uiRenderer._internalId] === uiRenderer);
                  }

                  const id = uiRenderer._internalId;
                  this._allRenderers[this._allRenderers.length - 1]._internalId = id;
                  js.array.fastRemoveAt(this._allRenderers, id);
                  uiRenderer._internalId = -1;

                  if (uiRenderer._dirtyVersion === this._dirtyVersion) {
                    js.array.fastRemove(this._dirtyRenderers, uiRenderer);
                    uiRenderer._dirtyVersion = -1;
                  }
                }
              }

              markDirtyRenderer(uiRenderer) {
                if (uiRenderer._dirtyVersion !== this._dirtyVersion && uiRenderer._internalId !== -1) {
                  this._dirtyRenderers.push(uiRenderer);

                  uiRenderer._dirtyVersion = this._dirtyVersion;
                }
              }

              updateAllDirtyRenderers() {
                const length = this._dirtyRenderers.length;
                const dirtyRenderers = this._dirtyRenderers;

                for (let i = 0; i < length; i++) {
                  {
                    assert(dirtyRenderers[i]._internalId !== -1);
                  }

                  dirtyRenderers[i].updateRenderer();
                }

                this._dirtyRenderers.length = 0;
                this._dirtyVersion++;
              }

            }
            const uiRendererManager = exports('e3', new UIRendererManager());

            class Director extends EventTarget {
              constructor() {
                super();
                this._compScheduler = void 0;
                this._nodeActivator = void 0;
                this._invalid = void 0;
                this._paused = void 0;
                this._root = void 0;
                this._loadingScene = void 0;
                this._scene = void 0;
                this._totalFrames = void 0;
                this._scheduler = void 0;
                this._systems = void 0;
                this._persistRootNodes = {};
                this._invalid = false;
                this._paused = false;
                this._root = null;
                this._loadingScene = '';
                this._scene = null;
                this._totalFrames = 0;
                this._scheduler = new Scheduler();
                this._compScheduler = new ComponentScheduler();
                this._nodeActivator = new NodeActivator();
                this._systems = [];
              }

              calculateDeltaTime(now) {}

              end() {
                this.once(Director.EVENT_END_FRAME, () => {
                  this.purgeDirector();
                });
              }

              pause() {
                if (this._paused) {
                  return;
                }

                this._paused = true;
              }

              purgeDirector() {
                this._scheduler.unscheduleAll();

                this._compScheduler.unscheduleAll();

                this._nodeActivator.reset();

                {
                  if (legacyCC.isValid(this._scene)) {
                    this._scene.destroy();
                  }

                  this._scene = null;
                }

                this.stopAnimation();
                legacyCC.assetManager.releaseAll();
              }

              reset() {
                var _this$getScene;

                this.purgeDirector();

                for (const id in this._persistRootNodes) {
                  this.removePersistRootNode(this._persistRootNodes[id]);
                }

                (_this$getScene = this.getScene()) === null || _this$getScene === void 0 ? void 0 : _this$getScene.destroy();
                this.emit(Director.EVENT_RESET);
                this.startAnimation();
              }

              runSceneImmediate(scene, onBeforeLoadScene, onLaunched) {
                if (scene instanceof SceneAsset) scene = scene.scene;
                assertID(scene instanceof Scene, 1216);

                {
                  console.time('InitScene');
                }

                scene._load();

                {
                  console.timeEnd('InitScene');
                }

                {
                  console.time('AttachPersist');
                }

                const persistNodeList = Object.keys(this._persistRootNodes).map(x => this._persistRootNodes[x]);

                for (let i = 0; i < persistNodeList.length; i++) {
                  const node = persistNodeList[i];
                  node.emit(Node$1.EventType.SCENE_CHANGED_FOR_PERSISTS, scene.renderScene);
                  const existNode = scene.uuid === node._originalSceneId && scene.getChildByUuid(node.uuid);

                  if (existNode) {
                    const index = existNode.getSiblingIndex();
                    node.hideFlags &= ~CCObject.Flags.DontSave;
                    node.hideFlags |= CCObject.Flags.DontSave & existNode.hideFlags;

                    existNode._destroyImmediate();

                    scene.insertChild(node, index);
                  } else {
                    node.hideFlags |= CCObject.Flags.DontSave;
                    node.parent = scene;
                  }
                }

                {
                  console.timeEnd('AttachPersist');
                }

                const oldScene = this._scene;

                {
                  console.time('Destroy');
                }

                if (legacyCC.isValid(oldScene)) {
                  oldScene.destroy();
                }

                {
                  {
                    console.time('AutoRelease');
                  }

                  legacyCC.assetManager._releaseManager._autoRelease(oldScene, scene, this._persistRootNodes);

                  {
                    console.timeEnd('AutoRelease');
                  }
                }

                this._scene = null;

                CCObject._deferredDestroy();

                {
                  console.timeEnd('Destroy');
                }

                if (onBeforeLoadScene) {
                  onBeforeLoadScene();
                }

                this.emit(Director.EVENT_BEFORE_SCENE_LAUNCH, scene);
                this._scene = scene;

                {
                  console.time('Activate');
                }

                scene._activate();

                {
                  console.timeEnd('Activate');
                }

                if (this._root) {
                  this._root.resetCumulativeTime();
                }

                this.startAnimation();

                if (onLaunched) {
                  onLaunched(null, scene);
                }

                this.emit(Director.EVENT_AFTER_SCENE_LAUNCH, scene);
              }

              runScene(scene, onBeforeLoadScene, onLaunched) {
                if (scene instanceof SceneAsset) scene = scene.scene;
                assertID(scene, 1205);
                assertID(scene instanceof Scene, 1216);

                scene._load();

                this.once(Director.EVENT_END_FRAME, () => {
                  this.runSceneImmediate(scene, onBeforeLoadScene, onLaunched);
                });
              }

              loadScene(sceneName, onLaunched, onUnloaded) {
                if (this._loadingScene) {
                  warnID(1208, sceneName, this._loadingScene);
                  return false;
                }

                const bundle = legacyCC.assetManager.bundles.find(bundle => !!bundle.getSceneInfo(sceneName));

                if (bundle) {
                  this.emit(Director.EVENT_BEFORE_SCENE_LOADING, sceneName);
                  this._loadingScene = sceneName;
                  console.time(`LoadScene ${sceneName}`);
                  bundle.loadScene(sceneName, (err, scene) => {
                    console.timeEnd(`LoadScene ${sceneName}`);
                    this._loadingScene = '';

                    if (err) {
                      error(err);

                      if (onLaunched) {
                        onLaunched(err);
                      }
                    } else {
                      this.runSceneImmediate(scene, onUnloaded, onLaunched);
                    }
                  });
                  return true;
                } else {
                  errorID(1209, sceneName);
                  return false;
                }
              }

              preloadScene(sceneName, onProgress, onLoaded) {
                const bundle = legacyCC.assetManager.bundles.find(bundle => !!bundle.getSceneInfo(sceneName));

                if (bundle) {
                  bundle.preloadScene(sceneName, null, onProgress, onLoaded);
                } else {
                  const err = `Can not preload the scene "${sceneName}" because it is not in the build settings.`;

                  if (onLoaded) {
                    onLoaded(new Error(err));
                  }

                  error(`preloadScene: ${err}`);
                }
              }

              resume() {
                if (!this._paused) {
                  return;
                }

                this._paused = false;
              }

              get root() {
                return this._root;
              }

              getScene() {
                return this._scene;
              }

              getDeltaTime() {
                return legacyCC.game.deltaTime;
              }

              getTotalTime() {
                return legacyCC.game.totalTime;
              }

              getCurrentTime() {
                return legacyCC.game.frameStartTime;
              }

              getTotalFrames() {
                return this._totalFrames;
              }

              isPaused() {
                return this._paused;
              }

              getScheduler() {
                return this._scheduler;
              }

              setScheduler(scheduler) {
                if (this._scheduler !== scheduler) {
                  this.unregisterSystem(this._scheduler);
                  this._scheduler = scheduler;
                  this.registerSystem(Scheduler.ID, scheduler, 200);
                }
              }

              registerSystem(name, sys, priority) {
                sys.id = name;
                sys.priority = priority;

                this._systems.push(sys);

                this._systems.sort(System.sortByPriority);
              }

              unregisterSystem(sys) {
                js.array.fastRemove(this._systems, sys);

                this._systems.sort(System.sortByPriority);
              }

              getSystem(name) {
                return this._systems.find(sys => sys.id === name);
              }

              getAnimationManager() {
                return this.getSystem(legacyCC.AnimationManager.ID);
              }

              startAnimation() {
                this._invalid = false;
              }

              stopAnimation() {
                this._invalid = true;
              }

              mainLoop(now) {
                let dt;

                {
                  dt = legacyCC.game._calculateDT(now);
                }

                this.tick(dt);
              }

              tick(dt) {
                if (!this._invalid) {
                  this.emit(Director.EVENT_BEGIN_FRAME);

                  {
                    input._frameDispatchEvents();
                  }

                  if (!this._paused) {
                    this.emit(Director.EVENT_BEFORE_UPDATE);

                    this._compScheduler.startPhase();

                    this._compScheduler.updatePhase(dt);

                    for (let i = 0; i < this._systems.length; ++i) {
                      this._systems[i].update(dt);
                    }

                    this._compScheduler.lateUpdatePhase(dt);

                    this.emit(Director.EVENT_AFTER_UPDATE);

                    CCObject._deferredDestroy();

                    for (let i = 0; i < this._systems.length; ++i) {
                      this._systems[i].postUpdate(dt);
                    }
                  }

                  this.emit(Director.EVENT_BEFORE_DRAW);
                  uiRendererManager.updateAllDirtyRenderers();

                  this._root.frameMove(dt);

                  this.emit(Director.EVENT_AFTER_DRAW);
                  Node$1.resetHasChangedFlags();
                  Node$1.clearNodeArray();
                  containerManager.update(dt);
                  this.emit(Director.EVENT_END_FRAME);
                  this._totalFrames++;
                }
              }

              init() {
                this._totalFrames = 0;
                this._paused = false;
                this.registerSystem(Scheduler.ID, this._scheduler, 200);
                this._root = new Root(deviceManager.gfxDevice);
                const rootInfo = {};

                this._root.initialize(rootInfo);

                for (let i = 0; i < this._systems.length; i++) {
                  this._systems[i].init();
                }

                this.emit(Director.EVENT_INIT);
              }

              addPersistRootNode(node) {
                if (!legacyCC.Node.isNode(node) || !node.uuid) {
                  warnID(3800);
                  return;
                }

                const id = node.uuid;

                if (!this._persistRootNodes[id]) {
                  const scene = this._scene;

                  if (legacyCC.isValid(scene)) {
                    if (!node.parent) {
                      node.parent = scene;
                      node._originalSceneId = scene.uuid;
                    } else if (!(node.parent instanceof Scene)) {
                      warnID(3801);
                      return;
                    } else if (node.parent !== scene) {
                      warnID(3802);
                      return;
                    } else {
                      node._originalSceneId = scene.uuid;
                    }
                  }

                  this._persistRootNodes[id] = node;
                  node._persistNode = true;

                  legacyCC.assetManager._releaseManager._addPersistNodeRef(node);
                }
              }

              removePersistRootNode(node) {
                const id = node.uuid || '';

                if (node === this._persistRootNodes[id]) {
                  delete this._persistRootNodes[id];
                  node._persistNode = false;
                  node._originalSceneId = '';

                  legacyCC.assetManager._releaseManager._removePersistNodeRef(node);
                }
              }

              isPersistRootNode(node) {
                return !!node._persistNode;
              }

            } exports('cS', Director);
            Director.EVENT_INIT = 'director_init';
            Director.EVENT_RESET = 'director_reset';
            Director.EVENT_BEFORE_SCENE_LOADING = 'director_before_scene_loading';
            Director.EVENT_BEFORE_SCENE_LAUNCH = 'director_before_scene_launch';
            Director.EVENT_AFTER_SCENE_LAUNCH = 'director_after_scene_launch';
            Director.EVENT_BEFORE_UPDATE = 'director_before_update';
            Director.EVENT_AFTER_UPDATE = 'director_after_update';
            Director.EVENT_BEFORE_DRAW = 'director_before_draw';
            Director.EVENT_AFTER_DRAW = 'director_after_draw';
            Director.EVENT_BEFORE_COMMIT = 'director_before_commit';
            Director.EVENT_BEFORE_PHYSICS = 'director_before_physics';
            Director.EVENT_AFTER_PHYSICS = 'director_after_physics';
            Director.EVENT_BEGIN_FRAME = 'director_begin_frame';
            Director.EVENT_END_FRAME = 'director_end_frame';
            Director.instance = void 0;
            legacyCC.Director = Director;
            const director = exports('d8', Director.instance = legacyCC.director = new Director());

            class Game extends EventTarget {
              constructor(...args) {
                super(...args);
                this.frame = null;
                this.container = null;
                this.canvas = null;
                this.renderType = -1;
                this.eventTargetOn = super.on;
                this.eventTargetOnce = super.once;
                this.config = {};
                this.onStart = null;
                this.frameTime = 1000 / 60;
                this._isCloning = false;
                this._inited = false;
                this._engineInited = false;
                this._rendererInitialized = false;
                this._paused = true;
                this._frameRate = 60;
                this._pacer = null;
                this._initTime = 0;
                this._startTime = 0;
                this._deltaTime = 0.0;
                this._shouldLoadLaunchScene = true;
                this.onPreBaseInitDelegate = new AsyncDelegate();
                this.onPostBaseInitDelegate = new AsyncDelegate();
                this.onPreInfrastructureInitDelegate = new AsyncDelegate();
                this.onPostInfrastructureInitDelegate = new AsyncDelegate();
                this.onPreSubsystemInitDelegate = new AsyncDelegate();
                this.onPostSubsystemInitDelegate = new AsyncDelegate();
                this.onPreProjectInitDelegate = new AsyncDelegate();
                this.onPostProjectInitDelegate = new AsyncDelegate();
              }

              get inited() {
                return this._inited;
              }

              get frameRate() {
                return this._frameRate;
              }

              set frameRate(frameRate) {
                if (typeof frameRate !== 'number') {
                  frameRate = parseInt(frameRate, 10);

                  if (Number.isNaN(frameRate)) {
                    frameRate = 60;
                  }
                }

                this._frameRate = frameRate;
                this.frameTime = 1000 / frameRate;
                if (this._pacer) this._pacer.targetFrameRate = this._frameRate;
              }

              get deltaTime() {
                return this._deltaTime;
              }

              get totalTime() {
                return performance.now() - this._initTime;
              }

              get frameStartTime() {
                return this._startTime;
              }

              setFrameRate(frameRate) {
                this.frameRate = frameRate;
              }

              getFrameRate() {
                return this.frameRate;
              }

              step() {
                director.tick(this.frameTime / 1000);
              }

              pause() {
                var _this$_pacer;

                if (this._paused) {
                  return;
                }

                this._paused = true;
                (_this$_pacer = this._pacer) === null || _this$_pacer === void 0 ? void 0 : _this$_pacer.stop();
              }

              resume() {
                var _this$_pacer2;

                if (!this._paused) {
                  return;
                }

                input._clearEvents();

                this._paused = false;
                (_this$_pacer2 = this._pacer) === null || _this$_pacer2 === void 0 ? void 0 : _this$_pacer2.start();
              }

              isPaused() {
                return this._paused;
              }

              restart() {
                const endFramePromise = new Promise(resolve => {
                  director.once(Director.EVENT_END_FRAME, () => resolve());
                });
                return endFramePromise.then(() => {
                  director.reset();

                  legacyCC.Object._deferredDestroy();

                  this.pause();
                  this.resume();
                  this._shouldLoadLaunchScene = true;
                  SplashScreen.instance.curTime = 0;

                  this._safeEmit(Game.EVENT_RESTART);
                });
              }

              end() {
                systemInfo.close();
              }

              on(type, callback, target, once) {
                if (this._engineInited && type === Game.EVENT_ENGINE_INITED || this._inited && type === Game.EVENT_GAME_INITED || this._rendererInitialized && type === Game.EVENT_RENDERER_INITED) {
                  callback.call(target);
                }

                return this.eventTargetOn(type, callback, target, once);
              }

              once(type, callback, target) {
                if (this._engineInited && type === Game.EVENT_ENGINE_INITED) {
                  return callback.call(target);
                }

                return this.eventTargetOnce(type, callback, target);
              }

              init(config) {
                this._compatibleWithOldParams(config);

                return Promise.resolve().then(() => {
                  this.emit(Game.EVENT_PRE_BASE_INIT);
                  return this.onPreBaseInitDelegate.dispatch();
                }).then(() => {
                  {
                    console.time('Init Base');
                  }

                  const debugMode = config.debugMode || DebugMode.NONE;

                  _resetDebugSetting(debugMode);

                  sys.init();

                  this._initEvents();
                }).then(() => settings.init(config.settingsPath, config.overrideSettings)).then(() => {
                  {
                    console.timeEnd('Init Base');
                  }

                  if (sys.isXR) {
                    var _settings$querySettin, _settings$querySettin2;

                    xr.entry = xr.XrEntry.getInstance();
                    const xrMSAA = (_settings$querySettin = settings.querySettings(Settings.Category.RENDERING, 'msaa')) !== null && _settings$querySettin !== void 0 ? _settings$querySettin : 1;
                    const xrRenderingScale = (_settings$querySettin2 = settings.querySettings(Settings.Category.RENDERING, 'renderingScale')) !== null && _settings$querySettin2 !== void 0 ? _settings$querySettin2 : 1.0;
                    xr.entry.setMultisamplesRTT(xrMSAA);
                    xr.entry.setRenderingScale(xrRenderingScale);
                  }

                  this.emit(Game.EVENT_POST_BASE_INIT);
                  return this.onPostBaseInitDelegate.dispatch();
                }).then(() => {
                  this.emit(Game.EVENT_PRE_INFRASTRUCTURE_INIT);
                  return this.onPreInfrastructureInitDelegate.dispatch();
                }).then(() => {
                  {
                    console.time('Init Infrastructure');
                  }

                  macro.init();
                  const adapter = findCanvas();

                  if (adapter) {
                    this.canvas = adapter.canvas;
                    this.frame = adapter.frame;
                    this.container = adapter.container;
                  }

                  screen.init();
                  garbageCollectionManager.init();
                  deviceManager.init(this.canvas, bindingMappingInfo);
                  assetManager.init();
                  builtinResMgr.init();
                  Layers.init();
                  this.initPacer();

                  {
                    console.timeEnd('Init Infrastructure');
                  }
                }).then(() => {
                  this.emit(Game.EVENT_POST_INFRASTRUCTURE_INIT);
                  return this.onPostInfrastructureInitDelegate.dispatch();
                }).then(() => {
                  this.emit(Game.EVENT_PRE_SUBSYSTEM_INIT);
                  return this.onPreSubsystemInitDelegate.dispatch();
                }).then(() => {
                  {
                    console.time('Init SubSystem');
                  }

                  director.init();
                  return builtinResMgr.loadBuiltinAssets();
                }).then(() => {
                  {
                    console.timeEnd('Init SubSystem');
                  }

                  this.emit(Game.EVENT_POST_SUBSYSTEM_INIT);
                  return this.onPostSubsystemInitDelegate.dispatch();
                }).then(() => {
                  log(`Cocos Creator v${engineVersion}`);
                  this.emit(Game.EVENT_ENGINE_INITED);
                  this._engineInited = true;
                }).then(() => {
                  this.emit(Game.EVENT_PRE_PROJECT_INIT);
                  return this.onPreProjectInitDelegate.dispatch();
                }).then(() => {
                  {
                    console.time('Init Project');
                  }

                  const jsList = settings.querySettings(Settings.Category.PLUGINS, 'jsList');
                  let promise = Promise.resolve();

                  if (jsList) {
                    const projectPath = settings.querySettings(Settings.Category.PATH, 'projectPath') || '';
                    jsList.forEach(jsListFile => {
                      promise = promise.then(() => loadJsFile(`${ 'src'}/${jsListFile}`));
                    });
                  }

                  return promise;
                }).then(() => {
                  const scriptPackages = settings.querySettings(Settings.Category.SCRIPTING, 'scriptPackages');

                  if (scriptPackages) {
                    return Promise.all(scriptPackages.map(pack => module.import(pack)));
                  }

                  return Promise.resolve([]);
                }).then(() => this._loadProjectBundles()).then(() => this._setupRenderPipeline()).then(() => this._loadPreloadAssets()).then(() => {
                  builtinResMgr.compileBuiltinMaterial();
                  return SplashScreen.instance.init();
                }).then(() => {
                  {
                    console.timeEnd('Init Project');
                  }

                  this.emit(Game.EVENT_POST_PROJECT_INIT);
                  return this.onPostProjectInitDelegate.dispatch();
                }).then(() => {
                  this._inited = true;

                  this._safeEmit(Game.EVENT_GAME_INITED);
                });
              }

              _compatibleWithOldParams(config) {
                const overrideSettings = config.overrideSettings = config.overrideSettings || {};

                if ('showFPS' in config) {
                  overrideSettings.profiling = overrideSettings.profiling || {};
                  overrideSettings.profiling.showFPS = config.showFPS;
                }

                if ('frameRate' in config) {
                  overrideSettings.screen = overrideSettings.screen || {};
                  overrideSettings.screen.frameRate = config.frameRate;
                }

                if ('renderMode' in config) {
                  overrideSettings.rendering = overrideSettings.rendering || {};
                  overrideSettings.rendering.renderMode = config.renderMode;
                }

                if ('renderPipeline' in config) {
                  overrideSettings.rendering = overrideSettings.rendering || {};
                  overrideSettings.rendering.renderPipeline = config.renderPipeline;
                }

                if ('assetOptions' in config) {
                  overrideSettings.assets = overrideSettings.assets || {};
                  Object.assign(overrideSettings.assets, config.assetOptions);
                }

                if ('customJointTextureLayouts' in config) {
                  overrideSettings.animation = overrideSettings.animation || {};
                  overrideSettings.animation.customJointTextureLayouts = config.customJointTextureLayouts;
                }

                if ('physics' in config) {
                  overrideSettings.physics = overrideSettings.physics || {};
                  Object.assign(overrideSettings.physics, config.physics);
                }

                if ('orientation' in config) {
                  overrideSettings.screen = overrideSettings.screen || {};
                  overrideSettings.screen.orientation = config.orientation;
                }

                if ('exactFitScreen' in config) {
                  overrideSettings.screen = overrideSettings.screen || {};
                  overrideSettings.screen.exactFitScreen = config.exactFitScreen;
                }
              }

              _loadPreloadAssets() {
                const preloadAssets = settings.querySettings(Settings.Category.ASSETS, 'preloadAssets');
                if (!preloadAssets) return Promise.resolve([]);
                return Promise.all(preloadAssets.map(uuid => new Promise((resolve, reject) => {
                  assetManager.loadAny(uuid, err => {
                    if (err) {
                      reject(err);
                      return;
                    }

                    resolve();
                  });
                })));
              }

              _loadProjectBundles() {
                const preloadBundles = settings.querySettings(Settings.Category.ASSETS, 'preloadBundles');
                if (!preloadBundles) return Promise.resolve([]);
                return Promise.all(preloadBundles.map(({
                  bundle,
                  version
                }) => new Promise((resolve, reject) => {
                  const opts = {};
                  if (version) opts.version = version;
                  assetManager.loadBundle(bundle, opts, err => {
                    if (err) {
                      reject(err);
                      return;
                    }

                    resolve();
                  });
                })));
              }

              run(onStart) {
                if (onStart) {
                  this.onStart = onStart;
                }

                if (!this._inited || EDITOR$1 ) {
                  return;
                }

                this.resume();
              }

              _calculateDT() {
                const now = performance.now();
                this._deltaTime = now > this._startTime ? (now - this._startTime) / 1000 : 0;

                if (this._deltaTime > Game.DEBUG_DT_THRESHOLD) {
                  this._deltaTime = this.frameTime / 1000;
                }

                this._startTime = now;
                return this._deltaTime;
              }

              _updateCallback() {
                if (!this._inited) return;

                if (!SplashScreen.instance.isFinished) {
                  SplashScreen.instance.update(this._calculateDT());
                } else if (this._shouldLoadLaunchScene) {
                  this._shouldLoadLaunchScene = false;
                  const launchScene = settings.querySettings(Settings.Category.LAUNCH, 'launchScene');

                  if (launchScene) {
                    director.loadScene(launchScene, () => {
                      var _this$onStart;

                      console.log(`Success to load scene: ${launchScene}`);
                      this._initTime = performance.now();
                      director.startAnimation();
                      (_this$onStart = this.onStart) === null || _this$onStart === void 0 ? void 0 : _this$onStart.call(this);
                    });
                  } else {
                    var _this$onStart2;

                    this._initTime = performance.now();
                    director.startAnimation();
                    (_this$onStart2 = this.onStart) === null || _this$onStart2 === void 0 ? void 0 : _this$onStart2.call(this);
                  }
                } else {
                  director.tick(this._calculateDT());
                }
              }

              initPacer() {
                var _settings$querySettin3;

                const frameRate = (_settings$querySettin3 = settings.querySettings(Settings.Category.SCREEN, 'frameRate')) !== null && _settings$querySettin3 !== void 0 ? _settings$querySettin3 : 60;
                assert(typeof frameRate === 'number');
                this._pacer = new Pacer();
                this._pacer.onTick = this._updateCallback.bind(this);
                this.frameRate = frameRate;
              }

              _initEvents() {
                systemInfo.on('show', this._onShow, this);
                systemInfo.on('hide', this._onHide, this);
              }

              _onHide() {
                this.emit(Game.EVENT_HIDE);
                this.pause();
              }

              _onShow() {
                this.emit(Game.EVENT_SHOW);
                this.resume();
              }

              addPersistRootNode(node) {
                director.addPersistRootNode(node);
              }

              removePersistRootNode(node) {
                director.removePersistRootNode(node);
              }

              isPersistRootNode(node) {
                return director.isPersistRootNode(node);
              }

              _setupRenderPipeline() {
                const renderPipeline = settings.querySettings(Settings.Category.RENDERING, 'renderPipeline');

                if (!renderPipeline) {
                  return this._setRenderPipeline();
                }

                return new Promise((resolve, reject) => {
                  assetManager.loadAny(renderPipeline, (err, asset) => err || !(asset instanceof RenderPipeline$1) ? reject(err) : resolve(asset));
                }).then(asset => {
                  this._setRenderPipeline(asset);
                }).catch(reason => {
                  warn(reason);
                  warn(`Failed load render pipeline: ${renderPipeline}, engine failed to initialize, will fallback to default pipeline`);

                  this._setRenderPipeline();
                });
              }

              _setRenderPipeline(rppl) {
                if (!director.root.setRenderPipeline(rppl)) {
                  this._setRenderPipeline();
                }

                this._rendererInitialized = true;

                this._safeEmit(Game.EVENT_RENDERER_INITED);
              }

              _safeEmit(event) {
                {
                  this.emit(event);
                }
              }

            } exports('fh', Game);
            Game.EVENT_HIDE = 'game_on_hide';
            Game.EVENT_SHOW = 'game_on_show';
            Game.EVENT_LOW_MEMORY = 'game_on_low_memory';
            Game.EVENT_GAME_INITED = 'game_inited';
            Game.EVENT_ENGINE_INITED = 'engine_inited';
            Game.EVENT_RENDERER_INITED = 'renderer_inited';
            Game.EVENT_PRE_BASE_INIT = 'pre_base_init';
            Game.EVENT_POST_BASE_INIT = 'post_base_init';
            Game.EVENT_PRE_INFRASTRUCTURE_INIT = 'pre_infrastructure_init';
            Game.EVENT_POST_INFRASTRUCTURE_INIT = 'post_infrastructure_init';
            Game.EVENT_PRE_SUBSYSTEM_INIT = 'pre_subsystem_init';
            Game.EVENT_POST_SUBSYSTEM_INIT = 'post_subsystem_init';
            Game.EVENT_PRE_PROJECT_INIT = 'pre_project_init';
            Game.EVENT_POST_PROJECT_INIT = 'post_project_init';
            Game.EVENT_RESTART = 'game_on_restart';
            Game.RENDER_TYPE_CANVAS = 0;
            Game.RENDER_TYPE_WEBGL = 1;
            Game.RENDER_TYPE_OPENGL = 2;
            Game.RENDER_TYPE_HEADLESS = 3;
            Game.DEBUG_DT_THRESHOLD = 1;
            legacyCC.Game = Game;
            const game = exports('cR', legacyCC.game = new Game());

            deprecateModuleExportedName({
              replaceProperty: {
                since: '3.6.0',
                removed: false
              },
              removeProperty: {
                since: '3.6.0',
                removed: false
              },
              markAsWarning: {
                since: '3.6.0',
                removed: false
              },
              setDefaultLogTimes: {
                since: '3.6.0',
                removed: false
              }
            });

            var _dec$f, _dec2$8, _dec3$6, _class$f, _class2$d, _descriptor$c, _temp$d;
            let PrefabLink = exports('ga', (_dec$f = ccclass('cc.PrefabLink'), _dec2$8 = type(Prefab), _dec3$6 = visible(), _dec$f(_class$f = (_class2$d = (_temp$d = class PrefabLink extends Component {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "prefab", _descriptor$c, this);
              }

            }, _temp$d), (_descriptor$c = _applyDecoratedDescriptor(_class2$d.prototype, "prefab", [_dec2$8, serializable, _dec3$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$d)) || _class$f));

            const _vec3 = new Vec3();

            function WorldNode3DToLocalNodeUI(mainCamera, wpos, uiNode, out) {
              if (!out) {
                out = new Vec3();
              }

              mainCamera.convertToUINode(wpos, uiNode, out);
              const pos = uiNode.position;
              out.add(pos);
              return out;
            }
            function WorldNode3DToWorldNodeUI(mainCamera, wpos, out) {
              if (!out) {
                out = new Vec3();
              }

              mainCamera.worldToScreen(wpos, out);
              out.x /= legacyCC.view.getScaleX();
              out.y /= legacyCC.view.getScaleY();
              return out;
            }
            const convertUtils = exports('gg', {
              WorldNode3DToLocalNodeUI,
              WorldNode3DToWorldNodeUI
            });
            legacyCC.pipelineUtils = convertUtils;
            replaceProperty(legacyCC.pipelineUtils, 'cc.pipelineUtils', [{
              name: 'WorldNode3DToLocalNodeUI',
              newName: 'convertToUINode',
              targetName: 'cc.Camera.prototype',

              customFunction(...args) {
                const camera = args[0];
                const out = args[3] || _vec3;
                camera.convertToUINode(args[1], args[2], out);
                out.add(args[2].position);
                return args[3] || out.clone();
              }

            }]);

            const visibleRect = exports('dY', {
              topLeft: legacyCC.v2(0, 0),
              topRight: legacyCC.v2(0, 0),
              top: legacyCC.v2(0, 0),
              bottomLeft: legacyCC.v2(0, 0),
              bottomRight: legacyCC.v2(0, 0),
              bottom: legacyCC.v2(0, 0),
              center: legacyCC.v2(0, 0),
              left: legacyCC.v2(0, 0),
              right: legacyCC.v2(0, 0),
              width: 0,
              height: 0,

              init(visibleRect_) {
                const w = this.width = visibleRect_.width;
                const h = this.height = visibleRect_.height;
                const l = visibleRect_.x;
                const b = visibleRect_.y;
                const t = b + h;
                const r = l + w;
                this.topLeft.x = l;
                this.topLeft.y = t;
                this.topRight.x = r;
                this.topRight.y = t;
                this.top.x = l + w / 2;
                this.top.y = t;
                this.bottomLeft.x = l;
                this.bottomLeft.y = b;
                this.bottomRight.x = r;
                this.bottomRight.y = b;
                this.bottom.x = l + w / 2;
                this.bottom.y = b;
                this.center.x = l + w / 2;
                this.center.y = b + h / 2;
                this.left.x = l;
                this.left.y = b + h / 2;
                this.right.x = r;
                this.right.y = b + h / 2;
              }

            });
            legacyCC.visibleRect = visibleRect;

            const localWinSize = new Size();
            const orientationMap$1 = {
              [macro.ORIENTATION_AUTO]: Orientation.AUTO,
              [macro.ORIENTATION_LANDSCAPE]: Orientation.LANDSCAPE,
              [macro.ORIENTATION_PORTRAIT]: Orientation.PORTRAIT
            };
            class View extends Eventify(System) {
              constructor() {
                super();
                this._designResolutionSize = void 0;
                this._scaleX = void 0;
                this._scaleY = void 0;
                this._viewportRect = void 0;
                this._visibleRect = void 0;
                this._autoFullScreen = void 0;
                this._retinaEnabled = void 0;
                this._resizeCallback = void 0;
                this._resolutionPolicy = void 0;
                this._rpExactFit = void 0;
                this._rpShowAll = void 0;
                this._rpNoBorder = void 0;
                this._rpFixedHeight = void 0;
                this._rpFixedWidth = void 0;
                const _strategyer = ContainerStrategy;
                const _strategy = ContentStrategy;
                this._designResolutionSize = new Size(0, 0);
                this._scaleX = 1;
                this._scaleY = 1;
                this._viewportRect = new Rect(0, 0, 0, 0);
                this._visibleRect = new Rect(0, 0, 0, 0);
                this._autoFullScreen = false;
                this._retinaEnabled = false;
                this._resizeCallback = null;
                this._rpExactFit = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.EXACT_FIT);
                this._rpShowAll = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.SHOW_ALL);
                this._rpNoBorder = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.NO_BORDER);
                this._rpFixedHeight = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_HEIGHT);
                this._rpFixedWidth = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_WIDTH);
                this._resolutionPolicy = this._rpShowAll;
              }

              init() {
                const windowSize = screen.windowSize;
                const w = windowSize.width;
                const h = windowSize.height;
                this._designResolutionSize.width = w;
                this._designResolutionSize.height = h;
                this._viewportRect.width = w;
                this._viewportRect.height = h;
                this._visibleRect.width = w;
                this._visibleRect.height = h;
                localWinSize.width = this._visibleRect.width;
                localWinSize.height = this._visibleRect.height;

                if (visibleRect) {
                  visibleRect.init(this._visibleRect);
                }

                {
                  this.resizeWithBrowserSize(true);
                  const designResolution = settings.querySettings(Settings.Category.SCREEN, 'designResolution');

                  if (designResolution) {
                    this.setDesignResolutionSize(Number(designResolution.width), Number(designResolution.height), designResolution.policy || ResolutionPolicy.FIXED_HEIGHT);
                  }
                }

                screenAdapter.on('window-resize', this._updateAdaptResult, this);
                screenAdapter.on('orientation-change', this._updateAdaptResult, this);
                screenAdapter.on('fullscreen-change', this._updateAdaptResult, this);
              }

              resizeWithBrowserSize(enabled) {
                screenAdapter.handleResizeEvent = enabled;
              }

              setResizeCallback(callback) {
                if (typeof callback === 'function' || callback == null) {
                  this._resizeCallback = callback;
                }
              }

              setOrientation(orientation) {
                screenAdapter.orientation = orientationMap$1[orientation];
              }

              adjustViewportMeta(enabled) {}

              enableRetina(enabled) {
                this._retinaEnabled = !!enabled;
              }

              isRetinaEnabled() {
                return this._retinaEnabled;
              }

              enableAutoFullScreen(enabled) {
                if (enabled === this._autoFullScreen) {
                  return;
                }

                this._autoFullScreen = enabled;

                if (enabled) {
                  screen.requestFullScreen().catch(e => {});
                }
              }

              isAutoFullScreenEnabled() {
                return this._autoFullScreen;
              }

              setCanvasSize(width, height) {
                screenAdapter.resolutionScale = 1;
                const dpr = screenAdapter.devicePixelRatio;
                const windowSize = new Size(width * dpr, height * dpr);
                screen.windowSize = windowSize;
              }

              getCanvasSize() {
                return screen.windowSize;
              }

              getFrameSize() {
                const dpr = screenAdapter.devicePixelRatio;
                const sizeInCssPixels = screen.windowSize;
                sizeInCssPixels.width /= dpr;
                sizeInCssPixels.height /= dpr;
                return sizeInCssPixels;
              }

              setFrameSize(width, height) {
                const dpr = screenAdapter.devicePixelRatio;
                screen.windowSize = new Size(width * dpr, height * dpr);
              }

              getVisibleSize() {
                return new Size(this._visibleRect.width, this._visibleRect.height);
              }

              getVisibleSizeInPixel() {
                return new Size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
              }

              getVisibleOrigin() {
                return new Vec2(this._visibleRect.x, this._visibleRect.y);
              }

              getVisibleOriginInPixel() {
                return new Vec2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
              }

              getResolutionPolicy() {
                return this._resolutionPolicy;
              }

              _updateResolutionPolicy(resolutionPolicy) {
                if (resolutionPolicy instanceof ResolutionPolicy) {
                  this._resolutionPolicy = resolutionPolicy;
                } else {
                  const _locPolicy = ResolutionPolicy;

                  if (resolutionPolicy === _locPolicy.EXACT_FIT) {
                    this._resolutionPolicy = this._rpExactFit;
                  }

                  if (resolutionPolicy === _locPolicy.SHOW_ALL) {
                    this._resolutionPolicy = this._rpShowAll;
                  }

                  if (resolutionPolicy === _locPolicy.NO_BORDER) {
                    this._resolutionPolicy = this._rpNoBorder;
                  }

                  if (resolutionPolicy === _locPolicy.FIXED_HEIGHT) {
                    this._resolutionPolicy = this._rpFixedHeight;
                  }

                  if (resolutionPolicy === _locPolicy.FIXED_WIDTH) {
                    this._resolutionPolicy = this._rpFixedWidth;
                  }
                }
              }

              setResolutionPolicy(resolutionPolicy) {
                this._updateResolutionPolicy(resolutionPolicy);

                const designedResolution = view.getDesignResolutionSize();
                view.setDesignResolutionSize(designedResolution.width, designedResolution.height, resolutionPolicy);
              }

              setDesignResolutionSize(width, height, resolutionPolicy) {
                if (!(width > 0 && height > 0)) {
                  errorID(2200);
                  return;
                }

                this._updateResolutionPolicy(resolutionPolicy);

                const policy = this._resolutionPolicy;

                if (policy) {
                  policy.preApply(this);
                }

                this._designResolutionSize.width = width;
                this._designResolutionSize.height = height;
                const result = policy.apply(this, this._designResolutionSize);

                if (result.scale && result.scale.length === 2) {
                  this._scaleX = result.scale[0];
                  this._scaleY = result.scale[1];
                }

                if (result.viewport) {
                  const vp = this._viewportRect;
                  const vb = this._visibleRect;
                  const rv = result.viewport;
                  vp.x = rv.x;
                  vp.y = rv.y;
                  vp.width = rv.width;
                  vp.height = rv.height;
                  vb.x = 0;
                  vb.y = 0;
                  vb.width = rv.width / this._scaleX;
                  vb.height = rv.height / this._scaleY;
                }

                policy.postApply(this);
                localWinSize.width = this._visibleRect.width;
                localWinSize.height = this._visibleRect.height;

                if (visibleRect) {
                  visibleRect.init(this._visibleRect);
                }

                this.emit('design-resolution-changed');
              }

              getDesignResolutionSize() {
                return new Size(this._designResolutionSize.width, this._designResolutionSize.height);
              }

              setRealPixelResolution(width, height, resolutionPolicy) {

                this.setDesignResolutionSize(width, height, resolutionPolicy);
              }

              getViewportRect() {
                return this._viewportRect;
              }

              getScaleX() {
                return this._scaleX;
              }

              getScaleY() {
                return this._scaleY;
              }

              getDevicePixelRatio() {
                return screenAdapter.devicePixelRatio;
              }

              convertToLocationInView(tx, ty, relatedPos, out = new Vec2()) {
                const x = screenAdapter.devicePixelRatio * (tx - relatedPos.left);
                const y = screenAdapter.devicePixelRatio * (relatedPos.top + relatedPos.height - ty);

                if (screenAdapter.isFrameRotated) {
                  out.x = screen.windowSize.width - y;
                  out.y = x;
                } else {
                  out.x = x;
                  out.y = y;
                }

                return out;
              }

              _convertToUISpace(point) {
                const viewport = this._viewportRect;
                point.x = (point.x - viewport.x) / this._scaleX;
                point.y = (point.y - viewport.y) / this._scaleY;
              }

              _updateAdaptResult() {
                var _this$_resizeCallback;

                legacyCC.director.root.resize(screen.windowSize.width, screen.windowSize.height);
                const width = this._designResolutionSize.width;
                const height = this._designResolutionSize.height;

                if (width > 0) {
                  this.setDesignResolutionSize(width, height, this._resolutionPolicy);
                }

                this.emit('canvas-resize');
                (_this$_resizeCallback = this._resizeCallback) === null || _this$_resizeCallback === void 0 ? void 0 : _this$_resizeCallback.call(this);
              }

            } exports('g3', View);
            View.instance = void 0;

            class ContainerStrategy {
              constructor() {
                this.name = 'ContainerStrategy';
              }

              preApply(_view) {}

              apply(_view, designedResolution) {}

              postApply(_view) {}

              _setupCanvas() {
                const locCanvas = legacyCC.game.canvas;

                if (locCanvas) {
                  const windowSize = screen.windowSize;
                  locCanvas.width = windowSize.width;
                  locCanvas.height = windowSize.height;
                }
              }

            }

            ContainerStrategy.EQUAL_TO_FRAME = void 0;
            ContainerStrategy.PROPORTION_TO_FRAME = void 0;

            class ContentStrategy {
              constructor() {
                this.name = 'ContentStrategy';
                this._result = void 0;
                this._result = {
                  scale: [1, 1],
                  viewport: null
                };
              }

              preApply(_view) {}

              apply(_view, designedResolution) {
                return {
                  scale: [1, 1]
                };
              }

              postApply(_view) {}

              _buildResult(containerW, containerH, contentW, contentH, scaleX, scaleY) {
                if (Math.abs(containerW - contentW) < 2) {
                  contentW = containerW;
                }

                if (Math.abs(containerH - contentH) < 2) {
                  contentH = containerH;
                }

                const viewport = new Rect(Math.round((containerW - contentW) / 2), Math.round((containerH - contentH) / 2), contentW, contentH);
                this._result.scale = [scaleX, scaleY];
                this._result.viewport = viewport;
                return this._result;
              }

            }

            ContentStrategy.EXACT_FIT = void 0;
            ContentStrategy.SHOW_ALL = void 0;
            ContentStrategy.NO_BORDER = void 0;
            ContentStrategy.FIXED_HEIGHT = void 0;
            ContentStrategy.FIXED_WIDTH = void 0;

            (() => {
              class EqualToFrame extends ContainerStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'EqualToFrame';
                }

                apply(_view, designedResolution) {
                  screenAdapter.isProportionalToFrame = false;

                  this._setupCanvas();
                }

              }

              class ProportionalToFrame extends ContainerStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'ProportionalToFrame';
                }

                apply(_view, designedResolution) {
                  screenAdapter.isProportionalToFrame = true;

                  this._setupCanvas();
                }

              }

              ContainerStrategy.EQUAL_TO_FRAME = new EqualToFrame();
              ContainerStrategy.PROPORTION_TO_FRAME = new ProportionalToFrame();

              class ExactFit extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'ExactFit';
                }

                apply(_view, designedResolution) {
                  const windowSize = screen.windowSize;
                  const containerW = windowSize.width;
                  const containerH = windowSize.height;
                  const scaleX = containerW / designedResolution.width;
                  const scaleY = containerH / designedResolution.height;
                  return this._buildResult(containerW, containerH, containerW, containerH, scaleX, scaleY);
                }

              }

              class ShowAll extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'ShowAll';
                }

                apply(_view, designedResolution) {
                  const windowSize = screen.windowSize;
                  const containerW = windowSize.width;
                  const containerH = windowSize.height;
                  const designW = designedResolution.width;
                  const designH = designedResolution.height;
                  const scaleX = containerW / designW;
                  const scaleY = containerH / designH;
                  let scale = 0;
                  let contentW;
                  let contentH;

                  if (scaleX < scaleY) {
                    scale = scaleX;
                    contentW = containerW;
                    contentH = designH * scale;
                  } else {
                    scale = scaleY;
                    contentW = designW * scale;
                    contentH = containerH;
                  }

                  return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }

              }

              class NoBorder extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'NoBorder';
                }

                apply(_view, designedResolution) {
                  const windowSize = screen.windowSize;
                  const containerW = windowSize.width;
                  const containerH = windowSize.height;
                  const designW = designedResolution.width;
                  const designH = designedResolution.height;
                  const scaleX = containerW / designW;
                  const scaleY = containerH / designH;
                  let scale;
                  let contentW;
                  let contentH;

                  if (scaleX < scaleY) {
                    scale = scaleY;
                    contentW = designW * scale;
                    contentH = containerH;
                  } else {
                    scale = scaleX;
                    contentW = containerW;
                    contentH = designH * scale;
                  }

                  return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }

              }

              class FixedHeight extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'FixedHeight';
                }

                apply(_view, designedResolution) {
                  const windowSize = screen.windowSize;
                  const containerW = windowSize.width;
                  const containerH = windowSize.height;
                  const designH = designedResolution.height;
                  const scale = containerH / designH;
                  const contentW = containerW;
                  const contentH = containerH;
                  return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }

              }

              class FixedWidth extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'FixedWidth';
                }

                apply(_view, designedResolution) {
                  const windowSize = screen.windowSize;
                  const containerW = windowSize.width;
                  const containerH = windowSize.height;
                  const designW = designedResolution.width;
                  const scale = containerW / designW;
                  const contentW = containerW;
                  const contentH = containerH;
                  return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }

              }

              ContentStrategy.EXACT_FIT = new ExactFit();
              ContentStrategy.SHOW_ALL = new ShowAll();
              ContentStrategy.NO_BORDER = new NoBorder();
              ContentStrategy.FIXED_HEIGHT = new FixedHeight();
              ContentStrategy.FIXED_WIDTH = new FixedWidth();
            })();

            class ResolutionPolicy {
              constructor(containerStg, contentStg) {
                this.name = 'ResolutionPolicy';
                this._containerStrategy = void 0;
                this._contentStrategy = void 0;
                this._containerStrategy = null;
                this._contentStrategy = null;
                this.setContainerStrategy(containerStg);
                this.setContentStrategy(contentStg);
              }

              get canvasSize() {
                return screen.windowSize;
              }

              preApply(_view) {
                this._contentStrategy.preApply(_view);
              }

              apply(_view, designedResolution) {
                this._containerStrategy.apply(_view, designedResolution);

                return this._contentStrategy.apply(_view, designedResolution);
              }

              postApply(_view) {
                this._contentStrategy.postApply(_view);
              }

              setContainerStrategy(containerStg) {
                if (containerStg instanceof ContainerStrategy) {
                  this._containerStrategy = containerStg;
                }
              }

              setContentStrategy(contentStg) {
                if (contentStg instanceof ContentStrategy) {
                  this._contentStrategy = contentStg;
                }
              }

            } exports('gA', ResolutionPolicy);
            ResolutionPolicy.EXACT_FIT = 0;
            ResolutionPolicy.NO_BORDER = 1;
            ResolutionPolicy.SHOW_ALL = 2;
            ResolutionPolicy.FIXED_HEIGHT = 3;
            ResolutionPolicy.FIXED_WIDTH = 4;
            ResolutionPolicy.UNKNOWN = 5;
            ResolutionPolicy.ContainerStrategy = ContainerStrategy;
            ResolutionPolicy.ContentStrategy = ContentStrategy;
            legacyCC.ResolutionPolicy = ResolutionPolicy;
            const view = exports('ej', View.instance = legacyCC.view = new View());
            director.registerSystem('view', view, 0);
            legacyCC.winSize = localWinSize;

            removeProperty(View.prototype, 'View.prototype', [{
              name: 'isAntiAliasEnabled',
              suggest: 'The API of Texture2d have been largely modified, no alternative'
            }, {
              name: 'enableAntiAlias',
              suggest: 'The API of Texture2d have been largely modified, no alternative'
            }]);
            markAsWarning(View.prototype, 'View.prototype', [{
              name: 'adjustViewportMeta'
            }, {
              name: 'enableAutoFullScreen',
              suggest: 'use screen.requestFullScreen() instead.'
            }, {
              name: 'isAutoFullScreenEnabled'
            }, {
              name: 'setCanvasSize',
              suggest: 'setting size in CSS pixels is not recommended, please use screen.windowSize instead.'
            }, {
              name: 'getCanvasSize',
              suggest: 'please use screen.windowSize instead.'
            }, {
              name: 'getFrameSize',
              suggest: 'getting size in CSS pixels is not recommended, please use screen.windowSize instead.'
            }, {
              name: 'setFrameSize',
              suggest: 'setting size in CSS pixels is not recommended, please use screen.windowSize instead.'
            }, {
              name: 'getDevicePixelRatio',
              suggest: 'use screen.devicePixelRatio instead.'
            }, {
              name: 'convertToLocationInView'
            }, {
              name: 'enableRetina'
            }, {
              name: 'isRetinaEnabled'
            }, {
              name: 'setRealPixelResolution'
            }]);
            markAsWarning(legacyCC, 'cc', [{
              name: 'winSize',
              suggest: 'please use view.getVisibleSize() instead.'
            }]);
            markAsWarning(sys, 'sys', [{
              name: 'capabilities',
              suggest: 'please use sys.hasFeature() method instead.'
            }]);
            replaceProperty(sys, 'sys', ['UNKNOWN', 'ENGLISH', 'CHINESE', 'FRENCH', 'ITALIAN', 'GERMAN', 'SPANISH', 'DUTCH', 'RUSSIAN', 'KOREAN', 'JAPANESE', 'HUNGARIAN', 'PORTUGUESE', 'ARABIC', 'NORWEGIAN', 'POLISH', 'TURKISH', 'UKRAINIAN', 'ROMANIAN', 'BULGARIAN'].map(item => ({
              name: `LANGUAGE_${item}`,
              newName: item,
              target: sys.Language,
              targetName: 'sys.Language'
            })));
            replaceProperty(sys, 'sys', ['UNKNOWN', 'IOS', 'ANDROID', 'WINDOWS', 'LINUX', 'OSX'].map(item => ({
              name: `OS_${item}`,
              newName: item,
              target: sys.OS,
              targetName: 'sys.OS'
            })));
            replaceProperty(sys, 'sys', ['UNKNOWN', 'WECHAT', 'ANDROID', 'IE', 'EDGE', 'QQ', 'MOBILE_QQ', 'UC', 'UCBS', 'BAIDU_APP', 'BAIDU', 'MAXTHON', 'OPERA', 'OUPENG', 'MIUI', 'FIREFOX', 'SAFARI', 'CHROME', 'LIEBAO', 'QZONE', 'SOUGOU', 'HUAWEI'].map(item => ({
              name: `BROWSER_TYPE_${item}`,
              newName: item,
              target: sys.BrowserType,
              targetName: 'sys.BrowserType'
            })));
            replaceProperty(sys, 'sys', [{
              name: 'BROWSER_TYPE_360',
              newName: 'BROWSER_360',
              target: sys.BrowserType,
              targetName: 'sys.BrowserType'
            }]);
            replaceProperty(sys, 'sys', ['UNKNOWN', 'EDITOR_PAGE', 'EDITOR_CORE', 'MOBILE_BROWSER', 'DESKTOP_BROWSER', 'WIN32', 'MACOS', 'IOS', 'ANDROID', 'OHOS', 'WECHAT_GAME', 'BAIDU_MINI_GAME', 'XIAOMI_QUICK_GAME', 'ALIPAY_MINI_GAME', 'BYTEDANCE_MINI_GAME', 'OPPO_MINI_GAME', 'VIVO_MINI_GAME', 'HUAWEI_QUICK_GAME', 'COCOSPLAY', 'LINKSURE_MINI_GAME', 'QTT_MINI_GAME'].map(item => ({
              name: item,
              target: sys.Platform,
              targetName: 'sys.Platform'
            })));
            replaceProperty(sys, 'sys', [{
              name: 'IPHONE',
              newName: 'IOS',
              target: sys.Platform,
              targetName: 'sys.Platform'
            }, {
              name: 'IPAD',
              newName: 'IOS',
              target: sys.Platform,
              targetName: 'sys.Platform'
            }]);
            removeProperty(sys, 'sys', ['LINUX', 'BLACKBERRY', 'NACL', 'EMSCRIPTEN', 'TIZEN', 'WINRT', 'WP8', 'QQ_PLAY', 'FB_PLAYABLE_ADS'].map(item => ({
              name: item
            })));
            replaceProperty(sys, 'sys', [{
              name: 'windowPixelResolution',
              target: screen,
              targetName: 'screen',
              newName: 'windowSize'
            }]);
            markAsWarning(screen, 'screen', [{
              name: 'autoFullScreen',
              suggest: 'please use screen.requestFullScreen() instead.'
            }, {
              name: 'disableAutoFullScreen'
            }]);

            var commonjsGlobal = exports('fA', typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {});

            function unwrapExports (x) {
            	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
            }

            function createCommonjsModule(fn, module) {
            	return module = { exports: {} }, fn(module, module.exports), module.exports;
            }

            var bullet_cocos=createCommonjsModule(function(module,exports$1){(function(global,factory){{factory(exports$1);}})(typeof globalThis!=="undefined"?globalThis:typeof self!=="undefined"?self:commonjsGlobal,function(_exports){Object.defineProperty(_exports,"__esModule",{value:true});_exports.default=void 0;function instantiate(A){for(var t1,t=new Uint8Array(123),f=25;0<=f;--f)t[48+f]=52+f,t[65+f]=f,t[97+f]=26+f;function c1(A,f,r){for(var e,i,a=0,n=f,o=r.length,b=f+(3*o>>2)-("="==r[o-2])-("="==r[o-1]);a<o;a+=4)e=t[r.charCodeAt(a+1)],i=t[r.charCodeAt(a+2)],A[n++]=t[r.charCodeAt(a)]<<2|e>>4,n<b&&(A[n++]=e<<4|i>>2),n<b&&(A[n++]=i<<6|t[r.charCodeAt(a+3)]);}t[43]=62,t[47]=63;var r=new ArrayBuffer(16),u1=new Int32Array(r),e=new Float32Array(r),i=new Float64Array(r);function k1(A,f){u1[A]=f;}function l1(){return i[0];}function s1(A){i[0]=A;}function v1(A){e[2]=A;}function d1(){return e[2];}return function(A){var r=A.memory,e=r.buffer;r.grow=b1;var p2=new Int8Array(e),$=new Int16Array(e),T2=new Int32Array(e),S2=new Uint8Array(e),A2=new Uint16Array(e),T=new Uint32Array(e),j2=new Float32Array(e),X=new Float64Array(e),P2=Math.imul,z2=Math.fround,O2=Math.abs,k=Math.clz32,F2=Math.min,H2=Math.max,R=Math.floor,_2=(Math.sqrt),j=A.abort,p=1/0,a=A.syncPhysicsToGraphics,i=A.fd_close,n=A.fd_write,o=A.fd_seek,L2=89792,z=0;function K2(A){var f=0,r=0,e=0,i=0,a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0;L2=u=L2-16|0;A:{f:{r:{e:{i:{a:{n:{o:{b:{t:{c:{if(A>>>0<=236){if(3&(f=(a=T2[5296])>>>(r=(n=A>>>0<11?16:A+19&-16)>>>3|0)|0)){A=(i=T2[(f=(e=1^(r|1&f))<<3)+21232>>2])+8|0,(0|(r=T2[i+8>>2]))!=(0|(f=f+21224|0))?(T2[f+8>>2]=r,T2[r+12>>2]=f):(k=a1(e)&a,T2[21184>>2]=k),T2[i+4>>2]=3|(f=e<<3),T2[(f=f+i|0)+4>>2]=1|T2[f+4>>2];break A;}if(n>>>0<=(t=T2[5298])>>>0)break c;if(f){r=A=(f=(0-(A=(0-(A=2<<r)|A)&f<<r)&A)-1|0)>>>12&16,r|=A=(f=f>>>A|0)>>>5&8,r|=A=(f=f>>>A|0)>>>2&4,e=T2[(A=(r=((r|=A=(f=f>>>A|0)>>>1&2)|(A=(f=f>>>A|0)>>>1&1))+(f>>>A|0)|0)<<3)+21232>>2],(0|(f=T2[e+8>>2]))!=(0|(A=A+21224|0))?(T2[A+8>>2]=f,T2[f+12>>2]=A):(a=a1(r)&a,T2[5296]=a),A=e+8|0,T2[e+4>>2]=3|n,T2[(f=r<<3)+e>>2]=i=f-n|0,T2[(e=e+n|0)+4>>2]=1|i,t&&(r=21224+((f=t>>>3|0)<<3)|0,n=T2[5301],f=(f=1<<f)&a?T2[r+8>>2]:(T2[5296]=f|a,r),T2[f+12>>2]=n,T2[r+8>>2]=n,T2[n+12>>2]=r,T2[n+8>>2]=f),T2[5301]=e,T2[5298]=i;break A;}if(!(o=T2[5297]))break c;for(r=A=(f=(0-o&o)-1|0)>>>12&16,r|=A=(f=f>>>A|0)>>>5&8,r|=A=(f=f>>>A|0)>>>2&4,f=T2[21488+(((r|=A=(f=f>>>A|0)>>>1&2)|(A=(f=f>>>A|0)>>>1&1))+(f>>>A|0)<<2)>>2],e=(-8&T2[f+4>>2])-n|0,r=f;A=(A=T2[r+16>>2])||T2[r+20>>2];)e=(i=(r=(-8&T2[A+4>>2])-n|0)>>>0<e>>>0)?r:e,f=i?A:f,r=A;if(c=T2[f+24>>2],(0|(i=T2[f+12>>2]))!=(0|f)){A=T2[f+8>>2],T2[i+8>>2]=A,T2[A+12>>2]=i;break f;}if(!(A=T2[(r=f+20|0)>>2])){if(!(A=T2[f+16>>2]))break t;r=f+16|0;}for(;b=r,(A=T2[(r=(i=A)+20|0)>>2])||(r=i+16|0,A=T2[i+16>>2]););T2[b>>2]=0;break f;}if(n=-1,!(4294967231<A>>>0)&&(n=-16&(A=A+19|0),o=T2[5297])){r=0-n|0,(A=A>>>8|(b=0))&&(b=31,16777215<n>>>0||(A<<=f=A+1048320>>>16&8,b=28+((A=((A<<=a=A+520192>>>16&4)<<(e=A+245760>>>16&2)>>>15|0)-(e|f|a)|0)<<1|n>>>A+21&1)|0));u:{k:{if(e=T2[21488+(b<<2)>>2])for(f=n<<(31==(0|b)?0:25-(b>>>1|0)|0),A=0;;){if(!(r>>>0<=(a=(-8&T2[e+4>>2])-n|0)>>>0||(i=e,r=a))){r=0,A=e;break k;}if(a=T2[e+20>>2],e=T2[16+((f>>>29&4)+e|0)>>2],A=!a||(0|a)==(0|e)?A:a,f<<=0!=(0|e),!e)break;}else A=0;if(!(A|i)){if(!(A=(0-(A=2<<b)|A)&o))break c;e=A=(f=(A&0-A)-1|0)>>>12&16,e|=A=(f=f>>>A|0)>>>5&8,e|=A=(f=f>>>A|0)>>>2&4,A=T2[21488+(((e|=A=(f=f>>>A|0)>>>1&2)|(A=(f=f>>>A|0)>>>1&1))+(f>>>A|0)<<2)>>2];}if(!A)break u;}for(;r=(e=(f=(-8&T2[A+4>>2])-n|0)>>>0<r>>>0)?f:r,i=e?A:i,A=(f=T2[A+16>>2])||T2[A+20>>2];);}if(i&&!(T2[5298]-n>>>0<=r>>>0)){if(b=T2[i+24>>2],(0|i)!=(0|(f=T2[i+12>>2]))){A=T2[i+8>>2],T2[f+8>>2]=A,T2[A+12>>2]=f;break r;}if(!(A=T2[(e=i+20|0)>>2])){if(!(A=T2[i+16>>2]))break b;e=i+16|0;}for(;a=e,(A=T2[(e=(f=A)+20|0)>>2])||(e=f+16|0,A=T2[f+16>>2]););T2[a>>2]=0;break r;}}}if(n>>>0<=(r=T2[5298])>>>0){e=T2[5301],16<=(f=r-n|0)>>>0?(T2[(A=e+n|0)+4>>2]=1|f,T2[5298]=f,T2[5301]=A,T2[r+e>>2]=f,T2[e+4>>2]=3|n):(T2[e+4>>2]=3|r,T2[(A=r+e|0)+4>>2]=1|T2[A+4>>2],T2[5301]=0,T2[5298]=0),A=e+8|0;break A;}if(n>>>0<(o=T2[5299])>>>0){r=T2[5302],T2[(f=r+n|0)+4>>2]=1|(A=o-n|0),T2[5299]=A,T2[5302]=f,T2[r+4>>2]=3|n,A=r+8|0;break A;}if((r=(i=(f=b=n+71|(A=0))+(r=T2[5414]?T2[5416]:(T2[5417]=-1,T2[5418]=-1,T2[5415]=65536,T2[5416]=65536,T2[5414]=12+u&-16^1431655768,T2[5419]=0,T2[5407]=0,65536))|0)&(e=0-r|0))>>>0<=n>>>0){T2[5420]=48;break A;}if((f=T2[5406])&&!((a=(A=T2[5404])+r|0)>>>0<=f>>>0&&A>>>0<a>>>0)){A=0,T2[5420]=48;break A;}if(4&S2[21628])break a;c:{u:{if(a=T2[5302])for(A=21632;;){if(a>>>0<(f=T2[A>>2])+T2[A+4>>2]>>>0&&f>>>0<=a>>>0)break u;if(!(A=T2[A+8>>2]))break;}if(-1==(0|(f=l(0))))break n;if(a=r,(a=(A=(e=T2[5415])-1|0)&f?(r-f|0)+(A+f&0-e)|0:a)>>>0<=n>>>0)break n;if(2147483646<a>>>0)break n;if(e=T2[5406]){if((i=(A=T2[5404])+a|0)>>>0<=A>>>0)break n;if(e>>>0<i>>>0)break n;}if((0|f)!=(0|(A=l(a))))break c;break i;}if(2147483646<(a=e&i-o)>>>0)break n;if((0|(f=l(a)))==(T2[A>>2]+T2[A+4>>2]|0))break o;A=f;}if(f=A,!(n+72>>>0<=a>>>0||2147483646<a>>>0||-1==(0|f))){if(2147483646<(A=(A=T2[5416])+(b-a|0)&0-A)>>>0)break i;if(-1!=(0|l(A))){a=A+a|0;break i;}l(0-a|0);break n;}if(-1!=(0|f))break i;break n;}i=0;break f;}f=0;break r;}if(-1!=(0|f))break i;}T2[5407]=4|T2[5407];}if(2147483646<r>>>0)break e;if(f=l(r),(A=l(0))>>>0<=f>>>0)break e;if(-1==(0|f))break e;if(-1==(0|A))break e;if((a=A-f|0)>>>0<=n+56>>>0)break e;}A=T2[5404]+a|0,(T2[5404]=A)>>>0>T[5405]&&(T2[5405]=A);i:{a:{n:{if(o=T2[5302]){for(A=21632;;){if(((r=T2[A>>2])+(i=T2[A+4>>2])|0)==(0|f))break n;if(!(A=T2[A+8>>2]))break;}break a;}for((A=T2[5300])>>>0<=f>>>0&&A||(T2[5300]=f),A=0,T2[5409]=a,T2[5408]=f,T2[5304]=-1,T2[5305]=T2[5414],T2[5411]=0;T2[A+21232>>2]=r=A+21224|0,T2[A+21236>>2]=r,256!=(0|(A=A+8|0)););T2[(e=(A=f+8&15?-8-f&15:0)+f|0)+4>>2]=1|(A=(r=a-56|0)-A|0),T2[5303]=T2[5418],T2[5299]=A,T2[5302]=e,T2[4+(f+r|0)>>2]=56;break i;}if(!(8&S2[A+12|0])&&!(f>>>0<=o>>>0||o>>>0<r>>>0)){r=T2[5299]+a|0,T2[(e=(f=o+8&15?-8-o&15:0)+o|0)+4>>2]=1|(f=r-f|0),T2[A+4>>2]=i+a,T2[5303]=T2[5418],T2[5299]=f,T2[5302]=e,T2[4+(r+o|0)>>2]=56;break i;}}f>>>0<(i=T2[5300])>>>0&&(T2[5300]=f,i=0),r=f+a|0,A=21632;a:{n:{o:{b:{t:{c:{for(;(0|r)!=T2[A>>2];)if(!(A=T2[A+8>>2]))break c;if(!(8&S2[A+12|0]))break t;}for(A=21632;;){if((r=T2[A>>2])>>>0<=o>>>0&&o>>>0<(i=r+T2[A+4>>2]|0)>>>0)break b;A=T2[A+8>>2];}}if(T2[A>>2]=f,T2[A+4>>2]=T2[A+4>>2]+a,T2[(c=(f+8&15?-8-f&15:0)+f|0)+4>>2]=3|n,A=((f=r+(r+8&15?-8-r&15:0)|0)-c|0)-n|0,b=n+c|0,(0|f)==(0|o)){T2[5302]=b,A=T2[5299]+A|0,T2[5299]=A,T2[b+4>>2]=1|A;break n;}if(T2[5301]==(0|f)){T2[5301]=b,A=T2[5298]+A|0,T2[5298]=A,T2[b+4>>2]=1|A,T2[A+b>>2]=A;break n;}if(1==(3&(r=T2[f+4>>2]))){o=-8&r;t:if(r>>>0<=255)i=T2[f+8>>2],r=r>>>3|0,(0|(e=T2[f+12>>2]))!=(0|i)?(T2[e+8>>2]=i,T2[i+12>>2]=e):(k=T2[5296]&a1(r),T2[21184>>2]=k);else {if(t=T2[f+24>>2],(0|(a=T2[f+12>>2]))==(0|f)){if((n=T2[(e=f+20|0)>>2])||(n=T2[(e=f+16|0)>>2])){for(;r=e,(n=T2[(e=(a=n)+20|0)>>2])||(e=a+16|0,n=T2[a+16>>2]););T2[r>>2]=0;}else a=0;}else r=T2[f+8>>2],T2[a+8>>2]=r,T2[r+12>>2]=a;if(t){e=T2[f+28>>2];c:{if(T2[(r=21488+(e<<2)|0)>>2]==(0|f)){if(T2[r>>2]=a)break c;k=T2[5297]&a1(e),T2[21188>>2]=k;break t;}if(!(T2[t+(T2[t+16>>2]==(0|f)?16:20)>>2]=a))break t;}T2[a+24>>2]=t,(r=T2[f+16>>2])&&(T2[a+16>>2]=r,T2[r+24>>2]=a),(r=T2[f+20>>2])&&(T2[a+20>>2]=r,T2[r+24>>2]=a);}}f=f+o|0,A=A+o|0;}if(T2[f+4>>2]=-2&T2[f+4>>2],T2[A+b>>2]=A,T2[b+4>>2]=1|A,A>>>0<=255){f=21224+((A=A>>>3|0)<<3)|0,A=(r=T2[5296])&(A=1<<A)?T2[f+8>>2]:(T2[5296]=A|r,f),T2[A+12>>2]=b,T2[f+8>>2]=b,T2[b+12>>2]=f,T2[b+8>>2]=A;break n;}if((e=A>>>8|(f=0))&&(f=31,16777215<A>>>0||(f=e,f<<=e=e+1048320>>>16&8,f=28+((f=((f<<=n=f+520192>>>16&4)<<(i=f+245760>>>16&2)>>>15|0)-(i|e|n)|0)<<1|A>>>f+21&1)|0)),T2[(a=r=b)+28>>2]=f,T2[r+16>>2]=0,n=21488+(f<<2)|(T2[r+20>>2]=0),!((i=T2[5297])&(e=1<<f))){T2[n>>2]=r,T2[5297]=e|i,T2[r+24>>2]=n,T2[r+8>>2]=r,T2[r+12>>2]=r;break n;}for(e=A<<(31==(0|f)?0:25-(f>>>1|0)|0),f=T2[n>>2];;){if((-8&T2[(i=f)+4>>2])==(0|A))break o;if(f=e>>>29|0,e<<=1,!(f=T2[(n=16+(i+(4&f)|0)|0)>>2]))break;}T2[n>>2]=r,T2[r+24>>2]=i,T2[r+12>>2]=r,T2[r+8>>2]=r;break n;}for(T2[(e=(r=f+8&15?-8-f&15:0)+f|0)+4>>2]=1|(r=(A=a-56|0)-r|0),T2[4+(A+f|0)>>2]=56,T2[(b=(A=(i+(i-55&15?55-i&15:0)|0)-63|0)>>>0<o+16>>>0?o:A)+4>>2]=35,T2[5303]=T2[5418],T2[5299]=r,T2[5302]=e,A=T2[5411],T2[(r=b+16|0)>>2]=T2[5410],T2[r+4>>2]=A,A=T2[5409],T2[b+8>>2]=T2[5408],T2[b+12>>2]=A,T2[5410]=b+8,T2[5409]=a,T2[5408]=f,A=b+36|(T2[5411]=0);T2[A>>2]=7,(A=A+4|0)>>>0<i>>>0;);if((0|o)==(0|b))break i;if(T2[b+4>>2]=-2&T2[b+4>>2],T2[b>>2]=a=b-o|0,T2[o+4>>2]=1|a,a>>>0<=255){f=21224+((A=a>>>3|0)<<3)|0,A=(r=T2[5296])&(A=1<<A)?T2[f+8>>2]:(T2[5296]=A|r,f),T2[A+12>>2]=o,T2[f+8>>2]=o,T2[o+12>>2]=f,T2[o+8>>2]=A;break i;}if(T2[o+16>>2]=0,(f=a>>>8|(A=T2[o+20>>2]=0))&&(A=31,16777215<a>>>0||(A=f,A<<=f=f+1048320>>>16&8,A=28+((A=((A<<=i=A+520192>>>16&4)<<(e=A+245760>>>16&2)>>>15|0)-(e|f|i)|0)<<1|a>>>A+21&1)|0)),e=21488+((T2[(r=o+28|0)>>2]=A)<<2)|0,!((r=T2[5297])&(f=1<<A))){T2[e>>2]=o,T2[5297]=f|r,T2[o+24>>2]=e,T2[o+8>>2]=o,T2[o+12>>2]=o;break i;}for(A=a<<(31==(0|A)?0:25-(A>>>1|0)|0),f=T2[e>>2];;){if((0|a)==(-8&T2[(r=f)+4>>2]))break a;if(f=A>>>29|0,A<<=1,!(f=T2[(e=16+(r+(4&f)|0)|0)>>2]))break;}T2[e>>2]=o,T2[o+24>>2]=r,T2[o+12>>2]=o,T2[o+8>>2]=o;break i;}A=T2[i+8>>2],T2[i+8>>2]=r,T2[A+12>>2]=r,T2[r+24>>2]=0,T2[r+8>>2]=A,T2[r+12>>2]=i;}A=c+8|0;break A;}A=T2[r+8>>2],T2[r+8>>2]=o,T2[A+12>>2]=o,T2[o+24>>2]=0,T2[o+8>>2]=A,T2[o+12>>2]=r;}if(!((A=T2[5299])>>>0<=n>>>0)){r=T2[5302],T2[(f=r+n|0)+4>>2]=1|(A=A-n|0),T2[5299]=A,T2[5302]=f,T2[r+4>>2]=3|n,A=r+8|0;break A;}}A=0,T2[5420]=48;break A;}r:if(b){e=T2[i+28>>2];e:{if(T2[(A=21488+(e<<2)|0)>>2]==(0|i)){if(T2[A>>2]=f)break e;o=a1(e)&o,T2[5297]=o;break r;}if(!(T2[b+(T2[b+16>>2]==(0|i)?16:20)>>2]=f))break r;}T2[f+24>>2]=b,(A=T2[i+16>>2])&&(T2[f+16>>2]=A,T2[A+24>>2]=f),(A=T2[i+20>>2])&&(T2[f+20>>2]=A,T2[A+24>>2]=f);}r:if(r>>>0<=15)T2[i+4>>2]=3|(A=r+n|0),T2[(A=A+i|0)+4>>2]=1|T2[A+4>>2];else if(T2[(e=i+n|0)+4>>2]=1|r,T2[i+4>>2]=3|n,(T2[r+e>>2]=r)>>>0<=255)f=21224+((A=r>>>3|0)<<3)|0,A=(r=T2[5296])&(A=1<<A)?T2[f+8>>2]:(T2[5296]=A|r,f),T2[A+12>>2]=e,T2[f+8>>2]=e,T2[e+12>>2]=f,T2[e+8>>2]=A;else if(f=e,(e=r>>>8|(A=0))&&(A=31,16777215<r>>>0||(A=e,A<<=e=e+1048320>>>16&8,A=28+((A=((A<<=a=A+520192>>>16&4)<<(n=A+245760>>>16&2)>>>15|0)-(n|e|a)|0)<<1|r>>>A+21&1)|0)),T2[(b=f)+28>>2]=A,T2[f+16>>2]=0,n=21488+(A<<2)|(T2[f+20>>2]=0),(e=1<<A)&o){A=r<<(31==(0|A)?0:25-(A>>>1|0)|0),n=T2[n>>2];e:{for(;;){if((-8&T2[(e=n)+4>>2])==(0|r))break e;if(n=A>>>29|0,A<<=1,!(n=T2[(a=16+(e+(4&n)|0)|0)>>2]))break;}T2[a>>2]=f,T2[f+24>>2]=e,T2[f+12>>2]=f,T2[f+8>>2]=f;break r;}A=T2[e+8>>2],T2[e+8>>2]=f,T2[A+12>>2]=f,T2[f+24>>2]=0,T2[f+8>>2]=A,T2[f+12>>2]=e;}else T2[n>>2]=f,T2[5297]=e|o,T2[f+24>>2]=n,T2[f+8>>2]=f,T2[f+12>>2]=f;A=i+8|0;break A;}f:if(c){r=T2[f+28>>2];r:{if(T2[(A=21488+(r<<2)|0)>>2]==(0|f)){if(T2[A>>2]=i)break r;k=a1(r)&o,T2[21188>>2]=k;break f;}if(!(T2[c+(T2[c+16>>2]==(0|f)?16:20)>>2]=i))break f;}T2[i+24>>2]=c,(A=T2[f+16>>2])&&(T2[i+16>>2]=A,T2[A+24>>2]=i),(A=T2[f+20>>2])&&(T2[i+20>>2]=A,T2[A+24>>2]=i);}e>>>0<=15?(T2[f+4>>2]=3|(A=e+n|0),T2[(A=A+f|0)+4>>2]=1|T2[A+4>>2]):(T2[(i=f+n|0)+4>>2]=1|e,T2[f+4>>2]=3|n,T2[e+i>>2]=e,t&&(r=21224+((A=t>>>3|0)<<3)|0,n=T2[5301],A=(A=1<<A)&a?T2[r+8>>2]:(T2[5296]=A|a,r),T2[A+12>>2]=n,T2[r+8>>2]=n,T2[n+12>>2]=r,T2[n+8>>2]=A),T2[5301]=i,T2[5298]=e),A=f+8|0;}return L2=16+u|0,A;}function q2(A){var f=0,r=0,e=0,i=0,a=0,n=0,o=0,b=0;A:if(A){a=(r=A-8|0)+(i=-8&(A=T2[A-4>>2]))|0;f:if(!(1&A)){if(!(3&A))break A;if((r=r-(A=T2[r>>2])|0)>>>0<T[5300])break A;if(i=A+i|0,T2[5301]==(0|r)){if(3==(3&(A=T2[a+4>>2]))){T2[a+4>>2]=-2&A,T2[5298]=i,T2[r+i>>2]=i,T2[r+4>>2]=1|i;break A;}}else if(A>>>0<=255)e=A>>>3|0,A=T2[r+8>>2],(0|(f=T2[r+12>>2]))!=(0|A)?(T2[f+8>>2]=A,T2[A+12>>2]=f):(b=T2[5296]&a1(e),T2[21184>>2]=b);else {if(o=T2[r+24>>2],(0|r)==(0|(A=T2[r+12>>2]))){if((e=T2[(f=r+20|0)>>2])||(e=T2[(f=r+16|0)>>2])){for(;n=f,(e=T2[(f=(A=e)+20|0)>>2])||(f=A+16|0,e=T2[A+16>>2]););T2[n>>2]=0;}else A=0;}else f=T2[r+8>>2],T2[A+8>>2]=f,T2[f+12>>2]=A;if(o){f=T2[r+28>>2];r:{if(T2[(e=21488+(f<<2)|0)>>2]==(0|r)){if(T2[e>>2]=A)break r;b=T2[5297]&a1(f),T2[21188>>2]=b;break f;}if(!(T2[o+(T2[o+16>>2]==(0|r)?16:20)>>2]=A))break f;}T2[A+24>>2]=o,(f=T2[r+16>>2])&&(T2[A+16>>2]=f,T2[f+24>>2]=A),(f=T2[r+20>>2])&&(T2[A+20>>2]=f,T2[f+24>>2]=A);}}}if(!(a>>>0<=r>>>0)&&1&(A=T2[a+4>>2])){f:{if(!(2&A)){if(T2[5302]==(0|a)){if(T2[5302]=r,A=T2[5299]+i|0,T2[5299]=A,T2[r+4>>2]=1|A,T2[5301]!=(0|r))break A;T2[5298]=0,T2[5301]=0;break A;}if(T2[5301]==(0|a)){T2[5301]=r,A=T2[5298]+i|0,T2[5298]=A,T2[r+4>>2]=1|A,T2[A+r>>2]=A;break A;}i=(-8&A)+i|0;r:if(A>>>0<=255)A=A>>>3|0,(0|(e=T2[a+8>>2]))!=(0|(f=T2[a+12>>2]))?(T2[f+8>>2]=e,T2[e+12>>2]=f):(b=T2[5296]&a1(A),T2[21184>>2]=b);else {if(o=T2[a+24>>2],(0|a)==(0|(A=T2[a+12>>2]))){if((e=T2[(f=a+20|0)>>2])||(e=T2[(f=a+16|0)>>2])){for(;n=f,(e=T2[(f=(A=e)+20|0)>>2])||(f=A+16|0,e=T2[A+16>>2]););T2[n>>2]=0;}else A=0;}else f=T2[a+8>>2],T2[A+8>>2]=f,T2[f+12>>2]=A;if(o){f=T2[a+28>>2];e:{if(T2[(e=21488+(f<<2)|0)>>2]==(0|a)){if(T2[e>>2]=A)break e;b=T2[5297]&a1(f),T2[21188>>2]=b;break r;}if(!(T2[o+(T2[o+16>>2]==(0|a)?16:20)>>2]=A))break r;}T2[A+24>>2]=o,(f=T2[a+16>>2])&&(T2[A+16>>2]=f,T2[f+24>>2]=A),(f=T2[a+20>>2])&&(T2[A+20>>2]=f,T2[f+24>>2]=A);}}if(T2[r+i>>2]=i,T2[r+4>>2]=1|i,T2[5301]!=(0|r))break f;T2[5298]=i;break A;}T2[a+4>>2]=-2&A,T2[r+i>>2]=i,T2[r+4>>2]=1|i;}if(i>>>0<=255)A=21224+((f=i>>>3|0)<<3)|0,f=(e=T2[5296])&(f=1<<f)?T2[A+8>>2]:(T2[5296]=f|e,A),T2[f+12>>2]=r,T2[A+8>>2]=r,T2[r+12>>2]=A,T2[r+8>>2]=f;else {T2[r+16>>2]=0,(f=i>>>8|(A=T2[r+20>>2]=0))&&(A=31,16777215<i>>>0||(A=28+((A=((a=(f<<=n=f+1048320>>>16&8)<<(A=f+520192>>>16&4))<<(f=a+245760>>>16&2)>>>15|0)-(f|A|n)|0)<<1|i>>>A+21&1)|0)),e=21488+((T2[(e=r+28|0)>>2]=A)<<2)|0;f:if((f=T2[5297])&(n=1<<A)){f=i<<(31==(0|A)?0:25-(A>>>1|0)|0),A=T2[e>>2];r:{for(;;){if((-8&T2[(e=A)+4>>2])==(0|i))break r;if(A=f>>>29|0,f<<=1,!(A=T2[(n=16+(e+(4&A)|0)|0)>>2]))break;}T2[n>>2]=r,T2[r+24>>2]=e,T2[r+12>>2]=r,T2[r+8>>2]=r;break f;}A=T2[e+8>>2],T2[e+8>>2]=r,T2[A+12>>2]=r,T2[r+24>>2]=0,T2[r+8>>2]=A,T2[r+12>>2]=e;}else T2[e>>2]=r,T2[5297]=f|n,T2[r+24>>2]=e,T2[r+8>>2]=r,T2[r+12>>2]=r;if(A=T2[5304]-1|0,!(T2[5304]=A)){for(r=21640;r=(A=T2[r>>2])+8|0,A;);T2[5304]=-1;}}}}}function l(A){return A?65535&A||(0|A)<=-1?void j():-1==(0|(A=b1(A>>>16|0)))?(T2[5420]=48,-1):A<<16:o1()<<16;}function t(A){var f,r=0,e=0;if(r=(r=T2[5421])||(T2[5421]=21692),32==(0|(e=T2[5422]))){if((f=K2(260))&&3&S2[f-4|0]&&d2(f,0,260),!f)return;e=0,T2[5421]=f,T2[f>>2]=r,T2[5422]=0,r=f;}T2[5422]=e+1,T2[(r=(e<<2)+r|0)+132>>2]=0,T2[r+4>>2]=A;}function d2(A,f,r){var e,i,a,n;if(r&&(p2[0|A]=f,p2[(e=A+r|0)-1|0]=f,!(r>>>0<3||(p2[A+2|0]=f,p2[A+1|0]=f,p2[e-3|0]=f,p2[e-2|0]=f,r>>>0<7||(p2[A+3|0]=f,p2[e-4|0]=f,r>>>0<9||(a=(e=0-A&3)+A|0,f=P2(255&f,16843009),T2[a>>2]=f,T2[(e=(r=r-e&-4)+a|0)-4>>2]=f,r>>>0<9||(T2[8+a>>2]=f,T2[4+a>>2]=f,T2[e-8>>2]=f,T2[e-12>>2]=f,r>>>0<25||(T2[24+a>>2]=f,T2[20+a>>2]=f,T2[16+a>>2]=f,T2[12+a>>2]=f,T2[e-16>>2]=f,T2[e-20>>2]=f,T2[e-24>>2]=f,T2[e-28>>2]=f,(r=r-(i=4&a|24)|0)>>>0<32))))))))for(n=e=f,f=a+i|0;T2[f>>2]=n,T2[f+4>>2]=e,T2[(i=f+24|0)>>2]=n,T2[4+i>>2]=e,T2[(i=f+16|0)>>2]=n,T2[4+i>>2]=e,T2[(i=f+8|0)>>2]=n,T2[4+i>>2]=e,f=f+32|0,31<(r=r-32|0)>>>0;);return A;}function $2(A,f,r){var e=0,i=0,a=0,n=0,o=0,b=0,t=0;A:if(r&&3&f)for(;;){if(p2[0|A]=S2[0|f],e=r-1|0,A=A+1|0,f=f+1|0,1==(0|r))break A;if(r=e,!(3&f))break;}else e=r;A:{if(!(r=3&A)){if(e>>>0<16)r=e;else for(r=e-16|0;T2[A>>2]=T2[f>>2],T2[A+4>>2]=T2[f+4>>2],T2[A+8>>2]=T2[f+8>>2],T2[A+12>>2]=T2[f+12>>2],A=A+16|0,f=f+16|0,15<(e=e-16|0)>>>0;);if(8&r&&(e=T2[f+4>>2],T2[A>>2]=T2[f>>2],T2[A+4>>2]=e,f=f+8|0,A=A+8|0),4&r&&(T2[A>>2]=T2[f>>2],f=f+4|0,A=A+4|0),2&r&&(p2[0|A]=S2[0|f],p2[A+1|0]=S2[f+1|0],f=f+2|0,A=A+2|0),!(1&r))break A;return void(p2[0|A]=S2[0|f]);}f:if(!(e>>>0<32||2<(r=r-1|0)>>>0)){r:switch(r-1|0){default:for(p2[A+1|0]=S2[f+1|0],i=T2[f>>2],p2[0|A]=i,p2[A+2|0]=S2[f+2|0],o=e-3|0,b=A+3|0,t=e-20&-16,r=0;a=T2[(n=f+r|0)+4>>2],T2[(A=r+b|0)>>2]=a<<8|i>>>24,i=T2[n+8>>2],T2[A+4>>2]=i<<8|a>>>24,a=T2[n+12>>2],T2[A+8>>2]=a<<8|i>>>24,i=T2[n+16>>2],T2[A+12>>2]=i<<8|a>>>24,r=r+16|0,16<(o=o-16|0)>>>0;);A=r+b|0,f=3+(f+r|0)|0,e=(e-t|0)-19|0;break f;case 0:for(i=T2[f>>2],p2[0|A]=i,p2[A+1|0]=S2[f+1|0],o=e-2|0,b=A+2|0,t=e-20&-16,r=0;a=T2[(n=f+r|0)+4>>2],T2[(A=r+b|0)>>2]=a<<16|i>>>16,i=T2[n+8>>2],T2[A+4>>2]=i<<16|a>>>16,a=T2[n+12>>2],T2[A+8>>2]=a<<16|i>>>16,i=T2[n+16>>2],T2[A+12>>2]=i<<16|a>>>16,r=r+16|0,17<(o=o-16|0)>>>0;);A=r+b|0,f=2+(f+r|0)|0,e=(e-t|0)-18|0;break f;case 1:break r;}for(i=T2[f>>2],p2[0|A]=i,o=e-1|0,b=A+1|0,t=e-20&-16,r=0;a=T2[(n=f+r|0)+4>>2],T2[(A=r+b|0)>>2]=a<<24|i>>>8,i=T2[n+8>>2],T2[A+4>>2]=i<<24|a>>>8,a=T2[n+12>>2],T2[A+8>>2]=a<<24|i>>>8,i=T2[n+16>>2],T2[A+12>>2]=i<<24|a>>>8,r=r+16|0,18<(o=o-16|0)>>>0;);A=r+b|0,f=1+(f+r|0)|0,e=(e-t|0)-17|0;}16&e&&(r=S2[0|f]|S2[f+1|0]<<8,p2[0|A]=r,p2[A+1|0]=r>>>8,p2[A+2|0]=S2[f+2|0],p2[A+3|0]=S2[f+3|0],p2[A+4|0]=S2[f+4|0],p2[A+5|0]=S2[f+5|0],p2[A+6|0]=S2[f+6|0],p2[A+7|0]=S2[f+7|0],p2[A+8|0]=S2[f+8|0],p2[A+9|0]=S2[f+9|0],p2[A+10|0]=S2[f+10|0],p2[A+11|0]=S2[f+11|0],p2[A+12|0]=S2[f+12|0],p2[A+13|0]=S2[f+13|0],p2[A+14|0]=S2[f+14|0],p2[A+15|0]=S2[f+15|0],f=f+16|0,A=A+16|0),8&e&&(p2[0|A]=S2[0|f],p2[A+1|0]=S2[f+1|0],p2[A+2|0]=S2[f+2|0],p2[A+3|0]=S2[f+3|0],p2[A+4|0]=S2[f+4|0],p2[A+5|0]=S2[f+5|0],p2[A+6|0]=S2[f+6|0],p2[A+7|0]=S2[f+7|0],f=f+8|0,A=A+8|0),4&e&&(p2[0|A]=S2[0|f],p2[A+1|0]=S2[f+1|0],p2[A+2|0]=S2[f+2|0],p2[A+3|0]=S2[f+3|0],f=f+4|0,A=A+4|0),2&e&&(p2[0|A]=S2[0|f],p2[A+1|0]=S2[f+1|0],f=f+2|0,A=A+2|0),1&e&&(p2[0|A]=S2[0|f]);}}function b(A){var f,r,e,i=0,a=(0),n=0;v1(A);A:{if(1283457024<=(i=2147483647&(n=u1[2]))>>>0){if(A!=A)break A;return z2((0|n)<0?-1.570796251296997:1.570796251296997);}f:{if(i>>>0<=1054867455){if(a=-1,964689920<=i>>>0)break f;break A;}A=z2(O2(A)),i>>>0<=1066926079?a=i>>>0<=1060110335?(A=z2(z2(z2(A+A)+z2(-1))/z2(A+z2(2))),0):(A=z2(z2(A+z2(-1))/z2(A+z2(1))),1):a=i>>>0<=1075576831?(A=z2(z2(A+z2(-1.5))/z2(z2(A*z2(1.5))+z2(1))),2):(A=z2(z2(-1)/A),3);}if(i=a,r=z2(A*A),f=z2(r*r),e=z2(f*z2(z2(f*z2(-.106480173766613))+z2(-.19999158382415771))),f=z2(r*z2(z2(f*z2(z2(f*z2(.06168760731816292))+z2(.14253635704517365)))+z2(.333333283662796))),(0|i)<=-1)return z2(A-z2(A*z2(e+f)));A=z2(j2[(i<<=2)+1024>>2]-z2(z2(z2(A*z2(e+f))-j2[i+1040>>2])-A)),A=(0|n)<0?z2(-A):A;}return A;}function B2(A,f){var r,e,i,a=0,n=0,o=z2(0);if(!(f==f&A==A))return z2(A+f);if(v1(f),1065353216==(0|(a=u1[2])))return b(A);i=a>>>30&2,v1(A),r=i|(n=u1[2])>>>31;A:{f:{r:{e:{if(!(e=2147483647&n)){i:switch(r-2|0){case 0:break e;case 1:break i;default:break r;}return z2(-3.1415927410125732);}if(2139095040!=(0|(a&=2147483647))){if(!a)break A;if(!(e>>>0<=218103808+a>>>0&&2139095040!=(0|e)))break A;if(A=o=!(218103808+e>>>0<a>>>0&&(o=z2(0),i))?b(z2(O2(z2(A/f)))):o,r>>>0<=2){i:switch(r-1|0){case 0:return z2(-A);case 1:break i;default:break r;}return z2(z2(3.1415927410125732)-z2(A+z2(8.742277657347586e-8)));}return z2(z2(A+z2(8.742277657347586e-8))+z2(-3.1415927410125732));}if(2139095040==(0|e))break f;return j2[1072+(r<<2)>>2];}A=z2(3.1415927410125732);}return A;}return j2[1056+(r<<2)>>2];}return z2((0|n)<0?-1.5707963705062866:1.5707963705062866);}function c(A){var f=0;for(T2[12+(L2=f=L2-16|0)>>2]=A,T2[12+f>>2]||(T2[12+f>>2]=1);A=K2(T2[12+f>>2]),!(T2[8+f>>2]=A)&&(T2[(A=L2-16|0)+12>>2]=21952,T2[A+8>>2]=2,T2[4+f>>2]=T2[T2[A+12>>2]>>2],T2[4+f>>2]);)n1[T2[4+f>>2]]();return L2=16+f|0,T2[8+f>>2];}function u(A){var f=0;T2[12+(L2=f=L2-16|0)>>2]=A,q2(T2[12+f>>2]),L2=16+f|0;}function s(A,f,r){var e=0,i=0;return L2=e=L2-16|0,(0|r)<=(i=-1)?T2[5420]=28:(A=0|n(0|A,0|f,0|r,12+e|0))?T2[5420]=A:i=T2[12+e>>2],L2=16+e|0,i;}function v(A){var f=0,f=T2[A+60>>2];if(T2[A+60>>2]=f-1|f,8&(f=T2[A>>2]))return T2[A>>2]=32|f,1;T2[A+4>>2]=0,T2[A+8>>2]=0,f=T2[A+40>>2],T2[A+24>>2]=f,T2[A+20>>2]=f,T2[A+16>>2]=f+T2[A+44>>2];}function S(A,f,r){var e,i=0,a=0,n=0,o=0;A:{if(!(i=T2[r+16>>2])){if(v(r))break A;i=T2[r+16>>2];}if(i-(n=T2[r+20>>2])>>>0<f>>>0)return void n1[T2[r+32>>2]](r,A,f);f:if(!(T2[r+64>>2]<0)){for(i=A;;){if((0|f)==(0|a))break f;if(a=a+1|0,e=f+i|0,i=o=i-1|0,10==S2[e-1|0])break;}if(n1[T2[r+32>>2]](r,i=A,A=1+(f-a|0)|0)>>>0<A>>>0)break A;A=1+(f+o|0)|0,n=T2[r+20>>2],f=a-1|0;}$2(n,A,f),T2[r+20>>2]=T2[r+20>>2]+f;}}function P(A,f){if(!A)return 0;if(A){A:if(f>>>0<=127)p2[0|A]=f,A=1;else {f:{if(!T2[5491]){if(57216!=(-128&f))break f;p2[0|A]=f,A=1;break A;}if(f>>>0<=2047){p2[A+1|0]=63&f|128,p2[0|A]=f>>>6|192,A=2;break A;}if(!(57344!=(-8192&f)&&55296<=f>>>0)){p2[A+2|0]=63&f|128,p2[0|A]=f>>>12|224,p2[A+1|0]=f>>>6&63|128,A=3;break A;}if(f-65536>>>0<=1048575){p2[A+3|0]=63&f|128,p2[0|A]=f>>>18|240,p2[A+2|0]=f>>>6&63|128,p2[A+1|0]=f>>>12&63|128,A=4;break A;}}T2[5420]=25,A=-1;}}else A=1;return A;}function f(A,f,r){var e,i=0,a=0;if(T2[204+(L2=i=L2-208|0)>>2]=r,T2[(e=192+i|0)>>2]=0,T2[4+e>>2]=0,T2[(e=184+i|0)>>2]=0,T2[4+e>>2]=0,T2[(e=176+i|0)>>2]=0,T2[4+e>>2]=0,T2[168+i>>2]=0,T2[172+i>>2]=0,T2[160+i>>2]=0,T2[164+i>>2]=0,T2[200+i>>2]=r,0<=(0|d(0,f,200+i|0,80+i|0,160+i|0))){e=T2[A>>2],T2[A+60>>2]<=0&&(T2[A>>2]=-33&e);A:{f:{if(T2[A+44>>2]){if(T2[A+16>>2])break f;}else T2[A+44>>2]=80,T2[A+24>>2]=0,T2[A+16>>2]=0,T2[A+20>>2]=0,a=T2[A+40>>2],T2[A+40>>2]=i;if(v(A))break A;}d(A,f,200+i|0,80+i|0,160+i|0);}a&&(n1[T2[A+32>>2]](A,0,0),T2[A+44>>2]=0,T2[A+40>>2]=a,T2[A+24>>2]=0,T2[A+16>>2]=0,T2[A+20>>2]=0),T2[A>>2]=T2[A>>2]|32&e;}L2=208+i|0;}function d(A,f,r,e,i){var a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0,l=0,s=0,v=0,d=0,B=0,Q=0,g=0,w=0,G=0,C=0,E=0,D=0,h=0,Z=0,Y=0,R=0,F=0,W=0,m=0,N=336+(L2=u=L2-880|0)|8,V=55+u|0,J=-338-u|0,M=336+u|9,I=656+u|0,x=336+u|0,y=-336-u|0,U=56+u|0;A:{f:{r:for(;;){e:if(b=f,!((2147483647-G|0)<(0|a))){G=a+G|0;i:{a:{n:{if(a=S2[0|b])for(;;){o:{b:if(a&=255){if(37!=(0|a))break o;for(a=n=f;;){if(37!=S2[a+1|0]){f=a;break b;}if(n=n+1|0,o=S2[a+2|0],a=f=a+2|0,37!=(0|o))break;}}else n=f;if((0|(C=2147483647-G|0))<(0|(a=n-b|0)))break e;if(A&&(32&S2[0|A]||S(b,a,A)),a)continue r;o=-1,9<(c=(t=p2[a=f+1|0])-48|0)>>>0||(a=(n=36==S2[f+2|0])?f+3|0:a,Z=n?1:Z,t=p2[(n?3:1)+f|0],o=n?c:-1);b:if(31<(f=t-32|(n=0))>>>0)f=a;else if(75913&(k=1<<f))for(;;){if(n|=k,31<(c=(t=p2[f=a+1|0])-32|0)>>>0)break b;if(a=f,!(75913&(k=1<<c)))break;}else f=a;b:if(42!=(0|t)){if(9<(k=t-48|(v=0))>>>0)c=f;else {for(a=0;v=-1,t=p2[f+1|0],f=c=f+1|0,a=v=a>>>0<=214748364?(2147483647-(a=P2(a,10))|0)<(0|k)?-1:a+k|0:v,(k=t-48|0)>>>0<10;);if((0|v)<0)break e;}}else {if(9<(a=p2[f+1|0]-48|0)>>>0||36!=S2[f+2|0]){if(Z)break n;if(c=f+1|0,!A){v=Z=0;break b;}f=T2[r>>2],T2[r>>2]=f+4,Z=0,v=T2[f>>2];}else T2[(a<<2)+i>>2]=10,c=f+3|0,v=T2[((p2[f+(Z=1)|0]<<3)+e|0)-384>>2];-1<(0|v)||(v=0-v|0,n|=8192);}if(t=-1,46==S2[(a=0)|c]){if(42!=(0|(t=p2[c+1|0]))){if(f=c+1|0,9<(s=t-48|0)>>>0)g=1,t=0;else for(c=0,k=f;t=-1,c>>>0<=214748364&&(t=(2147483647-(f=P2(c,10))|0)<(0|s)?-1:f+s|0),l=p2[k+(g=1)|0],k=f=k+1|0,c=t,(s=l-48|0)>>>0<10;);}else {if(9<(f=p2[c+2|0]-48|0)>>>0||36!=S2[c+3|0]){if(Z)break n;f=c+2|0,t=0,A&&(c=T2[r>>2],T2[r>>2]=c+4,t=T2[c>>2]);}else T2[(f<<2)+i>>2]=10,f=c+4|0,t=T2[((p2[c+2|0]<<3)+e|0)-384>>2];g=(-1^t)>>>31|0;}}else f=c,g=0;for(;;){if(k=a,57<(a=p2[0|f]-65|0)>>>0)break n;if(f=f+1|0,!((a=S2[2816+(a+P2(k,58)|0)|0])-1>>>0<8))break;}if(!a)break n;b:{t:{c:{if(27==(0|a)){if((0|o)<=-1)break c;break n;}if((0|o)<0)break t;T2[(o<<2)+i>>2]=a,o=T2[(a=(o<<3)+e|0)+4>>2],T2[56+u>>2]=T2[a>>2],T2[60+u>>2]=o;}if(a=0,!A)continue r;break b;}if(!A){G=0;break A;}O(56+u|0,a,r);}o=-65537&n,d=8192&n?o:n;b:{t:{c:if(a=p2[f-1|0],!(55<(a=(c=k&&3==(15&a)?-33&a:a)-65|0)>>>0)){u:{k:{l:{s:{v:{d:{B:{Q:{g:{w:{G:{C:switch(a-1|0){case 51:l=0,k=T2[56+u>>2],a=T2[60+u>>2],s=2790;break G;case 44:if(7<(n=255&k)>>>(a=0))continue r;E:switch(n-1|0){default:case 0:T2[T2[56+u>>2]>>2]=G;continue r;case 1:n=T2[56+u>>2],T2[n>>2]=G,T2[n+4>>2]=G>>31;continue r;case 2:$[T2[56+u>>2]>>1]=G;continue r;case 3:p2[T2[56+u>>2]]=G;continue r;case 5:T2[T2[56+u>>2]>>2]=G;continue r;case 4:continue r;case 6:break E;}n=T2[56+u>>2],T2[n>>2]=G,T2[n+4>>2]=G>>31;continue r;case 46:t=8<t>>>0?t:8,d|=8,c=120;case 22:case 54:if(l=0,s=2790,!((a=n=T2[60+u>>2])|(k=T2[56+u>>2]))){b=U;break w;}for(o=32&c,b=U;p2[0|(b=b-1|0)]=o|S2[3424+(15&k)|0],(k=(15&(n=a))<<28|k>>>4)|(a=a>>>4|0););if(!(8&d))break w;if(!(T2[56+u>>2]|T2[60+u>>2]))break w;s=2790+(c>>4)|0,l=2;break w;case 45:if(b=U,(a=n=T2[60+u>>2])|(k=T2[56+u>>2]))for(;p2[0|(b=b-1|0)]=7&k|48,(k=(7&(n=a))<<29|k>>>3)|(a=a>>>3|0););if(l=0,s=2790,!(8&d))break w;t=(0|(a=U-b|0))<(0|t)?t:a+1|0;break w;case 0:case 2:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 18:case 19:case 20:case 21:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 32:case 38:case 40:case 41:case 42:case 47:case 48:case 50:case 52:case 53:break c;case 1:break s;case 17:break v;case 49:break B;case 43:break Q;case 33:break g;case 34:case 39:break C;default:break u;}n=T2[60+u>>2],k=T2[56+u>>2],(0|(a=n))<-1||(0|a)<=-1?(a=0-((0!=(0|k))+a|0)|0,T2[56+u>>2]=k=0-k|0,T2[60+u>>2]=a,l=1,s=2790):s=2048&d?(l=1,2791):(l=1&d)?2792:2790;}if(a>>>0<1)n=k,b=U;else for(b=U;W=b=b-1|0,m=k-e1(n=i1(k,a,10),o=c=z,10,0)|48,p2[0|W]=m,c=9<a>>>0,k=n,a=o,c;);if(a=n)for(;p2[0|(b=b-1|0)]=a-P2(n=(a>>>0)/10|0,10)|48,o=9<a>>>0,a=n,o;);}if((0|t)<0&&g)break e;if(d=g?-65537&d:d,a=T2[56+u>>2],n=T2[60+u>>2],!(t||a|n)){a=b=U,t=0;break i;}t=(0|(a=!(a|n)+(U-b|0)|0))<(0|t)?t:a;break t;}p2[55+u|0]=T2[56+u>>2],l=0,s=2790,t=1,b=V,a=U,d=o;break i;}b=T2[5420],a=0,T2[5497]||(T2[5497]=21964);Q:{g:{for(;(0|b)!=S2[a+1136|0];)if((n=77)==(0|(a=a+1|0)))break g;if(!(n=a)){b=1216;break Q;}}for(a=1216;c=S2[0|a],a=b=a+1|0,c||(a=b,n=n-1|0););}break d;}b=(a=T2[56+u>>2])||2800;}c=s=b,d=(l=0)!=(0|(n=g=(0|t)<0?2147483647:t));d:{B:{Q:{g:if(n){if(3&c)for(;;){if(!S2[0|c]){a=n;break Q;}if(d=1!=(0|n),a=n-1|0,c=c+1|0,1==(0|n))break g;if(n=a,!(3&c))break;}else a=n;}else a=n;if(!d)break B;}Q:if(S2[0|c]&&!(a>>>0<4)){for(n=3&(k=a-4|0),k=4+((-4&k)+c|0)|0;;){if((-1^(d=T2[c>>2]))&d-16843009&-2139062144)break Q;if(c=c+4|0,!(3<(a=a-4|0)>>>0))break;}a=n,c=k;}if(a)for(;;){if(!S2[0|c])break d;if(c=c+1|0,!(a=a-1|0))break;}}c=0;}if(a=(n=c?c-b|0:g)+s|0,s=2790,(0|t)<=-1)break b;d=o,t=n;break i;}if(n=b=T2[56+u>>2],t)break l;a=0;break k;}T2[12+u>>2]=0,T2[8+u>>2]=T2[56+u>>2],T2[56+u>>2]=8+u,t=-1,n=8+u|0;}a=0,b=n;l:{for(;;){if(!(o=T2[n>>2]))break l;if((c=(0|(o=P(4+u|0,o)))<0)||t-a>>>0<o>>>0)break;if(n=n+4|0,!((a=a+o|0)>>>0<t>>>0))break l;}if(c)break f;}if((0|a)<0)break e;}c=73728&d;k:if(!(c||(0|v)<=(0|a))){if(d2(u+64|0,32,(n=(s=v-a|0)>>>0<256)?s:256),o=32&(k=T2[A>>2]),n){if(o)break k;}else {for(n=!o,o=s;1&n&&(S(u+64|0,256,A),k=T2[A>>2]),n=!(t=32&k),255<(o=o-256|0)>>>0;);if(t)break k;s&=255;}S(u+64|0,s,A);}k:if(a)for(n=0;;){if(!(o=T2[b>>2]))break k;if(a>>>0<(n=(o=P(4+u|0,o))+n|0)>>>0)break k;if(32&S2[0|A]||S(4+u|0,o,A),b=b+4|0,!(n>>>0<a>>>0))break;}k:if(8192==(0|c)&&!((0|v)<=(0|a))){if(d2(u+64|0,32,(n=(t=v-a|0)>>>0<256)?t:256),o=32&(b=T2[A>>2]),n){if(o)break k;}else {for(n=!o,o=t;1&n&&(S(u+64|0,256,A),b=T2[A>>2]),n=!(c=32&b),255<(o=o-256|0)>>>0;);if(c)break k;t&=255;}S(u+64|0,t,A);}a=(0|a)<(0|v)?v:a;continue r;}if(g&&(0|t)<=-1)break e;Q=X[56+u>>3],T2[364+u>>2]=0,s1(+Q),a=0|u1[1],w=(0|a)<-1||(0|a)<=-1?(Q=-Q,C=1,3440):2048&d?(C=1,3443):(C=1&d)?3446:3441;u:if((D=O2(Q))!=p&D==D){if(Q=function A(f,r){var e,i,a;if(s1(+f),i=0|u1[1],a=0|u1[0],2047!=(0|(e=i>>>20&2047))){if(!e)return 0==f?T2[r>>2]=0:(f=A(0x10000000000000000*f,r),T2[r>>2]=T2[r>>2]+-64),f;T2[r>>2]=e-1022,k1(0,0|a),k1(1,-2146435073&i|1071644672),f=+l1();}return f;}(Q,364+u|0),0!=(Q+=Q)&&(T2[364+u>>2]=T2[364+u>>2]-1),97!=(0|(h=32|c))){for(a=(0|t)<0,0!=Q?(b=T2[364+u>>2]-28|0,T2[364+u>>2]=b,Q*=268435456):b=T2[364+u>>2],l=a?6:t,o=g=(0|b)<0?368+u|0:I;o=(n=o)+4|0,0!=(Q=1e9*(Q-((T2[n>>2]=a=Q<4294967296&0<=Q?~~Q>>>0:0)>>>0))););if((0|b)<1)a=o,n=g;else for(n=g;;){if(t=(0|b)<29?b:29,!((a=o-4|0)>>>0<n>>>0)){for(b=t,k=0;F=k,k=T2[(s=a)>>2],a=31&b,E=32<=(63&b)>>>0?(B=k<<a,0):(B=(1<<a)-1&k>>>32-a,k<<a),a=B,W=s,m=(B=k=F+E|0)-e1(k=i1(k,k>>>0<E>>>0?a+1|0:a,1e9),z,1e9,0)|0,T2[W>>2]=m,n>>>0<=(a=s-4|0)>>>0;);k&&(T2[(n=n-4|0)>>2]=k);}for(;n>>>0<(a=o)>>>0&&!T2[(o=a-4|0)>>2];);if(b=T2[364+u>>2]-t|0,o=a,!(0<(0|(T2[364+u>>2]=b))))break;}if((0|b)<=-1)for(k=1+((l+25>>>0)/9|0)|0;;){if(t=(0|b)<-9?9:0-b|0,a>>>0<=n>>>0)n=T2[n>>2]?n:n+4|0;else {for(s=1e9>>>t|0,B=-1<<t^-1,b=0,o=n;E=b,b=T2[o>>2],T2[o>>2]=E+(b>>>t|0),b=P2(s,b&B),(o=o+4|0)>>>0<a>>>0;);n=T2[n>>2]?n:n+4|0,b&&(T2[a>>2]=b,a=a+4|0);}if(b=t+T2[364+u>>2]|0,a=(0|k)<a-(o=102==(0|h)?g:n)>>2?o+(k<<2)|0:a,!((0|(T2[364+u>>2]=b))<0))break;}if(!(a>>>(o=0)<=n>>>0||(o=P2(g-n>>2,9),(t=T2[n>>2])>>>0<10)))for(b=10;o=o+1|0,(b=P2(b,10))>>>0<=t>>>0;);if((0|(b=(l-(k=102==(0|h)?0:o)|0)-(s=(h=103==(0|h))&0!=(0|l))|0))<(P2(a-g>>2,9)-9|0)){if(t=(R=g+((E=(0|(B=b+9216|0))/9|0)<<2)|0)-4092|0,b=10,((F=B)-(B=P2(E,9))|0)<=7)for(k=9215+(((l-s|0)-k|0)-B|0)|0;b=P2(b,10),(0|(k=k+1|0))<7;);if(E=t+4|0,(k=(s=T2[t>>2])-P2(b,B=(s>>>0)/(b>>>0)|0)|0)||(0|E)!=(0|a)){k:{if(!(1&B)){if(Q=9007199254740992,t>>>0<=n>>>0)break k;if(1e9!=(0|b))break k;if(!(1&p2[t-4|0]))break k;}Q=9007199254740994;}if(D=k>>>0<(B=b>>>1|0)>>>0?.5:(0|a)==(0|E)&&(0|B)==(0|k)?1:1.5,C&&45==S2[0|w]&&(D=-D,Q=-Q),T2[t>>2]=k=s-k|0,Q+D!=Q){if(1e9<=(T2[t>>2]=b=b+k|0)>>>0){for(o=R-4096|0;o>>>(T2[o+4>>2]=0)<n>>>0&&(T2[(n=n-4|0)>>2]=0),b=T2[o>>2]+1|0,T2[o>>2]=b,o=o-4|0,999999999<b>>>0;);t=o+4|0;}if(o=P2(g-n>>2,9),!((k=T2[n>>2])>>>0<10))for(b=10;o=o+1|0,(b=P2(b,10))>>>0<=k>>>0;);}}a=(b=t+4|0)>>>0<a>>>0?b:a;}k:{for(;;){if((k=a)>>>(t=0)<=n>>>0)break k;if(T2[(a=k-4|0)>>2])break;}t=1;}if(h){if(l=((b=(0|o)<(0|(a=l||1))&-5<(0|o))?-1^o:-1)+a|0,c=(b?-1:-2)+c|0,!(s=8&d)){if(a=9,t&&(s=T2[k-4>>2])&&!((s>>>(a=0))%10|0))for(b=10;a=a+1|0,!((s>>>0)%((b=P2(b,10))>>>0)|0););b=P2(k-g>>2,9)-9|0,l=102!=(32|c)?((s=0)|l)<(0|(a=0<(0|(a=(o+b|0)-a|0))?a:0))?l:a:((s=0)|l)<(0|(a=0<(0|(a=b-a|0))?a:0))?l:a;}}else s=8&d;if(a=-1,!((0|((E=l|s)?2147483645:2147483646))<(0|l))){if(h=1+((0!=(0|E))+l|0)|0,R=102!=(32|c)){if(b=x,a=o>>31,a^=a+o)for(;p2[0|(b=b-1|0)]=a-P2(B=(a>>>0)/10|0,10)|48,Y=9<a>>>0,a=B,Y;);if((x-b|0)<=1){for(a=b-1|0;p2[0|a]=48,b=x-a|0,a=B=a-1|0,(0|b)<2;);b=B+1|0;}if(p2[0|(Y=b-2|0)]=c,a=-1,p2[b-1|0]=(0|o)<0?45:43,(2147483647-h|0)<(0|(o=x-Y|0)))break u;}else {if((2147483647-h|0)<(0|o))break u;o=0<(0|o)?o:0;}if(!((2147483647^C)<(0|(b=o+h|0)))){B=b+C|0,d&=73728;k:if(!(d||(0|v)<=(0|B))){if(d2(u+64|0,32,(a=(c=v-B|0)>>>0<256)?c:256),o=32&(b=T2[A>>2]),a){if(o)break k;}else {for(a=!o,o=c;1&a&&(S(u+64|0,256,A),b=T2[A>>2]),a=!(h=32&b),255<(o=o-256|0)>>>0;);if(h)break k;c&=255;}S(u+64|0,c,A);}32&S2[0|A]||S(w,C,A);k:if(65536==(0|d)&&!((0|v)<=(0|B))){if(d2(u+64|0,48,(a=(c=v-B|0)>>>0<256)?c:256),o=32&(b=T2[A>>2]),a){if(o)break k;}else {for(a=!o,o=c;1&a&&(S(u+64|0,256,A),b=T2[A>>2]),a=!(w=32&b),255<(o=o-256|0)>>>0;);if(w)break k;c&=255;}S(u+64|0,c,A);}k:if(R){l:if(!((0|l)<0)){for(c=t?k:n+4|0,t=n;;){b=M;s:{if(a=T2[t>>2]){for(o=0;p2[344+(o+u|0)|0]=a-P2(b=(a>>>0)/10|0,10)|48,o=o-1|0,k=9<a>>>0,a=b,k;);if(b=345+(o+u|0)|0,o)break s;}p2[0|(b=b-1|0)]=48;}if((0|n)==(0|t))32&S2[0|A]||S(b,1,A),b=b+1|0,(0|l)<1&&!s||32&S2[0|A]||S(3475,1,A);else if(!(b>>>0<=336+u>>>0))for(d2(336+u|0,48,b+y|0);336+u>>>0<(b=b-1|0)>>>0;);if(a=M-b|0,32&S2[0|A]||S(b,(0|a)<(0|l)?a:l,A),t=t+4|0,!(-1<(0|(l=l-a|0))&&t>>>0<c>>>0))break;}if(!((0|l)<1)){if(d2(u+64|0,48,(n=l>>>0<256)?l:256),a=32&(o=T2[A>>2]),n){if(a)break l;}else {for(a=!a,n=l;1&a&&(S(u+64|0,256,A),o=T2[A>>2]),a=!(b=32&o),255<(n=n-256|0)>>>0;);if(b)break l;l&=255;}S(u+64|0,l,A);}}32&S2[0|A]||S(Y,x-Y|0,A);}else {for(t=o=g>>>0<n>>>0?g:n;;){if(a=T2[t>>2])for(n=0;p2[n+N|0]=a-P2(b=(a>>>0)/10|0,10)|48,n=n-1|0,c=9<a>>>0,a=b,c;);else n=0;if(a=n+M|0,(0|o)==(0|t)?n||(p2[0|(a=a-1|0)]=48):a>>>0<=336+u>>>0||(d2(336+u|0,48,n+9|0),a=336+u|0),32&S2[0|A]||S(a,M-a|0,A),!((t=t+4|0)>>>0<=g>>>0))break;}E&&(32&S2[0|A]||S(3475,1,A));l:if((0|l)<1)a=l;else if(k>>>0<=t>>>0)a=l;else for(;;){a=M;s:{if(n=T2[t>>2]){for(;p2[0|(a=a-1|0)]=n-P2(b=(n>>>0)/10|0,10)|48,o=9<n>>>0,n=b,o;);if(a>>>0<=336+u>>>0)break s;}for(d2(336+u|0,48,a+y|0);336+u>>>0<(a=a-1|0)>>>0;);}if(32&S2[0|A]||S(a,(0|l)<9?l:9,A),a=l-9|0,(0|l)<10)break l;if(l=a,!((t=t+4|0)>>>0<k>>>0))break;}if(!((0|a)<1)){if(d2(u+64|0,48,(o=a>>>0<256)?a:256),n=32&(b=T2[A>>2]),o){if(n)break k;}else {for(n=!n,o=a;1&n&&(S(u+64|0,256,A),b=T2[A>>2]),n=!(c=32&b),255<(o=o-256|0)>>>0;);if(c)break k;a&=255;}S(u+64|0,a,A);}}k:if(8192==(0|d)&&!((0|v)<=(0|B))){if(d2(u+64|0,32,(a=(k=v-B|0)>>>0<256)?k:256),n=32&(o=T2[A>>2]),a){if(n)break k;}else {for(a=!n,n=k;1&a&&(S(u+64|0,256,A),o=T2[A>>2]),a=!(b=32&o),255<(n=n-256|0)>>>0;);if(b)break k;k&=255;}S(u+64|0,k,A);}a=(0|B)<(0|v)?v:B;}}}else {if(n=w+9|0,a=w,l=(w=32&c)?n:a,!(11<t>>>0)&&12!=(0|t)){for(a=t-12|0,D=16;D*=16,(n=a)>>>0<=(a=a+1|0)>>>0;);Q=45!=S2[0|l]?Q+D-D:-(D+(-Q-D));}o=x,a=(k=T2[364+u>>2])>>31;k:{if(a^=a+k){for(n=0;p2[335+(n+u|0)|0]=a-P2(b=(a>>>0)/10|0,10)|48,n=n-1|0,o=9<a>>>0,a=b,o;);if(o=336+(n+u|0)|0,n)break k;}p2[0|(o=o-1|0)]=48;}for(s=2|C,p2[0|(g=o-2|0)]=c+15,p2[o-1|0]=(0|k)<0?45:43,b=8&d,n=336+u|0;o=a=n,c=w,n=O2(Q)<2147483648?~~Q:-2147483648,p2[0|o]=c|S2[n+3424|0],Q=16*(Q-(0|n)),1==((n=a+1|0)-(336+u|0)|0)&&(b||0<(0|t)||0!=Q)&&(p2[a+1|0]=46,n=a+2|0),0!=Q;);if(a=-1,!((2147483645-(b=(w=x-g|0)+s|0)|0)<(0|t))){k=n-(336+u|0)|0,b=(t=t&&(n+J|0)<(0|t)?t+2|0:k)+b|0,d&=73728;k:if(!(d||(0|v)<=(0|b))){if(d2(u+64|0,32,(a=(c=v-b|0)>>>0<256)?c:256),n=32&(o=T2[A>>2]),a){if(n)break k;}else {for(a=!n,n=c;1&a&&(S(u+64|0,256,A),o=T2[A>>2]),a=!(B=32&o),255<(n=n-256|0)>>>0;);if(B)break k;c&=255;}S(u+64|0,c,A);}32&S2[0|A]||S(l,s,A);k:if(65536==(0|d)&&!((0|v)<=(0|b))){if(d2(u+64|0,48,(a=(s=v-b|0)>>>0<256)?s:256),n=32&(o=T2[A>>2]),a){if(n)break k;}else {for(a=!n,n=s;1&a&&(S(u+64|0,256,A),o=T2[A>>2]),a=!(c=32&o),255<(n=n-256|0)>>>0;);if(c)break k;s&=255;}S(u+64|0,s,A);}32&S2[0|A]||S(336+u|0,k,A);k:if(!((0|(t=t-k|0))<1)){if(d2(u+64|0,48,(n=t>>>0<256)?t:256),a=32&(o=T2[A>>2]),n){if(a)break k;}else {for(a=!a,n=t;1&a&&(S(u+64|0,256,A),o=T2[A>>2]),a=!(c=32&o),255<(n=n-256|0)>>>0;);if(c)break k;t&=255;}S(u+64|0,t,A);}32&S2[0|A]||S(g,w,A);k:if(8192==(0|d)&&!((0|v)<=(0|b))){if(d2(u+64|0,32,(a=(t=v-b|0)>>>0<256)?t:256),n=32&(o=T2[A>>2]),a){if(n)break k;}else {for(a=!n,n=t;1&a&&(S(u+64|0,256,A),o=T2[A>>2]),a=!(c=32&o),255<(n=n-256|0)>>>0;);if(c)break k;t&=255;}S(u+64|0,t,A);}a=(0|b)<(0|v)?v:b;}}}else {b=C+3|0;k:if(!(8192&d||(0|v)<=(0|b))){if(d2(u+64|0,32,(a=(t=v-b|0)>>>0<256)?t:256),n=32&(o=T2[A>>2]),a){if(n)break k;}else {for(a=!n,n=t;1&a&&(S(u+64|0,256,A),o=T2[A>>2]),a=!(k=32&o),255<(n=n-256|0)>>>0;);if(k)break k;t&=255;}S(u+64|0,t,A);}32&(a=T2[A>>2])||(S(w,C,A),a=T2[A>>2]),32&a||(a=(32&c)>>>5|0,S(Q!=Q?a?3467:3471:a?3459:3463,3,A));k:if(8192==(73728&d)&&!((0|v)<=(0|b))){if(d2(u+64|0,32,(a=(t=v-b|0)>>>0<256)?t:256),n=32&(o=T2[A>>2]),a){if(n)break k;}else {for(a=!n,n=t;1&a&&(S(u+64|0,256,A),o=T2[A>>2]),a=!(c=32&o),255<(n=n-256|0)>>>0;);if(c)break k;t&=255;}S(u+64|0,t,A);}a=(0|b)<(0|v)?v:b;}if(0<=(0|a))continue r;break e;}l=0,s=2790;}a=U;break i;}if(d=o,t=n,!S2[0|a])break i;break e;}a=S2[f+1|0],f=f+1|0;}if(A)break A;if(!Z){G=0;break A;}if(A=1,(f=T2[i+4>>2])&&(O(e+8|0,f,r),(f=T2[i+8>>(A=2)])&&(O(e+16|0,f,r),A=3,(f=T2[i+12>>2])&&(O(e+24|0,f,r),A=4,(f=T2[i+16>>2])&&(O(e+32|0,f,r),A=5,(f=T2[i+20>>2])&&(O(e+40|0,f,r),A=6,(f=T2[i+24>>2])&&(O(e+48|0,f,r),A=7,(f=T2[i+28>>2])&&(O(e+56|0,f,r),A=8,f=T2[i+32>>2])))))))){if(O(e- -64|0,f,r),A=T2[i+36>>2])break a;A=9;}for(a=A-1|0,f=(A<<2)+i|0;;){if(T2[f>>2])break n;if(f=f+4|0,!((a=a+(G=1)|0)>>>0<=8))break;}break A;}T2[5420]=28;break f;}O(e+72|0,A,r),G=1;break A;}if(!((2147483647-l|0)<(0|(B=(0|t)<(0|(w=a-b|0))?w:t))||(0|C)<(0|(a=(0|v)<(0|(g=l+B|0))?g:v)))){d&=73728;i:if(!(d||(0|v)<=(0|g))){if(d2(u+64|0,32,(n=(c=a-g|0)>>>0<256)?c:256),o=32&(k=T2[A>>2]),n){if(o)break i;}else {for(n=!o,o=c;1&n&&(S(u+64|0,256,A),k=T2[A>>2]),n=!(C=32&k),255<(o=o-256|0)>>>0;);if(C)break i;c&=255;}S(u+64|0,c,A);}32&S2[0|A]||S(s,l,A);i:if(65536==(0|d)&&!((0|v)<=(0|g))){if(d2(u+64|0,48,(n=(l=a-g|0)>>>0<256)?l:256),o=32&(k=T2[A>>2]),n){if(o)break i;}else {for(n=!o,o=l;1&n&&(S(u+64|0,256,A),k=T2[A>>2]),n=!(c=32&k),255<(o=o-256|0)>>>0;);if(c)break i;l&=255;}S(u+64|0,l,A);}i:if(!((0|t)<=(0|w))){if(d2(u+64|0,48,(n=(c=B-w|0)>>>0<256)?c:256),o=32&(k=T2[A>>2]),n){if(o)break i;}else {for(n=!o,o=c;1&n&&(S(u+64|0,256,A),k=T2[A>>2]),n=!(t=32&k),255<(o=o-256|0)>>>0;);if(t)break i;c&=255;}S(u+64|0,c,A);}if(32&S2[0|A]||S(b,w,A),8192!=(0|d))continue;if((0|v)<=(0|g))continue;if(d2(u+64|0,32,(n=(v=a-g|0)>>>0<256)?v:256),o=32&(b=T2[A>>2]),n){if(o)continue;}else {for(n=!o,o=v;1&n&&(S(u+64|0,256,A),b=T2[A>>2]),n=!(c=32&b),255<(o=o-256|0)>>>0;);if(c)continue;v&=255;}S(u+64|0,v,A);continue;}}break;}T2[5420]=61;}G=-1;}return L2=880+u|0,G;}function O(A,f,r){var e,i,a=0,n=0,o=0;A:{f:{r:{if((f=f-9|0)>>>0<=17){e:switch(f-1|0){case 5:return f=T2[r>>2],T2[r>>2]=f+4,f=$[f>>1],T2[A>>2]=f,void(T2[A+4>>2]=f>>31);case 6:return f=T2[r>>2],T2[r>>2]=f+4,T2[A>>2]=A2[f>>1],void(T2[A+4>>2]=0);case 7:return f=T2[r>>2],T2[r>>2]=f+4,f=p2[0|f],T2[A>>2]=f,void(T2[A+4>>2]=f>>31);case 8:return f=T2[r>>2],T2[r>>2]=f+4,T2[A>>2]=S2[0|f],void(T2[A+4>>2]=0);case 16:for(A=3276;!((-1^(r=T2[(A=A+4|0)>>2]))&r-16843009&-2139062144););if(f=A-3280|0,255&r){for(;r=S2[A+1|0],A=f=A+1|0,r;);f=f-3280|0;}A=f,r=0,o=3280;i:{if(!(f=T2[5272])){if(f=0,v(21072))break i;f=T2[5272];}if(f-(n=T2[5273])>>>0<A>>>0)f=0|n1[T2[5276]](21072,3280,A);else {a=A;a:if(!(T2[5284]<0)){for(e=A+3280|0,f=0;;){if(!((a=A)+f|0))break a;if(i=f+e|0,f=a=f-1|0,10==S2[i-1|0])break;}if((f=0|n1[T2[5276]](21072,3280,r=1+(A+a|0)|0))>>>0<r>>>0)break i;o=1+(a+e|0)|0,n=T2[5273],a^=-1;}$2(n,o,a),T2[5273]=a+T2[5273],f=r+a|0;}}j();case 2:case 9:case 11:case 12:case 15:break A;case 1:case 4:case 10:case 14:break f;case 0:case 3:case 13:break r;default:break e;}f=T2[r>>2],T2[r>>2]=f+4,T2[A>>2]=T2[f>>2];}return;}return f=T2[r>>2],T2[r>>2]=f+4,f=T2[f>>2],T2[A>>2]=f,void(T2[A+4>>2]=f>>31);}return f=T2[r>>2],T2[r>>2]=f+4,T2[A>>2]=T2[f>>2],void(T2[A+4>>2]=0);}f=T2[r>>2]+7&-8,T2[r>>2]=f+8,r=T2[f+4>>2],T2[A>>2]=T2[f>>2],T2[A+4>>2]=r;}function B(A,f){var r=0,e=0,e=S2[0|f],r=S2[0|A];A:if(r&&(0|e)==(0|r))for(A=A+1|0,f=f+1|0;;){if(e=S2[0|f],!(r=S2[0|A]))break A;if(A=A+1|0,f=f+1|0,(0|e)!=(0|r))break;}return r-e|0;}function Q(A){T2[12+(L2-16|0)>>2]=A|=0;}function g(A){var f,r=0;return T2[12+(L2=r=L2-16|0)>>2]=A|=0,L2=A=L2-16|0,f=T2[12+r>>2],T2[A+12>>2]=f,T2[12+(L2-16|0)>>2]=T2[A+12>>2],L2=A+16|0,L2=16+r|0,0|f;}function w(A){var f=0;return T2[12+(L2=f=L2-16|0)>>2]=A|=0,g(A=T2[12+f>>2]),L2=16+f|0,0|A;}function G(A){var f=0;T2[12+(L2=f=L2-16|0)>>2]=A|=0,w(A=T2[12+f>>2]),u(A),L2=16+f|0;}function C(A,f,r){var e=0;return T2[8+(L2=e=L2-16|0)>>2]=A,T2[4+e>>2]=f,p2[3+e|0]=r,1&p2[3+e|0]?(A=T2[8+(r=e)>>2]!=T2[4+e>>2]?(T2[(A=L2-16|0)+8>>2]=T2[8+e>>2],T2[A+12>>2]=T2[T2[A+8>>2]+4>>2],f=T2[A+12>>2],T2[(A=L2-16|0)+8>>2]=T2[4+e>>2],T2[A+12>>2]=T2[T2[A+8>>2]+4>>2],!B(f,T2[A+12>>2])):1,p2[r+15|0]=A):(f=T2[4+e>>2],T2[(L2=A=L2-16|0)+4>>2]=T2[8+e>>2],T2[A>>2]=f,f=T2[T2[A>>2]+4>>2],T2[A+12>>2]=T2[T2[A+4>>2]+4>>2],T2[A+8>>2]=f,f=1,T2[A+12>>2]!=T2[A+8>>2]&&(f=!B(T2[A+12>>2],T2[A+8>>2])),L2=A+16|0,p2[15+e|0]=1&f),L2=16+e|0,1&p2[15+e|0];}function E(A,f,r,e){var i=0;T2[12+(i=L2-16|0)>>2]=A,T2[8+i>>2]=f,T2[4+i>>2]=r,T2[i>>2]=e,T2[T2[8+i>>2]+16>>2]?T2[T2[8+i>>2]+16>>2]!=T2[4+i>>2]?(A=T2[8+i>>2],T2[A+36>>2]=T2[A+36>>2]+1,T2[T2[8+i>>2]+24>>2]=2,p2[T2[8+i>>2]+54|0]=1):2==T2[T2[8+i>>2]+24>>2]&&(T2[T2[8+i>>2]+24>>2]=T2[i>>2]):(T2[T2[8+i>>2]+16>>2]=T2[4+i>>2],T2[T2[8+i>>2]+24>>2]=T2[i>>2],T2[T2[8+i>>2]+36>>2]=1);}function D(A,f,r,e){var i,a=0;T2[28+(L2=a=L2-32|0)>>2]=A,T2[24+a>>2]=f,T2[20+a>>2]=r,T2[16+a>>2]=e,A=T2[28+a>>2],T2[12+a>>2]=0,T2[20+a>>2]&&(T2[12+a>>2]=T2[A+4>>2]>>8,1&T2[A+4>>2]&&(T2[8+a>>2]=T2[T2[20+a>>2]>>2],T2[12+a>>2]=T2[T2[8+a>>2]+T2[12+a>>2]>>2])),f=T2[A>>2],e=T2[24+a>>2],i=T2[20+a>>2]+T2[12+a>>2]|0,A=2&T2[A+4>>2]?T2[16+a>>2]:2,n1[T2[T2[(r=f)>>2]+28>>2]](r,e,i,A),L2=32+a|0;}function h(A,f,r,e,i){var a=0;T2[28+(a=L2-32|0)>>2]=A,T2[24+a>>2]=f,T2[20+a>>2]=r,T2[16+a>>2]=e,T2[12+a>>2]=i,p2[T2[24+a>>2]+53|0]=1,T2[16+a>>2]==T2[T2[24+a>>2]+4>>2]&&(p2[T2[24+a>>2]+52|0]=1,T2[T2[24+a>>2]+16>>2]?T2[T2[24+a>>2]+16>>2]!=T2[20+a>>2]?(A=T2[24+a>>2],T2[A+36>>2]=T2[A+36>>2]+1,p2[T2[24+a>>2]+54|0]=1):(2==T2[T2[24+a>>2]+24>>2]&&(T2[T2[24+a>>2]+24>>2]=T2[12+a>>2]),1==T2[T2[24+a>>2]+48>>2]&&1==T2[T2[24+a>>2]+24>>2]&&(p2[T2[24+a>>2]+54|0]=1)):(T2[T2[24+a>>2]+16>>2]=T2[20+a>>2],T2[T2[24+a>>2]+24>>2]=T2[12+a>>2],(T2[T2[24+a>>2]+36>>2]=1)==T2[T2[24+a>>2]+48>>2]&&1==T2[T2[24+a>>2]+24>>2]&&(p2[T2[24+a>>2]+54|0]=1)));}function Z(A,f,r,e){var i=0;T2[12+(i=L2-16|0)>>2]=A,T2[8+i>>2]=f,T2[4+i>>2]=r,T2[i>>2]=e,T2[4+i>>2]==T2[T2[8+i>>2]+4>>2]&&1!=T2[T2[8+i>>2]+28>>2]&&(T2[T2[8+i>>2]+28>>2]=T2[i>>2]);}function Y(A,f,r,e,i,a){var n=0;T2[28+(L2=n=L2-32|0)>>2]=A,T2[24+n>>2]=f,T2[20+n>>2]=r,T2[16+n>>2]=e,T2[12+n>>2]=i,p2[11+n|0]=a,A=T2[28+n>>2],T2[4+n>>2]=T2[A+4>>2]>>8,1&T2[A+4>>2]&&(T2[n>>2]=T2[T2[16+n>>2]>>2],T2[4+n>>2]=T2[T2[n>>2]+T2[4+n>>2]>>2]),f=T2[A>>2],e=T2[24+n>>2],i=T2[20+n>>2],a=T2[16+n>>2]+T2[4+n>>2]|0,A=2&T2[A+4>>2]?T2[12+n>>2]:2,n1[T2[T2[(r=f)>>2]+20>>2]](r,e,i,a,A,1&p2[11+n|0]),L2=32+n|0;}function F(A,f,r,e,i){var a=0;T2[28+(L2=a=L2-32|0)>>2]=A,T2[24+a>>2]=f,T2[20+a>>2]=r,T2[16+a>>2]=e,p2[15+a|0]=i,A=T2[28+a>>2],T2[8+a>>2]=T2[A+4>>2]>>8,1&T2[A+4>>2]&&(T2[4+a>>2]=T2[T2[20+a>>2]>>2],T2[8+a>>2]=T2[T2[4+a>>2]+T2[8+a>>2]>>2]),f=T2[A>>2],e=T2[24+a>>2],i=T2[20+a>>2]+T2[8+a>>2]|0,A=2&T2[A+4>>2]?T2[16+a>>2]:2,n1[T2[T2[(r=f)>>2]+24>>2]](r,e,i,A,1&p2[15+a|0]),L2=32+a|0;}function W(A){var f=0,r=0;return z2((f=A*A)*f*(r=f*A)*(2718311493989822e-21*f-.00019839334836096632)+(r*(.008333329385889463*f-.16666666641626524)+A));}function m(A){var f;return z2(-.499999997251031*(A*=A)+1+.04166662332373906*(f=A*A)+A*f*(2439044879627741e-20*A-.001388676377460993));}function N(A,f){return 1024<=(0|f)?(A*=898846567431158e293,f=(0|f)<2047?f-1023|0:(A*=898846567431158e293,((0|f)<3069?f:3069)-2046|0)):-1023<(0|f)||(A*=2004168360008973e-307,f=-1992<(0|f)?f+969|0:(A*=2004168360008973e-307,(-2960<(0|f)?f:-2960)+1938|0)),k1(0,0),k1(1,f+1023<<20),A*+l1();}function V(A,f){var r,e,i,a,n,o,b,t,c,u=0,k=0,l=0,s=0,v=0,d=0,B=0,Q=0,g=0,w=0,G=0,C=0,E=0,D=0,h=0,Z=0,Y=0;if(L2=E=L2-16|0,v1(A),(u=2147483647&(Z=u1[2]))>>>0<=1305022426)X[f>>3]=(w=+A)+-1.5707963109016418*(k=.6366197723675814*w+6755399441055744-6755399441055744)+-1.5893254773528196e-8*k,l=O2(k)<2147483648?~~k:-2147483648;else if(2139095040<=u>>>0)X[f>>3]=z2(A-A);else {if(X[8+E>>3]=(k1(2,(v=u)-((u=(u>>>23|0)-150|0)<<23)|0),d1()),D=8+E|0,L2=r=L2-560|0,G=u+P2(i=0<(0|(v=(u-3|0)/24|0))?v:0,-24)|0,0<=(0|(e=T2[956])))for(v=e+1|0,d=3840+((u=i)<<2)|0,s=320+r|0;X[s>>3]=(0|u)<0?0:+T2[d>>2],s=s+8|0,d=d+4|0,u=u+1|0,v=v-1|0;);for(B=G-24|0,v=320+r|0;;){for(k=0,u=D,d=1,s=v;k+=X[u>>3]*X[s>>3],u=u+8|0,s=s-8|0,d=d-1|0;);if(X[(l<<3)+r>>3]=k,v=v+8|0,u=(0|l)<(0|e),l=l+1|0,!u)break;}n=23-B|0,a=24-B|0,o=476+((e<<2)+r|0)|0,b=476+r|0,t=r-8|0,l=e;A:{for(;;){if(k=X[(u=l<<3)+r>>3],!(g=(0|l)<1))for(d=l+1|0,u=u+t|0,s=480+r|0;v=s,Q=O2(w=5.960464477539063e-8*(h=k))<2147483648?~~w:-2147483648,Q=O2(w=h+-16777216*(k=+(0|Q)))<2147483648?~~w:-2147483648,T2[v>>2]=Q,s=s+4|0,k=X[u>>3]+k,u=u-8|0,1<(0|(d=d-1|0)););k=N(k,B),k+=-8*R(.125*k),k-=0|(Q=O2(k)<2147483648?~~k:-2147483648);f:{r:{e:{if(d=(0|B)<1){if(B)break e;C=T2[476+((l<<2)+r|0)>>2]>>23;}else Q=(u=(s=T2[(v=476+((l<<2)+r|0)|0)>>2])>>a)+Q|0,C=(T2[(C=v)>>2]=v=s-(u<<a)|0)>>n;if((0|C)<1)break f;break r;}if(C=2,!(.5<=k)){C=0;break f;}}if(g)g=0;else for(u=480+r|(g=0),v=l;;){s=T2[u>>2];r:{e:{if(c=u,g)Y=16777215;else {if(!s)break e;g=1,Y=16777216;}T2[c>>2]=Y-s;break r;}g=0;}if(u=u+4|0,!(v=v-1|0))break;}d||1<(u=B-1|0)>>>0||(T2[(u=476+((l<<2)+r|0)|0)>>2]=1==(0|u)?4194303&T2[u>>2]:8388607&T2[u>>2]),Q=Q+1|0,2==(0|C)&&(k=1-k,C=2,g&&(k-=N(1,B)));}if(0!=k)break;if(!((0|l)<=(0|e))){for(u=(l<<2)+b|0,s=0,d=l;s=T2[u>>2]|s,u=u-4|0,(0|e)<(0|(d=d-1|0)););if(s){for(u=476+((l<<2)+r|0)|0,G=B;l=l-1|0,G=G-24|0,v=T2[u>>2],u=u-4|0,!v;);break A;}}for(u=o,v=l;v=v+1|0,s=T2[u>>2],u=u-4|0,!s;);for(g=328+((l<<3)+r|0)|0;;){for(X[(u=328+((l<<3)+r|0)|0)>>3]=T2[3840+(i+(l=l+1|0)<<2)>>2],k=0,u=D,s=g,d=1;k+=X[u>>3]*X[s>>3],u=u+8|0,s=s-8|0,d=d-1|0;);if(X[(l<<3)+r>>3]=k,g=g+8|0,!((0|l)<(0|v)))break;}l=v;}16777216<=(k=N(k,0-B|0))?(s=(480+r|0)+(l<<2)|0,u=O2(w=5.960464477539063e-8*(h=k))<2147483648?~~w:-2147483648,v=O2(k=h+-16777216*(0|u))<2147483648?~~k:-2147483648,T2[s>>2]=v,l=l+1|0):(u=O2(k)<2147483648?~~k:-2147483648,G=B),T2[(480+r|0)+(l<<2)>>2]=u;}if(!((0|l)<0)){for(d=l+1|0,k=N(1,G),u=(480+r|0)+(l<<2)|0,s=(l<<3)+r|0;X[s>>3]=k*+T2[u>>2],u=u-4|0,s=s-8|0,k*=5.960464477539063e-8,0<(0|(d=d-1|0)););if(!((0|l)<0))for(v=(l<<3)+r|0,u=l;;){for(G=l-(B=u)|0,s=u=k=0;k+=X[u+6608>>3]*X[u+v>>3],!((0|e)<=(0|s))&&(u=u+8|0,D=s>>>0<G>>>0,s=s+1|0,D););if(X[(160+r|0)+(G<<3)>>3]=k,v=v-8|0,u=B-1|0,!(0<(0|B)))break;}}if((0|l)<0)k=0;else for(s=l+1|0,u=(160+r|0)+(l<<3)|0,k=0;k+=X[u>>3],u=u-8|0,0<(0|(s=s-1|0)););X[E>>3]=C?-k:k,L2=560+r|0,l=7&Q,k=X[E>>3],(0|Z)<=-1?(X[f>>3]=-k,l=0-l|0):X[f>>3]=k;}return L2=16+E|0,l;}function W2(A){var f=0,r=0,e=0,i=0;L2=r=L2-16|0,v1(A);A:if((f=2147483647&(i=u1[2]))>>>0<=1061752794)f>>>0<964689920||(A=W(+A));else if(f>>>0<=1081824209)e=+A,A=f>>>0<=1075235811?(0|i)<=-1?z2(-m(e+1.5707963267948966)):m(e+-1.5707963267948966):W(-(((0|i)<0?3.141592653589793:-3.141592653589793)+e));else if(f>>>0<=1088565717)e=+A,A=f>>>0<=1085271519?(0|i)<=-1?m(e+4.71238898038469):z2(-m(e+-4.71238898038469)):W(((0|i)<0?6.283185307179586:-6.283185307179586)+e);else if(2139095040<=f>>>0)A=z2(A-A);else if((f=3&V(A,8+r|0))>>>0<=2){f:switch(f-1|0){default:A=W(X[8+r>>3]);break A;case 0:A=m(X[8+r>>3]);break A;case 1:break f;}A=W(-X[8+r>>3]);}else A=z2(-m(X[8+r>>3]));return L2=16+r|0,A;}function m2(A){var f,r=z2(0),e=0,i=0,a=0;L2=i=L2-16|0,v1(A);A:if((e=2147483647&(a=u1[2]))>>>0<=1061752794)r=z2(1),e>>>0<964689920||(r=m(+A));else if(e>>>0<=1081824209)f=+A,r=1075235812<=e>>>0?z2(-m(((0|a)<0?3.141592653589793:-3.141592653589793)+f)):W((0|a)<=-1?1.5707963267948966+f:1.5707963267948966-f);else if(e>>>0<=1088565717)r=1085271520<=e>>>0?m(+A+((0|a)<0?6.283185307179586:-6.283185307179586)):W((0|a)<=-1?-4.71238898038469-+A:+A-4.71238898038469);else if(r=z2(A-A),!(2139095040<=e>>>0))if((e=3&V(A,8+i|0))>>>0<=2){f:switch(e-1|0){default:r=m(X[8+i>>3]);break A;case 0:r=W(-X[8+i>>3]);break A;case 1:break f;}r=z2(-m(X[8+i>>3]));}else r=W(X[8+i>>3]);return L2=16+i|0,A=r;}function J(A,f){var r,e,i=0,a=0,n=0,o=0,b=0,t=0,c=z2(0);v1(f),a=(t=(n=u1[2])<<1)-1|0;A:{f:{r:{e:{v1(A);i:{if((o=u1[2])-8388608>>>0<=2130706431){if(4278190078<a>>>0)break i;break r;}if(a>>>0<4278190079)break e;}if(c=z2(1),1065353216==(0|o))break f;if(!t)break f;if(i=o<<1,!(t>>>0<4278190081&&i>>>0<=4278190080))return z2(A+f);if(2130706432==(0|i))break f;return z2(((-1^n)>>>31|0)==(i>>>0<2130706432|0)?0:f*f);}if(4278190079<=(o<<1)-1>>>0){if(c=z2(A*A),-1<(0|o)||23<(i=n>>>23&255)-127>>>0||(c=!((i=1<<150-i)&n)||n&i-1?c:z2(-c)),-1<(0|n))break f;return z2(z2(1)/c);}if((0|o)<=-1){if((i=n>>>23&255)>>>0<127)break A;e:{if(i>>>0<=150){if(n&(a=1<<150-i)-1)break A;if(i=65536,a&n)break e;}i=0;}o&=2147483647;}8388607<o>>>0||(o=(2147483647&(v1(z2(A*z2(8388608))),u1[2]))-192937984|0);}if(r=X[(a=(t=o-1060306944|0)>>>15&240)+6672>>3]*(k1(2,o-(-8388608&t)|0),+d1())-1,s1(+(b=((X[867]+X[866]*r)*((b=r*r)*b)+(b*(X[869]+X[868]*r)+(X[a+6680>>3]+ +(t>>23)+r*X[870])))*+f)),a=0|u1[1],!(1079967744==(0|(a&=2147450880))|a>>>0<1079967744)){if(127.99999995700433<b)return z2(z2(i?-15845632502852868e13:15845632502852868e13)*z2(15845632502852868e13));if(b<=-150)return z2(z2(i?-2524354896707238e-44:2524354896707238e-44)*z2(2524354896707238e-44));}e=(r=b-((b+=r=X[903])-r))*r*(X[905]+X[904]*r)+(r*X[906]+1),s1(+b),t=i+(n=0|u1[0])|0,i=T2[(a=6968+((31&n)<<3)|0)>>2],a=T2[a+4>>2]+(t<<=15)|0,k1(0,0|i),k1(1,0|(i>>>0<i>>>0?a+1|0:a)),c=z2(e*+l1());}return c;}return A=z2(A-A),z2(A/A);}function o2(A){var f=0,r=0,e=0,i=0,a=0;if(v1(A),255==(0|(r=(a=u1[2])>>>23&255)))return A=z2(A*z2(6.2831854820251465)),z2(A/A);if(2173837238<(f=a<<1)>>>0){if(r)f=8388607&a|8388608;else {if((r=0)<=(0|(f=a<<9)))for(;r=r-1|0,-1<(0|(f<<=1)););f=a<<1-r;}if(i=-1<(0|(e=f-13176795|0)),129<(0|r)){for(;;){if(1&i&&!(f=e))return z2(A*z2(0));if(i=-1<(0|(e=(f<<=1)-13176795|0)),!(129<(0|(r=r-1|0))))break;}r=129;}if(i&&!(f=e))return z2(A*z2(0));if(8388607<f>>>0)i=f;else for(;r=r-1|0,e=f>>>0<4194304,f=i=f<<1,e;);return k1(2,(f=1<=(0|r)?i-8388608|r<<23:i>>>1-r|0)|(e=-2147483648&a)),d1();}return -2121130058==(0|f)?z2(A*z2(0)):A;}function M(A){j();}function I(A){u(A|=0);}function x(A){var f=0;return T2[(A|=0)>>2]=7508,(f=T2[A+144>>2])&&S2[A+148|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+144>>2]=0,T2[A>>2]=7532,p2[A+148|0]=1,T2[(f=A+136|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+124>>2])&&S2[A+128|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+124>>2]=0,p2[A+128|0]=1,T2[(f=A+116|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+104>>2])&&S2[A+108|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+104>>2]=0,p2[A+108|0]=1,T2[(f=A+96|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+84>>2])&&S2[A+88|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+84>>2]=0,p2[A+88|0]=1,T2[(f=A+76|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,T2[A>>2]=7328,p2[A+36|0]=1,T2[(f=A+24|0)>>2]=0,(T2[f+4>>2]=0)|A;}function y(A,f,r){A|=0,f|=0,r|=0;var e=0,i=0,a=0,n=0,o=0,b=0,t=z2(0),c=z2(0),u=z2(0),k=z2(0),l=z2(0);if(T2[A+8>>2]=T2[f>>2],(0|(e=T2[A+24>>2]))==T2[A+28>>2]&&!((0|(a=e?e<<1:1))<=(0|e))){if(a&&(T2[5498]=T2[5498]+1,(i=K2(19+(a<<2)|0))&&(T2[(n=i+19&-16)-4>>2]=i)),1<=(0|e))for(i=e;T2[o+n>>2]=T2[T2[A+32>>2]+o>>2],o=o+4|0,i=i-1|0;);(i=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2]),e=T2[A+24>>2]),T2[A+32>>2]=n,T2[A+28>>2]=a,p2[A+36|0]=1;}if(T2[A+24>>2]=e+1,T2[T2[A+32>>2]+(e<<2)>>2]=T2[f>>2],t=r?(l=j2[f+16>>2],u=j2[f+12>>2],c=j2[f+8>>2],j2[f+20>>2]):(k=j2[f+8>>2],r=T2[A+8>>2],c=j2[f+12>>2],t=j2[f+16>>2],l=z2(z2(z2(k*j2[r+36>>2])+z2(c*j2[r+40>>2]))+z2(t*j2[r+44>>2])),u=z2(z2(z2(k*j2[r+20>>2])+z2(c*j2[r+24>>2]))+z2(t*j2[r+28>>2])),c=z2(z2(z2(j2[r+4>>2]*k)+z2(j2[r+8>>2]*c))+z2(j2[r+12>>2]*t)),z2(0)),(0|(i=T2[A+76>>2]))==T2[A+80>>2]&&!((0|(b=i?i<<1:1))<=(0|i))){if(r=0,b&&(T2[5498]=T2[5498]+1,(e=K2(19+(b<<4)|0))&&(T2[(r=e+19&-16)-4>>2]=e)),1<=(0|i))for(o=0;a=T2[A+84>>2]+o|0,e=T2[a+4>>2],T2[(n=r+o|0)>>2]=T2[a>>2],T2[n+4>>2]=e,e=T2[(a=a+8|0)+4>>2],T2[(n=n+8|0)>>2]=T2[a>>2],T2[n+4>>2]=e,o=o+16|0,i=i-1|0;);(e=T2[A+84>>2])&&S2[A+88|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+84>>2]=r,T2[A+80>>2]=b,p2[A+88|0]=1,i=T2[A+76>>2];}if(r=T2[A+84>>2]+(i<<4)|0,j2[r+12>>2]=t,j2[r+8>>2]=l,j2[r+4>>2]=u,j2[r>>2]=c,T2[A+76>>2]=T2[A+76>>2]+1,u=j2[f+24>>2],t=z2(z2(1)-u),k=z2(z2(t*j2[A+48>>2])+z2(u*j2[A- -64>>2])),c=z2(z2(t*j2[A+44>>2])+z2(u*j2[A+60>>2])),t=z2(z2(t*j2[A+40>>2])+z2(u*j2[A+56>>2])),(0|(i=T2[A+96>>2]))==T2[A+100>>2]&&!((0|(b=i?i<<1:1))<=(0|i))){if(r=0,b&&(T2[5498]=T2[5498]+1,(e=K2(19+(b<<4)|0))&&(T2[(r=e+19&-16)-4>>2]=e)),1<=(0|i))for(o=0;a=T2[A+104>>2]+o|0,e=T2[a+4>>2],T2[(n=r+o|0)>>2]=T2[a>>2],T2[n+4>>2]=e,e=T2[(a=a+8|0)+4>>2],T2[(n=n+8|0)>>2]=T2[a>>2],T2[n+4>>2]=e,o=o+16|0,i=i-1|0;);(e=T2[A+104>>2])&&S2[A+108|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+104>>2]=r,T2[A+100>>2]=b,p2[A+108|0]=1,i=T2[A+96>>2];}if(r=T2[A+104>>2]+(i<<4)|0,j2[r+8>>2]=k,j2[r+4>>2]=c,j2[r>>2]=t,T2[A+96>>2]=T2[A+96>>2]+1,(0|(e=T2[A+116>>2]))==T2[A+120>>2]&&!((0|(b=e?e<<1:1))<=(0|e))){a=0,b&&(T2[5498]=T2[5498]+1,(r=K2(19+(b<<2)|0))&&(T2[(a=r+19&-16)-4>>2]=r)),r=T2[A+124>>2];A:{if(1<=(0|e))for(o=a,i=r,n=e;j2[o>>2]=j2[i>>2],o=o+4|0,i=i+4|0,n=n-1|0;);else if(!r)break A;S2[A+128|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]),e=T2[A+116>>2]);}T2[A+124>>2]=a,T2[A+120>>2]=b,p2[A+128|0]=1;}return j2[T2[A+124>>2]+(e<<2)>>2]=j2[f+24>>2],T2[A+116>>2]=e+1,z2(j2[A+4>>2]);}function U(A){return (A|=0)+92|0;}function H(A){return (A|=0)+48|0;}function _(A){return 0|(A|=0);}function L(A){return T2[(A|=0)+204>>2];}function K(A,f,r){r|=0;var e,i=0;return j2[(f|=0)+16>>2]=j2[(A|=0)+4>>2],j2[f+20>>2]=j2[A+8>>2],j2[f+24>>2]=j2[A+12>>2],j2[f+28>>2]=j2[A+16>>2],j2[f+32>>2]=j2[A+20>>2],j2[f+36>>2]=j2[A+24>>2],j2[f+40>>2]=j2[A+28>>2],j2[f+44>>2]=j2[A+32>>2],j2[f+48>>2]=j2[A+36>>2],j2[f+52>>2]=j2[A+40>>2],j2[f+56>>2]=j2[A+44>>2],j2[f+60>>2]=j2[A+48>>2],j2[f+64>>2]=j2[A+52>>2],j2[f+68>>2]=j2[A+56>>2],j2[f+72>>2]=j2[A+60>>2],j2[f+76>>2]=j2[A- -64>>2],j2[f+80>>2]=j2[A+68>>2],j2[f+84>>2]=j2[A+72>>2],j2[f+88>>2]=j2[A+76>>2],j2[f+92>>2]=j2[A+80>>2],j2[f+96>>2]=j2[A+84>>2],j2[f+100>>2]=j2[A+88>>2],j2[f+104>>2]=j2[A+92>>2],j2[f+108>>2]=j2[A+96>>2],j2[f+112>>2]=j2[A+100>>2],j2[f+116>>2]=j2[A+104>>2],j2[f+120>>2]=j2[A+108>>2],j2[f+124>>2]=j2[A+112>>2],j2[f+128>>2]=j2[A+116>>2],j2[f+132>>2]=j2[A+120>>2],j2[f+136>>2]=j2[A+124>>2],j2[f+140>>2]=j2[A+128>>2],j2[f+144>>2]=j2[A+132>>2],j2[f+148>>2]=j2[A+136>>2],j2[f+152>>2]=j2[A+140>>2],j2[f+156>>2]=j2[A+144>>2],j2[f+160>>2]=j2[A+148>>2],j2[f+164>>2]=j2[A+152>>2],j2[f+168>>2]=j2[A+156>>2],j2[f+172>>2]=j2[A+160>>2],j2[f+176>>2]=j2[A+164>>2],j2[f+180>>2]=j2[A+168>>2],j2[f+184>>2]=j2[A+172>>2],j2[f+188>>2]=j2[A+176>>2],T2[f+232>>2]=T2[A+180>>2],j2[f+192>>2]=j2[A+184>>2],i=(T2[f>>2]=0)|n1[T2[T2[r>>2]+28>>2]](r,T2[A+192>>2]),e=T2[A+228>>2],T2[f+196>>2]=T2[A+224>>2],T2[f+200>>2]=e,e=T2[A+212>>2],T2[f+240>>2]=T2[A+208>>2],T2[f+244>>2]=e,T2[f+8>>2]=0,T2[f+4>>2]=i,T2[f+236>>2]=T2[A+204>>2],T2[f+248>>2]=T2[A+220>>2],j2[f+204>>2]=j2[A+236>>2],j2[f+208>>2]=j2[A+244>>2],j2[f+212>>2]=j2[A+248>>2],j2[f+216>>2]=j2[A+232>>2],T2[f+252>>2]=T2[A+252>>2],i=0|n1[T2[T2[r>>2]+40>>2]](r,A),e=0|n1[T2[T2[r>>2]+28>>2]](r,i),(T2[f+12>>2]=e)&&n1[T2[T2[r>>2]+48>>2]](r,i),j2[f+220>>2]=j2[A+268>>2],r=T2[A+280>>2],i=T2[A+276>>2],A=T2[A+272>>2],T2[f+260>>2]=0,T2[f+224>>2]=A,T2[f+228>>2]=i,T2[f+256>>2]=r,7700;}function q(A){(A|=0)&&n1[T2[T2[A>>2]+4>>2]](A);}function f2(A){return (A|=0)+4|0;}function r2(A,f){n1[T2[T2[(A|=0)>>2]+8>>2]](A,f|=0);}function e2(A){return 12;}function t2(A,f,r){A|=0,f|=0,r|=0;var e,i=z2(0),a=0,n=z2(0),o=z2(0),b=z2(0),t=z2(0),c=0,u=0,k=z2(0),l=0,s=z2(0),v=z2(0),d=0,B=(z2(0)),Q=z2(0),g=z2(0);L2=a=L2-48|0;A:{f:switch(T2[f+4>>2]){case 8:T2[A>>2]=0,T2[A+4>>2]=0,T2[(A=A+8|0)>>2]=0,T2[A+4>>2]=0;break A;case 0:T2[A+12>>2]=0,i=j2[f+44>>2],j2[A+8>>2]=j2[r+8>>2]>=z2(0)?i:z2(-i),i=j2[f+40>>2],j2[A+4>>2]=j2[r+4>>2]>=z2(0)?i:z2(-i),i=j2[f+36>>2],j2[A>>2]=j2[r>>2]>=z2(0)?i:z2(-i);break A;case 1:T2[A+12>>2]=0,i=j2[r>>2],o=j2[r+4>>2],n=j2[r+8>>2],t=z2(z2(z2(i*j2[f+80>>2])+z2(o*j2[f+84>>2]))+z2(n*j2[f+88>>2])),b=z2(z2(z2(i*j2[f+96>>2])+z2(o*j2[f+100>>2]))+z2(n*j2[f+104>>2])),i=z2(z2(z2(i*j2[(r=f- -64|0)>>2])+z2(o*j2[f+68>>2]))+z2(n*j2[f+72>>2])),j2[A+8>>2]=j2[(f=((i<t?t<b?2:1:(i<b)<<1)<<4)+r|0)+8>>2],r=T2[f+4>>2],T2[A>>2]=T2[f>>2],T2[A+4>>2]=r;break A;case 13:d=T2[(l=f+44|0)+4>>2],T2[(c=40+a|0)>>2]=T2[l>>2],T2[c+4>>2]=d,l=T2[(c=f+36|0)+4>>2],T2[32+a>>2]=T2[c>>2],T2[36+a>>2]=l,T2[28+a>>2]=0,j2[16+a>>2]=j2[r>>2],n=j2[r+4>>2],j2[20+a>>2]=n,i=j2[r+8>>2],j2[24+a>>2]=i;r:{e:{i:switch((f=T2[f+60>>(c=2)])-(r=1)|0){case 1:break e;case 0:break i;default:break r;}r=0,u=1;break r;}r=0,u=2,c=1,i=n;}n=j2[(32+a|0)+(f<<2)>>2],t=j2[((f=r<<2)|32+a)>>2],b=j2[(f|16+a)>>2],(k=z2(_2(z2(z2(b*b)+z2(i*i)))))==z2(0)?(j2[(r<<2|a)>>2]=t,j2[(f=u<<2)+a>>2]=j2[f+(16+a|0)>>2]<z2(0)?z2(-n):n):(o=z2(t/k),j2[(r<<2|a)>>2]=b*o,j2[(f=u<<2)+a>>2]=j2[f+(16+a|0)>>2]<z2(0)?z2(-n):n,o=z2(i*o)),i=j2[a>>2],j2[(c<<2)+a>>2]=o,T2[A+12>>2]=0,j2[A>>2]=i,f=T2[8+a>>2],T2[A+4>>2]=T2[4+a>>2],T2[A+8>>2]=f;break A;case 10:c=T2[f+60>>2],e=j2[36+((u=c<<2)+f|0)>>2],i=z2(1),o=j2[r>>2],n=j2[r+4>>2],t=j2[r+8>>2],(b=z2(z2(z2(o*o)+z2(n*n))+z2(t*t)))<z2(14210854715202004e-30)||(i=z2(z2(1)/z2(_2(b))),B=z2(t*i),Q=z2(n*i),i=z2(o*i)),T2[(f=40+a|0)>>2]=0,T2[f+4>>2]=0,T2[32+a>>2]=0,T2[36+a>>2]=0,j2[u+(32+a|0)>>2]=e,o=z2(-0xde0b6b000000000),n=z2(0),t=z2(0),b=j2[32+a>>2],k=j2[36+a>>2],s=j2[f>>2],(v=z2(z2(z2(i*b)+z2(Q*k))+z2(B*s)))>z2(-0xde0b6b000000000)&&(n=k,t=s,g=b,o=v),T2[f>>2]=0,T2[f+4>>2]=0,T2[32+a>>2]=0,T2[36+a>>2]=0,j2[(32+a|0)+(c<<2)>>2]=-e,b=j2[f>>2],k=j2[32+a>>2],s=j2[36+a>>2],T2[A+12>>2]=0,f=z2(z2(z2(i*k)+z2(Q*s))+z2(B*b))>o,j2[A+8>>2]=f?b:t,j2[A+4>>2]=f?s:n,j2[A>>2]=f?k:g;break A;case 5:if(o=j2[f+28>>2],n=j2[f+24>>2],t=j2[f+20>>2],c=T2[f+100>>2],(0|(d=T2[f+104>>2]))<1)u=-1;else for(b=z2(j2[r+8>>2]*o),k=z2(j2[r+4>>2]*n),s=z2(j2[r>>2]*t),r=0,u=-1,i=z2(-34028234663852886e22),f=c;i=(l=i<(v=z2(z2(z2(s*j2[f>>2])+z2(k*j2[f+4>>2]))+z2(b*j2[f+8>>2]))))?v:i,u=l?r:u,f=f+16|0,(0|d)!=(0|(r=r+1|0)););T2[A+12>>2]=0,j2[A+8>>2]=o*j2[(f=c+(u<<4)|0)+8>>2],j2[A+4>>2]=n*j2[f+4>>2],j2[A>>2]=t*j2[f>>2];break A;case 4:if(o=j2[f+28>>2],n=j2[f+24>>2],t=j2[f+20>>2],c=T2[f+112>>2],(0|(d=T2[f+104>>2]))<1)u=-1;else for(b=z2(j2[r+8>>2]*o),k=z2(j2[r+4>>2]*n),s=z2(j2[r>>2]*t),r=0,u=-1,i=z2(-34028234663852886e22),f=c;i=(l=i<(v=z2(z2(z2(s*j2[f>>2])+z2(k*j2[f+4>>2]))+z2(b*j2[f+8>>2]))))?v:i,u=l?r:u,f=f+16|0,(0|d)!=(0|(r=r+1|0)););T2[A+12>>2]=0,j2[A+8>>2]=o*j2[(f=c+(u<<4)|0)+8>>2],j2[A+4>>2]=n*j2[f+4>>2],j2[A>>2]=t*j2[f>>2];break A;default:break f;}n1[T2[T2[f>>2]+68>>2]](A,f,r);}L2=48+a|0;}function i2(A,f,r){A|=0,f|=0,r|=0;var e,i,a=z2(0),n=z2(0),o=z2(0);n1[T2[T2[f>>2]+68>>2]](A,f,r),z2(n1[T2[T2[f>>2]+48>>2]](f))!=z2(0)&&(n=j2[r+4>>2],a=j2[r>>2],o=j2[r+8>>2],e=z2(n1[T2[T2[f>>2]+48>>2]](f)),i=a=(f=z2(z2(z2(a*a)+z2(n*n))+z2(o*o))<z2(14210854715202004e-30))?z2(-1):a,o=f?z2(-1):o,n=f?z2(-1):n,a=z2(z2(1)/z2(_2(z2(z2(o*o)+z2(z2(a*a)+z2(n*n)))))),j2[A>>2]=j2[A>>2]+z2(e*z2(i*a)),j2[A+4>>2]=j2[A+4>>2]+z2(e*z2(n*a)),j2[A+8>>2]=j2[A+8>>2]+z2(e*z2(o*a)));}function a2(A){var f,r,e=0,i=0,a=0;if(T2[(A|=0)>>2]=7868,(e=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+56>>2]=0,p2[A+60|0]=1,T2[(e=A+48|0)>>2]=0,1<=((T2[e+4>>2]=0)|(a=T2[A+28>>2])))for(e=8;i=T2[A+36>>2]+e|0,(r=T2[(f=i+4|0)>>2])&&S2[i+8|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[f>>2]=0,p2[i+8|0]=1,T2[(i=i-4|0)>>2]=0,e=e+36|(T2[i+4>>2]=0),a=a-1|0;);return (e=T2[A+36>>2])&&S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+36>>2]=0,T2[A+28>>2]=0,T2[A+32>>2]=0,p2[A+40|0]=1,(e=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+16>>2]=0,p2[A+20|0]=1,T2[(e=A+8|0)>>2]=0,(T2[e+4>>2]=0)|A;}function n2(A){for(var f=z2(0),r=z2(0),e=z2(0),i=0,a=0,n=0,o=0,b=T2[A+28>>2],o=1;;){A:{f:switch(0|a){case 0:f=z2(j2[A+88>>2]+j2[A+72>>2]),r=z2(j2[A+84>>2]+j2[A+68>>2]),e=z2(j2[A+80>>2]+j2[A+64>>2]);break A;case 1:f=z2(j2[A+72>>2]-j2[A+88>>2]),r=z2(j2[A+84>>2]+j2[A+68>>2]),e=z2(j2[A+80>>2]+j2[A+64>>2]);break A;case 2:f=z2(j2[A+88>>2]+j2[A+72>>2]),r=z2(j2[A+68>>2]-j2[A+84>>2]),e=z2(j2[A+80>>2]+j2[A+64>>2]);break A;case 3:f=z2(j2[A+72>>2]-j2[A+88>>2]),r=z2(j2[A+68>>2]-j2[A+84>>2]),e=z2(j2[A+80>>2]+j2[A+64>>2]);break A;case 4:f=z2(j2[A+88>>2]+j2[A+72>>2]),r=z2(j2[A+84>>2]+j2[A+68>>2]),e=z2(j2[A+64>>2]-j2[A+80>>2]);break A;case 5:f=z2(j2[A+72>>2]-j2[A+88>>2]),r=z2(j2[A+84>>2]+j2[A+68>>2]),e=z2(j2[A+64>>2]-j2[A+80>>2]);break A;case 6:f=z2(j2[A+88>>2]+j2[A+72>>2]),r=z2(j2[A+68>>2]-j2[A+84>>2]),e=z2(j2[A+64>>2]-j2[A+80>>2]);break A;case 7:break f;default:break A;}f=z2(j2[A+72>>2]-j2[A+88>>2]),r=z2(j2[A+68>>2]-j2[A+84>>2]),e=z2(j2[A+64>>2]-j2[A+80>>2]);}A:{if(1<=(0|b))for(i=T2[A+36>>2]+32|0,n=b;;){if(z2(j2[i>>2]+z2(z2(z2(e*j2[i-12>>2])+z2(r*j2[i-8>>2]))+z2(f*j2[i-4>>2])))>z2(0))break A;if(i=i+36|0,!(n=n-1|0))break;}if(o=a>>>0<7,8!=(0|(a=a+1|0)))continue;}break;}return 1&(-1^o);}function b2(A){var f,r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G=0,C=0,E=0,D=0,h=0,Z=z2(0),Y=0,R=0,F=z2(0),W=z2(0),m=0,N=z2(0),V=z2(0),J=0,M=z2(0),I=0,x=0,y=0,U=z2(0),X=0,p=0,T=z2(0),S=0,j=0,P=0,z=z2(0),O=0,H=z2(0),_=0,L=0,K=(0),q=(0);T2[A+64>>2]=0,T2[A+68>>2]=0,T2[(C=A+72|0)>>2]=0;A:{if(!(((T2[C+4>>2]=0)|(I=T2[A+28>>2]))<1)){for(;;){if(G=T2[A+36>>2],n=P2(_,36),1<=(0|(o=T2[4+(G+n|0)>>2]))){for(i=-65536|_,L=0;;){C=T2[12+(G+n|0)>>2],u=x>>>0<=(I=(c=(r=(h=(0|(E=$[C+(L<<2)>>1]))<(0|(R=$[C+(((b=(0|o)==(0|(L=L+1|0)))?0:L)<<2)>>1])))?R:E)+(t=(p=h?E:R)<<16)|0)&Y-1)>>>0,E=0;f:if(!u&&-1!=((E=0)|(G=T2[(I<<2)+y>>2]))){r:{for(;;){if(A2[(E=(C=G<<2)+m|0)+2>>1]==(65535&p)&&A2[E>>1]==(65535&r))break r;if(-1==(0|(G=T2[C+J>>2])))break;}E=0;break f;}E=C+D|0;}R=T2[A+16>>2],Z=z2(j2[(C=R+(p<<4)|0)+8>>2]-j2[(R=R+(r<<4)|0)+8>>2]),W=z2(j2[C>>2]-j2[R>>2]),F=z2(j2[C+4>>2]-j2[R+4>>2]),N=z2(z2(1)/z2(_2(z2(z2(z2(W*W)+z2(F*F))+z2(Z*Z))))),Z=z2(Z*N),F=z2(F*N),W=z2(W*N);f:{if(!(S=(0|(C=T2[A+48>>2]))<1))for(G=T2[A+56>>2],h=C;;){if(N=j2[G+8>>2],M=j2[G+4>>2],U=j2[G>>2],!(1e-6<+z2(O2(z2(U-W)))||1e-6<+z2(O2(z2(M-F)))||1e-6<+z2(O2(z2(N-Z)))))break f;if(!(1e-6<+z2(O2(z2(W+U)))||1e-6<+z2(O2(z2(F+M)))||1e-6<+z2(O2(z2(Z+N)))))break f;if(G=G+16|0,!(h=h-1|0))break;}if(T2[A+52>>2]==(0|C)&&!((0|(h=C?C<<1:1))<=(0|C))){if(R=0,h&&(T2[5498]=T2[5498]+1,(G=K2(19+(h<<4)|0))&&(T2[(R=G+19&-16)-4>>2]=G)),!S)for(G=0;S=T2[A+56>>2]+G|0,a=T2[S+4>>2],T2[(f=G+R|0)>>2]=T2[S>>2],T2[4+f>>2]=a,a=T2[(S=S+8|0)+4>>2],T2[(f=8+f|0)>>2]=T2[S>>2],T2[4+f>>2]=a,G=G+16|0,C=C-1|0;);(C=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[C-4>>2])),T2[A+56>>2]=R,p2[A+60|0]=1,T2[A+52>>2]=h,C=T2[A+48>>2];}C=T2[A+56>>2]+(C<<4)|0,T2[C+12>>2]=0,j2[C+8>>2]=Z,j2[C+4>>2]=F,j2[C>>2]=W,T2[A+48>>2]=T2[A+48>>2]+1;}f:{if(E)$[E+2>>1]=_;else {r:{if(!u&&-1!=(0|(G=T2[(I<<2)+y>>2])))for(;;){if(A2[(E=(C=G<<2)+m|0)+2>>1]==(65535&p)&&A2[E>>1]==(65535&r))break r;if(-1==(0|(G=T2[C+J>>2])))break;}if((0|Y)==(0|j)){e:if((0|(E=Y?Y<<1:1))<=(0|Y))R=D,E=Y;else {if(R=0,E&&(T2[5498]=T2[5498]+1,(C=K2(19+(E<<2)|0))&&(T2[(R=C+19&-16)-4>>2]=C)),1<=(0|Y))for(G=R,h=D,C=Y;p=A2[h>>1]|A2[h+2>>1]<<16,$[G>>1]=p,$[G+2>>1]=p>>>16,G=G+4|0,h=h+4|0,C=C-1|0;);else if(!D)break e;T2[5499]=T2[5499]+1,q2(T2[D-4>>2]);}D=Y;}else R=D,E=Y,D=j;$[(D=(D<<2)+R|0)>>1]=i,$[D+2>>1]=i>>>16;e:if((0|X)==(0|O)){if((0|(O=X?X<<1:1))<=(0|X))O=X,C=m;else {if(C=0,O&&(T2[5498]=T2[5498]+1,(D=K2(19+(O<<2)|0))&&(T2[(C=D+19&-16)-4>>2]=D)),1<=(0|X))for(G=C,h=m,D=X;p=A2[h>>1]|A2[h+2>>1]<<16,$[G>>1]=p,$[G+2>>1]=p>>>16,G=G+4|0,h=h+4|0,D=D-1|0;);else if(!m)break e;T2[5499]=T2[5499]+1,q2(T2[m-4>>2]);}}else C=m;if($[(D=(X<<2)+C|0)>>1]=m=65535&r|t,$[D+2>>1]=m>>>16,X=X+1|0,(0|Y)<(0|E)&&(I=E-1&c,(0|x)<(0|E))){if((0|E)<=(0|K))m=y;else {m=0,E&&(T2[5498]=T2[5498]+1,(D=K2(19+(E<<2)|0))&&(T2[(m=D+19&-16)-4>>2]=D));e:{if(1<=(0|x))for(G=m,h=y,Y=x;T2[G>>2]=T2[h>>2],G=G+4|0,h=h+4|0,Y=Y-1|0;);else if(!y)break e;T2[5499]=T2[5499]+1,q2(T2[y-4>>2]);}K=E;}if(d2((x<<2)+m|0,0,E-x<<2),y=E<<2,(0|E)<=(0|P))D=J;else {if((0|E)<=(0|q))D=J;else {D=0,E&&(T2[5498]=T2[5498]+1,(Y=K2(16+(3|y)|0))&&(T2[(D=Y+19&-16)-4>>2]=Y));e:{if(1<=(0|P))for(G=D,h=J,Y=P;T2[G>>2]=T2[h>>2],G=G+4|0,h=h+4|0,Y=Y-1|0;);else if(!J)break e;T2[5499]=T2[5499]+1,q2(T2[J-4>>2]);}q=E;}d2((P<<2)+D|0,0,E-P<<2);}if(1<=(0|E)&&(d2(m,255,y),d2(D,255,y)),1<=(0|x))for(Y=E-1|0,h=G=0;J=((Y&(A2[(J=G+C|0)+2>>1]<<16)+$[J>>1])<<2)+m|0,T2[G+D>>2]=T2[J>>2],G=G+4|0,(0|x)!=(0|(h=(T2[J>>2]=h)+1|0)););y=m,x=P=E,J=D;}T2[(j<<2)+J>>2]=T2[(D=(I<<2)+y|0)>>2],j=(T2[D>>2]=j)+1|0;break f;}$[(C=C+D|0)>>1]=i,$[C+2>>1]=i>>>16;}R=D,E=Y,C=m;}if(b)break;G=T2[A+36>>2],D=R,Y=E,m=C;}I=T2[A+28>>2],Y=E,m=C,D=R;}if(!((0|(_=_+1|0))<(0|I)))break;}if(!((0|I)<1)){for(Y=T2[A+16>>2],X=T2[A+36>>2],x=0;;){if(E=X+P2(x,36)|0,3<=(0|(C=T2[E+4>>2])))for(G=(E=T2[E+12>>2])+4|0,O=(R=Y+(T2[E>>2]<<4)|0)+8|0,K=R+4|0,W=j2[A+72>>2],N=j2[A+68>>2],M=j2[A+64>>2],h=2;j=Y+(T2[G>>2]<<4)|0,Z=j2[j+8>>2],P=Y+(T2[E+((0|h)%(0|C)<<2)>>2]<<4)|0,F=j2[P+8>>2],U=j2[R>>2],k=j2[j>>2],l=z2(U-k),V=j2[K>>2],s=j2[P+4>>2],e=z2(V-s),v=j2[j+4>>2],T=z2(V-v),d=j2[P>>2],B=z2(U-d),H=z2(z2(l*e)-z2(T*B)),w=T,T=j2[O>>2],Q=z2(T-F),g=z2(T-Z),e=z2(z2(w*Q)-z2(g*e)),F=z2(z2(z2(T+Z)+F)*z2(.3333333432674408)),Z=z2(z2(g*B)-z2(l*Q)),Z=z2(z2(_2(z2(z2(H*H)+z2(z2(e*e)+z2(Z*Z)))))*z2(.5)),W=z2(W+z2(F*Z)),j2[A+72>>2]=W,N=z2(N+z2(z2(z2(s+z2(V+v))*z2(.3333333432674408))*Z)),j2[A+68>>2]=N,M=z2(M+z2(z2(z2(d+z2(U+k))*z2(.3333333432674408))*Z)),j2[A+64>>2]=M,z=z2(z+Z),G=G+4|0,(0|C)!=(0|(h=h+1|0)););if((0|I)==(0|(x=x+(G=1)|0)))break;}break A;}}G=0;}if(T2[A+96>>2]=2139095039,Z=z2(z2(1)/z),W=z2(Z*j2[A+64>>2]),j2[A+64>>2]=W,N=z2(Z*j2[A+68>>2]),j2[A+68>>2]=N,M=z2(Z*j2[A+72>>2]),j2[A+72>>2]=M,U=z2(34028234663852886e22),F=z2(34028234663852886e22),G)for(G=T2[A+36>>2]+32|0;(Z=z2(O2(z2(j2[G>>2]+z2(z2(z2(W*j2[G-12>>2])+z2(j2[G-8>>2]*N))+z2(j2[G-4>>2]*M))))))<F&&(F=j2[A+96>>2]=Z),G=G+36|0,I=I-1|0;);if((0|(h=T2[A+8>>2]))<1)Z=z2(-34028234663852886e22),W=z2(34028234663852886e22),N=z2(-34028234663852886e22),M=z2(-34028234663852886e22),z=z2(34028234663852886e22);else for(G=T2[A+16>>2],M=z2(-34028234663852886e22),z=z2(34028234663852886e22),N=z2(-34028234663852886e22),Z=z2(-34028234663852886e22),W=z2(34028234663852886e22);M=M<(V=j2[G+8>>2])?V:M,W=V<W?V:W,N=N<(V=j2[G+4>>2])?V:N,U=V<U?V:U,Z=Z<(V=j2[G>>2])?V:Z,z=V<z?V:z,G=G+16|0,h=h-1|0;);T2[A+128>>2]=0,V=z2(M-W),j2[A+124>>2]=V,H=z2(N-U),j2[A+120>>2]=H,T=z2(Z-z),j2[A+116>>2]=T,F=z2(F/z2(1.7320507764816284)),j2[A+88>>2]=F,T2[A+112>>2]=0,j2[A+108>>2]=W+M,j2[A+104>>2]=U+N,j2[A+100>>2]=Z+z,j2[A+84>>2]=F,j2[A+80>>2]=F,E=(C=(Y=T<H?H<V?2:1:(T<V)<<1)<<2)+(A+80|0)|0,Z=z2(j2[C+(A+116|0)>>2]*z2(.5)),j2[E>>2]=Z,W=z2(z2(Z-F)*z2(.0009765625)),G=1024;A:{f:{for(;;){if(n2(A))break f;if(Z=z2(Z-W),j2[E>>2]=Z,!(G=G-1|0))break;}j2[A+84>>2]=F,j2[A+88>>2]=F,j2[A+80>>2]=F;break A;}for(Y=(E=A+80|0)+((C=1<<Y&3)<<2)|0,Z=j2[(E=E+((1<<C&3)<<2)|0)>>2],W=z2(z2(j2[A+96>>2]-F)*z2(.0009765625)),C=1024;;){if(N=j2[Y>>2],j2[Y>>2]=W+N,F=z2(W+j2[E>>2]),j2[E>>2]=F,n2(A)){if(Z=F,C=C-1|0)continue;break A;}break;}j2[Y>>2]=N,j2[E>>2]=Z;}m&&(T2[5499]=T2[5499]+1,q2(T2[m-4>>2])),D&&(T2[5499]=T2[5499]+1,q2(T2[D-4>>2])),J&&(T2[5499]=T2[5499]+1,q2(T2[J-4>>2])),y&&(T2[5499]=T2[5499]+1,q2(T2[y-4>>2]));}function N2(A,f,r,e,i,a,n){var o,b,t,c,u=z2(0),k=z2(0),l=0,s=0;if(T2[e>>2]=2139095039,T2[i>>2]=-8388609,s=T2[A+(l=8)>>2],u=z2(-34028234663852886e22),!((0|s)<1)){for(;o=T2[A+16>>2]+l|0,u=j2[o-8>>2],k=j2[o-4>>2],b=j2[o>>2],t=z2(z2(z2(z2(u*j2[f>>2])+z2(k*j2[f+4>>2]))+z2(b*j2[f+8>>2]))+j2[f+48>>2]),c=z2(z2(z2(z2(u*j2[f+16>>2])+z2(k*j2[f+20>>2]))+z2(b*j2[f+24>>2]))+j2[f+52>>2]),k=z2(z2(z2(z2(u*j2[f+32>>2])+z2(k*j2[f+36>>2]))+z2(b*j2[f+40>>2]))+j2[f+56>>2]),(u=z2(z2(z2(t*j2[r>>2])+z2(c*j2[r+4>>2]))+z2(k*j2[r+8>>2])))<j2[e>>2]&&(j2[e>>2]=u,T2[a+12>>2]=0,j2[a+8>>2]=k,j2[a+4>>2]=c,j2[a>>2]=t),u>j2[i>>2]&&(j2[i>>2]=u,T2[n+12>>2]=0,j2[n+8>>2]=k,j2[n+4>>2]=c,j2[n>>2]=t),l=l+16|0,s=s-1|0;);u=j2[i>>2];}u<(k=j2[e>>2])&&(j2[e>>2]=u,j2[i>>2]=k,r=T2[(A=a+8|0)>>2],e=T2[A+4>>2],l=T2[(f=n+8|0)+4>>2],T2[A>>2]=T2[f>>2],T2[A+4>>2]=l,A=T2[a>>2],i=T2[a+4>>2],l=T2[n+4>>2],T2[a>>2]=T2[n>>2],T2[a+4>>2]=l,T2[n>>2]=A,T2[n+4>>2]=i,T2[f>>2]=r,T2[f+4>>2]=e);}function c2(A,f,r,e,i,a){var n,o,b,t,c,u,k=0,l=0;return (0|(k=T2[a+16>>2]))!=(0|i)?i-k|0:i?(t=T2[a+8>>2],o=e1(n=T2[a+12>>2],k=0,c=A,0),A=z,l=f,b=e1(n,f=0,l,f),k=z,k=(n=A+b|0)>>>0<b>>>0?k+1|0:k,f=e1(l,0,t,0),A=k,k=A=(n=z+n|0)>>>0<z>>>0?A+1|0:A,k=(n=n+(A=(o=f+o|0)>>>0<f>>>0)|0)>>>0<A>>>0?k+1|0:k,l=n,A=o,o=e1(t,0,c,0),A=(f=A)+z|0,u=t=0+o|0,o=(c=f=l+(A=(0|f)==(0|(n=A=t>>>0<o>>>0?A+1|0:A))&0|A>>>0<f>>>0)|0)>>>0<A>>>0?k+1|0:k,A=T2[a+4>>2],a=T2[a>>2],r=e1(A,k=0,t=r,0),l=z,f=e1(A,0,e,0),A=z,A=(l=l+f|0)>>>0<f>>>0?A+1|0:A,f=e1(e,0,a,0),e=(k=l=(e=z)+l|0)>>>0<e>>>0?A+1|0:A,l=l+(k=A=(r=f+r|0)>>>0<f>>>0)|0,A=e,k=(e=l)>>>0<k>>>0?A+1|0:A,l=-1,b=e,A=r,r=e1(a,e=0,t,0),A=(f=A)+z|0,P2(i,l=!((0|(k=(r=b+(f=(A=(a=e+r|0)>>>0<r>>>0?A+1|0:A)>>>0<f>>>0)|0)>>>0<f>>>0?k+1|0:k))==(0|o)&c>>>0<(f=r)>>>0|o>>>0<k>>>0)?(0|k)==(0|o)&r>>>0<c>>>0|k>>>0<o>>>0?1:(0|A)==(0|n)&u>>>0<a>>>0|n>>>0<A>>>0?-1:(0|A)==(0|n)&a>>>0<u>>>0|A>>>0<n>>>0:l)):0;}function u2(A,f,r){var e=0,i=0,a=0,n=0,o=0,b=0,n=T2[A+56>>2];if(!(n||((e=T2[A+52>>2])?T2[A+52>>2]=T2[e+8>>2]:(a=T2[5498],e=n=0,(i=K2(31))&&(T2[(e=i+19&-16)-4>>2]=i),T2[e+8>>2]=0,T2[5498]=a+2,i=T2[A+60>>2],T2[e+4>>2]=i,(i=K2(P2(i,24)+19|0))&&(T2[(n=i+19&-16)-4>>2]=i),T2[e>>2]=n,n=T2[A+48>>2],T2[A+48>>2]=e,T2[e+8>>2]=n),n=T2[e>>2],(0|(i=T2[e+4>>2]))<1||(e=n+24|0,T2[n>>2]=(a=1==(0|i))?0:e,a))))for(a=1;e=(b=e)+24|0,T2[b>>2]=(0|(a=a+1|0))<(0|i)?e:0,(0|i)!=(0|a););if(T2[A+56>>2]=T2[n>>2],T2[(e=n+8|0)>>2]=0,T2[e+4>>2]=0,T2[(e=n+16|0)>>2]=0,T2[e+4>>2]=0,T2[n>>2]=0,T2[n+4>>2]=0,!((i=T2[A+56>>2])||((e=T2[A+52>>2])?T2[A+52>>2]=T2[e+8>>2]:(o=T2[5498],e=a=0,(i=K2(31))&&(T2[(e=i+19&-16)-4>>2]=i),T2[e+8>>2]=0,T2[5498]=o+2,i=T2[A+60>>2],T2[e+4>>2]=i,(i=K2(P2(i,24)+19|0))&&(T2[(a=i+19&-16)-4>>2]=i),T2[e>>2]=a,i=T2[A+48>>2],T2[A+48>>2]=e,T2[e+8>>2]=i),i=T2[e>>2],(0|(o=T2[e+4>>2]))<1||(e=i+24|0,T2[i>>2]=(a=1==(0|o))?0:e,a))))for(a=1;e=(b=e)+24|0,T2[b>>2]=(0|(a=a+1|0))<(0|o)?e:0,(0|a)!=(0|o););return T2[A+56>>2]=T2[i>>2],T2[(e=i+8|0)>>2]=0,T2[e+4>>2]=0,T2[(a=i+16|0)>>2]=0,T2[a+4>>2]=0,T2[i>>2]=0,T2[i+4>>2]=0,T2[n+8>>2]=i,T2[n+12>>2]=r,T2[n+16>>2]=0,r=T2[A+100>>2],T2[n+20>>2]=r,T2[e>>2]=n,T2[i+12>>2]=f,T2[a>>2]=0,T2[i+20>>2]=r,f=T2[A+116>>2],T2[A+116>>2]=r=f+1|0,(0|f)>=T2[A+120>>2]&&(T2[A+120>>2]=r),n;}function k2(A,f,r,e,i,a,n,o){var b,t,c,u,k,l,s,v=0,v=T2[A+4>>2];return T2[A>>2]==(0|f)?A=(0|f)==(0|v)?(v=T2[f+12>>2],f=T2[T2[f+8>>2]+12>>2],c=T2[f+96>>2],l=T2[v+96>>2]-c|0,A=T2[A+12>>2],b=T2[f+92>>2],s=T2[A+92>>2]-b|0,b=T2[v+92>>2]-b|0,c=T2[A+96>>2]-c|0,t=e1(t=P2(l,s)-P2(b,c)|0,t>>31,t=P2(i,n)-P2(e,o)|0,t>>31),k=z,u=b,b=T2[A+88>>2],A=T2[f+88>>2],v=T2[v+88>>2]-A|0,e=e1(f=A=P2(u,b=b-A|0)-P2(v,s)|0,A>>31,A=P2(e,a)-P2(r,n)|0,A>>31),A=z+k|0,A=(f=e+t|0)>>>0<e>>>0?A+1|0:A,e=f,r=e1(n=f=P2(v,c)-P2(b,l)|0,f>>31,f=P2(r,o)-P2(i,a)|0,f>>31),A=z+A|0,(A=0<(0|(A=(f=e+r|0)>>>0<r>>>0?A+1|0:A))?1:0<=(0|A)?f:0)?2:1):2:(0|f)==(0|v);}function l2(A,f,r,e,i){var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w=0,G=0,C=0,E=0,D=0,h=0,Z=0,Y=0,R=0,F=0,W=0,m=0,N=0,V=0,J=0,M=0,I=0,x=0,y=0,U=0,X=0,p=0,T=0,S=0,j=L2-32|0;if(L2=j,N=T2[i>>2],x=f,(T=T2[e>>2])&&(x=T2[T+12>>2]),X=T2[x+96>>2],J=T2[f+96>>2],u=T2[(E=r)+96>>2]-J|0,Z=T2[(T||N)+12>>2],M=T2[f+92>>2],F=T2[Z+92>>2]-M|0,k=T2[r+92>>2]-M|0,Y=T2[Z+96>>2]-J|0,r=e1(B=r=P2(u,F)-P2(k,Y)|0,s=r>>31,u,C=u>>31),D=z,G=T2[f+88>>2],w=T2[Z+88>>2]-G|0,l=T2[E+88>>2]-G|0,f=e1(Q=f=P2(w,k)-P2(F,l)|0,v=f>>31,l,R=l>>31),r=e1(a=r-f|0,n=D-(z+(r>>>0<f>>>0)|0)|0,f=p=T2[x+92>>2],f>>31),Z=z,f=e1(Q,v,k,F=k>>31),D=z,V=r,r=e1(g=r=P2(Y,l)-P2(w,u)|0,d=r>>31,u,C),f=e1(o=f-r|0,b=D-(z+(f>>>0<r>>>0)|0)|0,f=x=T2[x+88>>2],f>>31),w=z+Z|0,w=(r=V+f|0)>>>0<f>>>0?w+1|0:w,f=e1(l,R,g,d),D=z,C=r,r=e1(k,F,B,s),f=e1(t=f-r|0,c=D-(z+(f>>>0<r>>>0)|0)|0,X,X>>31),w=z+w|0,D=(F=r=C+f|0)>>>0<f>>>0?w+1|0:w,f=e1(B,s,G,G>>31),r=z,C=f,f=e1(Q,v,J,J>>31),w=z+r|0,w=(Z=C+f|0)>>>0<f>>>0?w+1|0:w,r=e1(g,d,M,M>>31),f=z+w|0,Z=(R=Z=r+Z|0)>>>0<r>>>0?f+1|0:f,E=N?T2[N+12>>2]:E,S=T2[E+96>>2],J=T2[E+92>>2],M=T2[E+88>>2],r=N,T&&T2[T+12>>2]&&(f=T2[T2[T+8>>2]+4>>2],U=T2[f+12>>2],w=e1(Y=r=T2[U+92>>2],C=r>>31,g,d),E=z,r=N,h=w,G=e1(V=w=T2[U+88>>2],m=w>>31,B,s),w=z+E|0,w=(h=h+G|0)>>>0<G>>>0?w+1|0:w,G=e1(y=G=T2[U+96>>2],W=G>>31,Q,v),w=z+w|0,!(w=(0|(w=(E=G+h|0)>>>0<G>>>0?w+1|0:w))<(0|(G=Z))?1:(0|w)<=(0|G)?E>>>0<R>>>0:0))){for(E=f+12|0;T2[f+20>>2]!=(0|A)&&(r=e1(Y,C,a,n),w=z,C=r,r=e1(V,m,o,b),w=z+w|0,w=(C=C+r|0)>>>0<r>>>0?w+1|0:w,r=e1(y,W,t,c),w=z+w|0,!((0|(r=w=(C=r+C|0)>>>0<r>>>0?w+1|0:w))<(0|D)||(0|w)<=(0|D)&&C>>>0<=F>>>0)&&(T2[e>>2]=f,D=T2[E>>2],X=T2[D+96>>2],p=T2[D+92>>2],x=T2[D+88>>2],E=(f=T2[T2[f+8>>2]+4>>2])+12|0,F=C,D=r,h=T2[f+12>>2],r=e1(Y=r=T2[h+92>>2],C=r>>31,g,d),w=z,G=r,r=e1(V=r=T2[h+88>>2],m=r>>31,B,s),w=z+w|0,w=(G=G+r|0)>>>0<r>>>0?w+1|0:w,r=e1(y=r=T2[h+96>>2],W=r>>31,Q,v),w=z+w|0,w=(G=r+G|0)>>>0<r>>>0?w+1|0:w,r=G,(0|Z)<(0|w)||(0|Z)<=(0|w)&&R>>>0<=r>>>0)););r=T2[i>>2];}f=e1(a,n,J,J>>31),w=z,C=f,f=e1(o,b,M,M>>31),w=z+w|0,w=(C=C+f|0)>>>0<f>>>0?w+1|0:w,f=e1(t,c,S,S>>31),w=z+w|0,C=(Y=C=f+C|0)>>>0<f>>>0?w+1|0:w;A:if(r){if(T2[r+12>>2]&&(E=T2[T2[r+8>>2]>>2],h=T2[E+12>>2],f=e1(V=f=T2[h+92>>2],m=f>>31,g,d),w=z,G=f,f=e1(y=f=T2[h+88>>2],W=f>>31,B,s),w=z+w|0,w=(G=G+f|0)>>>0<f>>>0?w+1|0:w,f=e1(I=f=T2[h+96>>2],h=f>>31,Q,v),w=z+w|0,w=(G=f+G|0)>>>0<f>>>0?w+1|0:w,f=G,!((0|w)<(0|Z)||(0|w)<=(0|Z)&&f>>>0<R>>>0)))for(U=E+12|0;;){if(T2[(G=E)+20>>2]==(0|A))break A;if(w=e1(V,m,a,n),f=z,E=w,w=e1(y,W,o,b),f=z+f|0,f=(E=E+w|0)>>>0<w>>>0?f+1|0:f,h=(w=E)+(E=e1(t,c,I,h))|0,w=z+f|0,w=h>>>0<E>>>0?w+1|0:w,h=f=h,E=(0|(E=w))<(0|C)?1:(0|E)<=(0|C)?h>>>0<=Y>>>0:0)break A;if(T2[i>>2]=G,r=T2[U>>2],S=T2[r+96>>2],J=T2[r+92>>2],M=T2[r+88>>2],U=(E=T2[T2[G+8>>2]>>2])+12|0,Y=f,C=w,r=G,h=T2[E+12>>2],f=e1(V=f=T2[h+92>>2],m=f>>31,g,d),w=z,G=f,f=e1(y=f=T2[h+88>>2],W=f>>31,B,s),w=z+w|0,w=(G=G+f|0)>>>0<f>>>0?w+1|0:w,f=e1(I=f=T2[h+96>>2],h=f>>31,Q,v),w=z+w|0,w=(G=f+G|0)>>>0<f>>>0?w+1|0:w,f=G,!((0|Z)<(0|w)||(0|Z)<=(0|w)&&R>>>0<=f>>>0))break;}}else r=0;A:{if(D=C-((Y>>>0<F>>>0)+D|0)|0,f=F=Y-F|0,f=0<(0|D)?1:0<=(0|D)?1<=f>>>0:0)for(;;){for(f=T2[e>>2];;){f:if(m=(Z=r=V=(P2(J-p|0,k)+P2(M-x|0,l)|0)+P2(S-X|0,u)|0)>>31,f&&T2[f+12>>2]&&(W=T2[T2[f>>2]+8>>2],!(T2[W+20>>2]<=(0|A)))){r=T2[W+12>>2],Y=T2[r+92>>2],G=(C=T2[r+88>>2])-x|0,E=(R=T2[r+96>>2])-X|0,r=(P2(w=Y-p|0,k)+P2(G,l)|0)+P2(E,u)|0,N=e1(a,n,w,w>>31),w=z,h=N,N=e1(o,b,G,G>>31),w=z+w|0,w=(G=h+N|0)>>>0<N>>>0?w+1|0:w,N=e1(t,c,E,E>>31),w=z+w|0;r:{if(!((G=N+G|0)|(N=w=G>>>0<N>>>0?w+1|0:w))){if((0|r)<0)break r;break f;}if(-1<(0|N))break f;if(y=0<(0|r),U=r>>>31|0,h=(w=(0|r)<0)?0-r|0:0,I=r>>31,E=w?0-(I+(0!=(0|r))|0)|0:0,w=1<=(0|V)?(T2[8+j>>2]=Z,T2[12+j>>2]=m,-(T2[24+j>>2]=1)):(0|V)<=-1?(T2[24+j>>2]=-1,T2[8+j>>2]=0-Z,T2[12+j>>2]=0-((0!=(0|Z))+m|0),1):(T2[8+j>>2]=0,T2[12+j>>2]=0,T2[24+j>>2]=0),U=y?-1:U,h=y?r:h,E=y?I:E,G=0-(r=G)|0,N=0-((0!=(0|r))+N|0)|0,r=F,(y=0<(0|(I=D))?1:0<=(0|D)?F:0)||-1<((I=r=0)|D)||(T2[24+j>>2]=w,r=0-F|0,I=0-((0!=(0|F))+D|0)|0),T2[16+j>>2]=r,T2[20+j>>2]=I,(0|c2(h,E,G,N,U,8+j|0))<=-1)break f;}T2[e>>2]=f=(0|f)==(0|T)?0:W,r=e1(a,n,r=J-Y|0,r>>31),D=z,F=(w=r)+(r=e1(o,b,r=M-C|0,r>>31))|0,w=z+D|0,w=F>>>0<r>>>0?w+1|0:w,r=e1(t,c,r=S-R|0,r>>31),w=z+w|0,D=(F=D=r+F|0)>>>0<r>>>0?w+1|0:w,x=C,p=Y,X=R;continue;}break;}if(!(f=T2[i>>2]))break A;if(!T2[f+12>>2])break A;if(W=T2[T2[f+8>>2]>>2],T2[W+20>>2]<=(0|A))break A;if(Y=T2[W+12>>2],f=e1(h=f=U=(I=T2[Y+92>>2])-J|0,J=f>>31,g,d),R=z,C=f,r=e1(E=f=M=(w=T2[Y+88>>2])-M|0,G=f>>31,B,s),f=z+R|0,f=(C=C+r|0)>>>0<r>>>0?f+1|0:f,f=(0|(y=C))!=(0-(r=e1(Q,v,N=r=R=(C=T2[Y+96>>2])-S|0,Y=r>>31))|0)?1:(0-(z+(0!=(0|r))|0)|0)!=(0|f))break A;if(f=e1(a,n,f=I-p|0,f>>31),r=z,I=f,f=e1(o,b,f=w-x|0,f>>31),w=z+r|0,w=(S=I+f|0)>>>0<f>>>0?w+1|0:w,f=e1(t,c,f=C-X|0,f>>31),w=z+w|0,w=(r=f+S|0)>>>0<f>>>0?w+1|0:w,f=r,C=(0|(r=w))<0?1:(0|r)<=0?f>>>0<1:0)break A;R=(P2(U,k)+P2(M,l)|0)+P2(R,u)|0,C=e1(h,J,a,n),w=z,h=C,C=e1(E,G,o,b),w=z+w|0,w=(G=h+C|0)>>>0<C>>>0?w+1|0:w,C=e1(t,c,N,Y),w=z+w|0;f:{if(!((Y=C+G|0)|(C=w=Y>>>0<C>>>0?w+1|0:w))){if((0|R)<0)break f;break A;}if(-1<(0|C))break A;if(J=0<(0|R),E=R>>>31|0,G=(R=(0|(w=R))<0)?0-w|0:0,M=w>>31,N=R?0-(M+(0!=(0|w))|0)|0:0,R=1<=(0|V)?(T2[8+j>>2]=Z,T2[12+j>>2]=m,-(T2[24+j>>2]=1)):(0|V)<=-1?(T2[24+j>>2]=-1,T2[8+j>>2]=0-Z,T2[12+j>>2]=0-((0!=(0|Z))+m|0),1):(T2[8+j>>2]=0,T2[12+j>>2]=0,T2[24+j>>2]=0),E=J?-1:E,G=J?w:G,N=J?M:N,Y=0-(Z=Y)|0,w=0-((0!=(0|Z))+C|0)|0,C=Z=D,D=F,(V=0<(0|C)?1:0<=(0|Z)?D:0)||-1<((C=F=0)|Z)||(T2[24+j>>2]=R,F=0-D|0,C=0-((0!=(0|D))+Z|0)|0),T2[16+j>>2]=F,T2[20+j>>2]=C,(0|c2(G,N,Y,w,E,8+j|0))<=0)break A;}T2[i>>2]=W,D=T2[W+12>>2],S=T2[D+96>>2],J=T2[D+92>>2],M=T2[D+88>>2],F=f,D=r;}if(!(-1<(0|D)))for(;;){V=(Z=f=T=(P2(J-p|0,k)+P2(M-x|0,l)|0)+P2(S-X|0,u)|0)>>31;f:if(r&&T2[r+12>>2]&&(y=T2[T2[r+4>>2]+8>>2],!(T2[y+20>>2]<=(0|A)))){R=T2[y+12>>2],Y=T2[R+92>>2],G=(C=T2[R+88>>2])-M|0,E=(R=T2[R+96>>2])-S|0,h=(P2(f=Y-J|0,k)+P2(G,l)|0)+P2(E,u)|0,w=e1(a,n,f,f>>31),f=z,I=w,w=e1(o,b,G,G>>31),f=z+f|0,f=(G=I+w|0)>>>0<w>>>0?f+1|0:f,E=(w=G)+(G=e1(t,c,E,E>>31))|0,w=z+f|0;r:{if(!(E|(G=w=E>>>0<G>>>0?w+1|0:w))){if(0<(0|h))break r;break f;}if(-1<(0|G))break f;if(m=0<(0|h),I=h>>>31|0,U=(w=(0|(f=h))<0)?0-f|0:0,W=f>>31,h=w?0-(W+(0!=(0|f))|0)|0:0,w=1<=(0|T)?(T2[8+j>>2]=Z,T2[12+j>>2]=V,-(T2[24+j>>2]=1)):(0|T)<=-1?(T2[24+j>>2]=-1,T2[8+j>>2]=0-Z,T2[12+j>>2]=0-((0!=(0|Z))+V|0),1):(T2[8+j>>2]=0,T2[12+j>>2]=0,T2[24+j>>2]=0),I=m?-1:I,U=m?f:U,h=m?W:h,E=0-(f=E)|0,G=0-((0!=(0|f))+G|0)|0,f=F,(m=0<(0|(W=D))?1:0<=(0|D)?F:0)||-1<((W=f=0)|D)||(T2[24+j>>2]=w,f=0-F|0,W=0-((0!=(0|F))+D|0)|0),T2[16+j>>2]=f,T2[20+j>>2]=W,1<=(0|c2(U,h,E,G,I,8+j|0)))break f;}T2[i>>2]=r=(0|r)==(0|N)?0:y,f=e1(a,n,f=Y-p|0,f>>31),D=z,F=(w=f)+(f=e1(o,b,f=C-x|0,f>>31))|0,w=z+D|0,w=F>>>0<f>>>0?w+1|0:w,D=e1(t,c,f=R-X|0,f>>31),f=z+w|0,D=f=(F=D+F|0)>>>0<D>>>0?f+1|0:f,M=C,J=Y,S=R;continue;}if(!(f=T2[e>>2]))break A;if(!T2[f+12>>2])break A;if(m=T2[T2[f+8>>2]+4>>2],T2[m+20>>2]<=(0|A))break A;if(C=T2[m+12>>2],f=e1(I=f=W=(y=T2[C+92>>2])-p|0,U=f>>31,g,d),r=z,R=(w=f)+(f=e1(E=f=p=(h=T2[C+88>>2])-x|0,G=f>>31,B,s))|0,w=z+r|0,w=R>>>0<f>>>0?w+1|0:w,f=(0|(r=R))!=(0-(f=e1(Q,v,x=f=C=(R=T2[C+96>>2])-X|0,Y=f>>31))|0)?1:(0-(z+(0!=(0|f))|0)|0)!=(0|w))break A;if(f=e1(a,n,f=J-y|0,f>>31),r=z,X=(w=f)+(f=e1(o,b,f=M-h|0,f>>31))|0,w=z+r|0,w=X>>>0<f>>>0?w+1|0:w,f=e1(t,c,f=S-R|0,f>>31),w=z+w|0,-1<(0|(f=(R=r=f+X|0)>>>0<f>>>0?w+1|0:w)))break A;if(r=(P2(W,k)+P2(p,l)|0)+P2(C,u)|0,C=e1(I,U,a,n),w=z,h=C,C=e1(E,G,o,b),w=z+w|0,w=(G=h+C|0)>>>0<C>>>0?w+1|0:w,C=e1(t,c,x,Y),w=z+w|0,(w=(Y=C+G|0)>>>0<C>>>0?w+1|0:w)|(C=Y)){if(-1<(0|w))break A;if(X=0<(0|r),p=r>>>31|0,x=(Y=(0|r)<0)?0-r|0:0,E=r>>31,Y=Y?0-(E+(0!=(0|r))|0)|0:0,Z=1<=(0|T)?(T2[8+j>>2]=Z,T2[12+j>>2]=V,-(T2[24+j>>2]=1)):(0|T)<=-1?(T2[24+j>>2]=-1,T2[8+j>>2]=0-Z,T2[12+j>>2]=0-((0!=(0|Z))+V|0),1):(T2[8+j>>2]=0,T2[12+j>>2]=0,T2[24+j>>2]=0),G=X?-1:p,x=X?r:x,Y=X?E:Y,C=0-(r=C)|0,w=0-((0!=(0|r))+w|0)|0,r=F,(V=0<(0|(E=D))?1:0<=(0|D)?r:0)||-1<((E=F=0)|D)||(T2[24+j>>2]=Z,F=0-r|0,E=0-((0!=(0|r))+D|0)|0),T2[16+j>>2]=F,T2[20+j>>2]=E,0<=(0|c2(x,Y,C,w,G,8+j|0)))break A;}else if((0|r)<=0)break A;T2[e>>2]=m,D=T2[m+12>>2],X=T2[D+96>>2],p=T2[D+92>>2],r=T2[i>>2],x=T2[D+88>>2],F=R,D=f;}}L2=32+j|0;}function s2(A,f,r,e,i,a,n){var o,b,t,c,u,k,l,s=0,v=0,d=0,B=0,Q=0,g=0,w=0,G=0,C=0,E=0;if(!(s=T2[r+8>>2]))return 0;for(k=e+8|0,l=e+4|0,w=s;;){if(T2[w+20>>2]>T2[A+100>>2]){v=T2[w+12>>2],s=e1(d=s=b=T2[v+92>>2]-T2[r+92>>2]|0,B=s>>31,T2[i+8>>2],T2[i+12>>2]),Q=z,g=s,o=e1(G=s=t=T2[v+88>>2]-T2[r+88>>2]|0,C=s>>31,T2[i>>2],T2[i+4>>2]),s=z+Q|0,s=(g=g+o|0)>>>0<o>>>0?s+1|0:s,u=e1(Q=v=o=T2[v+96>>2]-T2[r+96>>2]|0,c=v>>31,T2[i+16>>2],T2[i+20>>2]),v=z+s|0,v=(g=u+g|0)>>>0<u>>>0?v+1|0:v,s=e1(T2[a+8>>2],T2[a+12>>2],d,B),B=z,d=(G=e1(T2[a>>2],T2[a+4>>2],G,C))+s|0,s=z+B|0,s=d>>>0<G>>>0?s+1|0:s,B=e1(T2[a+16>>2],T2[a+20>>2],Q,c),s=z+s|0,s=(d=B+d|0)>>>0<B>>>0?s+1|0:s,Q=B=d,s=(s=0<(0|(d=s))?1:0<=(0|d)?Q:0)?(Q=-1,G=0,1):-1<(0|d)?(G=1,Q=d=B=0):(B=0-(s=B)|0,d=0-((0!=(0|s))+d|0)|0,G=0,-(Q=1));A:{if(!(C=0<(0|v)?1:0<=(0|v)?g:0))if((0|v)<-1||(0|v)<=-1)g=0-(s=g)|0,v=0-((0!=(0|s))+v|0)|0,s=Q;else if(v=g=0,G)break A;!E||(0|(Q=c2(B,d,g,v,s,n)))<=-1?(T2[n+16>>2]=s,T2[n+8>>2]=g,T2[n+12>>2]=v,T2[n>>2]=B,T2[n+4>>2]=d,E=w):Q||(E=2!=(0|k2(E,w,T2[e>>2],T2[l>>2],T2[k>>2],t,b,o))^f?w:E);}s=T2[r+8>>2];}if((0|(w=T2[w>>2]))==(0|s))break;}return E;}function v2(A){var f,r,e=0,i=0,a=z2(0);return L2=i=L2-16|0,f=T2[A+8>>2],e=T2[A+12>>2],a=z2(z2(z2(+(f>>>0)+4294967296*((r=e)>>>0))*z2(0x10000000000000000))+z2(+T[A>>2]+4294967296*+T[A+4>>2])),0<(0|e)||0<=(0|e)||(e=T2[A+4>>2],A=T2[A>>2],T2[i>>2]=0-A,T2[4+i>>2]=0-(e+(0!=(0|A))|0),f=(A=!(A|e))+(e=-1^f)|0,A=-1^r,T2[8+i>>2]=f,T2[12+i>>2]=f>>>0<e>>>0?A+1|0:A,a=z2(-v2(i))),L2=16+i|0,a;}function Q2(A,f,r){var e,i,a=0,n=0,o=0,b=0,t=0,c=z2(0),u=z2(0),k=0,l=0,s=0,v=z2(0),d=0,B=z2(0),Q=0,g=0,w=0,G=z2(0),C=z2(0),E=z2(0),D=0,h=z2(0),Z=z2(0),Y=(0),R=0;if(L2=n=L2-176|0,(0|r)<=0)(f=T2[A+12>>2])&&S2[A+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+12>>2]=0,p2[A+16|0]=1,T2[A+4>>2]=0,T2[A+8>>2]=0,(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,p2[A+36|0]=1,T2[(f=A+24|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+52>>2])&&S2[A+56|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+52>>2]=0,p2[A+56|0]=1,T2[(A=A+44|0)>>2]=0,T2[A+4>>2]=0;else {for(p2[104+n|0]=1,T2[(a=80+n|0)>>2]=0,T2[a+4>>2]=256,T2[(a=n+64|0)>>2]=0,T2[a+4>>2]=256,T2[(a=48+n|0)>>2]=0,T2[a+4>>2]=256,T2[100+n>>2]=0,T2[(a=92+n|0)>>2]=0,T2[a+4>>2]=0,T2[72+n>>2]=0,T2[76+n>>2]=0,T2[56+n>>2]=0,T2[60+n>>2]=0,T2[40+n>>2]=0,T2[44+n>>2]=0,G=z2(-1.0000000150474662e30),C=z2(1.0000000150474662e30),o=r,a=f,E=z2(1.0000000150474662e30),B=z2(1.0000000150474662e30),h=z2(-1.0000000150474662e30),Z=z2(-1.0000000150474662e30);G=G<(c=j2[a+8>>2])?c:G,h=h<(u=j2[a+4>>2])?u:h,C=c<C?c:C,E=u<E?u:E,Z=Z<(c=j2[a>>2])?c:Z,B=c<B?c:B,a=a+16|0,o=o-1|0;);if(a=1,i=z2(G-C),u=z2(h-E),(0|(t=(c=(v=z2(Z-B))<u?(T2[120+n>>2]=o=u<i?2:1,a=0,v):(T2[120+n>>2]=o=(v<i)<<1,u))<i?a:2))==(0|o)&&(t=(o+1>>>0)%3|0),T2[36+n>>2]=a=0,j2[32+n>>2]=z2(G+C)*z2(.5),j2[28+n>>2]=z2(h+E)*z2(.5),T2[5498]=T2[5498]+1,T2[20+n>>2]=0,j2[24+n>>2]=z2(Z+B)*z2(.5),T2[112+n>>2]=t,T2[116+n>>2]=b=(3^o)-t|0,c=z2(i*z2(9788566967472434e-20)),c=(o=((b+1|0)%3|0)==(0|o))?c:z2(-c),j2[16+n>>2]=c,u=z2(u*z2(9788566967472434e-20)),u=o?u:z2(-u),j2[12+n>>2]=u,v=z2(v*z2(9788566967472434e-20)),v=o?v:z2(-v),j2[8+n>>2]=v,(o=K2(19+(r<<4)|0))&&(T2[(a=o+19&-16)-4>>2]=o),T2[164+n>>2]=a,p2[168+n|0]=1,T2[160+n>>2]=r,o=T2[140+n>>2],T2[a>>2]=T2[136+n>>2],T2[a+4>>2]=o,o=T2[(b=144+n|0)+4>>2],T2[(a=a+8|0)>>2]=T2[b>>2],T2[a+4>>2]=o,1!=(0|r))for(o=r-1|0,a=16;t=T2[140+n>>2],l=T2[164+n>>2]+a|0,T2[l>>2]=T2[136+n>>2],T2[l+4>>2]=t,s=T2[b+4>>2],T2[(l=l+8|0)>>2]=T2[b>>2],T2[l+4>>2]=s,a=a+16|0,o=o-1|0;);for(c=c!=z2(0)?z2(z2(1)/c):c,u=u!=z2(0)?z2(z2(1)/u):u,v=v!=z2(0)?z2(z2(1)/v):v,T2[156+n>>2]=r,l=(136+n|0)+(T2[112+n>>2]<<2)|0,s=(136+n|0)+(T2[120+n>>2]<<2)|0,t=(136+n|0)+(T2[116+n>>2]<<2)|0,a=T2[164+n>>2],G=j2[32+n>>2],C=j2[28+n>>2],E=j2[24+n>>2],o=0;T2[a+12>>2]=o,T2[148+n>>2]=0,j2[136+n>>2]=v*z2(j2[f>>2]-E),j2[144+n>>2]=c*z2(j2[f+8>>2]-G),j2[140+n>>2]=u*z2(j2[f+4>>2]-C),b=a,B=j2[t>>2],k=z2(O2(B))<z2(2147483648)?~~B:-2147483648,T2[b>>2]=k,k=a+4|0,B=j2[s>>2],b=z2(O2(B))<z2(2147483648)?~~B:-2147483648,T2[k>>2]=b,k=a+8|0,B=j2[l>>2],b=z2(O2(B))<z2(2147483648)?~~B:-2147483648,T2[k>>2]=b,f=f+16|0,a=a+16|0,(0|(o=o+1|0))!=(0|r););if(2<=(0|r)&&!function A(f,r,e){var i,a,n,o,b=0,t=0,c=0,u=0,k=0,l=0,s=0,v=0;for(L2=s=L2-16|0,u=T2[f+12>>2],o=T2[8+(c=u+((r+e|0)/2<<4)|0)>>2],a=T2[c+4>>2],n=T2[c>>2],c=r,l=e;;){for(b=(c<<4)+u|0;;){A:{if(!((0|(t=T2[b+4>>2]))<(0|a))){if((0|t)!=(0|a))break A;if(!((0|(t=T2[b>>2]))<(0|n))){if((0|t)!=(0|n))break A;if(T2[b+8>>2]>=(0|o))break A;}}b=b+16|0,c=c+1|0;continue;}break;}for(v=l<<4;;){A:{if(!((0|a)<(0|(k=T2[4+(t=u+v|0)>>2])))){if((0|k)!=(0|a))break A;if(!((0|n)<(0|(k=T2[t>>2])))){if((0|k)!=(0|n))break A;if(T2[t+8>>2]<=(0|o))break A;}}v=v-16|0,l=l-1|0;continue;}break;}if((0|c)<=(0|l)&&(i=T2[4+(k=b+8|0)>>2],T2[(u=8+s|0)>>2]=T2[k>>2],T2[u+4>>2]=i,i=T2[b+4>>2],T2[s>>2]=T2[b>>2],T2[4+s>>2]=i,i=T2[t+4>>2],T2[b>>2]=T2[t>>2],T2[b+4>>2]=i,t=T2[4+(b=t+8|0)>>2],T2[k>>2]=T2[b>>2],T2[k+4>>2]=t,b=T2[f+12>>2]+v|0,v=T2[4+s>>2],T2[b>>2]=T2[s>>2],T2[b+4>>2]=v,t=T2[u+4>>2],T2[(b=b+8|0)>>2]=T2[u>>2],T2[b+4>>2]=t,l=l-1|0,c=c+1|0),!((0|c)<=(0|l)))break;u=T2[f+12>>2];}(0|r)<(0|l)&&A(f,r,l),(0|c)<(0|e)&&A(f,c,e),L2=16+s|0;}(152+n|0,0,r-1|0),T2[48+n>>2]=0,T2[44+n>>2]=T2[40+n>>2],T2[52+n>>2]=r,(0|(b=T2[92+n>>2]))<(0|r)){if(T2[96+n>>2]<(0|r)){if(o=0,T2[5498]=T2[5498]+1,(f=K2(19+(r<<2)|0))&&(T2[(o=f+19&-16)-4>>2]=f),1<=(0|b))for(a=0,f=b;T2[a+o>>2]=T2[T2[100+n>>2]+a>>2],a=a+4|0,f=f-1|0;);(f=T2[100+n>>2])&&S2[104+n|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[100+n>>2]=o,p2[104+n|0]=1,T2[96+n>>2]=r;}for(a=b<<2,f=r-b|0;a=a+4|(T2[T2[100+n>>2]+a>>2]=0),f=f-1|0;);}for(T2[92+n>>2]=r,t=0;;){if(!((o=T2[48+n>>2])||((a=T2[44+n>>2])?T2[44+n>>2]=T2[a+8>>2]:(b=T2[5498],a=f=0,(o=K2(31))&&(T2[(a=o+19&-16)-4>>2]=o),T2[a+8>>2]=0,o=T2[52+n>>2],T2[a+4>>2]=o,T2[5498]=b+2,(o=K2(P2(o,112)+19|0))&&(T2[(f=o+19&-16)-4>>2]=o),T2[a>>2]=f,T2[a+8>>2]=T2[40+n>>2],T2[40+n>>2]=a),o=T2[a>>2],(0|(b=T2[a+4>>2]))<1||(a=o+112|0,T2[o>>2]=(f=1==(0|b))?0:a,f))))for(f=1;a=(s=a)+112|0,T2[s>>2]=(0|(f=f+1|0))<(0|b)?a:0,(0|f)!=(0|b););if(T2[48+n>>2]=T2[o>>2],T2[(f=o+8|0)>>2]=0,T2[f+4>>2]=0,T2[o+16>>2]=0,T2[o>>2]=0,T2[o+4>>2]=0,T2[o+104>>2]=-1,T2[f>>2]=0,f=T2[164+n>>2]+(t<<4)|0,a=T2[f+4>>2],T2[o+88>>2]=T2[f>>2],T2[o+92>>2]=a,b=T2[(f=f+8|0)+4>>2],T2[(a=o+96|0)>>2]=T2[f>>2],T2[a+4>>2]=b,T2[o+104>>2]=-1,T2[T2[100+n>>2]+(t<<2)>>2]=o,(0|(t=t+1|0))==(0|r))break;}if((f=T2[164+n>>2])&&S2[168+n|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[164+n>>2]=0,p2[168+n|0]=1,T2[156+n>>2]=0,T2[160+n>>2]=0,T2[124+n>>2]=0,T2[128+n>>2]=0,T2[64+n>>2]=0,T2[60+n>>2]=T2[56+n>>2],T2[108+n>>2]=-3,T2[68+n>>2]=P2(r,6),T2[(f=144+n|0)>>2]=0,T2[f+4>>2]=0,T2[136+n>>2]=0,function A(f,r,e,i){var a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0,l=0,s=0,v=0,d=0,B=0,Q=0,g=0,w=0,G=0,C=0,E=0,D=0,h=0,Z=0,Y=0,R=0,F=0,W=0,m=0,N=0,V=0,J=0,M=0,I=0,x=0;L2=b=L2-144|0;A:{f:{r:{e:{i:switch(0|(a=e-r|0)){case 1:break r;case 2:break e;case 0:break i;default:break f;}T2[i>>2]=0,T2[i+4>>2]=0,T2[(f=i+8|0)>>2]=0,T2[f+4>>2]=0;break A;}if(e=T2[T2[f+92>>2]+(r<<2)>>2],a=T2[e+204>>2],t=T2[e+92>>2],(0|(n=T2[e+88>>2]))!=(0|(o=T2[e+200>>2]))||(0|a)!=(0|t)||(a=t,T2[e+96>>2]!=T2[e+208>>2])){r=e+112|0,(c=t-a|0)|(a=n-o|0)?(T2[e+4>>2]=r,T2[e>>2]=r,T2[e+116>>2]=e,T2[e+112>>2]=e,T2[i+4>>2]=(a=(t=(0|a)<0)|(o=(0|c)<0)&!a)?r:e,T2[i>>2]=a?e:r,a=t&!c||o?(T2[i+8>>2]=e,r):(T2[i+8>>2]=r,e)):(t=T2[e+96>>2]>T2[e+208>>2],T2[i+8>>2]=a=t?r:e,T2[i+4>>2]=a,T2[i>>2]=a,T2[a+4>>2]=a,r=t?e:r,e=T2[a>>2]=a),T2[i+12>>2]=a,e=u2(f,i=e,r),T2[i+8>>2]=e,f=T2[e+8>>2],T2[r+8>>2]=f,T2[e+4>>2]=e,T2[e>>2]=e,T2[f+4>>2]=f,T2[f>>2]=f;break A;}T2[e+8>>2]=0,T2[i+12>>2]=e,T2[i+8>>2]=e,T2[i+4>>2]=e,T2[i>>2]=e,T2[e+4>>2]=e,T2[e>>2]=e;break A;}f=T2[T2[f+92>>2]+(r<<2)>>2],T2[f+8>>2]=0,T2[i+12>>2]=f,T2[i+8>>2]=f,T2[i+4>>2]=f,T2[i>>2]=f,T2[f+4>>2]=f,T2[f>>2]=f;break A;}f:if(!((0|e)<=(0|(n=t=(l=(0|a)/2|0)+r|0)))){for(a=T2[f+92>>2],o=T2[(a+(t<<2)|0)-4>>2],u=T2[o+88>>2],c=T2[o+96>>2],o=T2[o+92>>2],a=a+(r+l<<2)|0,n=t;;){if(l=T2[a>>2],(0|u)!=T2[l+88>>2])break f;if((0|o)!=T2[l+92>>2])break f;if((0|c)!=T2[l+96>>2])break f;if(a=a+4|0,!((0|(n=n+1|0))<(0|e)))break;}n=e;}if(A(f,r,t,i),T2[(r=16+b|0)>>2]=0,T2[r+4>>2]=0,T2[8+b>>2]=0,A(f,n,e,8+b|(T2[12+b>>2]=0)),C=T2[12+b>>2])if(Q=T2[i+4>>2]){J=T2[(r=f+100|0)>>2]-1|0,T2[r>>2]=J,E=T2[i+12>>2],r=T2[E+88>>2],l=T2[16+b>>2];f:{r:if((0|r)==T2[l+88>>2]&&(0|(Z=T2[E+92>>2]))==T2[l+92>>2]){if((0|(e=T2[l+4>>2]))==(0|l)){(e=T2[l+8>>2])&&(l=T2[e+12>>2],Z=T2[l+92>>2],r=T2[l+88>>2]),D=r+1|0,C=T2[l+96>>2];break f;}if(r=T2[l>>2],T2[r+4>>2]=e,T2[e>>2]=r,T2[8+b>>2]==(0|l)&&((0|(o=T2[(a=r)+88>>2]))<(0|(t=T2[e+88>>2]))||(0|o)==(0|t)&&T2[r+92>>2]<T2[e+92>>2]||(a=e),T2[8+b>>2]=a),(0|l)==(0|C)){e:{if((0|(t=T2[r+88>>2]))<=(0|(a=T2[e+88>>2]))){if((0|a)!=(0|t))break e;if(T2[r+92>>2]<=T2[e+92>>2])break e;}C=T2[12+b>>2]=r;break r;}C=T2[12+b>>2]=e;}}for(B=T2[i>>2],g=T2[8+b>>2],a=Q,r=C,t=e=0,v=o=1;;){l=t,E=e,t=T2[r+88>>2],u=T2[a+88>>2];r:if(1<=(0|(n=P2(t-u|0,o))))for(w=T2[r+92>>2],e=a;;){for(t=r,a=T2[e+92>>2],u=n;;){e:if(d=w-a|0,(0|(n=T2[(k=1&v?4:0)+e>>2]))!=(0|e)&&!(0<(0|(c=(r=T2[n+92>>2])-a|0)))){if(a=T2[n+88>>2],s=P2(a-T2[e+88>>2]|0,o)){if(-1<(0|s))break e;if((0|P2(c,u))>(0|P2(s,d)))break e;}u=P2(T2[t+88>>2]-a|0,o),a=r,e=n;continue;}break;}if((0|t)==(0|(r=T2[t+k>>2])))break r;if(-1<(0|(k=(a=T2[r+92>>2])-w|0)))break r;if(c=T2[r+88>>2],(0|(n=P2(c-T2[e+88>>2]|0,o)))<1)break r;if(w=a,a=P2(c-T2[t+88>>2]|0,o)){if(-1<(0|a))break r;if(!((0|P2(u,k))<(0|P2(a,d))))break;}}else if((0|n)<=-1){c=T2[a+92>>2],w=T2[r+92>>2];e:for(;;){for(k=T2[(F=1&v?0:4)+r>>2];;){e=a,s=n,W=w-c|0;i:if((0|r)!=(0|k)&&!((0|(n=(a=T2[k+92>>2])-w|0))<0)){if(u=T2[k+88>>2],t=P2(u-t|0,o)){if(-1<(0|t))break i;if((0|P2(n,s))>(0|P2(t,W)))break i;}n=P2(u-T2[e+88>>2]|0,o),t=u,w=a,r=k,a=e;continue e;}if((0|(a=T2[e+F>>2]))==(0|e)){t=r;break r;}if((0|(Y=(u=T2[a+92>>2])-c|0))<1){t=r;break r;}if(t=T2[r+88>>2],d=T2[a+88>>2],-1<(0|(n=P2(t-d|0,o)))){t=r;break r;}if(c=u,u=P2(d-T2[e+88>>2]|0,o)){if(-1<(0|u)){t=r;break r;}if(!((0|P2(s,Y))<(0|P2(u,W))))break;}}break;}t=r;}else {n=T2[a+92>>2];e:if(c=1&v)for(o=a;;){if((0|(o=T2[(e=o)+4>>2]))==(0|a))break e;if((0|u)!=T2[o+88>>2])break e;if(t=n,!((0|(n=T2[o+92>>2]))<=(0|t)))break;}else for(o=a;;){if((0|(o=T2[(e=o)>>2]))==(0|a))break e;if((0|u)!=T2[o+88>>2])break e;if(t=n,!((0|(n=T2[o+92>>2]))<=(0|t)))break;}if(o=T2[r+92>>2],c)for(a=r;;){if((0|(a=T2[(t=a)>>2]))==(0|r))break r;if((0|u)!=T2[a+88>>2])break r;if(!((0|(n=o))<=(0|(o=T2[a+92>>2]))))break;}else for(a=r;;){if((0|(a=T2[(t=a)+4>>2]))==(0|r))break r;if((0|u)!=T2[a+88>>2])break r;if(!((0|(n=o))<=(0|(o=T2[a+92>>2]))))break;}}if(n=1&v,v=0,o=-1,a=B,r=g,!n)break;}if(T2[t>>2]=e,T2[e+4>>2]=t,T2[E>>2]=l,T2[l+4>>2]=E,T2[g+88>>2]<T2[B+88>>2]&&(T2[i>>2]=g),T2[C+88>>2]>=T2[Q+88>>2]&&(T2[i+4>>2]=C),T2[i+12>>2]=T2[20+b>>2],M=T2[l+96>>2],G=T2[E+96>>2],x=T2[l+92>>2],I=T2[E+92>>2],i=T2[E+8>>2],W=T2[l+88>>2],F=T2[E+88>>2],g=e1(n=e=Y=M-G|(T2[104+b>>2]=r=0),o=e>>31,Z=e=d=x-I|0,D=e>>31),Q=z,e=e1(V=e=0-(R=W-F|0)|0,m=e>>31,R,R>>31),t=z,B=e-(a=e1(d,D,d,D))|0,v=t-(z+(e>>>0<a>>>0)|0)|0,C=0-(e=e1(n,o,V,m))|0,s=0-(z+(0!=(0|e))|0)|0,o=0,i){for(e=i;k=T2[e+12>>2],a=e1(w=a=T2[k+92>>2]-I|0,u=a>>31,V,m),t=z,(a=(0|a)!=(0-(a=e1(Z,D,c=a=T2[k+88>>2]-F|0,n=a>>31))|0)?1:(0-(z+(0!=(0|a))|0)|0)!=(0|t))||(a=e1(g,Q,w,u),t=z,u=a,a=e1(C,s,c,n),c=z+t|0,c=(n=u+a|0)>>>0<a>>>0?c+1|0:c,t=(a=e1(B,v,a=T2[k+96>>2]-G|0,a>>31))+n|0,n=z+c|0,n=t>>>0<a>>>0?n+1|0:n,a=t,(a=(0|n)<0?1:(0|n)<=0?a>>>0<1:0)||o&&1!=(0|k2(o,e,R,d,Y,0,0,-1))||(o=e)),(0|i)!=(0|(e=T2[e>>2])););T2[104+b>>2]=o;}if(i=T2[l+8>>2],T2[80+b>>2]=0,i){for(e=i;k=T2[e+12>>2],a=e1(w=a=T2[k+92>>2]-x|0,u=a>>31,V,m),t=z,(a=(0|a)!=(0-(a=e1(Z,D,c=a=T2[k+88>>2]-W|0,n=a>>31))|0)?1:(0-(z+(0!=(0|a))|0)|0)!=(0|t))||(a=e1(g,Q,w,u),t=z,u=a,a=e1(C,s,c,n),c=z+t|0,c=(n=u+a|0)>>>0<a>>>0?c+1|0:c,t=(a=e1(B,v,a=T2[k+96>>2]-M|0,a>>31))+n|0,n=z+c|0,n=t>>>0<a>>>0?n+1|0:n,a=t,(a=(0|n)<0?1:(0|n)<=0?a>>>0<1:0)||r&&2!=(0|k2(r,e,R,d,Y,0,0,-1))||(r=e)),(0|i)!=(0|(e=T2[e>>2])););T2[80+b>>2]=r;}r|o&&(l2(J,E,l,104+b|0,80+b|0),(r=T2[104+b>>2])&&(E=T2[r+12>>2]),(r=T2[80+b>>2])&&(l=T2[r+12>>2])),Z=T2[l+92>>2],D=T2[l+88>>2],C=T2[l+96>>2]+1|0;}for(x=f+100|0,r=E,c=l,J=1,w=k=g=t=s=v=0;;){if(T2[140+b>>2]=-1,n=T2[(W=r+92|0)>>2],a=T2[(I=c+92|0)>>2]-n|0,T2[132+b>>2]=a,e=T2[(Y=r+96|0)>>2],i=T2[(F=c+96|0)>>2]-e|0,T2[136+b>>2]=i,B=T2[r+88>>2],o=T2[c+88>>2]-B|0,T2[128+b>>2]=o,u=Z-n|0,n=C-e|0,R=(e=P2(u,i)-P2(n,a)|0)>>31,T2[104+b>>2]=M=e,T2[108+b>>2]=R,V=(e=(e=P2(n,o))-P2(n=D-B|0,i)|0)>>31,T2[112+b>>2]=G=e,T2[116+b>>2]=V,m=(e=P2(a,n)-P2(o,u)|0)>>31,T2[120+b>>2]=d=e,T2[124+b>>2]=m,e=e1(G,V,o,Q=o>>31),u=z,n=e1(M,R,a,B=a>>31),T2[96+b>>2]=e-n,T2[100+b>>2]=u-(z+(e>>>0<n>>>0)|0),e=e1(M,R,i,u=i>>31),n=z,o=e1(d,m,o,Q),T2[88+b>>2]=e-o,T2[92+b>>2]=n-(z+(e>>>0<o>>>0)|0),e=e1(a,B,d,m),a=z,i=e1(G,V,i,u),T2[80+b>>2]=e-i,T2[84+b>>2]=a-(z+(e>>>0<i>>>0)|0),T2[72+b>>2]=0,T2[(e=64+b|0)>>2]=0,T2[e+4>>2]=0,T2[56+b>>2]=0,d=s2(f,T2[60+b>>2]=0,r,128+b|0,104+b|0,80+b|0,56+b|0),T2[48+b>>2]=0,T2[(e=40+b|0)>>2]=0,T2[e+4>>2]=0,T2[32+b>>2]=0,(Q=s2(f,1,c,128+b|(T2[36+b>>2]=0),104+b|0,80+b|0,32+b|0))|d){G=d?-1:1,d&&Q&&(G=c2(T2[56+b>>2],T2[60+b>>2],T2[64+b>>2],T2[68+b>>2],T2[72+b>>2],32+b|0));f:{r:if(!J){e:{if(0<=(0|G)){if(-1<T2[48+b>>2])break r;if(!(T2[40+b>>2]|T2[44+b>>2]))break e;break r;}if(-1<T2[72+b>>2])break r;if(T2[64+b>>2]|T2[68+b>>2])break r;}i=v,u=s,B=g,a=k;break f;}a=B=u2(f,r,c),g&&(T2[g+4>>2]=B,a=k),T2[B>>2]=g,u=i=T2[B+8>>2],v&&(T2[v>>2]=i,u=s),T2[i+4>>2]=v;}if(T2[28+b>>2]=d,v=T2[24+b>>2]=Q,G||(l2(T2[x>>2],r,c,28+b|0,24+b|0),v=T2[24+b>>2]),(0|G)<0||!v)s=u;else {f:{r:{if(h){if((0|Q)!=(0|(e=T2[h>>2])))for(;s=T2[e+8>>2],((o=n=0)|(k=T2[e>>2]))!=(0|e)&&(T2[k+4>>2]=T2[e+4>>2],o=T2[T2[e+4>>2]>>2]=k),T2[T2[s+12>>2]+8>>2]=o,(0|(o=T2[s>>2]))!=(0|s)&&(T2[o+4>>2]=T2[s+4>>2],n=T2[T2[s+4>>2]>>2]=o),T2[T2[e+12>>2]+8>>2]=n,T2[e+16>>2]=0,T2[(o=e+8|0)>>2]=0,T2[o+4>>2]=0,T2[e>>2]=0,T2[e+4>>2]=0,T2[e>>2]=T2[f+56>>2],T2[f+56>>2]=e,T2[s+16>>2]=0,T2[(e=s+8|0)>>2]=0,T2[e+4>>2]=0,T2[s>>2]=0,T2[s+4>>2]=0,T2[s>>2]=T2[f+56>>2],T2[f+56>>2]=s,T2[f+116>>2]=T2[f+116>>2]-1,(0|Q)!=(0|(e=k)););if(i)break r;break f;}if(!i){t=Q;break f;}h=T2[Q+4>>2],t=u;}T2[h>>2]=u,T2[u+4>>2]=h,T2[i>>2]=Q,T2[Q+4>>2]=i,v=T2[24+b>>2],u=0;}s=u,C=T2[F>>2],Z=T2[I>>2],h=T2[v+8>>2],D=T2[c+88>>2],i=0,c=T2[v+12>>2];}if(o=c,v=i,0<(0|G)||!(G=T2[28+b>>2]))g=B;else {f:{r:{e:{i:{if(N){if((0|d)!=(0|(e=T2[N+4>>2])))for(;k=T2[e+8>>2],i=T2[e+4>>2],((c=n=0)|(u=T2[e>>2]))!=(0|e)&&(T2[u+4>>2]=i,c=T2[T2[e+4>>2]>>2]=u),T2[T2[k+12>>2]+8>>2]=c,(0|(c=T2[k>>2]))!=(0|k)&&(T2[c+4>>2]=T2[k+4>>2],n=T2[T2[k+4>>2]>>2]=c),T2[T2[e+12>>2]+8>>2]=n,T2[e+16>>2]=0,T2[(n=e+8|0)>>2]=0,T2[n+4>>2]=0,T2[e>>2]=0,T2[e+4>>2]=0,T2[e>>2]=T2[f+56>>2],T2[f+56>>2]=e,T2[k+16>>2]=0,T2[(e=k+8|0)>>2]=0,T2[e+4>>2]=0,T2[k>>2]=0,T2[k+4>>2]=0,T2[k>>2]=T2[f+56>>2],T2[f+56>>2]=k,T2[f+116>>2]=T2[f+116>>2]-1,(0|d)!=(0|(e=i)););if(B)break i;break f;}if(B)break e;w=d;break f;}e=(T2[a>>2]=N)+4|0;break r;}e=T2[d>>2],e=(T2[(w=a)>>2]=e)+4|0;}T2[e>>2]=a,T2[d>>2]=B,T2[B+4>>2]=d,G=T2[28+b>>2],a=0;}C=T2[Y>>2],Z=T2[W>>2],N=T2[G+8>>2],D=T2[r+88>>2],g=0,r=T2[G+12>>2];}if(k=a,e=1,(0|r)!=(0|E)||(0|o)!=(0|l))c=o,J=0;else {if(N){if((0|w)!=(0|(e=T2[N+4>>2])))for(;o=T2[e+8>>2],i=T2[e+4>>2],((c=n=0)|(a=T2[e>>2]))!=(0|e)&&(T2[a+4>>2]=i,c=T2[T2[e+4>>2]>>2]=a),T2[T2[o+12>>2]+8>>2]=c,(0|(a=T2[o>>2]))!=(0|o)&&(T2[a+4>>2]=T2[o+4>>2],n=T2[T2[o+4>>2]>>2]=a),T2[T2[e+12>>2]+8>>2]=n,T2[e+16>>2]=0,T2[(a=e+8|0)>>2]=0,T2[a+4>>2]=0,T2[e>>2]=0,T2[e+4>>2]=0,T2[e>>2]=T2[f+56>>2],T2[f+56>>2]=e,T2[o+16>>2]=0,T2[(e=o+8|0)>>2]=0,T2[e+4>>2]=0,T2[o>>2]=0,T2[o+4>>2]=0,T2[o>>2]=T2[f+56>>2],T2[f+56>>2]=o,T2[f+116>>2]=T2[f+116>>2]-1,(0|w)!=(0|(e=i)););g&&(T2[N+4>>2]=k,T2[k>>2]=N,T2[g+4>>2]=w,T2[w>>2]=g);}else T2[g+4>>2]=k,T2[k>>2]=g,T2[r+8>>2]=g;if(h){if((0|t)!=(0|(e=T2[h>>2])))for(;c=T2[e+8>>2],((o=n=0)|(i=T2[e>>2]))!=(0|e)&&(T2[i+4>>2]=T2[e+4>>2],o=T2[T2[e+4>>2]>>2]=i),T2[T2[c+12>>2]+8>>2]=o,(0|(a=T2[c>>2]))!=(0|c)&&(T2[a+4>>2]=T2[c+4>>2],n=T2[T2[c+4>>2]>>2]=a),T2[T2[e+12>>2]+8>>2]=n,T2[e+16>>2]=0,T2[(a=e+8|0)>>2]=0,T2[a+4>>2]=0,T2[e>>2]=0,T2[e+4>>2]=0,T2[e>>2]=T2[f+56>>2],T2[f+56>>2]=e,T2[c+16>>2]=0,T2[(e=c+8|0)>>2]=0,T2[e+4>>2]=0,T2[c>>2]=0,T2[c+4>>2]=0,T2[c>>2]=T2[f+56>>2],T2[f+56>>2]=c,T2[f+116>>2]=T2[f+116>>2]-1,(0|t)!=(0|(e=i)););e=0,v?(T2[s+4>>2]=h,T2[h>>2]=s,T2[t+4>>2]=v,T2[v>>2]=t,c=l):(c=l,v=0);}else T2[s+4>>2]=v,T2[v>>2]=s,T2[l+8>>2]=v,c=l,e=h=0;}}else i=u2(f,r,c),T2[r+8>>2]=i,e=T2[i+8>>2],T2[c+8>>2]=e,T2[i+4>>2]=i,T2[i>>2]=i,T2[e+4>>2]=e,T2[e>>2]=e,e=0;if(!e)break;}}else f=T2[12+b>>2],T2[i>>2]=T2[8+b>>2],T2[i+4>>2]=f,f=T2[4+(r=16+b|0)>>2],T2[(e=i+8|0)>>2]=T2[r>>2],T2[e+4>>2]=f;}L2=144+b|0;}(8+n|(T2[140+n>>2]=0),0,r,136+n|0),T2[132+n>>2]=T2[136+n>>2],(f=T2[164+n>>2])&&S2[168+n|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),(0|(a=T2[A+4>>2]))<=-1)for(T2[A+8>>2]<=-1&&((f=T2[A+12>>2])&&S2[A+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),p2[A+16|0]=1,T2[A+8>>2]=0,T2[A+12>>2]=0),f=a<<4;b=T2[156+n>>2],r=T2[A+12>>2]+f|0,T2[(o=r)>>2]=T2[152+n>>2],T2[o+4>>2]=b,b=T2[(o=160+n|0)+4>>2],T2[(r=r+8|0)>>2]=T2[o>>2],T2[r+4>>2]=b,f=f+16|0,(r=a)>>>0<=(a=a+1|0)>>>0;);if(T2[A+4>>2]=0,T2[160+n>>2]=0,T2[152+n>>2]=0,((T2[156+n>>2]=0)|(a=T2[A+24>>2]))<=-1)for(T2[A+28>>2]<=-1&&((f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+28>>2]=0,T2[A+32>>2]=0,p2[A+36|0]=1),f=P2(a,12);o=T2[156+n>>2],r=T2[A+32>>2]+f|0,T2[r>>2]=T2[152+n>>2],T2[r+4>>2]=o,T2[r+8>>2]=T2[160+n>>2],f=f+12|0,(r=a)>>>0<=(a=a+1|0)>>>0;);if(((T2[A+24>>2]=0)|(r=T2[A+44>>2]))<=-1&&(f=T2[A+52>>2],T2[A+48>>2]<=-1&&(f&&S2[A+56|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),p2[A+56|0]=1,T2[A+48>>2]=0,f=T2[A+52>>2]=0),d2((a=f)+(f=r<<2)|0,0,0-f|0)),T2[A+44>>2]=0,b=T2[132+n>>2],!(-1<T2[b+104>>2])){for(T2[b+104>>2]=0,T2[5498]=T2[5498]+1,f=K2(23),T2[(l=f+19&-16)>>2]=b,T2[l-4>>2]=f,d=s=1;;){A:{f:{r:{e:{if(0<=T2[b+100>>2])j2[(152+n|0)+(T2[116+n>>2]<<2)>>2]=T2[b+88>>2];else if(c=v2(b+24|0),u=v2(f=b+72|0),j2[(152+n|0)+(T2[116+n>>2]<<2)>>2]=c/u,T2[b+100>>2]<0)break e;j2[(152+n|0)+(T2[120+n>>2]<<2)>>2]=T2[b+92>>2];break r;}if(c=v2(b+40|0),u=v2(f),j2[(152+n|0)+(T2[120+n>>2]<<2)>>2]=c/u,T2[b+100>>2]<0)break f;}c=z2(T2[b+96>>2]);break A;}c=z2(v2(b+56|0)/v2(f));}if(j2[(152+n|0)+(T2[112+n>>2]<<2)>>2]=c,c=z2(z2(j2[160+n>>2]*j2[16+n>>2])+j2[32+n>>2]),u=z2(z2(j2[156+n>>2]*j2[12+n>>2])+j2[28+n>>2]),v=z2(z2(j2[152+n>>2]*j2[8+n>>2])+j2[24+n>>2]),(0|(f=T2[A+4>>2]))==T2[A+8>>2]&&!((0|(r=f?f<<1:1))<=(0|f))){if(t=0,r&&(T2[5498]=T2[5498]+1,(a=K2(19+(r<<4)|0))&&(T2[(t=a+19&-16)-4>>2]=a)),1<=(0|f))for(a=0;k=T2[A+12>>2]+a|0,D=T2[k+4>>2],T2[(o=a+t|0)>>2]=T2[k>>2],T2[o+4>>2]=D,D=T2[(k=k+8|0)+4>>2],T2[(o=o+8|0)>>2]=T2[k>>2],T2[o+4>>2]=D,a=a+16|0,f=f-1|0;);(f=T2[A+12>>2])&&S2[A+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+12>>2]=t,p2[A+16|0]=1,T2[A+8>>2]=r,f=T2[A+4>>2];}if(f=T2[A+12>>2]+(f<<4)|0,T2[f+12>>2]=0,j2[f+8>>2]=c,j2[f+4>>2]=u,j2[f>>2]=v,T2[A+4>>2]=T2[A+4>>2]+1,D=T2[b+8>>2]){for(f=D,k=r=-1;;){if((0|(a=T2[f+20>>2]))<=-1){if(b=T2[A+24>>2],T2[(e=160+n|0)>>2]=0,T2[152+n>>2]=0,((T2[156+n>>2]=0)|(a=b))==T2[A+28>>2]&&!((0|(Q=a?b<<1:1))<=(0|a))){if(t=0,Q&&(T2[5498]=T2[5498]+1,(a=K2(P2(Q,12)+19|0))&&(T2[(t=a+19&-16)-4>>2]=a)),1<=(0|b))for(a=0,o=b;g=T2[A+32>>2]+a|0,Y=T2[g+4>>2],T2[(w=a+t|0)>>2]=T2[g>>2],T2[w+4>>2]=Y,T2[w+8>>2]=T2[g+8>>2],a=a+12|0,o=o-1|0;);(a=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2])),T2[A+32>>2]=t,p2[A+36|0]=1,T2[A+28>>2]=Q,a=T2[A+24>>2];}if(o=T2[156+n>>2],a=T2[A+32>>2]+P2(a,12)|0,T2[a>>2]=T2[152+n>>2],T2[a+4>>2]=o,T2[a+8>>2]=T2[e>>2],o=T2[A+24>>2],T2[A+24>>2]=a=o+1|0,T2[e>>2]=0,T2[152+n>>2]=0,T2[156+n>>2]=0,T2[A+28>>2]==(0|a)&&!((0|(Q=a?a<<1:1))<=(0|a))){if(t=0,Q&&(T2[5498]=T2[5498]+1,(a=K2(P2(Q,12)+19|0))&&(T2[(t=a+19&-16)-4>>2]=a)),0<=(0|o))for(o=o+1|0,a=0;g=T2[A+32>>2]+a|0,Y=T2[g+4>>2],T2[(w=a+t|0)>>2]=T2[g>>2],T2[w+4>>2]=Y,T2[w+8>>2]=T2[g+8>>2],a=a+12|0,o=o-1|0;);(a=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2])),T2[A+32>>2]=t,p2[A+36|0]=1,T2[A+28>>2]=Q,a=T2[A+24>>2];}if(o=T2[156+n>>2],a=T2[A+32>>2]+P2(a,12)|0,T2[a>>2]=T2[152+n>>2],T2[a+4>>2]=o,T2[a+8>>2]=T2[e>>2],T2[A+24>>2]=T2[A+24>>2]+1,T2[f+20>>2]=b,T2[T2[f+8>>2]+20>>2]=w=b+1|0,e=(g=T2[A+32>>2])+P2(b,12)|0,T2[4+e>>2]=1,T2[16+e>>2]=-1,Q=T2[f+12>>2],-1<(0|(a=T2[Q+104>>2])))o=s,s=a;else {T2[Q+104>>2]=s;A:if((0|s)!=(0|d)||(0|(t=d?d<<1:1))<=(0|d))b=l,t=d;else {if(b=0,t&&(T2[5498]=T2[5498]+1,(a=K2(19+(t<<2)|0))&&(T2[(b=a+19&-16)-4>>2]=a)),1<=(0|d))for(a=b,o=l;T2[a>>2]=T2[o>>2],a=a+4|0,o=o+4|0,d=d-1|0;);else if(!l)break A;T2[5499]=T2[5499]+1,q2(T2[l-4>>2]);}T2[(s<<2)+b>>2]=Q,o=s+1|0,l=b,d=t;}T2[8+(g+P2(w,12)|0)>>2]=R,T2[8+e>>2]=s,s=o,a=T2[f+20>>2];}if(o=a,0<=(0|r)&&(T2[T2[A+32>>2]+P2(a,12)>>2]=r-a,o=k),r=a,k=o,(0|D)==(0|(f=T2[f>>2])))break;}T2[T2[A+32>>2]+P2(k,12)>>2]=r-k;}if(!((0|(f=R+1|0))<(0|s)))break;b=T2[(f<<2)+l>>2],R=f;}for(d=0;;){if(s=T2[T2[(d<<2)+l>>2]+8>>2])for(f=s;;){if(0<=(0|(a=T2[f+20>>2]))){if((0|(t=T2[A+44>>2]))==T2[A+48>>2]&&!((0|(k=t?t<<1:1))<=(0|t))){r=0,k&&(T2[5498]=T2[5498]+1,(a=K2(19+(k<<2)|0))&&(T2[(r=a+19&-16)-4>>2]=a)),b=T2[A+52>>2];A:{if(1<=(0|t))for(a=r,o=b;T2[a>>2]=T2[o>>2],a=a+4|0,o=o+4|0,t=t-1|0;);else if(!b)break A;S2[A+56|0]&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2])),t=T2[A+44>>2];}T2[A+48>>2]=k,T2[A+52>>2]=r,p2[A+56|0]=1,a=T2[f+20>>2];}for(T2[T2[A+52>>2]+(t<<2)>>2]=a,T2[A+44>>2]=T2[A+44>>2]+1,a=f;T2[a+20>>2]=-1,(0|(a=T2[T2[a+8>>2]+4>>2]))!=(0|f););}if((0|s)==(0|(f=T2[f>>2])))break;}if(f=(0|d)==(0|R),d=d+1|0,f)break;}l&&(T2[5499]=T2[5499]+1,q2(T2[l-4>>2]));}if((A=T2[100+n>>2])&&S2[104+n|0]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),T2[100+n>>2]=0,p2[104+n|0]=1,T2[92+n>>2]=0,T2[96+n>>2]=0,a=T2[72+n>>2])for(;T2[72+n>>2]=T2[a+8>>2],(A=T2[a>>2])&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),T2[5499]=T2[5499]+1,q2(T2[a-4>>2]),a=T2[72+n>>2];);if(a=T2[56+n>>2])for(;T2[56+n>>2]=T2[a+8>>2],(A=T2[a>>2])&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),T2[5499]=T2[5499]+1,q2(T2[a-4>>2]),a=T2[56+n>>2];);if(a=T2[40+n>>2])for(;T2[40+n>>2]=T2[a+8>>2],(A=T2[a>>2])&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),T2[5499]=T2[5499]+1,q2(T2[a-4>>2]),a=T2[40+n>>2];);}L2=176+n|0;}function g2(A,f,r,e){n1[T2[T2[(A|=0)>>2]+80>>2]](A,f|=0,r|=0,e|=0);}function w2(A,f){A|=0,f=z2(f),j2[A+52>>2]=f;}function G2(A){return 0;}function C2(A,f,r){}function E2(A,f){var r,e,i,a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0,l=0,s=0,v=0,d=0;if(T2[A+8>>2]<(0|f)){if(f&&(T2[5498]=T2[5498]+1,(a=K2(P2(f,36)+19|0))&&(T2[(u=a+19&-16)-4>>2]=a)),!((0|(i=T2[A+4>>2]))<1)){for(;;){n=P2(k,36),T2[(a=n+u|0)+4>>2]=0,T2[a+8>>2]=0,p2[a+16|0]=1,r=a+4|(T2[a+12>>2]=0);A:{f:{r:{if(t=n+T2[A+12>>2]|0,1<=(0|(o=T2[t+4>>2]))){if(v=a+8|0,l=a+12|0,d=a+16|0,T2[5498]=T2[5498]+1,!(n=K2((s=o<<2)+19|0)))break r;if(T2[(c=n+19&-16)-4>>2]=n,e=T2[l>>2],1<=(0|(n=T2[r>>2])))for(b=0;T2[b+c>>2]=T2[b+e>>2],b=b+4|0,n=n-1|0;);else if(!e)break f;T2[5499]=T2[5499]+1,q2(T2[e-4>>2]);break f;}T2[r>>2]=o;break A;}c=0;}for(T2[l>>2]=c,p2[0|d]=1,T2[v>>2]=o,d2(c,0,s),T2[r>>2]=o,b=T2[t+12>>2],n=T2[l>>2];T2[n>>2]=T2[b>>2],n=n+4|0,b=b+4|0,o=o-1|0;);}if(n=T2[t+24>>2],T2[a+20>>2]=T2[t+20>>2],T2[a+24>>2]=n,o=T2[(n=t+28|0)+4>>2],T2[(a=a+28|0)>>2]=T2[n>>2],T2[a+4>>2]=o,(0|i)==(0|(k=k+1|0)))break;}if(!((0|(o=T2[A+4>>2]))<1))for(n=8;a=T2[A+12>>2]+n|0,(t=T2[(b=a+4|0)>>2])&&S2[a+8|0]&&(T2[5499]=T2[5499]+1,q2(T2[t-4>>2])),T2[b>>2]=0,p2[a+8|0]=1,T2[(a=a-4|0)>>2]=0,n=n+36|(T2[a+4>>2]=0),o=o-1|0;);}(a=T2[A+12>>2])&&S2[A+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2])),T2[A+12>>2]=u,p2[A+16|0]=1,T2[A+8>>2]=f;}}function D2(A,f){var r,e,i,a,n,o,b=0,t=0,c=0,u=0;if((0|(u=T2[A+4>>2]))==T2[A+8>>2]&&(E2(A,u?u<<1:1),u=T2[A+4>>2]),b=(e=T2[A+12>>2])+P2(u,36)|0,T2[b+4>>2]=0,T2[b+8>>2]=0,p2[b+16|0]=1,i=b+4|(T2[b+12>>2]=0),1<=(0|(t=T2[f+4>>2])))for(n=b+8|0,r=b+12|0,o=b+16|0,T2[5498]=T2[5498]+1,(b=K2(19+(a=t<<2)|0))&&(T2[(c=b+19&-16)-4>>2]=b,(b=T2[r>>2])&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2]))),T2[r>>2]=c,p2[0|o]=1,T2[n>>2]=t,d2(c,0,a),T2[i>>2]=t,b=T2[f+12>>2],c=T2[r>>2];T2[c>>2]=T2[b>>2],c=c+4|0,b=b+4|0,t=t-1|0;);else T2[i>>2]=t;t=T2[f+24>>2],b=P2(u,36)+e|0,T2[b+20>>2]=T2[f+20>>2],T2[b+24>>2]=t,t=T2[(f=f+28|0)+4>>2],T2[(b=b+28|0)>>2]=T2[f>>2],T2[b+4>>2]=t,T2[A+4>>2]=T2[A+4>>2]+1;}function h2(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o=z2(n1[T2[T2[A>>2]+48>>2]](A)),b=j2[f+52>>2],t=j2[f+24>>2],c=j2[f+20>>2],u=j2[f+56>>2],k=j2[f+40>>2],l=j2[A+72>>2],s=j2[A+88>>2],v=j2[f+36>>2],d=j2[A+68>>2],B=j2[A+84>>2],Q=j2[f+48>>2],g=j2[f+8>>2],w=j2[f>>2],G=j2[f+4>>2],C=j2[f+16>>2],E=j2[f+32>>2],D=j2[A+64>>2],h=j2[A+80>>2];T2[r+12>>2]=0,i=u,u=z2(z2(h+D)*z2(.5)),a=z2(z2(B+d)*z2(.5)),n=z2(z2(s+l)*z2(.5)),i=z2(i+z2(z2(z2(E*u)+z2(v*a))+z2(k*n))),D=z2(o+z2(z2(h-D)*z2(.5))),d=z2(o+z2(z2(B-d)*z2(.5))),o=z2(o+z2(z2(s-l)*z2(.5))),k=z2(z2(z2(D*z2(O2(E)))+z2(d*z2(O2(v))))+z2(o*z2(O2(k)))),j2[r+8>>2]=i-k,l=z2(b+z2(z2(z2(u*C)+z2(a*c))+z2(n*t))),t=z2(z2(z2(D*z2(O2(C)))+z2(d*z2(O2(c))))+z2(o*z2(O2(t)))),j2[r+4>>2]=l-t,c=z2(Q+z2(z2(z2(u*w)+z2(a*G))+z2(n*g))),o=z2(z2(z2(D*z2(O2(w)))+z2(d*z2(O2(G))))+z2(o*z2(O2(g)))),j2[r>>2]=c-o,T2[e+12>>2]=0,j2[e+8>>2]=k+i,j2[e+4>>2]=t+l,j2[e>>2]=o+c;}function Z2(A,f){A|=0,f=z2(f);var r,e,i,a,n,o,b,t=z2(n1[T2[T2[A>>2]+48>>2]](A)),c=z2(n1[T2[T2[A>>2]+48>>2]](A)),u=z2(n1[T2[T2[A>>2]+48>>2]](A));j2[A+52>>2]=f,f=j2[(r=A+44|0)>>2],i=j2[(e=A+40|0)>>2],a=j2[A+36>>2],n=z2(n1[T2[T2[A>>2]+48>>2]](A)),o=z2(n1[T2[T2[A>>2]+48>>2]](A)),b=z2(n1[T2[T2[A>>2]+48>>2]](A)),T2[A+48>>2]=0,j2[e>>2]=z2(c+i)-o,j2[A+36>>2]=z2(t+a)-n,j2[r>>2]=z2(u+f)-b;}function Y2(A){var f;T2[(A|=0)>>2]=7916,(f=T2[A+60>>2])&&(n1[T2[T2[f>>2]>>2]](f),(f=T2[A+60>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);}function R2(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i=z2(n1[T2[T2[A>>2]+48>>2]](A)),a=j2[f+52>>2],n=j2[f+20>>2],o=j2[f+24>>2],b=j2[f+56>>2],t=j2[f+36>>2],c=j2[A+40>>2],u=j2[f+40>>2],k=j2[A+44>>2],l=j2[f+48>>2],s=j2[f>>2],v=j2[f+4>>2],d=j2[f+8>>2],B=j2[f+16>>2],Q=j2[f+32>>2],g=j2[A+36>>2];T2[r+12>>2]=0,g=z2(i+g),c=z2(i+c),i=z2(i+k),t=z2(z2(z2(g*z2(O2(Q)))+z2(c*z2(O2(t))))+z2(i*z2(O2(u)))),j2[r+8>>2]=b-t,n=z2(z2(z2(g*z2(O2(B)))+z2(c*z2(O2(n))))+z2(i*z2(O2(o)))),j2[r+4>>2]=a-n,i=z2(z2(z2(g*z2(O2(s)))+z2(c*z2(O2(v))))+z2(i*z2(O2(d)))),j2[r>>2]=l-i,T2[e+12>>2]=0,j2[e+8>>2]=b+t,j2[e+4>>2]=n+a,j2[e>>2]=i+l;}function V2(A,f){A|=0,f|=0;var r,e,i,a=z2(n1[T2[T2[A>>2]+48>>2]](A)),n=z2(n1[T2[T2[A>>2]+48>>2]](A)),o=z2(n1[T2[T2[A>>2]+48>>2]](A)),b=j2[f>>2],t=j2[f+4>>2],c=j2[f+8>>2];T2[A+48>>2]=0,T2[A+32>>2]=0,r=j2[(f=A+28|0)>>2],c=z2(O2(c)),j2[f>>2]=c,e=j2[(f=A+24|0)>>2],t=z2(O2(t)),j2[f>>2]=t,i=j2[A+20>>2],b=z2(O2(b)),j2[A+20>>2]=b,j2[(f=A+44|0)>>2]=z2(z2(z2(o+j2[f>>2])/r)*c)-o,j2[(f=A+40|0)>>2]=z2(z2(z2(n+j2[f>>2])/e)*t)-n,j2[A+36>>2]=z2(z2(z2(a+j2[A+36>>2])/i)*b)-a;}function J2(A){return 52;}function M2(A){return 6;}function I2(A){A|=0,T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);}function x2(A,f){f|=0;var r;T2[(A|=0)>>2]=0,T2[A+4>>2]=0,T2[(r=A+8|0)>>2]=0,T2[4+r>>2]=0,T2[(T2[f+60>>2]<<2)+A>>2]=1065353216;}function y2(A,f){}function U2(A){return 60;}function X2(A,f,r){A|=0,T2[(r|=0)>>2]=0,T2[r+4>>2]=0,T2[(A=r+8|0)>>2]=0,T2[A+4>>2]=0;}function A0(A){var f=0;(f=T2[A>>2])&&f0(A,f),(f=T2[A+4>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+4>>2]=0,T2[A+8>>2]=-1,(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+16>>2]=0,T2[A+32>>2]=0,p2[A+36|0]=1,T2[(A=A+24|0)>>2]=0,T2[A+4>>2]=0;}function f0(A,f){var r;T2[f+40>>2]&&(f0(A,T2[f+36>>2]),f0(A,T2[f+40>>2])),T2[A>>2]==(0|f)&&(T2[A>>2]=0),(r=T2[A+4>>2])&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+4>>2]=f;}function r0(A){var f=0;(f=T2[A>>2])&&f0(A,f),(f=T2[A+4>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+4>>2]=0,T2[A+8>>2]=-1,(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,T2[A+16>>2]=0,p2[A+36|0]=1,T2[(A=A+24|0)>>2]=0,T2[A+4>>2]=0;}function e0(A,f){var r,e,i,a,n,o,b,t,c,u,k,l=0,s=0,v=0,d=0,B=0,Q=0,g=0;L2=Q=L2-32|0;A:if(!((0|(f=(0|f)<=-1?T2[A+12>>2]:f))<1)&&(l=T2[A>>2]))for(;;){if(T2[(d=l+40|0)>>2])for(g=0;(v=T2[l+32>>2])>>>0<=l>>>0?v=l:(e=(0|(r=T2[v+40>>2]))==(0|l),a=T2[36+((i=((0|l)!=(0|r))<<2)+v|0)>>2],B=A,(s=T2[v+32>>2])&&(B=36+(s+((T2[s+40>>2]==(0|v))<<2)|0)|0),T2[B>>2]=l,T2[a+32>>2]=l,T2[v+32>>2]=l,T2[l+32>>2]=s,T2[v+36>>2]=T2[l+36>>2],T2[v+40>>2]=T2[d>>2],T2[T2[l+36>>2]+32>>2]=v,T2[T2[d>>2]+32>>2]=v,T2[(r=l+36|0)+(e<<2)>>2]=v,T2[r+i>>2]=a,d=T2[4+(r=v+24|0)>>2],t=T2[r>>2],T2[(s=24+Q|0)>>2]=t,T2[s+4>>2]=d,a=T2[(s=v+16|0)+4>>2],c=T2[s>>2],T2[(e=16+Q|0)>>2]=c,T2[4+e>>2]=a,i=T2[4+(e=v+8|0)>>2],u=T2[e>>2],T2[(n=8+Q|0)>>2]=u,T2[4+n>>2]=i,n=T2[v+4>>2],k=T2[v>>2],T2[Q>>2]=k,T2[4+Q>>2]=n,o=T2[(B=b=l+24|0)+4>>2],T2[r>>2]=T2[B>>2],T2[4+r>>2]=o,o=T2[4+(r=l+16|0)>>2],T2[s>>2]=T2[r>>2],T2[s+4>>2]=o,o=T2[(s=l+8|0)+4>>2],T2[e>>2]=T2[s>>2],T2[4+e>>2]=o,e=T2[l+4>>2],T2[v>>2]=T2[l>>2],T2[v+4>>2]=e,T2[b>>2]=t,T2[4+b>>2]=d,T2[r>>2]=c,T2[4+r>>2]=a,T2[s>>2]=u,T2[s+4>>2]=i,T2[l>>2]=k,T2[l+4>>2]=n),l=T2[A+16>>2]>>>g|0,g=g+1&31,l=T2[36+(((1&l)<<2)+v|0)>>2],T2[(d=l+40|0)>>2];);if(s=0,a0(B=A,s=i0(A,l)?T2[A>>2]:s,l),T2[A+16>>2]=T2[A+16>>2]+1,!(f=f-1|0))break A;l=T2[A>>2];}L2=32+Q|0;}function i0(A,f){var r,e,i,a=0,n=0,o=z2(0),b=z2(0),t=z2(0),c=z2(0),u=z2(0),k=z2(0),l=z2(0),s=z2(0),v=z2(0),d=z2(0),B=z2(0);if(T2[A>>2]==(0|f))return T2[A>>2]=0;if(n=T2[f+32>>2],a=T2[36+(((T2[n+40>>2]!=(0|f))<<2)+n|0)>>2],f=T2[n+32>>2]){for(T2[36+((((0|n)==T2[f+40>>2])<<2)+f|0)>>2]=a,T2[a+32>>2]=f,(a=T2[A+4>>2])&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2])),T2[A+4>>2]=n;;){if(i=j2[f>>2],a=T2[f+36>>2],o=j2[a>>2],n=T2[f+40>>2],l=j2[n>>2],j2[f>>2]=o=o<l?o:l,l=j2[f+16>>2],b=j2[a+16>>2],s=j2[n+16>>2],j2[f+16>>2]=b=s<b?b:s,s=j2[f+4>>2],t=j2[a+4>>2],v=j2[n+4>>2],j2[f+4>>2]=t=t<v?t:v,v=j2[(r=f+20|0)>>2],c=j2[a+20>>2],d=j2[n+20>>2],j2[r>>2]=c=d<c?c:d,d=j2[f+8>>2],u=j2[a+8>>2],B=j2[n+8>>2],j2[f+8>>2]=u=u<B?u:B,B=j2[(r=f+24|0)>>2],k=j2[a+24>>2],e=j2[n+24>>2],j2[r>>2]=k=e<k?k:e,v==c&&l==b&&o==i&&s==t&&d==u&&B==k)return f;if(!(f=T2[f+32>>2]))break;}return T2[A>>2];}return T2[a+32>>2]=0,T2[A>>2]=a,(f=T2[A+4>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]),a=T2[A>>2]),T2[A+4>>2]=n,a;}function a0(A,f,r){var e=0,i=z2(0),a=z2(0),n=z2(0),o=0,b=0;if(!T2[A>>2])return T2[r+32>>2]=0,void(T2[A>>2]=r);if(e=T2[f+40>>2])for(a=z2(j2[r>>2]+j2[r+16>>2]),i=z2(j2[r+8>>2]+j2[r+24>>2]),n=z2(j2[r+4>>2]+j2[r+20>>2]);b=f+36|0,f=T2[f+36>>2],f=T2[b+(!(z2(z2(z2(O2(z2(a-z2(j2[f>>2]+j2[f+16>>2]))))+z2(O2(z2(n-z2(j2[f+4>>2]+j2[f+20>>2])))))+z2(O2(z2(i-z2(j2[f+8>>2]+j2[f+24>>2])))))<z2(z2(z2(O2(z2(a-z2(j2[e>>2]+j2[e+16>>2]))))+z2(O2(z2(n-z2(j2[e+4>>2]+j2[e+20>>2])))))+z2(O2(z2(i-z2(j2[e+8>>2]+j2[e+24>>2]))))))<<2)>>2],e=T2[f+40>>2];);b=T2[f+32>>2],(e=T2[A+4>>2])?T2[A+4>>2]=0:(T2[5498]=T2[5498]+1,e=0,(o=K2(63))&&(T2[(e=o+19&-16)-4>>2]=o),T2[e>>2]=0,T2[e+4>>2]=0,T2[e+40>>2]=0,T2[(o=e+32|0)>>2]=0,T2[o+4>>2]=0,T2[(o=e+24|0)>>2]=0,T2[o+4>>2]=0,T2[(o=e+16|0)>>2]=0,T2[o+4>>2]=0,T2[(o=e+8|0)>>2]=0,T2[o+4>>2]=0),T2[e+36>>2]=0,T2[e+40>>2]=0,a=j2[r>>2],i=j2[f>>2],j2[e>>2]=a<i?a:i,a=j2[r+16>>2],i=j2[f+16>>2],j2[e+16>>2]=i<a?a:i,a=j2[r+4>>2],i=j2[f+4>>2],j2[e+4>>2]=a<i?a:i,a=j2[r+20>>2],i=j2[f+20>>2],j2[e+20>>2]=i<a?a:i,a=j2[r+8>>2],i=j2[f+8>>2],j2[e+8>>2]=a<i?a:i,T2[e+32>>2]=b,a=j2[r+24>>2],i=j2[f+24>>2],j2[e+24>>2]=i<a?a:i;A:if(b)for(T2[36+(((T2[T2[f+32>>2]+40>>2]==(0|f))<<2)+b|0)>>2]=e,T2[e+36>>2]=f,T2[f+32>>2]=e,T2[e+40>>2]=r,T2[r+32>>2]=e,a=j2[e>>2];;){if(A=e,j2[(e=b)>>2]<=a&&j2[e+4>>2]<=j2[A+4>>2]&&j2[e+8>>2]<=j2[A+8>>2]&&j2[e+16>>2]>=j2[A+16>>2]&&j2[e+20>>2]>=j2[A+20>>2]&&j2[e+24>>2]>=j2[A+24>>2])break A;if(A=T2[e+36>>2],a=j2[A>>2],f=T2[e+40>>2],i=j2[f>>2],j2[e>>2]=a=a<i?a:i,i=j2[A+16>>2],n=j2[f+16>>2],j2[e+16>>2]=n<i?i:n,i=j2[A+4>>2],n=j2[f+4>>2],j2[e+4>>2]=i<n?i:n,i=j2[A+20>>2],n=j2[f+20>>2],j2[e+20>>2]=n<i?i:n,i=j2[A+8>>2],n=j2[f+8>>2],j2[e+8>>2]=i<n?i:n,i=j2[A+24>>2],n=j2[f+24>>2],j2[e+24>>2]=n<i?i:n,!(b=T2[e+32>>2]))break;}else T2[e+36>>2]=f,T2[f+32>>2]=e,T2[e+40>>2]=r,T2[A>>2]=e,T2[r+32>>2]=e;}function n0(A,f){return 1;}function o0(A){var f=0;return T2[(A|=0)>>2]=9180,(f=T2[A+72>>2])&&(A0(f),(f=T2[A+72>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,p2[A+36|0]=1,T2[(f=A+24|0)>>2]=0,(T2[f+4>>2]=0)|A;}function b0(A,f){var r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B=0,Q=0,g=0,w=0;L2=g=L2-80|0,T2[A+76>>2]=T2[A+76>>2]+1,(B=T2[A+72>>2])&&(i0(B,Q=T2[76+(T2[A+32>>2]+P2(f,80)|0)>>2]),(w=T2[B+4>>2])&&(T2[5499]=T2[5499]+1,q2(T2[w-4>>2])),T2[B+4>>2]=Q,T2[B+12>>2]=T2[B+12>>2]-1),Q=T2[A+24>>2],s=P2(f,80),b=T2[(v=A+32|0)>>2],i=T2[4+(r=(B=s+b|0)+8|0)>>2],T2[(w=8+g|0)>>2]=T2[r>>2],T2[w+4>>2]=i,c=T2[4+(a=B+24|0)>>2],T2[(i=u=24+g|0)>>2]=T2[a>>2],T2[4+i>>2]=c,o=T2[4+(k=B+40|0)>>2],T2[(i=40+g|0)>>2]=T2[k>>2],T2[4+i>>2]=o,e=T2[4+(n=B+56|0)>>2],T2[(o=c=56+g|0)>>2]=T2[n>>2],T2[4+o>>2]=e,d=T2[4+(l=B+72|0)>>2],T2[(e=o=72+g|0)>>2]=T2[l>>2],T2[4+e>>2]=d,e=T2[B+4>>2],T2[g>>2]=T2[B>>2],T2[4+g>>2]=e,e=T2[B+20>>2],T2[16+g>>2]=T2[B+16>>2],T2[20+g>>2]=e,e=T2[B+36>>2],T2[32+g>>2]=T2[B+32>>2],T2[36+g>>2]=e,e=T2[B+52>>2],T2[48+g>>2]=T2[B+48>>2],T2[52+g>>2]=e,e=T2[B+68>>2],T2[64+g>>2]=T2[B+64>>2],T2[68+g>>2]=e,e=P2(Q,80)-80|0,t=T2[(Q=e+b|0)+68>>2],T2[B+64>>2]=T2[Q+64>>2],T2[B+68>>2]=t,t=T2[4+(b=Q+8|0)>>2],T2[r>>2]=T2[b>>2],T2[4+r>>2]=t,r=T2[Q+4>>2],T2[B>>2]=T2[Q>>2],T2[B+4>>2]=r,b=T2[4+(r=Q+24|0)>>2],T2[a>>2]=T2[r>>2],T2[4+a>>2]=b,r=T2[Q+20>>2],T2[B+16>>2]=T2[Q+16>>2],T2[B+20>>2]=r,a=T2[4+(r=Q+40|0)>>2],T2[k>>2]=T2[r>>2],T2[4+k>>2]=a,r=T2[Q+36>>2],T2[B+32>>2]=T2[Q+32>>2],T2[B+36>>2]=r,a=T2[4+(r=Q+56|0)>>2],T2[n>>2]=T2[r>>2],T2[4+n>>2]=a,r=T2[Q+52>>2],T2[B+48>>2]=T2[Q+48>>2],T2[B+52>>2]=r,Q=T2[(B=Q+72|0)+4>>2],T2[l>>2]=T2[B>>2],T2[4+l>>2]=Q,r=T2[4+g>>2],B=e+T2[v>>2]|0,T2[B>>2]=T2[g>>2],T2[B+4>>2]=r,r=T2[w+4>>2],T2[(Q=B+8|0)>>2]=T2[w>>2],T2[Q+4>>2]=r,w=T2[4+u>>2],T2[(Q=B+24|0)>>2]=T2[u>>2],T2[Q+4>>2]=w,Q=T2[20+g>>2],T2[B+16>>2]=T2[16+g>>2],T2[B+20>>2]=Q,w=T2[4+i>>2],T2[(Q=B+40|0)>>2]=T2[i>>2],T2[Q+4>>2]=w,Q=T2[36+g>>2],T2[B+32>>2]=T2[32+g>>2],T2[B+36>>2]=Q,w=T2[4+c>>2],T2[(Q=B+56|0)>>2]=T2[c>>2],T2[Q+4>>2]=w,Q=T2[52+g>>2],T2[B+48>>2]=T2[48+g>>2],T2[B+52>>2]=Q,w=T2[4+o>>2],T2[(Q=B+72|0)>>2]=T2[o>>2],T2[Q+4>>2]=w,Q=T2[68+g>>2],T2[B+64>>2]=T2[64+g>>2],T2[B+68>>2]=Q,T2[A+72>>2]&&(T2[T2[76+(T2[A+32>>2]+s|0)>>2]+36>>2]=f),T2[A+24>>2]=T2[A+24>>2]-1,L2=80+g|0;}function t0(A,f,r,e,i,a,n,o,b,t){f|=0,e|=0,i|=0,a|=0,n|=0,o|=0,b|=0,A=T2[(A|=0)+32>>2]+((t|=0)<<5)|0,T2[(r|=0)>>2]=T2[A+12>>2],T2[i>>2]=T2[A+20>>2],T2[f>>2]=T2[A+16>>2],T2[e>>2]=T2[A+28>>2],T2[o>>2]=T2[A>>2],T2[a>>2]=T2[A+4>>2],T2[b>>2]=T2[A+24>>2],T2[n>>2]=T2[A+8>>2];}function c0(A,f){}function u0(A){var f=0;return T2[(A|=0)>>2]=9704,(f=T2[A+156>>2])&&S2[A+160|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+156>>2]=0,p2[A+160|0]=1,T2[(f=A+148|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+136>>2])&&S2[A+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+136>>2]=0,p2[A+140|0]=1,T2[(f=A+128|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+116>>2])&&S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+116>>2]=0,p2[A+120|0]=1,T2[(f=A+108|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+96>>2]=0,T2[A>>2]=9592,p2[A+100|0]=1,T2[(f=A+88|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,p2[A+36|0]=1,T2[(f=A+24|0)>>2]=0,(T2[f+4>>2]=0)|A;}function k0(A){return T2[(A|=0)+24>>2];}function l0(A,f){var r,e=0,i=0,a=0,n=0,o=0,b=0;if(S2[A+164|0]){if((0|(a=T2[A+128>>2]))==T2[A+132>>2]&&!((0|(n=a?a<<1:1))<=(0|a))){n&&(T2[5498]=T2[5498]+1,(e=K2(19+(n<<2)|0))&&(T2[(i=e+19&-16)-4>>2]=e)),o=T2[A+136>>2];A:{if(1<=(0|a))for(e=i,b=o;T2[e>>2]=T2[b>>2],e=e+4|0,b=b+4|0,a=a-1|0;);else if(!o)break A;S2[A+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[o-4>>2])),a=T2[A+128>>2];}T2[A+136>>2]=i,T2[A+132>>2]=n,p2[A+140|0]=1;}return i=T2[A+136>>2],T2[i+(a<<2)>>2]=f,T2[T2[A+32>>2]+4>>2]=i,void(T2[A+128>>2]=T2[A+128>>2]+1);}if((0|(i=T2[A+148>>2]))==T2[A+152>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){r&&(T2[5498]=T2[5498]+1,(e=K2(19+(r<<1)|0))&&(T2[(n=e+19&-16)-4>>2]=e)),o=T2[A+156>>2];A:{if(1<=(0|i))for(e=n,b=o,a=i;$[e>>1]=A2[b>>1],e=e+2|0,b=b+2|0,a=a-1|0;);else if(!o)break A;S2[A+160|0]&&(T2[5499]=T2[5499]+1,q2(T2[o-4>>2]),i=T2[A+148>>2]);}T2[A+156>>2]=n,T2[A+152>>2]=r,p2[A+160|0]=1;}T2[A+148>>2]=i+1,e=T2[A+32>>2],A=T2[A+156>>2],T2[e+4>>2]=A,$[A+(i<<1)>>1]=f;}function s0(A,f,r){var e=0,i=0,a=0,n=0,o=0,b=0,t=z2(0),c=z2(0),u=z2(0),k=z2(0),l=z2(0),s=z2(0);A:{if(S2[A+165|0]){if(!((0|(a=T2[A+88>>2]))<1)&&r)for(r=T2[A+96>>2],u=j2[A+168>>2],k=j2[f+8>>2],l=j2[f+4>>2],s=j2[f>>2];;){if(t=z2(j2[r>>2]-s),c=z2(t*t),t=z2(j2[r+4>>2]-l),c=z2(c+z2(t*t)),t=z2(j2[r+8>>2]-k),u>=z2(c+z2(t*t)))break A;if(r=r+16|0,(0|(o=o+1|0))==(0|a))break;}if(r=T2[A+32>>2],T2[r+12>>2]=T2[r+12>>2]+1,T2[A+92>>2]==(0|a)&&!((0|(o=a?a<<1:1))<=(0|a))){if(o&&(T2[5498]=T2[5498]+1,(r=K2(19+(o<<4)|0))&&(T2[(e=r+19&-16)-4>>2]=r)),1<=(0|a))for(r=0;i=T2[A+96>>2]+r|0,n=T2[i+4>>2],T2[(b=r+e|0)>>2]=T2[i>>2],T2[b+4>>2]=n,n=T2[(i=i+8|0)+4>>2],T2[(b=b+8|0)>>2]=T2[i>>2],T2[b+4>>2]=n,r=r+16|0,a=a-1|0;);(r=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+96>>2]=e,T2[A+92>>2]=o,p2[A+100|0]=1,a=T2[A+88>>2];}return r=T2[f+4>>2],e=T2[(n=A+96|0)>>2]+(a<<4)|0,T2[e>>2]=T2[f>>2],T2[e+4>>2]=r,f=T2[(r=f+8|0)+4>>2],T2[(e=e+8|0)>>2]=T2[r>>2],T2[e+4>>2]=f,T2[T2[A+32>>2]+16>>2]=T2[n>>2],A=T2[(f=A)+88>>2],T2[f+88>>2]=A+1,A;}if(!((0|(i=T2[A+108>>2]))<1)&&r)for(r=T2[A+116>>2],u=j2[A+168>>2],k=j2[f+8>>2],l=j2[f+4>>2],s=j2[f>>2];;){if(t=z2(j2[r>>2]-s),c=z2(t*t),t=z2(j2[r+4>>2]-l),c=z2(c+z2(t*t)),t=z2(j2[r+8>>2]-k),u>=z2(c+z2(t*t)))break A;if(r=r+12|0,o=o+1|0,!((0|(a=a+3|0))<(0|i)))break;}if((0|i)==(0|(e=T2[A+112>>2])))if((0|(e=i?i<<1:1))<=(0|i))e=i;else {e&&(T2[5498]=T2[5498]+1,(r=K2(19+(e<<2)|0))&&(T2[(n=r+19&-16)-4>>2]=r)),b=T2[A+116>>2];f:{if(1<=(0|i))for(r=n,o=b,a=i;j2[r>>2]=j2[o>>2],r=r+4|0,o=o+4|0,a=a-1|0;);else if(!b)break f;S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2]),i=T2[A+108>>2]);}T2[A+116>>2]=n,T2[A+112>>2]=e,p2[A+120|0]=1;}if(T2[A+108>>2]=r=i+1|0,b=T2[A+116>>2],j2[b+(i<<2)>>2]=j2[f>>2],(0|r)==(0|e)){if((0|(i=e?e<<1:1))<=(0|e))i=e,n=b;else {n=0,i&&(T2[5498]=T2[5498]+1,(r=K2(19+(i<<2)|0))&&(T2[(n=r+19&-16)-4>>2]=r,b=T2[A+116>>2]));f:{if(1<=(0|e))for(r=n,o=b,a=e;j2[r>>2]=j2[o>>2],r=r+4|0,o=o+4|0,a=a-1|0;);else if(!b)break f;S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2]),e=T2[A+108>>2]);}T2[A+116>>2]=n,T2[A+112>>2]=i,p2[A+120|0]=1;}}else i=e,n=b,e=r;if(T2[A+108>>2]=r=e+1|0,j2[(e<<2)+n>>2]=j2[f+4>>2],(0|r)==(0|i)){if((0|(b=i?i<<1:1))<=(0|i))e=n;else {e=0,b&&(T2[5498]=T2[5498]+1,(r=K2(19+(b<<2)|0))&&(T2[(e=r+19&-16)-4>>2]=r,n=T2[A+116>>2]));f:{if(1<=(0|i))for(r=e,o=n,a=i;j2[r>>2]=j2[o>>2],r=r+4|0,o=o+4|0,a=a-1|0;);else if(!n)break f;S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[n-4>>2]),i=T2[A+108>>2]);}T2[A+116>>2]=e,T2[A+112>>2]=b,p2[A+120|0]=1;}}else e=n,i=r;T2[A+108>>2]=r=i+1|0,j2[(i<<2)+e>>2]=j2[f+8>>2],A=T2[A+32>>2],T2[A+16>>2]=e,T2[A+12>>2]=T2[A+12>>2]+1,o=((0|r)/3|0)-1|0;}return o;}function v0(A,f){var r,e,i,a=0;L2=a=L2-48|0,i=T2[(f|=0)+4>>2],e=T2[(A|=0)+56>>2],T2[(r=e)+4>>2]=T2[f>>2],T2[r+8>>2]=i,r=T2[(f=f+8|0)+4>>2],T2[(e=e+12|0)>>2]=T2[f>>2],T2[4+e>>2]=r,T2[44+a>>2]=0,T2[36+a>>2]=0,T2[40+a>>2]=0,T2[32+a>>2]=1065353216,n1[T2[T2[A>>2]+68>>2]](16+a|0,A,32+a|0),j2[A+40>>2]=j2[16+a>>2]+j2[A+20>>2],T2[32+a>>2]=-1082130432,n1[T2[T2[A>>2]+68>>2]](a,A,32+a|0),r=T2[4+(e=8+a|0)>>2],T2[(f=24+a|0)>>2]=T2[e>>2],T2[f+4>>2]=r,r=T2[4+a>>2],T2[16+a>>2]=T2[a>>2],T2[20+a>>2]=r,j2[A+24>>2]=j2[16+a>>2]-j2[A+20>>2],T2[(r=40+a|0)>>2]=0,T2[4+r>>2]=0,T2[32+a>>2]=0,T2[36+a>>2]=0,T2[36+a>>2]=1065353216,n1[T2[T2[A>>2]+68>>2]](16+a|0,A,32+a|0),j2[A+44>>2]=j2[20+a>>2]+j2[A+20>>2],T2[36+a>>2]=-1082130432,n1[T2[T2[A>>2]+68>>2]](a,A,32+a|0),i=T2[4+e>>2],T2[f>>2]=T2[e>>2],T2[f+4>>2]=i,i=T2[4+a>>2],T2[16+a>>2]=T2[a>>2],T2[20+a>>2]=i,j2[A+28>>2]=j2[20+a>>2]-j2[A+20>>2],T2[r>>2]=0,T2[4+r>>2]=0,T2[r>>2]=1065353216,T2[32+a>>2]=0,T2[36+a>>2]=0,n1[T2[T2[A>>2]+68>>2]](16+a|0,A,32+a|0),T2[r>>2]=-1082130432,j2[A+48>>2]=j2[f>>2]+j2[A+20>>2],n1[T2[T2[A>>2]+68>>2]](a,A,32+a|0),r=T2[4+e>>2],T2[f>>2]=T2[e>>2],T2[f+4>>2]=r,e=T2[4+a>>2],T2[16+a>>2]=T2[a>>2],T2[20+a>>2]=e,j2[A+32>>2]=j2[f>>2]-j2[A+20>>2],L2=48+a|0;}function d0(A){var f=0;return T2[(A|=0)>>2]=10128,(f=T2[A+160>>2])&&S2[A+164|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+160>>2]=0,p2[A+164|0]=1,T2[(f=A+152|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+136>>2])&&S2[A+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+136>>2]=0,p2[A+140|0]=1,T2[(f=A+128|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+116>>2])&&S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+116>>2]=0,p2[A+120|0]=1,T2[(f=A+108|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+96>>2]=0,p2[A+100|0]=1,T2[(f=A+88|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+76>>2])&&S2[A+80|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+76>>2]=0,p2[A+80|0]=1,T2[(f=A+68|0)>>2]=0,(T2[f+4>>2]=0)|A;}function B0(A,f,r,e){f|=0,r|=0,e|=0;var i=0,a=0,n=0,o=0,b=0,t=0,c=0,u=0;if(T2[(A|=0)+168>>2]=T2[A+152>>2],p2[f+80|0]=1,p2[f+60|0]=0,T2[f+52>>2]=287,T2[f>>2]=10128,T2[f+76>>2]=0,p2[f+100|0]=1,T2[f+68>>2]=0,T2[f+72>>2]=0,T2[f+96>>2]=0,p2[f+120|0]=1,T2[f+88>>2]=0,T2[f+92>>2]=0,T2[f+116>>2]=0,p2[f+140|0]=1,T2[f+108>>2]=0,T2[f+112>>2]=0,T2[f+136>>2]=0,T2[f+144>>2]=0,p2[f+164|0]=1,T2[f+128>>2]=0,T2[f+132>>2]=0,T2[f+152>>2]=0,T2[f+156>>2]=0,T2[f+4>>2]=-8388609,T2[f+8>>2]=-8388609,T2[f+12>>2]=-8388609,T2[f+16>>2]=0,T2[f+20>>2]=2139095039,T2[f+24>>2]=2139095039,T2[f+28>>2]=2139095039,T2[f+32>>2]=0,T2[f+168>>2]=0,T2[f+160>>2]=0,r=T2[A+56>>2],r=e?(T2[f+56>>2]=r<<8&16711680|r<<24|r>>>8&65280|r>>>24,p2[f+4|0]=S2[A+7|0],p2[f+5|0]=S2[A+6|0],p2[f+6|0]=S2[A+5|0],p2[f+7|0]=S2[A+4|0],p2[f+8|0]=S2[A+11|0],p2[f+9|0]=S2[A+10|0],p2[f+10|0]=S2[A+9|0],p2[f+11|0]=S2[A+8|0],p2[f+12|0]=S2[A+15|0],p2[f+13|0]=S2[A+14|0],p2[f+14|0]=S2[A+13|0],p2[f+15|0]=S2[A+12|0],p2[f+16|0]=S2[A+19|0],p2[f+17|0]=S2[A+18|0],p2[f+18|0]=S2[A+17|0],p2[f+19|0]=S2[A+16|0],p2[f+20|0]=S2[A+23|0],p2[f+21|0]=S2[A+22|0],p2[f+22|0]=S2[A+21|0],p2[f+23|0]=S2[A+20|0],p2[f+24|0]=S2[A+27|0],p2[f+25|0]=S2[A+26|0],p2[f+26|0]=S2[A+25|0],p2[f+27|0]=S2[A+24|0],p2[f+28|0]=S2[A+31|0],p2[f+29|0]=S2[A+30|0],p2[f+30|0]=S2[A+29|0],p2[f+31|0]=S2[A+28|0],p2[f+32|0]=S2[A+35|0],p2[f+33|0]=S2[A+34|0],p2[f+34|0]=S2[A+33|0],p2[f+35|0]=S2[A+32|0],p2[f+36|0]=S2[A+39|0],p2[f+37|0]=S2[A+38|0],p2[f+38|0]=S2[A+37|0],p2[f+39|0]=S2[A+36|0],p2[f+40|0]=S2[A+43|0],p2[f+41|0]=S2[A+42|0],p2[f+42|0]=S2[A+41|0],p2[f+43|0]=S2[A+40|0],p2[f+44|0]=S2[A+47|0],p2[f+45|0]=S2[A+46|0],p2[f+46|0]=S2[A+45|0],p2[f+47|0]=S2[A+44|0],p2[f+48|0]=S2[A+51|0],p2[f+49|0]=S2[A+50|0],p2[f+50|0]=S2[A+49|0],p2[f+51|0]=S2[A+48|0],r=T2[A+144>>2],T2[f+144>>2]=r<<24|r<<8&16711680|r>>>8&65280|r>>>24,(r=T2[A+168>>2])<<24|r<<8&16711680|r>>>8&65280|r>>>24):(T2[f+56>>2]=r,i=T2[(b=A+12|0)+4>>2],T2[(t=(r=f+4|0)+8|0)>>2]=T2[b>>2],T2[t+4>>2]=i,t=T2[A+8>>2],T2[r>>2]=T2[A+4>>2],T2[r+4>>2]=t,i=T2[(b=A+28|0)+4>>2],T2[(t=(r=f+20|0)+8|0)>>2]=T2[b>>2],T2[t+4>>2]=i,t=T2[A+24>>2],T2[r>>2]=T2[A+20>>2],T2[r+4>>2]=t,r=T2[A+40>>2],T2[f+36>>2]=T2[A+36>>2],T2[f+40>>2]=r,b=T2[(t=A+44|0)+4>>2],T2[(r=f+44|0)>>2]=T2[t>>2],T2[r+4>>2]=b,T2[f+144>>2]=T2[A+144>>2],T2[A+168>>2]),p2[f+60|0]=S2[A+60|0],T2[f+168>>2]=r,b=f+172|0,t=T2[A+56>>2],S2[A+60|0]){if((r=T2[f+136>>2])&&S2[f+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[f+136>>2]=b,p2[f+140|0]=0,e){if(!((0|t)<1))for(c=T2[A+136>>2],i=t;n=A2[(a=o+c|0)>>1],$[(r=f+o|0)+172>>1]=(n<<24|n<<8&16711680)>>>16,n=A2[a+2>>1],$[r+174>>1]=(n<<24|n<<8&16711680)>>>16,n=A2[a+4>>1],$[r+176>>1]=(n<<24|n<<8&16711680)>>>16,n=A2[a+6>>1],$[r+178>>1]=(n<<24|n<<8&16711680)>>>16,n=A2[a+8>>1],$[r+180>>1]=(n<<24|n<<8&16711680)>>>16,n=T2[a+12>>2],T2[r+184>>2]=n<<24|n<<8&16711680|n>>>8&65280|n>>>24,n=r+182|0,r=A2[a+10>>1],$[n>>1]=(r<<24|r<<8&16711680)>>>16,o=o+16|0,i=i-1|0;);}else if(!((0|t)<1))for(n=T2[A+136>>2],r=t;$[(i=f+o|0)+172>>1]=A2[(a=n+o|0)>>1],$[i+174>>1]=A2[a+2>>1],$[i+176>>1]=A2[a+4>>1],$[i+178>>1]=A2[a+6>>1],$[i+180>>1]=A2[a+8>>1],T2[i+184>>2]=T2[a+12>>2],$[i+182>>1]=A2[a+10>>1],o=o+16|0,r=r-1|0;);n=f+128|0,o=t<<4;}else {(r=T2[f+96>>2])&&S2[f+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[f+96>>2]=b,p2[f+100|0]=0,T2[f+92>>2]=t,T2[f+88>>2]=t;A:{f:{if(!e){if(1<=(0|t))break f;r=b;break A;}if((0|t)<1){r=b;break A;}for(a=T2[A+96>>2],o=40,i=t,r=b;p2[(r=r+o|0)-40|0]=S2[(a=a+o|0)-37|0],p2[r-39|0]=S2[a-38|0],p2[r-38|0]=S2[a-39|0],p2[r-37|0]=S2[a-40|0],p2[r-36|0]=S2[a-33|0],p2[r-35|0]=S2[a-34|0],p2[r-34|0]=S2[a-35|0],p2[r-33|0]=S2[a-36|0],p2[r-32|0]=S2[a-29|0],p2[r-31|0]=S2[a-30|0],p2[r-30|0]=S2[a-31|0],p2[r-29|0]=S2[a-32|0],p2[r-28|0]=S2[a-25|0],p2[r-27|0]=S2[a-26|0],p2[r-26|0]=S2[a-27|0],p2[r-25|0]=S2[a-28|0],r=T2[f+96>>2]+o|0,a=T2[A+96>>2]+o|0,p2[r-24|0]=S2[a-21|0],p2[r-23|0]=S2[a-22|0],p2[r-22|0]=S2[a-23|0],p2[r-21|0]=S2[a-24|0],p2[r-20|0]=S2[a-17|0],p2[r-19|0]=S2[a-18|0],p2[r-18|0]=S2[a-19|0],p2[r-17|0]=S2[a-20|0],p2[r-16|0]=S2[a-13|0],p2[r-15|0]=S2[a-14|0],p2[r-14|0]=S2[a-15|0],p2[r-13|0]=S2[a-16|0],p2[r-12|0]=S2[a-9|0],p2[r-11|0]=S2[a-10|0],p2[r-10|0]=S2[a-11|0],p2[r-9|0]=S2[a-12|0],r=T2[f+96>>2],a=T2[A+96>>2],n=T2[(u=o+a|0)>>2],T2[(c=o+r|0)>>2]=n<<24|n<<8&16711680|n>>>8&65280|n>>>24,n=T2[u-8>>2],T2[c-8>>2]=n<<24|n<<8&16711680|n>>>8&65280|n>>>24,n=T2[u-4>>2],T2[c-4>>2]=n<<24|n<<8&16711680|n>>>8&65280|n>>>24,o=o- -64|0,i=i-1|0;);break A;}for(i=T2[A+96>>2],n=40,a=t,r=b;o=T2[(i=(i+n|0)-40|0)+4>>2],T2[(r=(r+n|0)-40|0)>>2]=T2[i>>2],T2[r+4>>2]=o,o=T2[(i=i+8|0)+4>>2],T2[(r=r+8|0)>>2]=T2[i>>2],T2[r+4>>2]=o,i=(T2[A+96>>2]+n|0)-24|0,o=T2[i+4>>2],r=(T2[f+96>>2]+n|0)-24|0,T2[r>>2]=T2[i>>2],T2[r+4>>2]=o,o=T2[(i=i+8|0)+4>>2],T2[(r=r+8|0)>>2]=T2[i>>2],T2[r+4>>2]=o,r=T2[f+96>>2],i=T2[A+96>>2],T2[(o=n+r|0)>>2]=T2[(c=i+n|0)>>2],T2[o-4>>2]=T2[c-4>>2],T2[o-8>>2]=T2[c-8>>2],n=n- -64|0,a=a-1|0;);}n=f+88|0,o=t<<6,S2[f+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]));}if(T2[n>>2]=0,T2[n+4>>2]=0,p2[0|(r=n+5|0)]=0,p2[r+1|0]=0,p2[r+2|0]=0,p2[r+3|0]=0,p2[r+4|0]=0,p2[r+5|0]=0,p2[r+6|0]=0,r=o+b|(p2[r+7|0]=0),(t=T2[f+160>>2])&&S2[f+164|0]&&(T2[5499]=T2[5499]+1,q2(T2[t-4>>2])),t=f+152|0,p2[f+164|0]=0,T2[f+160>>2]=r,r=T2[A+168>>2],e){if(!((0|r)<1))for(a=f+o|0,o=T2[A+160>>2],A=0;i=A2[(b=A+o|0)>>1],$[(e=A+a|0)+172>>1]=(i<<24|i<<8&16711680)>>>16,i=A2[b+2>>1],$[e+174>>1]=(i<<24|i<<8&16711680)>>>16,i=A2[b+4>>1],$[e+176>>1]=(i<<24|i<<8&16711680)>>>16,i=A2[b+6>>1],$[e+178>>1]=(i<<24|i<<8&16711680)>>>16,i=A2[b+8>>1],$[e+180>>1]=(i<<24|i<<8&16711680)>>>16,i=T2[b+12>>2],T2[e+184>>2]=i<<24|i<<8&16711680|i>>>8&65280|i>>>24,i=T2[b+16>>2],T2[e+188>>2]=i<<24|i<<8&16711680|i>>>8&65280|i>>>24,i=e+182|0,e=A2[b+10>>1],$[i>>1]=(e<<24|e<<8&16711680)>>>16,A=A+32|0,r=r-1|0;);}else if(!((0|r)<1))for(i=f+o|0,a=T2[A+160>>2],r=o=0;$[(e=i+o|0)+172>>1]=A2[(b=a+o|0)>>1],$[e+174>>1]=A2[b+2>>1],$[e+176>>1]=A2[b+4>>1],$[e+178>>1]=A2[b+6>>1],$[e+180>>1]=A2[b+8>>1],c=T2[(n=b+12|0)+4>>2],n=T2[n>>2],T2[e+200>>2]=0,T2[(u=e+184|0)>>2]=n,T2[u+4>>2]=c,b=A2[b+10>>1],T2[(n=e+192|0)>>2]=0,T2[n+4>>2]=0,$[e+182>>1]=b,o=o+32|0,(0|(r=r+1|0))<T2[A+168>>2];);return T2[(A=t)>>2]=0,T2[A+4>>2]=0,T2[f>>2]=0,p2[0|(A=A+5|0)]=0,p2[A+1|0]=0,p2[A+2|0]=0,p2[A+3|0]=0,p2[A+4|0]=0,p2[A+5|0]=0,p2[A+6|0]=0,p2[A+7|0]=0,1;}function Q0(A,f,r,e,i,a,n,o){var b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z=0,Y=0,R=0,F=z2(0),W=z2(0),m=z2(0),N=z2(0),V=0,J=z2(0),M=z2(0),I=0,x=z2(0),y=z2(0),U=z2(0),X=0,p=0,T=0;L2=Z=L2-32|0;A:if(!((0|(T=T2[A+56>>2]))<1))for(F=j2[r+8>>2],y=N=z2(a-F),J=j2[r>>2],W=z2(e-J),M=j2[r+4>>2],m=z2(i-M),x=z2(z2(1)/z2(_2(z2(z2(z2(W*W)+z2(m*m))+z2(N*N))))),N=z2(N*x),W=z2((U=W)*x),m=z2((b=m)*x),b=z2(z2(y*N)+z2(z2(U*W)+z2(b*m))),x=j2[o+8>>2],u=z2((F<a?a:F)+x),y=j2[o+4>>2],k=z2((M<i?i:M)+y),U=j2[o>>2],l=z2((J<e?e:J)+U),F=a<F?a:F,a=j2[n+8>>2],s=z2(F+a),F=i<M?i:M,i=j2[n+4>>2],v=z2(F+i),F=e<J?e:J,e=j2[n>>2],d=z2(F+e),R=T2[A+96>>2],B=((Y=(F=N==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/N))<z2(0))<<4)+Z|8,Q=((V=(J=m==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/m))<z2(0))<<4)+Z|4,g=(!Y<<4)+Z|8,w=(!V<<4)+Z|4,G=((Y=(M=W==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/W))<z2(0))<<4)+Z|0,C=(!Y<<4)+Z|0,t=16+Z|0,X=1;;){V=T2[(Y=R+8|0)>>2],Y=T2[Y+4>>2],E=T2[R>>2],D=T2[R+4>>2],I=T2[R+20>>2],T2[t>>2]=T2[R+16>>2],T2[4+t>>2]=I,h=T2[(I=R+24|0)+4>>2],T2[(c=8+t|0)>>2]=T2[I>>2],T2[4+c>>2]=h,T2[Z>>2]=E,T2[4+Z>>2]=D,T2[8+Z>>2]=V,T2[12+Z>>2]=Y,j2[Z>>2]=j2[Z>>2]-U,j2[4+Z>>2]=j2[4+Z>>2]-y,j2[16+Z>>2]=j2[16+Z>>2]-e,j2[20+Z>>2]=j2[20+Z>>2]-i,j2[8+Z>>2]=j2[8+Z>>2]-x,j2[24+Z>>2]=j2[24+Z>>2]-a,Y=0,j2[R+16>>2]<d||(Y=0,j2[R>>2]>l||(Y=1)),V=0,j2[I>>2]<s||j2[R+8>>2]>u||(V=Y);f:{r:{e:{i:{if(!(j2[R+20>>2]<v||1^V|j2[R+4>>2]>k||(W=j2[r+4>>2],e=z2(J*z2(j2[Q>>2]-W)),a=j2[r>>2],(i=z2(M*z2(j2[C>>2]-a)))<e||(a=z2(M*z2(j2[G>>2]-a)),(W=z2(J*z2(j2[w>>2]-W)))<a||(N=j2[r+8>>2],(i=W<i?W:i)<(m=z2(F*z2(j2[B>>2]-N)))||(e=a<e?e:a,(a=z2(F*z2(j2[g>>2]-N)))<e)))))){if(I=-1==(0|(Y=T2[R+32>>2])),!(V=(e<m?m:e)<b&(a<i?a:i)>z2(0)))break i;if(-1!=(0|Y))break i;n1[T2[T2[f>>2]+8>>2]](f,T2[R+36>>2],T2[R+40>>2]),T=T2[A+56>>2];break e;}I=-1==(0|(Y=T2[R+32>>2])),V=0;}if(!I&&!V)break r;}p=p+1|0,R=R- -64|0;break f;}p=Y+p|0,R=(Y<<6)+R|0;}if((0|T)<=(0|p))break A;X=X+1|0,a=j2[n+8>>2],i=j2[n+4>>2],e=j2[n>>2],x=j2[o+8>>2],y=j2[o+4>>2],U=j2[o>>2];}T2[5592]<(0|X)&&(T2[5592]=X),L2=32+Z|0;}function g0(A,f,r,e,i,a,n,o,b){var t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N=z2(0),V=0,J=0,M=0,I=(z2(0)),x=z2(0),y=z2(0),U=(0),X=0,p=(0),T=0,S=0,j=0;if(L2=M=L2-32|0,s=j2[r+4>>2],v=j2[r>>2],I=j2[A+28>>2],u=j2[A+12>>2],d=j2[r+8>>2],N=z2((a<d?a:d)+j2[n+8>>2]),B=j2[A+44>>2],U=(N=z2(z2((I<(N=N<u?u:N)?I:N)-u)*B))<z2(4294967296)&N>=z2(0)?~~N>>>0:0,x=j2[A+24>>2],k=j2[A+8>>2],N=z2((i<s?i:s)+j2[n+4>>2]),t=j2[A+40>>2],X=(N=z2(z2((x<(N=N<k?k:N)?x:N)-k)*t))<z2(4294967296)&N>=z2(0)?~~N>>>0:0,y=j2[A+20>>2],l=j2[A+4>>2],N=z2((e<v?e:v)+j2[n>>2]),c=j2[A+36>>2],p=(N=z2(z2((y<(N=N<l?l:N)?y:N)-l)*c))<z2(4294967296)&N>=z2(0)?~~N>>>0:0,N=z2((d<a?a:d)+j2[o+8>>2]),T=(N=z2(z2(z2((I<(N=N<u?u:N)?I:N)-u)*B)+z2(1)))<z2(4294967296)&N>=z2(0)?~~N>>>0:0,N=z2((s<i?i:s)+j2[o+4>>2]),J=(N=z2(z2(z2((x<(N=N<k?k:N)?x:N)-k)*t)+z2(1)))<z2(4294967296)&N>=z2(0)?~~N>>>0:0,N=z2((v<e?e:v)+j2[o>>2]),V=(N=z2(z2(z2((y<(N=N<l?l:N)?y:N)-l)*c)+z2(1)))<z2(4294967296)&N>=z2(0)?~~N>>>0:0,1<=(0|b))for(a=N=z2(a-d),t=z2(e-v),c=z2(i-s),e=z2(z2(1)/z2(_2(z2(z2(z2(t*t)+z2(c*c))+z2(N*N))))),N=z2(N*e),i=z2(t*e),e=z2(c*e),B=z2(z2(a*N)+z2(z2(t*i)+z2(c*e))),w=65534&U,G=65534&X,C=65534&p,E=1|T,D=1|J,h=1|V,Z=((J=(I=N==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/N))<z2(0))<<4)+M|8,Y=((V=(x=e==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/e))<z2(0))<<4)+M|4,R=(!J<<4)+M|8,F=(!V<<4)+M|4,V=T2[A+136>>2],W=((J=(y=i==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/i))<z2(0))<<4)+M|0,m=(!J<<4)+M|0;;){Q=T2[V+12>>2],J=0;A:{f:{r:{e:if(!(A2[V+6>>1]<C>>>0||h>>>0<(g=A2[V>>1])>>>0||A2[V+10>>1]<w>>>0||E>>>0<(U=A2[V+4>>1])>>>0||A2[V+8>>1]<G>>>0||D>>>0<(X=A2[V+2>>1])>>>0)){if(T2[12+M>>2]=0,p=A2[V+10>>1],T=A2[V+8>>1],J=A2[V+6>>1],T2[28+M>>2]=0,t=j2[A+36>>2],c=j2[A+4>>2],j2[M>>2]=z2(z2(z2(g>>>0)/t)+c)-j2[o>>2],N=j2[A+40>>2],a=j2[A+8>>2],j2[4+M>>2]=z2(z2(z2(X>>>0)/N)+a)-j2[o+4>>2],i=j2[A+44>>2],e=j2[A+12>>2],j2[8+M>>2]=z2(z2(z2(U>>>0)/i)+e)-j2[o+8>>2],j2[16+M>>2]=z2(c+z2(z2(J>>>0)/t))-j2[n>>2],j2[20+M>>2]=z2(a+z2(z2(T>>>0)/N))-j2[n+4>>2],j2[24+M>>2]=z2(e+z2(z2(p>>>0)/i))-j2[n+8>>2],i=j2[r+4>>2],t=z2(x*z2(j2[Y>>2]-i)),e=j2[r>>2],!((a=z2(y*z2(j2[m>>2]-e)))<t||(c=z2(y*z2(j2[W>>2]-e)),(i=z2(x*z2(j2[F>>2]-i)))<c||(e=j2[r+8>>2],(a=i<a?i:a)<(N=z2(I*z2(j2[Z>>2]-e)))||(i=c<t?t:c,(e=z2(I*z2(j2[R>>2]-e)))<i))))){if(J=(i<N?N:i)<B&(e<a?e:a)>z2(0),(0|Q)<0)break e;if(!J)break e;J=T2[V+12>>2],n1[T2[T2[f>>2]+8>>2]](f,J>>21,2097151&J);break r;}J=0;}if(!(-1<(0|Q))&&!J)break f;}S=S+1|0,V=V+16|0;break A;}S=S-(J=T2[V+12>>2])|0,V=V-(J<<4)|0;}if(j=j+1|0,!((0|S)<(0|b)))break;}T2[5592]<(0|j)&&(T2[5592]=j),L2=32+M|0;}function w0(A){return 84;}function G0(A,f,r,e,i){var a,n,o,b,t,c=0,u=0,k=z2(0),l=z2(0),s=0,v=0,d=0,B=z2(0),Q=z2(0),g=z2(0),w=0,G=0,C=z2(0),E=z2(0),D=z2(0),h=z2(0);if(L2=c=L2-112|0,p2[A+60|0]=r){if(k=j2[e>>2],Q=j2[e+4>>2],g=j2[e+8>>2],T2[A+16>>2]=0,C=z2(g+z2(-1)),j2[A+12>>2]=C,Q=z2(Q+z2(-1)),j2[A+8>>2]=Q,k=z2(k+z2(-1)),j2[A+4>>2]=k,p2[A+60|0]=1,g=j2[i>>2],l=j2[i+4>>2],E=j2[i+8>>2],T2[A+32>>2]=0,o=z2(E+z2(1)),j2[A+28>>2]=o,E=z2(l+z2(1)),j2[A+24>>2]=E,g=z2(g+z2(1)),j2[A+20>>2]=g,D=z2(o-C),h=z2(z2(65533)/D),j2[A+44>>2]=h,l=z2(z2(65533)/z2(E-Q)),j2[A+40>>2]=l,n=z2(z2(65533)/z2(g-k)),j2[A+36>>2]=n,r=(B=z2(z2(C-C)*h))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,t=z2((65534&r)>>>0),r=(B=z2(z2((b=Q)-Q)*l))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,b=z2(b+z2(z2((65534&r)>>>0)/l)),r=(B=z2(z2((l=k)-k)*n))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,(l=z2(z2(l+z2(z2((65534&r)>>>0)/n))+z2(-1)))<k&&(k=j2[A+4>>2]=l),(l=z2(b+z2(-1)))<Q&&(Q=j2[A+8>>2]=l),(l=z2(z2(C+z2(t/h))+z2(-1)))<C&&(j2[A+12>>2]=l,D=z2(o-l),h=z2(z2(65533)/D),C=l),l=z2(E-Q),n=z2(z2(65533)/l),r=(l=z2(z2(n*l)+z2(1)))<z2(4294967296)&l>=z2(0)?~~l>>>0:0,n=z2(z2((1|r)>>>0)/n),k=z2(g-(l=k)),B=z2(z2(65533)/k),r=(k=z2(z2(B*k)+z2(1)))<z2(4294967296)&k>=z2(0)?~~k>>>0:0,e=!(g<(k=z2(z2(l+z2(z2((1|r)>>>0)/B))+z2(1)))),r=(D=z2(z2(h*D)+z2(1)))<z2(4294967296)&D>=z2(0)?~~D>>>0:0,e||(g=j2[A+20>>2]=k),E<(k=z2(z2(Q+n)+z2(1)))&&(E=j2[A+24>>2]=k),o<(k=z2(z2(C+z2(z2((1|r)>>>0)/h))+z2(1)))&&(j2[A+28>>2]=k,h=z2(z2(65533)/z2(k-C))),T2[A+48>>2]=0,j2[A+44>>2]=h,j2[A+40>>2]=z2(65533)/z2(E-Q),j2[A+36>>2]=z2(65533)/z2(g-l),T2[96+c>>2]=A,T2[92+c>>2]=A+104,T2[88+c>>2]=10352,n1[T2[T2[f>>2]+8>>2]](f,88+c|0,A+4|0,A+20|0),w=T2[A+108>>2],T2[(f=16+c|0)>>2]=0,T2[f+4>>2]=0,T2[8+c>>2]=0,((T2[12+c>>2]=0)|(e=T2[A+128>>2]))<(0|(i=w<<1))){if((0|i)>T2[A+132>>2]){if(w&&(T2[5498]=T2[5498]+1,(f=K2(w<<5|19))&&(T2[(v=f+19&-16)-4>>2]=f)),1<=(0|e))for(r=0,f=e;u=T2[A+136>>2]+r|0,d=T2[u+4>>2],T2[(s=G=r+v|0)>>2]=T2[u>>2],T2[s+4>>2]=d,s=T2[(u=u+8|0)+4>>2],T2[(G=G+8|0)>>2]=T2[u>>2],T2[G+4>>2]=s,r=r+16|0,f=f-1|0;);(f=T2[A+136>>2])&&S2[A+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+136>>2]=v,T2[A+132>>2]=i,p2[A+140|0]=1;}for(r=e<<4,f=e-(w<<1)|0;v=T2[12+c>>2],e=T2[A+136>>2]+r|0,T2[e>>2]=T2[8+c>>2],T2[e+4>>2]=v,v=T2[(u=16+c|0)+4>>2],T2[(e=e+8|0)>>2]=T2[u>>2],T2[e+4>>2]=v,r=r+16|0,(e=f)>>>0<=(f=f+1|0)>>>0;);}T2[A+128>>2]=i;}else {if(T2[104+c>>2]=10372,T2[108+c>>2]=A- -64,T2[96+c>>2]=-581039253,T2[100+c>>2]=0,T2[88+c>>2]=-581039253,T2[92+c>>2]=-581039253,T2[80+c>>2]=1566444395,T2[84+c>>2]=0,T2[72+c>>2]=1566444395,T2[76+c>>2]=1566444395,n1[T2[T2[f>>2]+8>>2]](f,104+c|0,88+c|0,72+c|0),w=T2[A+68>>2],T2[(f=c+64|0)>>2]=0,T2[f+4>>2]=0,T2[(f=56+c|0)>>2]=0,T2[f+4>>2]=0,T2[(f=48+c|0)>>2]=0,T2[f+4>>2]=0,T2[(f=40+c|0)>>2]=0,T2[f+4>>2]=0,T2[(f=32+c|0)>>2]=0,T2[f+4>>2]=0,T2[(f=24+c|0)>>2]=0,T2[f+4>>2]=0,T2[(f=16+c|0)>>2]=0,T2[f+4>>2]=0,T2[8+c>>2]=0,((T2[12+c>>2]=0)|(r=T2[A+88>>2]))<(0|(G=w<<1))){if((0|G)>T2[A+92>>2]){if(w&&(T2[5498]=T2[5498]+1,(f=K2(w<<7|19))&&(T2[(v=f+19&-16)-4>>2]=f)),1<=(0|r))for(e=0,i=r;u=T2[A+96>>2]+e|0,a=T2[u+4>>2],T2[(f=e+v|0)>>2]=T2[u>>2],T2[f+4>>2]=a,a=T2[(s=u+56|0)+4>>2],T2[(d=f+56|0)>>2]=T2[s>>2],T2[d+4>>2]=a,a=T2[(d=u+48|0)+4>>2],T2[(s=f+48|0)>>2]=T2[d>>2],T2[s+4>>2]=a,a=T2[(d=u+40|0)+4>>2],T2[(s=f+40|0)>>2]=T2[d>>2],T2[s+4>>2]=a,a=T2[(d=u+32|0)+4>>2],T2[(s=f+32|0)>>2]=T2[d>>2],T2[s+4>>2]=a,a=T2[(d=u+24|0)+4>>2],T2[(s=f+24|0)>>2]=T2[d>>2],T2[s+4>>2]=a,a=T2[(d=u+16|0)+4>>2],T2[(s=f+16|0)>>2]=T2[d>>2],T2[s+4>>2]=a,s=T2[(u=u+8|0)+4>>2],T2[(f=f+8|0)>>2]=T2[u>>2],T2[f+4>>2]=s,e=e- -64|0,i=i-1|0;);(f=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+96>>2]=v,T2[A+92>>2]=G,p2[A+100|0]=1;}for(f=r<<6,e=r-(w<<1)|0;u=T2[12+c>>2],r=T2[A+96>>2]+f|0,T2[r>>2]=T2[8+c>>2],T2[r+4>>2]=u,v=T2[(u=c+64|0)+4>>2],T2[(i=r+56|0)>>2]=T2[u>>2],T2[i+4>>2]=v,v=T2[(u=56+c|0)+4>>2],T2[(i=r+48|0)>>2]=T2[u>>2],T2[i+4>>2]=v,v=T2[(u=48+c|0)+4>>2],T2[(i=r+40|0)>>2]=T2[u>>2],T2[i+4>>2]=v,v=T2[(u=40+c|0)+4>>2],T2[(i=r+32|0)>>2]=T2[u>>2],T2[i+4>>2]=v,v=T2[(u=32+c|0)+4>>2],T2[(i=r+24|0)>>2]=T2[u>>2],T2[i+4>>2]=v,v=T2[(u=24+c|0)+4>>2],T2[(i=r+16|0)>>2]=T2[u>>2],T2[i+4>>2]=v,u=T2[(i=16+c|0)+4>>2],T2[(r=r+8|0)>>2]=T2[i>>2],T2[r+4>>2]=u,f=f- -64|0,(r=e)>>>0<=(e=r+1|0)>>>0;);}T2[A+88>>2]=G;}(function A(f,r,e){var i,a,n,o,b,t,c,u,k,l,s,v=0,d=0,B=z2(0),Q=0,g=0,w=0,G=0,C=0,E=0,D=z2(0),h=z2(0),Z=0,Y=z2(0),R=0,F=0,W=z2(0),m=z2(0),N=z2(0),V=z2(0),J=z2(0),M=0,I=0,x=z2(0),y=0,U=0,X=0,p=0,T=0,S=z2(0),j=z2(0),P=z2(0),z=z2(0);if(L2=C=L2-112|0,p=T2[f+56>>2],1!=(0|(w=e-r|0))){if(F=(0|r)<(0|e)){if(Q=S2[f+60|0])for(v=T2[f+116>>2]+(r<<4)|0,G=e-r|0,W=j2[f+12>>2],m=j2[f+8>>2],Y=j2[f+44>>2],D=j2[f+40>>2],h=j2[f+4>>2],B=j2[f+36>>2];V=z2(V+z2(z2(z2(z2(z2(A2[v+10>>1])/Y)+W)+z2(z2(z2(A2[v+4>>1])/Y)+W))*z2(.5))),J=z2(J+z2(z2(z2(z2(z2(A2[v+8>>1])/D)+m)+z2(z2(z2(A2[v+2>>1])/D)+m))*z2(.5))),N=z2(N+z2(z2(z2(z2(z2(A2[v+6>>1])/B)+h)+z2(z2(z2(A2[v>>1])/B)+h))*z2(.5))),v=v+16|0,G=G-1|0;);else for(v=T2[f+76>>2]+(r<<6)|0,G=e-r|0;V=z2(V+z2(z2(j2[v+24>>2]+j2[v+8>>2])*z2(.5))),J=z2(J+z2(z2(j2[v+20>>2]+j2[v+4>>2])*z2(.5))),N=z2(N+z2(z2(j2[v+16>>2]+j2[v>>2])*z2(.5))),v=v- -64|0,G=G-1|0;);if(P=z2(0|w),B=z2(z2(1)/P),V=z2(B*V),J=z2(B*J),N=z2(B*N),Q)for(v=T2[f+116>>2]+(r<<4)|0,G=e-r|0,x=j2[f+12>>2],W=j2[f+8>>2],m=j2[f+44>>2],Y=j2[f+40>>2],D=j2[f+4>>2],h=j2[f+36>>2];B=z2(z2(z2(z2(z2(z2(A2[v+10>>1])/m)+x)+z2(z2(z2(A2[v+4>>1])/m)+x))*z2(.5))-V),S=z2(S+z2(B*B)),B=z2(z2(z2(z2(z2(z2(A2[v+8>>1])/Y)+W)+z2(z2(z2(A2[v+2>>1])/Y)+W))*z2(.5))-J),z=z2(z+z2(B*B)),B=z2(z2(z2(z2(z2(z2(A2[v+6>>1])/h)+D)+z2(z2(z2(A2[v>>1])/h)+D))*z2(.5))-N),j=z2(j+z2(B*B)),v=v+16|0,G=G-1|0;);else for(v=T2[f+76>>2]+(r<<6)|0,G=e-r|0;B=z2(z2(z2(j2[v+24>>2]+j2[v+8>>2])*z2(.5))-V),S=z2(S+z2(B*B)),B=z2(z2(z2(j2[v+20>>2]+j2[v+4>>2])*z2(.5))-J),z=z2(z+z2(B*B)),B=z2(z2(z2(j2[v+16>>2]+j2[v>>2])*z2(.5))-N),j=z2(j+z2(B*B)),v=v- -64|0,G=G-1|0;);}else P=z2(0|w);if(T2[28+C>>2]=0,V=z2(0),J=z2(0),N=z2(0),!(d=(0|e)<=(0|r)))if(S2[f+60|0])for(v=T2[f+116>>2]+(r<<4)|0,G=e-r|0,W=j2[f+12>>2],m=j2[f+8>>2],Y=j2[f+44>>2],D=j2[f+40>>2],h=j2[f+4>>2],B=j2[f+36>>2];V=z2(z2(z2(z2(z2(z2(A2[v+10>>1])/Y)+W)+z2(z2(z2(A2[v+4>>1])/Y)+W))*z2(.5))+V),J=z2(z2(z2(z2(z2(z2(A2[v+8>>1])/D)+m)+z2(z2(z2(A2[v+2>>1])/D)+m))*z2(.5))+J),N=z2(z2(z2(z2(z2(z2(A2[v+6>>1])/B)+h)+z2(z2(z2(A2[v>>1])/B)+h))*z2(.5))+N),v=v+16|0,G=G-1|0;);else for(v=T2[f+76>>2]+(r<<6)|0,G=e-r|0;V=z2(z2(z2(j2[v+24>>2]+j2[v+8>>2])*z2(.5))+V),J=z2(z2(z2(j2[v+20>>2]+j2[v+4>>2])*z2(.5))+J),N=z2(z2(z2(j2[v+16>>2]+j2[v>>2])*z2(.5))+N),v=v- -64|0,G=G-1|0;);if(B=z2(z2(1)/z2(0|w)),j2[24+C>>2]=B*V,j2[20+C>>2]=B*J,j2[16+C>>2]=B*N,G=p,Q=r,!d){for(D=z2(z2(1)/z2(P+z2(-1))),d=(h=z2(D*z))<(B=z2(D*S))?2:1,P=B,B=z2(D*j),x=j2[(16+C|0)+((v=B<h?d:(B<P)<<1)<<2)>>2],y=e-r|0,G=r<<4,T=r<<6,X=(v<<2)+C|0;B=(v=S2[f+60|0])?(d=T2[f+116>>2]+G|0,W=j2[f+36>>2],m=j2[f+4>>2],V=z2(z2(z2(A2[d>>1])/W)+m),Y=j2[f+44>>2],D=j2[f+12>>2],J=z2(z2(z2(A2[d+4>>1])/Y)+D),h=j2[f+40>>2],B=j2[f+8>>2],N=z2(z2(z2(A2[d+2>>1])/h)+B),j=z2(z2(z2(A2[d+10>>1])/Y)+D),S=z2(z2(z2(A2[d+6>>1])/W)+m),z2(z2(z2(A2[d+8>>1])/h)+B)):(d=T2[f+76>>2]+T|0,V=j2[d>>2],J=j2[d+8>>2],N=j2[d+4>>2],j=j2[d+24>>2],S=j2[d+16>>2],j2[d+20>>2]),T2[12+C>>2]=0,j2[8+C>>2]=z2(j+J)*z2(.5),j2[4+C>>2]=z2(B+N)*z2(.5),j2[C>>2]=z2(S+V)*z2(.5),x<j2[X>>2]&&(v?(v=T2[f+116>>2],U=T2[(g=v+G|0)>>2],M=T2[g+4>>2],v=T2[4+(d=I=(R=Q<<4)+v|0)>>2],T2[g>>2]=T2[d>>2],T2[g+4>>2]=v,E=T2[(Z=g+8|0)>>2],g=T2[Z+4>>2],v=T2[4+(d=d+8|0)>>2],T2[Z>>2]=T2[d>>2],T2[Z+4>>2]=v,v=R+T2[f+116>>2]|0,T2[v>>2]=U,T2[v+4>>2]=M,T2[(v=v+8|0)>>2]=E,T2[v+4>>2]=g):(v=T2[f+76>>2],R=T2[(i=v+T|0)>>2],I=T2[4+i>>2],v=T2[4+(d=a=(E=Q<<6)+v|0)>>2],T2[i>>2]=T2[d>>2],T2[4+i>>2]=v,v=T2[4+(d=n=8+i|0)>>2],T2[(g=o=40+C|0)>>2]=T2[d>>2],T2[g+4>>2]=v,v=T2[4+(d=b=16+i|0)>>2],T2[(g=t=48+C|0)>>2]=T2[d>>2],T2[g+4>>2]=v,v=T2[4+(d=c=24+i|0)>>2],T2[(g=u=56+C|0)>>2]=T2[d>>2],T2[g+4>>2]=v,v=T2[4+(d=k=32+i|0)>>2],T2[(g=l=64+C|0)>>2]=T2[d>>2],T2[g+4>>2]=v,v=T2[4+(d=Z=40+i|0)>>2],T2[(g=s=72+C|0)>>2]=T2[d>>2],T2[g+4>>2]=v,v=T2[4+(d=M=48+i|0)>>2],T2[(g=U=80+C|0)>>2]=T2[d>>2],T2[g+4>>2]=v,v=T2[4+(i=56+i|0)>>2],T2[(d=g=88+C|0)>>2]=T2[i>>2],T2[d+4>>2]=v,v=T2[4+(d=8+a|0)>>2],T2[n>>2]=T2[d>>2],T2[4+n>>2]=v,v=T2[4+(d=16+a|0)>>2],T2[b>>2]=T2[d>>2],T2[4+b>>2]=v,v=T2[4+(d=24+a|0)>>2],T2[c>>2]=T2[d>>2],T2[4+c>>2]=v,v=T2[4+(d=32+a|0)>>2],T2[k>>2]=T2[d>>2],T2[4+k>>2]=v,v=T2[4+(d=40+a|0)>>2],T2[Z>>2]=T2[d>>2],T2[Z+4>>2]=v,v=T2[4+(d=48+a|0)>>2],T2[M>>2]=T2[d>>2],T2[M+4>>2]=v,v=T2[4+(d=56+a|0)>>2],T2[i>>2]=T2[d>>2],T2[4+i>>2]=v,T2[32+C>>2]=R,T2[36+C>>2]=I,v=T2[36+C>>2],E=E+T2[f+76>>2]|0,T2[E>>2]=T2[32+C>>2],T2[E+4>>2]=v,v=T2[g+4>>2],T2[(d=E+56|0)>>2]=T2[g>>2],T2[d+4>>2]=v,v=T2[U+4>>2],T2[(d=E+48|0)>>2]=T2[U>>2],T2[d+4>>2]=v,v=T2[4+s>>2],T2[(d=E+40|0)>>2]=T2[s>>2],T2[d+4>>2]=v,v=T2[4+l>>2],T2[(d=E+32|0)>>2]=T2[l>>2],T2[d+4>>2]=v,v=T2[4+u>>2],T2[(d=E+24|0)>>2]=T2[u>>2],T2[d+4>>2]=v,v=T2[4+t>>2],T2[(d=E+16|0)>>2]=T2[t>>2],T2[d+4>>2]=v,v=T2[4+o>>2],T2[(d=E+8|0)>>2]=T2[o>>2],T2[d+4>>2]=v),Q=Q+1|0),G=G+16|0,T=T- -64|0,y=y-1|0;);G=T2[f+56>>2];}if(M=(w>>1)+r|0,E=((-1^(v=(0|w)/3|0))+e|0)<=(0|Q),I=r+v|0,S2[f+60|0]?(d=v=T2[f+136>>2]+(G<<4)|0,g=(B=z2(z2(j2[f+20>>2]-j2[f+4>>2])*j2[f+36>>2]))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,$[d>>1]=65534&g,D=j2[f+40>>2],h=j2[f+8>>2],B=j2[f+24>>2],d=v,g=(Y=z2(z2(j2[f+28>>2]-j2[f+12>>2])*j2[f+44>>2]))<z2(4294967296)&Y>=z2(0)?~~Y>>>0:0,$[d+4>>1]=65534&g,d=(B=z2(D*z2(B-h)))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,$[v+2>>1]=65534&d):(v=T2[4+(R=f+20|0)>>2],g=T2[f+96>>2]+(G<<6)|0,T2[(d=g)>>2]=T2[R>>2],T2[d+4>>2]=v,v=T2[4+(d=R+8|0)>>2],T2[(g=g+8|0)>>2]=T2[d>>2],T2[g+4>>2]=v),E=E?M:Q,g=(0|Q)<=(0|I),v=T2[f+56>>2],S2[f+60|0]?(v=d=T2[f+136>>2]+(v<<4)|0,B=j2[f+4>>2],Q=(B=z2(z2(z2(B-B)*j2[f+36>>2])+z2(1)))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,$[v+6>>1]=1|Q,h=j2[f+40>>2],D=j2[f+8>>2],v=d+10|0,B=j2[f+12>>2],Q=(B=z2(z2(z2(B-B)*j2[f+44>>2])+z2(1)))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,$[v>>1]=1|Q,d=d+8|0,v=(B=z2(z2(h*z2(D-D))+z2(1)))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,$[d>>1]=1|v):(d=T2[f+96>>2]+(v<<6)|0,v=T2[4+(I=f+4|0)>>2],T2[d+16>>2]=T2[I>>2],T2[d+20>>2]=v,v=T2[4+(Q=I+8|0)>>2],T2[(d=d+24|0)>>2]=T2[Q>>2],T2[d+4>>2]=v),U=g?M:E,F)for(T=r<<4,y=r<<6|16,X=T2[f+56>>2],R=S2[f+60|0];R?(F=T2[f+116>>2]+T|0,x=j2[f+36>>2],W=j2[f+4>>2],v=(B=z2(z2(z2(z2(z2(A2[F>>1])/x)+W)-W)*x))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,Z=T2[f+136>>2]+(X<<4)|0,I=A2[Z>>1],m=j2[f+44>>2],Y=j2[f+12>>2],E=(B=z2(z2(z2(z2(z2(A2[F+4>>1])/m)+Y)-Y)*m))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,D=j2[f+40>>2],h=j2[f+8>>2],g=(B=z2(z2(z2(z2(z2(A2[F+2>>1])/D)+h)-h)*D))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,d=(B=z2(z2(m*z2(z2(z2(z2(A2[F+10>>1])/m)+Y)-Y))+z2(1)))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,M=65534&v,Q=(B=z2(z2(D*z2(z2(z2(z2(A2[F+8>>1])/D)+h)-h))+z2(1)))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,I=I>>>0<=M>>>0,v=(B=z2(z2(x*z2(z2(z2(z2(A2[F+6>>1])/x)+W)-W))+z2(1)))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,I||($[Z>>1]=M),(v|=1)>>>0>A2[Z+6>>1]&&($[Z+6>>1]=v),(v=65534&g)>>>0<A2[Z+2>>1]&&($[Z+2>>1]=v),(v=1|Q)>>>0>A2[(g=Z+8|0)>>1]&&($[g>>1]=v),(v=65534&E)>>>0<A2[Z+4>>1]&&($[Z+4>>1]=v),(v=1|d)>>>0<=A2[(Q=Z+10|0)>>1]||($[Q>>1]=v)):(v=T2[f+76>>2]+y|0,N=j2[v>>2],x=j2[v+12>>2],W=j2[v+8>>2],m=j2[v+4>>2],Y=j2[v-4>>2],D=j2[v-8>>2],h=j2[v-12>>2],B=j2[v-16>>2],Q=T2[f+96>>2]+(X<<6)|0,B<j2[Q>>2]&&(j2[Q>>2]=B),h<j2[Q+4>>2]&&(j2[Q+4>>2]=h),D<j2[Q+8>>2]&&(j2[Q+8>>2]=D),Y<j2[Q+12>>2]&&(j2[Q+12>>2]=Y),N>j2[Q+16>>2]&&(j2[Q+16>>2]=N),m>j2[(v=Q+20|0)>>2]&&(j2[v>>2]=m),W>j2[(v=Q+24|0)>>2]&&(j2[v>>2]=W),x>j2[(v=Q+28|0)>>2]&&(j2[v>>2]=x)),T=T+16|0,y=y- -64|0,w=w-1|0;);else X=T2[f+56>>2];if(T2[f+56>>2]=F=X+1|0,A(f,r,U),X=T2[f+56>>2],A(f,U,e),U=T2[f+56>>2]-p|0,(v=S2[f+60|0])&&!((0|U)<129)){if(M=T2[f+136>>2],I=-1<(0|(r=T2[12+(M+(X<<4)|0)>>2]))?1:0-r|0,(0|(g=-1<(0|(r=T2[12+(M+(F<<4)|0)>>2]))?1:0-r|0))<=128){if((0|(v=r=T2[f+152>>2]))==T2[f+156>>2]&&!((0|(Z=(v=r)?v<<1:1))<=(0|v))){if(y=0,Z&&(T2[5498]=T2[5498]+1,(e=K2(Z<<5|19))&&(T2[(y=e+19&-16)-4>>2]=e)),1<=(0|r))for(v=0,w=r;p=T2[f+160>>2]+v|0,e=T2[(E=p)+4>>2],T2[(Q=R=v+y|0)>>2]=T2[E>>2],T2[Q+4>>2]=e,e=T2[4+(Q=E+24|0)>>2],T2[(d=R+24|0)>>2]=T2[Q>>2],T2[d+4>>2]=e,e=T2[4+(Q=E+16|0)>>2],T2[(d=R+16|0)>>2]=T2[Q>>2],T2[d+4>>2]=e,e=T2[4+(Q=E+8|0)>>2],T2[(d=R+8|0)>>2]=T2[Q>>2],T2[d+4>>2]=e,v=v+32|0,w=w-1|0;);(e=T2[f+160>>2])&&S2[f+164|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[f+160>>2]=y,T2[f+156>>2]=Z,p2[f+164|0]=1,v=T2[f+152>>2];}T2[f+152>>2]=v+1,d=(w=r<<5)+T2[(Q=f+160|0)>>2]|0,r=T2[36+C>>2],T2[d>>2]=T2[32+C>>2],T2[d+4>>2]=r,r=T2[4+(e=56+C|0)>>2],T2[(v=d+24|0)>>2]=T2[e>>2],T2[v+4>>2]=r,r=T2[4+(e=48+C|0)>>2],T2[(v=d+16|0)>>2]=T2[e>>2],T2[v+4>>2]=r,r=T2[4+(e=40+C|0)>>2],T2[(v=d+8|0)>>2]=T2[e>>2],T2[v+4>>2]=r,e=w+T2[Q>>2]|0,$[e>>1]=A2[(r=M+(F<<4)|0)>>1],$[e+2>>1]=A2[r+2>>1],$[e+4>>1]=A2[r+4>>1],$[e+6>>1]=A2[r+6>>1],$[e+8>>1]=A2[r+8>>1],T2[e+16>>2]=g,T2[e+12>>2]=F,$[e+10>>1]=A2[r+10>>1];}if((0|I)<=128){if((0|(v=r=T2[f+152>>2]))==T2[f+156>>2]&&!((0|(F=(v=r)?v<<1:1))<=(0|v))){if(Q=0,F&&(T2[5498]=T2[5498]+1,(e=K2(F<<5|19))&&(T2[(Q=e+19&-16)-4>>2]=e)),1<=(0|r))for(v=0,w=r;p=T2[f+160>>2]+v|0,e=T2[(E=p)+4>>2],T2[(d=R=v+Q|0)>>2]=T2[E>>2],T2[d+4>>2]=e,e=T2[4+(d=E+24|0)>>2],T2[(g=R+24|0)>>2]=T2[d>>2],T2[g+4>>2]=e,e=T2[4+(d=E+16|0)>>2],T2[(g=R+16|0)>>2]=T2[d>>2],T2[g+4>>2]=e,e=T2[4+(d=E+8|0)>>2],T2[(g=R+8|0)>>2]=T2[d>>2],T2[g+4>>2]=e,v=v+32|0,w=w-1|0;);(e=T2[f+160>>2])&&S2[f+164|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[f+160>>2]=Q,T2[f+156>>2]=F,p2[f+164|0]=1,v=T2[f+152>>2];}T2[f+152>>2]=v+1,d=(w=r<<5)+T2[(Q=f+160|0)>>2]|0,r=T2[36+C>>2],T2[d>>2]=T2[32+C>>2],T2[d+4>>2]=r,r=T2[4+(e=56+C|0)>>2],T2[(v=d+24|0)>>2]=T2[e>>2],T2[v+4>>2]=r,r=T2[4+(e=48+C|0)>>2],T2[(v=d+16|0)>>2]=T2[e>>2],T2[v+4>>2]=r,r=T2[4+(e=40+C|0)>>2],T2[(v=d+8|0)>>2]=T2[e>>2],T2[v+4>>2]=r,e=w+T2[Q>>2]|0,$[e>>1]=A2[(r=M+(X<<4)|0)>>1],$[e+2>>1]=A2[r+2>>1],$[e+4>>1]=A2[r+4>>1],$[e+6>>1]=A2[r+6>>1],$[e+8>>1]=A2[r+8>>1],T2[e+16>>2]=I,T2[e+12>>2]=X,$[e+10>>1]=A2[r+10>>1];}T2[f+168>>2]=T2[f+152>>2],v=S2[f+60|0];}255&v?T2[12+(T2[f+136>>2]+(G<<4)|0)>>2]=0-U:T2[32+(T2[f+96>>2]+(G<<6)|0)>>2]=U;}else S2[f+60|0]?(r=T2[f+116>>2]+(r<<4)|0,v=T2[r+4>>2],e=T2[f+136>>2]+(p<<4)|0,T2[e>>2]=T2[r>>2],T2[e+4>>2]=v):(r=T2[f+76>>2]+(r<<6)|0,v=T2[(d=r)+4>>2],e=T2[f+96>>2]+(p<<6)|0,T2[e>>2]=T2[d>>2],T2[e+4>>2]=v,v=T2[4+(w=d+56|0)>>2],T2[(Q=e+56|0)>>2]=T2[w>>2],T2[Q+4>>2]=v,v=T2[4+(w=d+48|0)>>2],T2[(Q=e+48|0)>>2]=T2[w>>2],T2[Q+4>>2]=v,v=T2[4+(w=d+40|0)>>2],T2[(Q=e+40|0)>>2]=T2[w>>2],T2[Q+4>>2]=v,v=T2[4+(w=d+32|0)>>2],T2[(Q=e+32|0)>>2]=T2[w>>2],T2[Q+4>>2]=v,v=T2[4+(w=d+24|0)>>2],T2[(Q=e+24|0)>>2]=T2[w>>2],T2[Q+4>>2]=v,v=T2[4+(w=d+16|0)>>2],T2[(Q=e+16|0)>>2]=T2[w>>2],T2[Q+4>>2]=v),v=e+8|0,r=T2[4+(e=r+8|0)>>2],T2[v>>2]=T2[e>>2],T2[v+4>>2]=r,T2[f+56>>2]=T2[f+56>>2]+1;L2=112+C|0;})(A,T2[A+56>>2]=0,w),S2[A+60|0]&&(T2[A+152>>2]||(T2[A+156>>2]?(r=T2[A+160>>2],f=1):(r=0,T2[5498]=T2[5498]+(f=1),(e=K2(51))&&(T2[(r=e+19&-16)-4>>2]=e),(e=T2[A+160>>2])&&S2[A+164|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]),f=T2[A+152>>2]+1|0),T2[A+160>>2]=r,T2[A+156>>2]=1,p2[A+164|0]=1),T2[A+152>>2]=f,f=T2[12+c>>2],T2[r>>2]=T2[8+c>>2],T2[r+4>>2]=f,i=T2[(e=32+c|0)+4>>2],T2[(f=r+24|0)>>2]=T2[e>>2],T2[f+4>>2]=i,i=T2[(e=24+c|0)+4>>2],T2[(f=r+16|0)>>2]=T2[e>>2],T2[f+4>>2]=i,f=r+8|0,e=T2[(r=16+c|0)+4>>2],T2[f>>2]=T2[r>>2],T2[f+4>>2]=e,f=T2[A+160>>2],r=T2[A+136>>2],$[f>>1]=A2[r>>1],$[f+2>>1]=A2[r+2>>1],$[f+4>>1]=A2[r+4>>1],$[f+6>>1]=A2[r+6>>1],$[f+8>>1]=A2[r+8>>1],T2[f+12>>2]=0,e=T2[r+12>>2],T2[f+16>>2]=-1<(0|e)?1:0-e|0,$[f+10>>1]=A2[r+10>>1])),T2[A+168>>2]=T2[A+152>>2],(f=T2[A+116>>2])&&S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+116>>2]=0,p2[A+120|0]=1,T2[(f=A+108|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+76>>2])&&S2[A+80|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+76>>2]=0,p2[A+80|0]=1,T2[(A=A+68|0)>>2]=0,T2[A+4>>2]=0,L2=112+c|0;}function C0(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o,b=0,t=0,c=z2(0),u=z2(0),k=z2(0),l=0,s=z2(0);L2=t=L2-80|0,l=T2[A+4>>2],n1[T2[T2[l>>2]+16>>2]](l,28+t|0,24+t|0,20+t|0,16+t|0,12+t|0,8+t|0,4+t|0,t,f),l=(e=T2[A+4>>2])+12|0,i=T2[12+t>>2]+P2(T2[8+t>>2],r)|0,a=T2[16+t>>2],n=T2[28+t>>2],o=T2[20+t>>2];A:{f:{r:{e:{i:{a:{n:{if(3!=T2[t>>2]){if(b=P2(T2[8+i>>2],a)+n|0,o)break n;k=z2(j2[b+4>>2]*j2[e+8>>2]),u=z2(j2[b>>2]*j2[e+4>>2]),c=j2[e+12>>2],b=b+8|0;break a;}if(b=P2(A2[4+i>>1],a)+n|0,b=o?(k=z2(j2[e+8>>2]*z2(X[b+8>>3])),u=z2(j2[e+4>>2]*z2(X[b>>3])),c=z2(X[b+16>>3]),l):(k=z2(j2[b+4>>2]*j2[e+8>>2]),u=z2(j2[b>>2]*j2[e+4>>2]),c=j2[e+12>>2],b+8|0),s=j2[b>>2],T2[76+t>>2]=0,j2[68+t>>2]=k,j2[72+t>>2]=s*c,j2[64+t>>2]=u,b=P2(A2[2+i>>1],a)+n|0,!o)break i;k=z2(j2[e+8>>2]*z2(X[b+8>>3])),u=z2(j2[e+4>>2]*z2(X[b>>3])),c=z2(X[b+16>>3]),b=l;break e;}k=z2(j2[e+8>>2]*z2(X[b+8>>3])),u=z2(j2[e+4>>2]*z2(X[b>>3])),c=z2(X[b+16>>3]),b=l;}if(s=j2[b>>2],T2[76+t>>2]=0,j2[68+t>>2]=k,j2[72+t>>2]=s*c,j2[64+t>>2]=u,b=P2(T2[4+i>>2],a)+n|0,!o)break r;k=z2(j2[e+8>>2]*z2(X[b+8>>3])),u=z2(j2[e+4>>2]*z2(X[b>>3])),c=z2(X[b+16>>3]),b=l;break f;}k=z2(j2[b+4>>2]*j2[e+8>>2]),u=z2(j2[b>>2]*j2[e+4>>2]),c=j2[e+12>>2],b=b+8|0;}s=j2[b>>2],T2[60+t>>2]=0,j2[52+t>>2]=k,j2[56+t>>2]=s*c,j2[48+t>>2]=u,b=P2(A2[i>>1],a)+n|0,c=o?(k=z2(j2[e+8>>2]*z2(X[b+8>>3])),u=z2(j2[e+4>>2]*z2(X[b>>3])),z2(X[b+16>>3])):(l=b+8|0,k=z2(j2[b+4>>2]*j2[e+8>>2]),u=z2(j2[b>>2]*j2[e+4>>2]),j2[e+12>>2]),s=j2[l>>2],j2[32+t>>2]=u,c=z2(s*c);break A;}k=z2(j2[b+4>>2]*j2[e+8>>2]),u=z2(j2[b>>2]*j2[e+4>>2]),c=j2[e+12>>2],b=b+8|0;}s=j2[b>>2],T2[60+t>>2]=0,j2[52+t>>2]=k,j2[56+t>>2]=s*c,j2[48+t>>2]=u,b=P2(T2[i>>2],a)+n|0,c=o?(k=z2(j2[e+8>>2]*z2(X[b+8>>3])),u=z2(j2[e+4>>2]*z2(X[b>>3])),z2(X[b+16>>3])):(l=b+8|0,k=z2(j2[b+4>>2]*j2[e+8>>2]),u=z2(j2[b>>2]*j2[e+4>>2]),j2[e+12>>2]),s=j2[l>>2],j2[32+t>>2]=u,c=z2(s*c);}T2[44+t>>2]=0,j2[40+t>>2]=c,j2[36+t>>2]=k,l=T2[A+8>>2],n1[T2[T2[l>>2]+8>>2]](l,32+t|0,f,r),A=T2[A+4>>2],n1[T2[T2[A>>2]+24>>2]](A,f),L2=80+t|0;}function E0(A,f,r,e){}function D0(A,f,r){return 0;}function h0(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a=z2(n1[T2[T2[A>>2]+48>>2]](A)),n=z2(n1[T2[T2[A>>2]+48>>2]](A)),o=z2(n1[T2[T2[A>>2]+48>>2]](A)),b=j2[(A=f+52|0)>>2],t=j2[(i=f+56|0)>>2],c=j2[f+48>>2];T2[r+12>>2]=0,j2[r+8>>2]=t-o,j2[r+4>>2]=b-n,j2[r>>2]=c-a,b=j2[A>>2],t=j2[i>>2],c=j2[f+48>>2],T2[e+12>>2]=0,j2[e+8>>2]=o+t,j2[e+4>>2]=n+b,j2[e>>2]=a+c;}function Z0(A){return T2[(A|=0)+16>>2];}function Y0(A){return T2[(A|=0)+8>>2];}function R0(A,f,r,e){n1[T2[T2[(A|=0)>>2]+8>>2]](A,f|=0,r|=0,e|=0);}function F0(A,f){n1[T2[T2[(A|=0)>>2]+64>>2]](A,f|=0);}function W0(A,f){var r,e,i,a=z2(0),n=z2(0),o=0,b=z2(0),t=z2(0),c=z2(0),u=0,k=z2(0),l=z2(0),s=z2(0),v=z2(0),d=z2(0),B=z2(0),Q=z2(0),g=z2(0),w=z2(0),G=z2(0),C=z2(0),E=z2(0);A:{f:{r:{e:{i:{if(4==(0|(o=T2[A+844>>2]))){if(c=j2[f>>2],u=(o=(a=j2[A+84>>2])<(b=j2[f+80>>2]))?0:-1,e=(o=(n=j2[A+292>>2])<(a=o?a:b))?1:u,b=j2[A+500>>2],!(o=(u=j2[A+708>>2]<((o=b<(a=o?n:a))?b:a))?3:o?2:e)){k=j2[A+636>>2],g=j2[A+428>>2],n=z2(k-g),s=j2[A+632>>2],w=j2[A+424>>2],t=z2(s-w),G=j2[A+628>>2],C=j2[A+420>>2],l=z2(G-C),E=j2[A+220>>2],v=j2[A+216>>2],d=j2[A+212>>2],a=j2[f+8>>2],b=j2[f+4>>2];break i;}if(d=j2[A+212>>2],B=z2(c-d),s=j2[A+632>>2],w=j2[A+424>>2],t=z2(s-w),b=j2[f+4>>2],v=j2[A+216>>2],a=z2(b-v),G=j2[A+628>>2],C=j2[A+420>>2],l=z2(G-C),n=z2(z2(B*t)-z2(a*l)),i=z2(n*n),k=j2[A+636>>2],g=j2[A+428>>2],n=z2(k-g),r=z2(a*n),a=j2[f+8>>2],E=j2[A+220>>2],Q=z2(a-E),r=z2(r-z2(Q*t)),B=z2(z2(Q*l)-z2(B*n)),B=z2(i+z2(z2(r*r)+z2(B*B))),1!=(0|o))break i;c=z2(c-j2[A+4>>2]),a=z2(a-j2[A+12>>2]),b=z2(b-j2[A+8>>2]),l=z2(0);break e;}T2[A+844>>2]=o+1;break A;}if(c=z2(c-j2[A+4>>2]),b=z2(b-j2[A+8>>2]),Q=z2(z2(c*t)-z2(b*l)),a=z2(a-j2[A+12>>2]),t=z2(z2(b*n)-z2(a*t)),n=z2(z2(a*l)-z2(c*n)),l=z2(z2(Q*Q)+z2(z2(t*t)+z2(n*n))),n=z2(0),2==(0|o))break r;}if(n=z2(s-v),t=z2(G-d),s=z2(z2(c*n)-z2(b*t)),k=z2(k-E),n=z2(z2(b*k)-z2(a*n)),Q=z2(n*n),n=z2(z2(a*t)-z2(c*k)),n=z2(z2(s*s)+z2(Q+z2(n*n))),t=z2(0),u)break f;}t=z2(w-v),v=z2(C-d),d=z2(z2(c*t)-z2(b*v)),k=b,b=z2(g-E),t=z2(z2(k*b)-z2(a*t)),a=z2(z2(a*v)-z2(c*b)),t=z2(z2(d*d)+z2(z2(t*t)+z2(a*a)));}u=(o=(a=z2(O2(B)))>z2(-0xde0b6b000000000))?0:-1,b=z2(O2(l)),u=(o=(a=o?a:z2(-0xde0b6b000000000))<b)?1:u,o=(a=o?b:a)<(n=z2(O2(n))),o=z2(O2(t))>(o?n:a)?3:o?2:u;}return $2(4+((u=A)+P2(A=0<(0|o)?o:0,208)|0)|0,f,208),A;}function m0(A,f,r){var e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q=0,g=z2(0),w=z2(0),G=z2(0),C=0,E=0,D=(z2(0));if(1<=(0|(C=T2[A+844>>2]))){for(E=C+1|0,Q=(P2(C,208)+A|0)-204|0;a=j2[f+48>>2],b=j2[f+8>>2],t=j2[f+4>>2],c=j2[f>>2],n=j2[f+52>>2],u=j2[f+24>>2],e=j2[f+20>>2],k=j2[f+16>>2],g=j2[f+56>>2],w=j2[f+40>>2],G=j2[f+36>>2],o=j2[f+32>>2],T2[Q+60>>2]=0,D=g,g=j2[Q>>2],l=G,G=j2[Q+4>>2],i=w,w=j2[Q+8>>2],o=z2(D+z2(z2(z2(o*g)+z2(l*G))+z2(i*w))),j2[Q+56>>2]=o,n=z2(n+z2(z2(z2(g*k)+z2(G*e))+z2(w*u))),j2[Q+52>>2]=n,a=z2(a+z2(z2(z2(g*c)+z2(G*t))+z2(w*b))),j2[Q+48>>2]=a,b=j2[r+56>>2],t=j2[r+40>>2],c=j2[r+32>>2],u=j2[r+36>>2],e=j2[r+52>>2],k=j2[r+24>>2],v=j2[r+16>>2],d=j2[r+20>>2],g=j2[r+48>>2],w=j2[r+8>>2],G=j2[r>>2],i=j2[r+4>>2],T2[Q+44>>2]=0,D=g,g=j2[Q+16>>2],B=z2(G*g),G=j2[Q+20>>2],l=w,w=j2[Q+24>>2],i=z2(D+z2(z2(B+z2(i*G))+z2(l*w))),j2[Q+32>>2]=i,e=z2(e+z2(z2(z2(g*v)+z2(G*d))+z2(w*k))),j2[Q+36>>2]=e,g=z2(b+z2(z2(z2(g*c)+z2(G*u))+z2(w*t))),j2[Q+40>>2]=g,j2[Q+80>>2]=z2(z2(z2(a-i)*j2[Q- -64>>2])+z2(z2(n-e)*j2[Q+68>>2]))+z2(z2(o-g)*j2[Q+72>>2]),T2[(s=Q+164|0)>>2]=T2[s>>2]+1,Q=Q-208|0,1<(0|(E=E-1|0)););for(Q=(P2(C,208)+A|0)-204|0;C=(f=C)-1|0,(g=j2[Q+80>>2])<=(G=j2[A+848>>2])?(w=z2(j2[Q+32>>2]-z2(j2[Q+48>>2]-z2(j2[Q- -64>>2]*g))),D=z2(w*w),w=z2(j2[Q+36>>2]-z2(j2[Q+52>>2]-z2(g*j2[Q+68>>2]))),g=z2(j2[Q+40>>2]-z2(j2[Q+56>>2]-z2(g*j2[Q+72>>2]))),z2(z2(D+z2(w*w))+z2(g*g))>z2(G*G)&&(f=(0|(r=f))!=(0|(f=T2[(E=A)+844>>2]))?($2(Q,(f=P2(f-1|0,208)+A|0)+4|0,208),T2[f+168>>2]=0,T2[f+120>>2]=0,T2[(r=f+132|0)>>2]=0,T2[r+4>>2]=0,T2[(f=f+140|0)>>2]=0,T2[f+4>>2]=0,T2[A+844>>2]-1|0):C,T2[E+844>>2]=f)):(f=(0|(r=f))!=(0|(f=T2[(E=A)+844>>2]))?($2(Q,(f=P2(f-1|0,208)+A|0)+4|0,208),T2[f+168>>2]=0,T2[f+120>>2]=0,T2[(r=f+132|0)>>2]=0,T2[r+4>>2]=0,T2[(f=f+140|0)>>2]=0,T2[f+4>>2]=0,T2[A+844>>2]-1|0):C,T2[E+844>>2]=f),Q=Q-208|0,1<(C+1|0););}}function N0(A){var f,r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g=0,w=0,G=0,C=0,E=z2(0),D=z2(0),h=0,Z=0,Y=z2(0),R=z2(0),F=z2(0),W=z2(0),m=z2(0),N=z2(0),V=0,J=0,M=0,I=0,x=0,y=z2(0),U=z2(0),X=0,p=z2(0),T=z2(0),S=0,j=0,P=z2(0),z=(z2(0)),O=z2(0),H=0,_=z2(0),L=(z2(0));L2=h=L2+-64|0;A:if(S2[A+356|0]){p2[A+356|0]=0,p2[0|(Z=A+352|0)]=0,T2[(w=I=A+344|0)>>2]=0,T2[w+4>>2]=0,T2[(w=H=A+336|0)>>2]=0,T2[w+4>>2]=0,w=S2[0|(g=A+332|0)],p2[0|g]=M=-16&w,g=A+316|0;f:{r:{e:switch(T2[A>>2]){case 1:G=T2[A+168>>2],T2[A+260>>2]=T2[A+164>>2],T2[A+264>>2]=G,G=T2[A+88>>2],T2[A+244>>2]=T2[A+84>>2],T2[A+248>>2]=G,G=T2[(w=A+172|0)+4>>2],T2[(g=C=A+268|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=A+92|0)+4>>2],T2[(g=A+252|0)>>2]=T2[w>>2],T2[g+4>>2]=G,p2[0|Z]=0,T2[A+288>>2]=0,j2[A+280>>2]=j2[A+248>>2]-j2[A+264>>2],j2[A+276>>2]=j2[A+244>>2]-j2[A+260>>2],j2[A+284>>2]=j2[g>>2]-j2[C>>2],T2[I>>2]=0,T2[I+4>>2]=0,T2[A+336>>2]=1065353216,T2[A+340>>2]=0,p2[A+332|0]=M,p2[A+312|0]=G=1;break A;case 2:R=j2[(C=A)+4>>2],W=z2(j2[A+20>>2]-R),Y=j2[A+8>>2],m=z2(j2[A+24>>2]-Y),E=j2[A+12>>2],F=z2(j2[A+28>>2]-E),G=(E=z2(z2(z2(z2(z2(0)-R)*W)+z2(z2(z2(0)-Y)*m))+z2(z2(z2(0)-E)*F)))>z2(0)?E<(D=z2(z2(z2(W*W)+z2(m*m))+z2(F*F)))?(D=z2(E/D),3|M):(D=z2(1),2|M):1|M,p2[C+332|0]=G,T2[(w=A+344|0)>>2]=0,T2[w+4>>2]=0,j2[A+340>>2]=D,N=z2(z2(1)-D),j2[A+336>>2]=N,T2[A+256>>2]=0,E=j2[A+92>>2],R=z2(E+z2(D*z2(j2[A+108>>2]-E))),j2[A+252>>2]=R,E=j2[A+88>>2],W=z2(E+z2(D*z2(j2[A+104>>2]-E))),j2[A+248>>2]=W,E=j2[A+84>>2],m=z2(E+z2(D*z2(j2[A+100>>2]-E))),j2[A+244>>2]=m,F=j2[A+180>>2],Y=j2[A+184>>2],z=j2[A+168>>2],E=j2[A+188>>2],O=j2[A+172>>2],y=j2[A+164>>2],T2[A+288>>2]=0,U=R,R=z2(O+z2(D*z2(E-O))),j2[A+284>>2]=U-R,Y=z2(z+z2(D*z2(Y-z))),j2[A+280>>2]=W-Y,E=z2(y+z2(D*z2(F-y))),j2[A+276>>2]=m-E,T2[A+272>>2]=0,j2[A+268>>2]=R,j2[A+264>>2]=Y,j2[A+260>>2]=E,J=1,2&G||(T2[A>>2]=1,J=0),1&G||(T2[A>>2]=J,M=T2[(G=(x=(J<<4)+A|0)+12|0)>>2],I=T2[G+4>>2],H=T2[(G=x+4|0)>>2],Z=T2[G+4>>2],G=T2[(w=x+84|0)+4>>2],T2[(g=C=A+84|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=x+92|0)+4>>2],T2[(g=g+8|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=x+164|0)+4>>2],T2[(g=C=A+164|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=x+172|0)+4>>2],T2[(g=g+8|0)>>2]=T2[w>>2],T2[g+4>>2]=G,T2[(G=A+4|0)>>2]=H,T2[G+4>>2]=Z,T2[(G=G+8|0)>>2]=M,T2[G+4>>2]=I),G=N>=z2(0)&D>=z2(0),p2[A+312|0]=G;break A;case 3:T2[(G=32+h|0)>>2]=0,T2[G+4>>2]=0,T2[24+h>>2]=0,V0(24+h|(T2[28+h>>2]=0),X=A+4|0,S=A+20|0,j=A+36|0,g),T2[A+256>>2]=0,P=j2[A+336>>2],p=j2[A+340>>2],T=j2[I>>2],_=z2(z2(z2(P*j2[A+92>>2])+z2(p*j2[A+108>>2]))+z2(T*j2[A+124>>2])),j2[A+252>>2]=_,z=z2(z2(z2(P*j2[A+88>>2])+z2(p*j2[A+104>>2]))+z2(T*j2[A+120>>2])),j2[A+248>>2]=z,x=A+100|0,M=A+116|0,O=z2(z2(z2(P*j2[A+84>>2])+z2(p*j2[x>>2]))+z2(T*j2[M>>2])),j2[A+244>>2]=O,y=j2[(I=A+180|0)>>2],N=j2[(Z=A+196|0)>>2],W=j2[A+168>>2],m=j2[A+184>>2],F=j2[A+200>>2],R=j2[A+172>>2],Y=j2[A+188>>2],E=j2[A+204>>2],D=j2[A+164>>2],T2[A+288>>2]=0,Y=z2(z2(z2(P*R)+z2(p*Y))+z2(T*E)),j2[A+284>>2]=_-Y,E=z2(z2(z2(P*W)+z2(p*m))+z2(T*F)),j2[A+280>>2]=z-E,D=z2(z2(z2(P*D)+z2(p*y))+z2(T*N)),j2[A+276>>2]=O-D,T2[A+272>>2]=0,j2[A+268>>2]=Y,j2[A+264>>2]=E,j2[A+260>>2]=D;i:{a:{n:{o:{b:{if(4<=(0|(w=T2[A>>2])))8&(J=S2[A+332|0])?G=w:(w=T2[(g=(V=((G=w-1|0)<<4)+A|0)+12|0)+4>>2],T2[(C=A+60|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=V+4|0)+4>>2],T2[(C=A+52|0)>>2]=T2[g>>2],T2[C+4>>2]=w,T2[A>>2]=G,w=T2[(g=V+84|0)+4>>2],T2[(C=A+132|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=V+92|0)+4>>2],T2[(C=A+140|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=V+164|0)+4>>2],T2[(C=A+212|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=V+172|0)+4>>2],T2[(C=A+220|0)>>2]=T2[g>>2],T2[C+4>>2]=w);else {if((G=3)!=(0|w))break b;J=S2[A+332|0];}if(4&J)break o;T2[A>>2]=G=G-1|0,w=T2[(g=(V=(G<<4)+A|0)+12|0)+4>>2],T2[(C=j+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=V+4|0)+4>>2],T2[j>>2]=T2[g>>2],T2[j+4>>2]=w,w=T2[(g=V+92|0)+4>>2],T2[(C=M+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=V+84|0)+4>>2],T2[M>>2]=T2[g>>2],T2[M+4>>2]=w,w=T2[(g=V+164|0)+4>>2],T2[Z>>2]=T2[g>>2],T2[Z+4>>2]=w,w=T2[(g=V+172|0)+4>>2],T2[(C=Z+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w;break o;}if((0|w)<(G=2))break n;J=S2[A+332|0];}if(2&J)break a;T2[A>>2]=G=G-1|0,w=T2[(g=(Z=(G<<4)+A|0)+12|0)+4>>2],T2[(C=S+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=Z+4|0)+4>>2],T2[S>>2]=T2[g>>2],T2[S+4>>2]=w,w=T2[(g=Z+92|0)+4>>2],T2[(C=x+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=Z+84|0)+4>>2],T2[x>>2]=T2[g>>2],T2[x+4>>2]=w,w=T2[(g=Z+164|0)+4>>2],T2[I>>2]=T2[g>>2],T2[I+4>>2]=w,w=T2[(g=Z+172|0)+4>>2],T2[(C=I+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w;break a;}if((G=1)!=(0|w))break i;J=S2[A+332|0];}1&J||(T2[A>>2]=G=G-1|0,G=T2[(w=(Z=(G<<4)+A|0)+12|0)+4>>2],T2[(g=X+8|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=Z+4|0)+4>>2],T2[X>>2]=T2[w>>2],T2[X+4>>2]=G,G=T2[(w=Z+92|0)+4>>2],T2[(g=(C=A+84|0)+8|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=Z+84|0)+4>>2],T2[C>>2]=T2[w>>2],T2[C+4>>2]=G,G=T2[(w=Z+164|0)+4>>2],T2[(g=C=A+164|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=Z+172|0)+4>>2],T2[(g=g+8|0)>>2]=T2[w>>2],T2[g+4>>2]=G);}if(!(j2[H>>2]>=z2(G=0)))break f;if(!(p>=z2(0)))break f;if(!(T>=z2(0)))break f;G=j2[A+348>>2]>=z2(0),p2[A+312|0]=G;break A;case 0:break f;case 4:break e;default:break r;}if(T2[(G=16+h|0)>>2]=0,T2[G+4>>2]=0,T2[8+h>>2]=0,T2[12+h>>2]=0,T2[g>>2]=0,T2[g+4>>2]=0,T2[(G=g+8|0)>>2]=0,T2[G+4>>2]=0,p2[A+332|0]=15|w,p2[40+h|0]=0,a=j2[A+12>>2],d=z2(z2(0)-a),n=j2[A+28>>2],o=z2(n-a),F=j2[(r=A+36|0)>>2],b=j2[A+4>>2],t=z2(F-b),R=j2[A+56>>2],c=j2[A+8>>2],N=z2(R-c),E=j2[A+40>>2],u=z2(E-c),D=j2[(e=A+52|0)>>2],k=z2(D-b),L=z2(z2(t*N)-z2(u*k)),l=j2[(i=A+20|0)>>2],s=z2(l-b),p=j2[A+60>>2],f=z2(p-a),Y=j2[A+44>>2],W=z2(Y-a),T=z2(z2(u*f)-z2(W*N)),v=j2[A+24>>2],m=z2(v-c),P=z2(z2(W*k)-z2(t*f)),B=z2(z2(o*L)+z2(z2(s*T)+z2(m*P))),_=z2(z2(m*W)-z2(o*u)),z=z2(z2(o*t)-z2(s*W)),O=z2(z2(s*u)-z2(m*t)),Q=z2(z2(z2(_*k)+z2(z*N))+z2(O*f)),y=z2(z2(m*k)-z2(s*N)),U=z2(W*y),N=z2(z2(o*N)-z2(m*f)),W=z2(z2(s*f)-z2(o*k)),f=z2(U+z2(z2(t*N)+z2(u*W))),E=z2(E-v),m=z2(D-l),F=z2(F-l),D=z2(R-v),R=z2(z2(E*m)-z2(F*D)),Y=z2(Y-n),U=z2(Y*D),D=z2(p-n),E=z2(U-z2(E*D)),D=z2(z2(F*D)-z2(Y*m)),m=z2(z2(z2(a-n)*R)+z2(z2(z2(b-l)*E)+z2(z2(c-v)*D))),C=z2(m*m)<z2(9.99999905104687e-9)?-1:z2(z2(z2(z2(z2(0)-n)*R)+z2(z2(z2(z2(0)-l)*E)+z2(z2(z2(0)-v)*D)))*m)<z2(0),F=z2(z2(0)-b),Y=z2(z2(0)-c),(0|(G=C|(g=z2(B*B)<z2(9.99999905104687e-9)?-1:z2(z2(z2(d*L)+z2(z2(F*T)+z2(Y*P)))*B)<z2(0))|(w=z2(Q*Q)<z2(9.99999905104687e-9)?-1:z2(z2(z2(z2(F*_)+z2(Y*z))+z2(O*d))*Q)<z2(0))|(Z=z2(f*f)<z2(9.99999905104687e-9)?-1:z2(z2(z2(d*y)+z2(z2(F*N)+z2(Y*W)))*f)<z2(0))))<=-1)p2[A+352|0]=1;else {if(G){V=A+4|0,D=z2(34028234663852886e22),w&&(V0(8+h|0,V,i,r,24+h|0),F=j2[24+h>>2],E=z2(F-j2[8+h>>2]),D=z2(E*E),R=j2[28+h>>2],E=z2(R-j2[12+h>>2]),D=z2(D+z2(E*E)),Y=j2[32+h>>2],E=z2(Y-j2[16+h>>2]),E=z2(D+z2(E*E)),D=z2(34028234663852886e22),E<z2(34028234663852886e22)&&(j2[A+316>>2]=F,G=T2[48+h>>2],T2[A+336>>2]=T2[44+h>>2],T2[A+340>>2]=G,j2[A+328>>2]=j2[36+h>>2],j2[A+324>>2]=Y,j2[A+320>>2]=R,T2[A+348>>2]=0,j2[A+344>>2]=j2[52+h>>2],G=S2[40+h|0],p2[A+332|0]=1&G|240&S2[A+332|0]|2&G|4&G,D=E)),g&&(V0(8+h|0,V,r,e,24+h|0),F=j2[24+h>>2],E=z2(F-j2[8+h>>2]),U=z2(E*E),R=j2[28+h>>2],E=z2(R-j2[12+h>>2]),U=z2(U+z2(E*E)),Y=j2[32+h>>2],E=z2(Y-j2[16+h>>2]),(E=z2(U+z2(E*E)))<D&&(j2[A+316>>2]=F,j2[A+336>>2]=j2[44+h>>2],j2[A+328>>2]=j2[36+h>>2],j2[A+324>>2]=Y,j2[A+320>>2]=R,T2[A+340>>2]=0,G=T2[(w=48+h|0)+4>>2],T2[(g=A+344|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=S2[40+h|0],p2[A+332|0]=8&(w=G<<1)|(4&w|(1&G|240&S2[A+332|0])),D=E)),Z&&(V0(8+h|0,V,e,i,24+h|0),F=j2[24+h>>2],E=z2(F-j2[8+h>>2]),U=z2(E*E),R=j2[28+h>>2],E=z2(R-j2[12+h>>2]),U=z2(U+z2(E*E)),Y=j2[32+h>>2],E=z2(Y-j2[16+h>>2]),(E=z2(U+z2(E*E)))<D&&(j2[A+316>>2]=F,j2[A+336>>2]=j2[44+h>>2],j2[A+328>>2]=j2[36+h>>2],j2[A+324>>2]=Y,j2[A+320>>2]=R,T2[A+344>>2]=0,j2[A+348>>2]=j2[48+h>>2],j2[A+340>>2]=j2[52+h>>2],G=S2[40+h|0],p2[A+332|0]=1&G|240&S2[A+332|0]|G>>>1&2|G<<2&8,D=E)),C&&(V0(8+h|0,i,e,r,24+h|0),U=D,R=j2[24+h>>2],D=z2(R-j2[8+h>>2]),E=z2(D*D),Y=j2[28+h>>2],D=z2(Y-j2[12+h>>2]),L=z2(E+z2(D*D)),E=j2[32+h>>2],D=z2(E-j2[16+h>>2]),U>z2(L+z2(D*D))&&(j2[A+316>>2]=R,T2[A+336>>2]=0,j2[A+328>>2]=j2[36+h>>2],j2[A+324>>2]=E,j2[A+320>>2]=Y,j2[A+340>>2]=j2[44+h>>2],j2[A+348>>2]=j2[48+h>>2],j2[A+344>>2]=j2[52+h>>2],G=S2[40+h|0],p2[A+332|0]=4&G|240&S2[A+332|0]|G<<1&2|G<<2&8)),T2[A+256>>2]=0,N=j2[A+336>>2],W=j2[A+340>>2],D=j2[A+344>>2],y=j2[A+348>>2],m=z2(z2(z2(z2(N*j2[A+92>>2])+z2(W*j2[A+108>>2]))+z2(D*j2[A+124>>2]))+z2(y*j2[A+140>>2])),j2[A+252>>2]=m,F=z2(z2(z2(z2(N*j2[A+88>>2])+z2(W*j2[A+104>>2]))+z2(D*j2[A+120>>2]))+z2(y*j2[A+136>>2])),j2[A+248>>2]=F,S=A+100|0,j=A+116|0,x=A+132|0,R=z2(z2(z2(z2(N*j2[A+84>>2])+z2(W*j2[S>>2]))+z2(D*j2[j>>2]))+z2(y*j2[x>>2])),j2[A+244>>2]=R,T2[A+288>>2]=0,M=A+180|(T2[A+272>>2]=0),I=A+196|0,Z=A+212|0,Y=z2(z2(z2(z2(N*j2[A+164>>2])+z2(W*j2[M>>2]))+z2(D*j2[I>>2]))+z2(y*j2[Z>>2])),j2[A+260>>2]=Y,E=z2(z2(z2(z2(N*j2[A+168>>2])+z2(W*j2[A+184>>2]))+z2(D*j2[A+200>>2]))+z2(y*j2[A+216>>2])),j2[A+264>>2]=E,D=z2(z2(z2(z2(N*j2[A+172>>2])+z2(W*j2[A+188>>2]))+z2(D*j2[A+204>>2]))+z2(y*j2[A+220>>2])),j2[A+268>>2]=D,j2[A+276>>2]=R-Y,j2[A+280>>2]=F-E,j2[A+284>>2]=m-D;e:{i:{a:{n:{o:{if(4<=(0|(w=T2[A>>2])))8&(J=S2[A+332|0])?G=w:(w=T2[(g=(X=((G=w-1|0)<<4)+A|0)+12|0)+4>>2],T2[(C=8+e|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=X+4|0)+4>>2],T2[e>>2]=T2[g>>2],T2[4+e>>2]=w,T2[A>>2]=G,w=T2[(g=X+84|0)+4>>2],T2[x>>2]=T2[g>>2],T2[x+4>>2]=w,w=T2[(g=X+92|0)+4>>2],T2[(C=x+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=X+164|0)+4>>2],T2[Z>>2]=T2[g>>2],T2[Z+4>>2]=w,w=T2[(g=X+172|0)+4>>2],T2[(C=Z+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w);else {if((G=3)!=(0|w))break o;J=S2[A+332|0];}if(4&J)break n;T2[A>>2]=G=G-1|0,w=T2[(g=(Z=(G<<4)+A|0)+12|0)+4>>2],T2[(C=8+r|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=Z+4|0)+4>>2],T2[r>>2]=T2[g>>2],T2[4+r>>2]=w,w=T2[(g=Z+92|0)+4>>2],T2[(C=j+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=Z+84|0)+4>>2],T2[j>>2]=T2[g>>2],T2[j+4>>2]=w,w=T2[(g=Z+164|0)+4>>2],T2[I>>2]=T2[g>>2],T2[I+4>>2]=w,w=T2[(g=Z+172|0)+4>>2],T2[(C=I+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w;break n;}if((0|w)<(G=2))break a;J=S2[A+332|0];}if(2&J)break i;T2[A>>2]=G=G-1|0,w=T2[(g=(Z=(G<<4)+A|0)+12|0)+4>>2],T2[(C=8+i|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=Z+4|0)+4>>2],T2[i>>2]=T2[g>>2],T2[4+i>>2]=w,w=T2[(g=Z+92|0)+4>>2],T2[(C=S+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w,w=T2[(g=Z+84|0)+4>>2],T2[S>>2]=T2[g>>2],T2[S+4>>2]=w,w=T2[(g=Z+164|0)+4>>2],T2[M>>2]=T2[g>>2],T2[M+4>>2]=w,w=T2[(g=Z+172|0)+4>>2],T2[(C=M+8|0)>>2]=T2[g>>2],T2[C+4>>2]=w;break i;}if((G=1)!=(0|w))break e;J=S2[A+332|0];}1&J||(T2[A>>2]=G=G-1|0,G=T2[(w=(Z=(G<<4)+A|0)+12|0)+4>>2],T2[(g=V+8|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=Z+4|0)+4>>2],T2[V>>2]=T2[w>>2],T2[V+4>>2]=G,G=T2[(w=Z+92|0)+4>>2],T2[(g=(C=A+84|0)+8|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=Z+84|0)+4>>2],T2[C>>2]=T2[w>>2],T2[C+4>>2]=G,G=T2[(w=Z+164|0)+4>>2],T2[(g=C=A+164|0)>>2]=T2[w>>2],T2[g+4>>2]=G,G=T2[(w=Z+172|0)+4>>2],T2[(g=g+8|0)>>2]=T2[w>>2],T2[g+4>>2]=G);}if(!(j2[H>>2]>=z2(G=0)))break f;if(!(j2[A+340>>2]>=z2(0)))break f;if(!(j2[A+344>>2]>=z2(0)))break f;G=y>=z2(0),p2[A+312|0]=G;break A;}if(!S2[A+352|0]){T2[A+276>>2]=0,T2[A+280>>2]=0,p2[A+312|0]=G=1,T2[(A=A+284|0)>>2]=0,T2[A+4>>2]=0;break A;}}}G=0;}p2[A+312|0]=0;}else G=S2[A+312|0];return L2=h+64|0,0!=(255&G);}function V0(A,f,r,e,i){var a,n,o,b,t,c,u,k,l,s,v,d,B,Q=z2(0),g=z2(0),w=z2(0),G=z2(0),C=z2(0),E=(z2(0)),D=(z2(0)),h=z2(0),Z=z2(0),Y=z2(0),R=z2(0),F=z2(0),W=(-16&S2[i+16|0]);p2[i+16|0]=W,s=j2[e>>2],n=j2[f>>2],c=z2(s-n),a=j2[A>>2],Q=z2(a-n),v=j2[e+4>>2],o=j2[f+4>>2],u=z2(v-o),G=j2[A+4>>2],g=z2(G-o),d=j2[e+8>>2],b=j2[f+8>>2],k=z2(d-b),t=j2[A+8>>2],w=z2(t-b),C=z2(z2(z2(c*Q)+z2(u*g))+z2(k*w)),B=i,Y=j2[r>>2],D=z2(Y-n),R=j2[r+4>>2],h=z2(R-o),F=j2[r+8>>2],Z=z2(F-b),w=(g=z2(z2(z2(D*Q)+z2(h*g))+z2(Z*w)))<=z2(0)&&C<=z2(0)?(A=T2[f+4>>2],T2[i>>2]=T2[f>>2],T2[i+4>>2]=A,r=T2[(f=f+8|0)+4>>2],T2[(A=i+8|0)>>2]=T2[f>>2],T2[A+4>>2]=r,p2[i+16|0]=1|W,g=z2(0),Q=z2(0),z2(1)):(Q=z2(a-Y),w=z2(G-R),E=z2(t-F),l=z2(z2(z2(c*Q)+z2(u*w))+z2(k*E)),(w=z2(z2(z2(D*Q)+z2(h*w))+z2(Z*E)))>=z2(0)&&l<=w?(A=T2[r+4>>2],T2[i>>2]=T2[r>>2],T2[i+4>>2]=A,r=T2[(f=r+8|0)+4>>2],T2[(A=i+8|0)>>2]=T2[f>>2],T2[A+4>>2]=r,p2[i+16|0]=2|W,g=z2(1),Q=z2(0),z2(0)):(E=z2(z2(g*l)-z2(w*C)),w<=z2(0)&&g>=z2(0)&&(Q=z2(0),E<=z2(0))?(T2[i+12>>2]=0,p2[i+16|0]=3|W,g=z2(g/z2(g-w)),j2[i+8>>2]=b+z2(Z*g),j2[i+4>>2]=o+z2(h*g),j2[i>>2]=n+z2(D*g),z2(z2(1)-g)):(Q=z2(a-s),G=z2(G-v),t=z2(t-d),a=z2(z2(z2(D*Q)+z2(h*G))+z2(Z*t)),(Q=z2(z2(z2(c*Q)+z2(u*G))+z2(k*t)))>=z2(0)&&a<=Q?(A=T2[e+4>>2],T2[i>>2]=T2[e>>2],T2[i+4>>2]=A,r=T2[(f=e+8|0)+4>>2],T2[(A=i+8|0)>>2]=T2[f>>2],T2[A+4>>2]=r,p2[i+16|0]=4|W,Q=z2(1),g=z2(0),z2(0)):(G=z2(z2(a*C)-z2(g*Q)),Q<=z2(0)&&C>=z2(0)&&(g=z2(0),G<=z2(0))?(T2[i+12>>2]=0,p2[i+16|0]=5|W,Q=z2(C/z2(C-Q)),j2[i+8>>2]=b+z2(k*Q),j2[i+4>>2]=o+z2(u*Q),j2[i>>2]=n+z2(c*Q),z2(z2(1)-Q)):(g=z2(z2(w*Q)-z2(a*l)),(C=z2(a-Q))>=z2(0)&&(Q=z2(l-w))>=z2(0)&&g<=z2(0)?(T2[i+12>>2]=0,p2[i+16|0]=6|W,Q=z2(Q/z2(Q+C)),j2[i+8>>2]=F+z2(z2(d-F)*Q),j2[i+4>>2]=R+z2(z2(v-R)*Q),j2[i>>2]=Y+z2(z2(s-Y)*Q),g=z2(z2(1)-Q),z2(0)):(T2[i+12>>2]=0,p2[i+16|0]=7|W,g=z2(z2(1)/z2(E+z2(g+G))),Q=z2(E*g),g=z2(G*g),j2[i+8>>2]=z2(k*Q)+z2(b+z2(Z*g)),j2[i+4>>2]=z2(u*Q)+z2(o+z2(h*g)),j2[i>>2]=z2(c*Q)+z2(n+z2(D*g)),z2(z2(z2(1)-g)-Q))))))),j2[B+20>>2]=w,T2[i+32>>2]=0,j2[i+28>>2]=Q,j2[i+24>>2]=g;}function J0(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M,I,x,y,U,X=0,p=0,T=z2(0),S=z2(0),j=z2(0),P=z2(0),z=0,O=z2(0),H=z2(0),_=z2(0),L=z2(0),K=z2(0),q=z2(0),$=z2(0),A2=0,f2=z2(0),r2=z2(0),e2=z2(0),i2=z2(0),a2=z2(0),n2=z2(0),o2=0,b2=(0);for(L2=i=L2-208|0,T2[A+56>>2]=0,T2[(X=i+200|0)>>2]=0,T2[X+4>>2]=0,T2[i+192>>2]=0,T2[i+196>>2]=0,a=T2[(p=f+8|0)+4>>2],T2[(X=i+136|0)>>2]=T2[p>>2],T2[X+4>>2]=a,a=T2[(p=f+24|0)+4>>2],T2[(X=i+152|0)>>2]=T2[p>>2],T2[X+4>>2]=a,a=T2[(p=f+40|0)+4>>2],T2[(X=i+168|0)>>2]=T2[p>>2],T2[X+4>>2]=a,z=T2[4+(a=f+56|0)>>2],T2[(X=i+184|0)>>2]=T2[a>>2],T2[X+4>>2]=z,p=T2[f+4>>2],T2[i+128>>2]=T2[f>>2],T2[i+132>>2]=p,p=T2[f+20>>2],T2[i+144>>2]=T2[f+16>>2],T2[i+148>>2]=p,p=T2[f+36>>2],T2[i+160>>2]=T2[f+32>>2],T2[i+164>>2]=p,p=T2[f+52>>2],T2[i+176>>2]=T2[f+48>>2],T2[i+180>>2]=p,A2=T2[(z=f+120|0)+4>>2],T2[(p=i+120|0)>>2]=T2[z>>2],T2[p+4>>2]=A2,A2=T2[(z=f+72|0)+4>>2],T2[(a=i+72|0)>>2]=T2[z>>2],T2[4+a>>2]=A2,A2=T2[(z=f+88|0)+4>>2],T2[(a=i+88|0)>>2]=T2[z>>2],T2[4+a>>2]=A2,A2=T2[(z=f+104|0)+4>>2],T2[(a=i+104|0)>>2]=T2[z>>2],T2[4+a>>2]=A2,a=T2[f+68>>2],T2[i+64>>2]=T2[f+64>>2],T2[i+68>>2]=a,z=T2[4+(a=f+80|0)>>2],T2[i+80>>2]=T2[a>>2],T2[i+84>>2]=z,z=T2[4+(a=f+96|0)>>2],T2[i+96>>2]=T2[a>>2],T2[i+100>>2]=z,z=T2[4+(a=f+112|0)>>2],T2[i+112>>2]=T2[a>>2],T2[i+116>>2]=z,T=j2[(a=i+116|0)>>2],_=j2[(z=i+180|0)>>2],L=j2[i+112>>2],S=j2[i+176>>2],K=j2[X>>2],j=j2[p>>2],n=z2(z2(K+j)*z2(.5)),j2[X>>2]=K-n,o=z2(z2(_+T)*z2(.5)),j2[z>>2]=_-o,b=z2(z2(S+L)*z2(.5)),j2[i+176>>2]=S-b,j2[p>>2]=j-n,j2[a>>2]=T-o,j2[i+112>>2]=L-b,u=T2[T2[A+28>>2]+4>>2]-17>>>0<=1?T2[T2[A+32>>2]+4>>2]-17>>>0<2:0,T2[A+68>>2]=0,T2[A+4>>2]=0,T2[A+8>>2]=1065353216,T2[A+60>>2]=-1,T2[A+64>>2]=0,T2[(X=A+12|0)>>2]=0,T2[X+4>>2]=0,T2[5604]=T2[5604]+1,X=T2[A+24>>2],p2[X+312|0]=0,p2[X+356|0]=1,k=S2[A+52|0],q=j2[A+48>>2],f2=j2[A+44>>2],T2[(p=X+336|0)>>2]=0,T2[p+4>>2]=0,T2[(p=X+300|0)>>2]=1566444395,T2[p+4>>2]=0,T2[X+292>>2]=1566444395,T2[X+296>>2]=1566444395,T2[(p=X+344|0)>>2]=0,T2[p+4>>2]=0,p2[X+352|0]=0,T2[X>>2]=0,p2[0|(X=X+332|0)]=240&S2[0|X],a=A+4|0,S=z2(0xde0b6b000000000);;){T2[i+60>>2]=0,L=j2[A+8>>2],K=z2(-L),T=j2[A+4>>2],_=j2[A+12>>2],j2[i+56>>2]=z2(z2(j2[f+24>>2]*K)-z2(T*j2[f+8>>2]))-z2(_*j2[f+40>>2]),j2[i+52>>2]=z2(z2(j2[f+20>>2]*K)-z2(T*j2[f+4>>2]))-z2(_*j2[f+36>>2]),j2[i+48>>2]=z2(z2(j2[f+16>>2]*K)-z2(T*j2[f>>2]))-z2(_*j2[f+32>>2]),T2[i+44>>2]=0,j2[i+40>>2]=z2(z2(T*j2[f+72>>2])+z2(L*j2[f+88>>2]))+z2(_*j2[f+104>>2]),j2[i+36>>2]=z2(z2(T*j2[f+68>>2])+z2(L*j2[f+84>>2]))+z2(_*j2[f+100>>2]),j2[i+32>>2]=z2(z2(T*j2[f+64>>2])+z2(L*j2[f+80>>2]))+z2(_*j2[f+96>>2]),t2(i+16|0,T2[A+28>>2],i+48|0),t2(i,T2[A+32>>2],i+32|0);A:{if(K=j2[i+16>>2],j=j2[i+20>>2],L=j2[i+24>>2],$=z2(z2(z2(z2(K*j2[i+128>>2])+z2(j*j2[i+132>>2]))+z2(L*j2[i+136>>2]))+j2[i+176>>2]),P=j2[i>>2],H=j2[i+4>>2],O=j2[i+8>>2],r2=z2(z2(z2(z2(P*j2[i+64>>2])+z2(H*j2[i+68>>2]))+z2(O*j2[i+72>>2]))+j2[i+112>>2]),_=z2($-r2),i2=z2(z2(z2(z2(K*j2[i+144>>2])+z2(j*j2[i+148>>2]))+z2(L*j2[i+152>>2]))+j2[i+180>>2]),a2=z2(z2(z2(z2(P*j2[i+80>>2])+z2(H*j2[i+84>>2]))+z2(O*j2[i+88>>2]))+j2[i+116>>2]),T=z2(i2-a2),n2=z2(u?0:z2(z2(z2(K*j2[i+160>>2])+z2(j*j2[i+164>>2]))+z2(L*j2[i+168>>2]))+j2[i+184>>2]),P=z2(u?0:z2(z2(z2(P*j2[i+96>>2])+z2(H*j2[i+100>>2]))+z2(O*j2[i+104>>2]))+j2[i+120>>2]),j=z2(n2-P),(K=z2(z2(z2(_*j2[A+4>>2])+z2(T*j2[A+8>>2]))+z2(j*j2[A+12>>2])))>z2(0)&&z2(K*K)>z2(S*j2[f+128>>2]))T2[A+68>>2]=10;else {X=T2[A+24>>2];f:if((0|(o2=T2[X>>2]))<1)A2=0;else for(p=X+12|0,L=j2[X+308>>2],z=0,A2=1;;){if(H=z2(_-j2[p-8>>2]),O=z2(H*H),H=z2(T-j2[p-4>>2]),O=z2(O+z2(H*H)),H=z2(j-j2[p>>2]),z2(O+z2(H*H))<=L)break f;if(p=p+16|0,A2=(0|(z=z+1|0))<(0|o2),(0|z)==(0|o2))break;}f:{r:{if(j2[X+304>>2]==z2(0)&&j==j2[X+300>>2]&&T==j2[X+296>>2]){if(j2[X+292>>2]==_|A2)break r;break f;}if(!A2)break f;}T2[A+68>>2]=b2=1,p=0;break A;}if((H=z2(S-K))<=z2(S*z2(9.999999974752427e-7)))T2[A+68>>2]=H<=z2(0)?2:11;else if(T2[X+304>>2]=0,j2[X+296>>2]=T,j2[X+300>>2]=j,p2[X+356|0]=1,j2[X+292>>2]=_,T2[(p=X+(o2<<4)|0)+16>>2]=0,j2[p+8>>2]=T,j2[p+12>>2]=j,j2[p+4>>2]=_,p=X+(T2[X>>2]<<4)|0,T2[p+96>>2]=0,j2[p+88>>2]=i2,j2[p+92>>2]=n2,j2[p+84>>2]=$,p=X+(T2[X>>2]<<4)|0,T2[p+176>>2]=0,j2[p+168>>2]=a2,j2[p+172>>2]=P,j2[p+164>>2]=r2,T2[X>>2]=T2[X>>2]+1,N0(X=T2[A+24>>2])){if(L=j2[X+288>>2],T=j2[X+276>>2],j=j2[X+280>>2],P=j2[X+284>>2],!((_=z2(z2(z2(T*T)+z2(j*j))+z2(P*P)))<z2(9.999999974752427e-7))){z2(S-_)<=z2(S*z2(1.1920928955078125e-7))?(T2[A+68>>2]=12,b2=1,p=0):(j2[A+16>>2]=L,j2[A+12>>2]=P,j2[A+8>>2]=j,j2[A+4>>2]=T,X=T2[A+64>>2],T2[A+64>>2]=X+1,1e3<((p=0)|X)||(4==T2[T2[A+24>>2]>>2]?T2[A+68>>2]=13:p=1)),S=_;break A;}T2[A+68>>2]=6,j2[A+16>>2]=L,j2[A+12>>2]=P,j2[A+8>>2]=j,j2[A+4>>2]=T;}else T2[A+68>>2]=3;}b2=1,p=0;}if(!p)break;}T=z2(0),j=k?z2(0):q,P=z2((k?z2(0):f2)+j),p=z=0,b2&&(N0(X=T2[A+24>>2]),o2=T2[(A2=8+a|0)+4>>2],T2[(p=i+200|0)>>2]=T2[A2>>2],T2[p+4>>2]=o2,p=T2[4+a>>2],T2[i+192>>2]=T2[a>>2],T2[i+196>>2]=p,K=j2[X+268>>2],L=j2[X+264>>2],_=j2[X+260>>2],H=j2[A+4>>2],O=j2[A+8>>2],q=j2[A+12>>2],(T=z2(z2(z2(H*H)+z2(O*O))+z2(q*q)))<z2(9.999999974752427e-7)&&(T2[A+68>>2]=5),X=1,T=(p=T>z2(14210854715202004e-30))?(T=z2(z2(1)/z2(_2(T))),j2[i+192>>2]=T*j2[i+192>>2],j2[i+196>>2]=T*j2[i+196>>2],j2[i+200>>2]=T*j2[i+200>>2],S=z2(j/z2(_2(S))),K=z2(z2(S*q)+K),L=z2(z2(S*O)+L),_=z2(z2(S*H)+_),z2(z2(z2(1)/T)-P)):(X=2,z2(0)),T2[A+60>>2]=X),T2[A+72>>2]&&T2[A+20>>2]&&T2[A+68>>2]&&(z=z2(P+T)<z2(.0010000000474974513));A:{f:{if((1^p||z)&&(X=T2[A+20>>2])){if(T2[a>>2]=0,T2[4+a>>2]=0,T2[(z=8+a|0)>>2]=0,T2[z+4>>2]=0,T2[5605]=T2[5605]+1,0|n1[T2[T2[X>>2]+8>>2]](X,T2[A+24>>2],T2[A+28>>2],T2[A+32>>2],i+128|0,i- -64|0,a,i+48|0,i+32|0,e)){if(S=z2(0),j=j2[i+32>>2],O=j2[i+48>>2],q=z2(j-O),P=j2[i+36>>2],i2=j2[i+52>>2],f2=z2(P-i2),H=j2[i+40>>2],a2=j2[i+56>>2],$=z2(H-a2),(r2=z2(z2(z2(q*q)+z2(f2*f2))+z2($*$)))<=z2(14210854715202004e-30)&&(q=j2[A+4>>2],f2=j2[A+8>>2],$=j2[A+12>>2],r2=z2(z2(z2(q*q)+z2(f2*f2))+z2($*$)),S=j2[A+16>>2]),r2>z2(14210854715202004e-30)){if(T2[A+60>>2]=3,O=z2(O-j),e2=z2(O*O),O=z2(i2-P),e2=z2(e2+z2(O*O)),O=z2(a2-H),!(!((O=z2(-z2(_2(z2(e2+z2(O*O))))))<T)&p)){j2[i+204>>2]=S,T=z2(z2(1)/z2(_2(r2))),j2[i+200>>2]=$*T,j2[i+196>>2]=f2*T,j2[i+192>>2]=q*T,_=j,L=P,K=H,T=O;break f;}T2[A+60>>2]=8;break f;}if(T2[A+60>>2]=9,p)break f;break A;}if(H=j2[A+4>>2],O=j2[A+8>>2],q=j2[A+12>>2],z2(z2(z2(H*H)+z2(O*O))+z2(q*q))>z2(0)){if(f2=j2[i+32>>2],S=z2(j2[i+48>>2]-f2),e2=z2(S*S),$=j2[i+36>>2],S=z2(j2[i+52>>2]-$),e2=z2(e2+z2(S*S)),r2=j2[i+40>>2],S=z2(j2[i+56>>2]-r2),!(!((S=z2(z2(_2(z2(e2+z2(S*S))))-P))<T)&p)){z=T2[(p=8+a|0)+4>>2],T2[(X=e=i+200|0)>>2]=T2[p>>2],T2[X+4>>2]=z,T2[A+60>>2]=6,X=T2[4+a>>2],T2[i+192>>2]=T2[a>>2],T2[i+196>>2]=X,_=j2[i+192>>2],L=j2[i+196>>2],K=j2[e>>2],T=z2(z2(1)/z2(_2(z2(z2(z2(_*_)+z2(L*L))+z2(K*K))))),j2[e>>2]=K*T,j2[i+192>>2]=_*T,j2[i+196>>2]=L*T,K=z2(z2(j*q)+r2),L=z2(z2(j*O)+$),_=z2(z2(j*H)+f2),T=S;break f;}T2[A+60>>2]=5;break f;}}if(!p)break A;}(j2[f+128>>2]>z2(T*T)||T<z2(0))&&(e=T2[i+196>>2],T2[a>>2]=T2[i+192>>2],T2[4+a>>2]=e,j2[A+56>>2]=T,p=T2[(e=i+200|0)+4>>2],T2[(X=8+a|0)>>2]=T2[e>>2],T2[X+4>>2]=p,T2[i+60>>2]=0,S=j2[i+192>>2],P=j2[i+196>>2],j=j2[e>>2],j2[i+56>>2]=z2(z2(S*j2[f+8>>2])+z2(P*j2[f+24>>2]))+z2(j*j2[f+40>>2]),j2[i+52>>2]=z2(z2(S*j2[f+4>>2])+z2(P*j2[f+20>>2]))+z2(j*j2[f+36>>2]),j2[i+48>>2]=z2(z2(S*j2[f>>2])+z2(P*j2[f+16>>2]))+z2(j*j2[f+32>>2]),T2[i+44>>2]=0,P=z2(-P),j2[i+40>>2]=z2(z2(j2[f+88>>2]*P)-z2(S*j2[f+72>>2]))-z2(j*j2[f+104>>2]),j2[i+36>>2]=z2(z2(j2[f+84>>2]*P)-z2(S*j2[f+68>>2]))-z2(j*j2[f+100>>2]),j2[i+32>>2]=z2(z2(j2[f+80>>2]*P)-z2(S*j2[f+64>>2]))-z2(j*j2[f+96>>2]),t2(i+16|0,T2[A+28>>2],i+48|0),t2(i,T2[A+32>>2],i+32|0),S=j2[e>>2],v=j2[i+184>>2],d=j2[i+168>>2],B=j2[i+160>>2],Q=j2[i+164>>2],g=j2[i+120>>2],w=j2[i+104>>2],G=j2[i+96>>2],C=j2[i+100>>2],E=j2[i+180>>2],D=j2[i+152>>2],h=j2[i+144>>2],Z=j2[i+148>>2],Y=j2[i+116>>2],R=j2[i+88>>2],F=j2[i+80>>2],W=j2[i+84>>2],m=j2[i+176>>2],N=j2[i+136>>2],H=j2[i+24>>2],V=j2[i+128>>2],O=j2[i+16>>2],J=j2[i+132>>2],q=j2[i+20>>2],M=j2[i+112>>2],I=j2[i+72>>2],f2=j2[i+8>>2],x=j2[i+64>>2],$=j2[i>>2],y=j2[i+68>>2],r2=j2[i+4>>2],P=j2[i+196>>2],j=j2[i+192>>2],T2[i+60>>2]=0,i2=z2(-P),j2[i+56>>2]=z2(z2(j2[f+24>>2]*i2)-z2(j*j2[f+8>>2]))-z2(S*j2[f+40>>2]),j2[i+52>>2]=z2(z2(j2[f+20>>2]*i2)-z2(j*j2[f+4>>2]))-z2(S*j2[f+36>>2]),j2[i+48>>2]=z2(z2(j2[f+16>>2]*i2)-z2(j*j2[f>>2]))-z2(S*j2[f+32>>2]),T2[i+44>>2]=0,j2[i+40>>2]=z2(z2(j*j2[f+72>>2])+z2(P*j2[f+88>>2]))+z2(S*j2[f+104>>2]),j2[i+36>>2]=z2(z2(j*j2[f+68>>2])+z2(P*j2[f+84>>2]))+z2(S*j2[f+100>>2]),j2[i+32>>2]=z2(z2(j*j2[f+64>>2])+z2(P*j2[f+80>>2]))+z2(S*j2[f+96>>2]),t2(i+16|0,T2[A+28>>2],i+48|0),t2(i,T2[A+32>>2],i+32|0),P=j2[i+16>>2],a2=j2[i+20>>2],n2=j2[i+24>>2],t=j2[i>>2],c=j2[i+4>>2],e2=j2[i+8>>2],l=j2[i+192>>2],s=j2[i+196>>2],U=z2(z2(z2(z2(z2(z2(z2(P*j2[i+128>>2])+z2(a2*j2[i+132>>2]))+z2(n2*j2[i+136>>2]))+j2[i+176>>2])-z2(z2(z2(z2(t*j2[i+64>>2])+z2(c*j2[i+68>>2]))+z2(e2*j2[i+72>>2]))+j2[i+112>>2]))*l)+z2(z2(z2(z2(z2(z2(P*j2[i+144>>2])+z2(a2*j2[i+148>>2]))+z2(n2*j2[i+152>>2]))+j2[i+180>>2])-z2(z2(z2(z2(t*j2[i+80>>2])+z2(c*j2[i+84>>2]))+z2(e2*j2[i+88>>2]))+j2[i+116>>2]))*s)),e2=z2(z2(z2(z2(z2(P*j2[i+160>>2])+z2(a2*j2[i+164>>2]))+z2(n2*j2[i+168>>2]))+j2[i+184>>2])-z2(z2(z2(z2(t*j2[i+96>>2])+z2(c*j2[i+100>>2]))+z2(e2*j2[i+104>>2]))+j2[i+120>>2])),P=j2[e>>2],z2(U+z2(e2*P))<z2(z2(z2(z2(z2(E+z2(z2(z2(O*h)+z2(q*Z))+z2(H*D)))-z2(Y+z2(z2(z2($*F)+z2(r2*W))+z2(f2*R))))*i2)-z2(j*z2(z2(m+z2(z2(z2(O*V)+z2(q*J))+z2(H*N)))-z2(M+z2(z2(z2($*x)+z2(r2*y))+z2(f2*I))))))-z2(S*z2(z2(v+z2(z2(z2(O*B)+z2(q*Q))+z2(H*d)))-z2(g+z2(z2(z2($*G)+z2(r2*C))+z2(f2*w))))))&&(T2[A+60>>2]=10,j2[i+200>>2]=-P,j2[i+196>>2]=-s,j2[i+192>>2]=-l),T2[i+60>>2]=0,j2[i+56>>2]=n+K,j2[i+52>>2]=o+L,j2[i+48>>2]=b+_,n1[T2[T2[r>>2]+16>>2]](r,i+192|0,i+48|0,T));}L2=i+208|0;}function M0(A,f,r,e,i,a,n,o,b,t,c){var u,k;return r=z2(z2(z2(r*a)+z2(e*n))+z2(i*o)),e=z2(z2(z2(j2[A>>2]*a)+z2(j2[A+16>>2]*n))+z2(j2[A+32>>2]*o)),i=j2[b+80>>2],u=z2(e*(e<z2(0)?z2(-i):i)),e=z2(z2(z2(j2[A+4>>2]*a)+z2(j2[A+20>>2]*n))+z2(j2[A+36>>2]*o)),i=j2[b+84>>2],u=z2(u+z2(e*(e<z2(0)?z2(-i):i))),e=z2(z2(z2(j2[A+8>>2]*a)+z2(j2[A+24>>2]*n))+z2(j2[A+40>>2]*o)),i=j2[b+88>>2],e=z2(u+z2(e*(e<z2(0)?z2(-i):i))),u=(i=j2[b+96>>2])<e?e:i,e=z2(z2(z2(j2[f>>2]*a)+z2(j2[f+16>>2]*n))+z2(j2[f+32>>2]*o)),i=j2[t+80>>2],k=z2(e*(e<z2(0)?z2(-i):i)),e=z2(z2(z2(j2[f+4>>2]*a)+z2(j2[f+20>>2]*n))+z2(j2[f+36>>2]*o)),i=j2[t+84>>2],k=z2(k+z2(e*(e<z2(0)?z2(-i):i))),e=z2(z2(z2(j2[f+8>>2]*a)+z2(j2[f+24>>2]*n))+z2(j2[f+40>>2]*o)),i=j2[t+88>>2],e=z2(k+z2(e*(e<z2(0)?z2(-i):i))),i=j2[t+96>>2],e=z2(u+(i<e?e:i)),!(c<((i=z2(r+e))<(r=z2(e-r))?i:r));}function I0(A,f,r,e,i,a,n,o){var b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C=0,E=0,D=0,h=0,Z=z2(0),Y=0,R=z2(0),F=z2(0),W=0,m=z2(0),N=0,V=z2(0),J=z2(0),M=z2(0),I=0,x=z2(0),y=z2(0),U=z2(0),X=0,p=0,T=z2(0),S=z2(0),j=z2(0),P=z2(0),z=z2(0),O=0,H=z2(0),_=z2(0);if(L2=X=L2-16|0,(0|(C=T2[i+4>>2]))<=-1)for(T2[i+8>>2]<=-1&&((D=T2[i+12>>2])&&S2[i+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[D-4>>2])),p2[i+16|0]=1,T2[i+8>>2]=0,T2[i+12>>2]=0),E=C<<4;p=T2[4+X>>2],D=T2[i+12>>2]+E|0,T2[D>>2]=T2[X>>2],T2[D+4>>2]=p,p=T2[(W=8+X|0)+4>>2],T2[(D=D+8|0)>>2]=T2[W>>2],T2[D+4>>2]=p,E=E+16|0,(D=C)>>>0<=(C=C+1|0)>>>0;);if(((T2[i+4>>2]=E=0)|(D=T2[e+4>>2]))>T2[i+8>>2]&&(D&&(T2[5498]=T2[5498]+1,(C=K2(19+(D<<4)|0))&&(T2[(E=C+19&-16)-4>>2]=C)),(C=T2[i+12>>2])&&S2[i+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[C-4>>2])),T2[i+12>>2]=E,p2[i+16|0]=1,T2[i+8>>2]=D),!((0|(p=T2[f+28>>2]))<1)){for(C=(b=T2[f+36>>2])+28|0,Z=j2[r+40>>2],T=j2[r+36>>2],m=j2[r+24>>2],F=j2[r+20>>2],S=j2[A+8>>2],j=j2[A+4>>2],H=j2[A>>2],U=j2[r+32>>2],M=j2[r+16>>2],V=j2[r+8>>2],J=j2[r+4>>2],x=j2[r>>2],E=0,R=z2(34028234663852886e22),W=-1;y=j2[C-8>>2],P=j2[C-4>>2],z=j2[C>>2],R=(D=(y=z2(z2(z2(z2(z2(z2(y*x)+z2(P*J))+z2(z*V))*H)+z2(z2(z2(z2(y*M)+z2(P*F))+z2(z*m))*j))+z2(z2(z2(z2(y*U)+z2(P*T))+z2(z*Z))*S)))<R)?y:R,W=D?E:W,C=C+36|0,(0|p)!=(0|(E=E+1|0)););if(!((0|W)<0)){if(b=b+P2(W,36)|0,1<=(0|(k=T2[4+b>>2])))for(Q=28+b|0,g=24+b|0,w=20+b|0,G=12+b|0,E=0;;){if(l=(0|(p=E+1|0))==(0|k),2<=(0|(W=T2[(D=e)+4>>2]))){for(C=T2[G>>2],e=T2[C+(E<<2)>>2]<<4,E=T2[f+16>>2],R=j2[(e=e+E|0)>>2],C=E+(T2[C+((l?0:p)<<2)>>2]<<4)|0,S=z2(R-j2[C>>2]),y=j2[e+4>>2],j=z2(y-j2[C+4>>2]),P=j2[e+8>>2],H=z2(P-j2[C+8>>2]),s=z2(z2(z2(S*U)+z2(j*T))+z2(H*Z)),t=j2[w>>2],c=j2[g>>2],u=j2[Q>>2],v=z2(z2(z2(x*t)+z2(J*c))+z2(V*u)),d=z2(z2(z2(S*x)+z2(j*J))+z2(H*V)),B=z2(z2(z2(U*t)+z2(T*c))+z2(Z*u)),z=z2(-z2(z2(s*v)-z2(d*B))),_=z2(z2(z2(z2(z2(R*M)+z2(y*F))+z2(P*m))+j2[r+52>>2])*z),j=z2(z2(z2(S*M)+z2(j*F))+z2(H*m)),m=z2(z2(z2(M*t)+z2(F*c))+z2(m*u)),S=z2(z2(j*B)-z2(s*m)),M=z2(_-z2(S*z2(z2(z2(z2(R*x)+z2(y*J))+z2(P*V))+j2[r+48>>2]))),x=z2(z2(d*m)-z2(j*v)),y=z2(M-z2(x*z2(z2(z2(z2(R*U)+z2(y*T))+z2(P*Z))+j2[r+56>>2]))),C=T2[D+12>>2],R=j2[(e=(C+(W<<4)|0)-16|0)+4>>2],m=j2[e>>2],F=j2[e+8>>2],Z=z2(z2(z2(z2(R*z)-z2(S*m))-z2(x*F))-y),O=0;;){U=j2[(e=(O<<4)+C|0)+4>>2],M=j2[e>>2],V=j2[e+8>>2],J=z2(z2(z2(z2(U*z)-z2(S*M))-z2(x*V))-y),T=j2[e+12>>2];A:{if(Z<z2(0)){if(J<z2(0)){if((0|(E=T2[i+4>>2]))==T2[i+8>>2]&&!((0|(N=E?E<<1:1))<=(0|E))){if(e=0,N&&(T2[5498]=T2[5498]+1,(C=K2(19+(N<<4)|0))&&(T2[(e=C+19&-16)-4>>2]=C)),1<=(0|E))for(C=0;Y=T2[i+12>>2]+C|0,I=T2[Y+4>>2],T2[(h=e+C|0)>>2]=T2[Y>>2],T2[h+4>>2]=I,I=T2[(Y=Y+8|0)+4>>2],T2[(h=h+8|0)>>2]=T2[Y>>2],T2[h+4>>2]=I,C=C+16|0,E=E-1|0;);(C=T2[i+12>>2])&&S2[i+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[C-4>>2])),T2[i+12>>2]=e,p2[i+16|0]=1,T2[i+8>>2]=N,E=T2[i+4>>2];}e=T2[i+12>>2]+(E<<4)|0,j2[e+8>>2]=V,j2[e+4>>2]=U,j2[e>>2]=M,e=e+12|0;}else {if(Z=z2(Z/z2(Z-J)),F=z2(F+z2(z2(V-F)*Z)),R=z2(R+z2(z2(U-R)*Z)),Z=z2(m+z2(z2(M-m)*Z)),(0|(E=T2[i+4>>2]))==T2[i+8>>2]&&!((0|(N=E?E<<1:1))<=(0|E))){if(e=0,N&&(T2[5498]=T2[5498]+1,(C=K2(19+(N<<4)|0))&&(T2[(e=C+19&-16)-4>>2]=C)),1<=(0|E))for(C=0;Y=T2[i+12>>2]+C|0,I=T2[Y+4>>2],T2[(h=e+C|0)>>2]=T2[Y>>2],T2[h+4>>2]=I,I=T2[(Y=Y+8|0)+4>>2],T2[(h=h+8|0)>>2]=T2[Y>>2],T2[h+4>>2]=I,C=C+16|0,E=E-1|0;);(C=T2[i+12>>2])&&S2[i+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[C-4>>2])),T2[i+12>>2]=e,p2[i+16|0]=1,T2[i+8>>2]=N,E=T2[i+4>>2];}e=T2[i+12>>2]+(E<<4)|0,j2[e+8>>2]=F,j2[e+4>>2]=R,j2[e>>2]=Z,T=z2(0),e=e+12|0;}}else {if(!(J<z2(0)))break A;if(Z=z2(Z/z2(Z-J)),F=z2(F+z2(z2(V-F)*Z)),R=z2(R+z2(z2(U-R)*Z)),Z=z2(m+z2(z2(M-m)*Z)),(0|(E=T2[i+4>>2]))==T2[i+8>>2]&&!((0|(N=E?E<<1:1))<=(0|E))){if(e=0,N&&(T2[5498]=T2[5498]+1,(C=K2(19+(N<<4)|0))&&(T2[(e=C+19&-16)-4>>2]=C)),1<=(0|E))for(C=0;Y=T2[i+12>>2]+C|0,I=T2[Y+4>>2],T2[(h=e+C|0)>>2]=T2[Y>>2],T2[h+4>>2]=I,I=T2[(Y=Y+8|0)+4>>2],T2[(h=h+8|0)>>2]=T2[Y>>2],T2[h+4>>2]=I,C=C+16|0,E=E-1|0;);(C=T2[i+12>>2])&&S2[i+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[C-4>>2])),T2[i+12>>2]=e,p2[i+16|0]=1,T2[i+8>>2]=N,E=T2[i+4>>2];}if(e=T2[i+12>>2]+(E<<4)|0,T2[e+12>>2]=0,j2[e+8>>2]=F,j2[e+4>>2]=R,j2[e>>2]=Z,E=T2[i+4>>2],T2[i+4>>2]=C=E+1|0,T2[i+8>>2]==(0|C)&&!((0|(N=C?C<<1:1))<=(0|C))){if(e=0,N&&(T2[5498]=T2[5498]+1,(C=K2(19+(N<<4)|0))&&(T2[(e=C+19&-16)-4>>2]=C)),0<=(0|E))for(E=E+1|0,C=0;Y=T2[i+12>>2]+C|0,I=T2[Y+4>>2],T2[(h=e+C|0)>>2]=T2[Y>>2],T2[h+4>>2]=I,I=T2[(Y=Y+8|0)+4>>2],T2[(h=h+8|0)>>2]=T2[Y>>2],T2[h+4>>2]=I,C=C+16|0,E=E-1|0;);(C=T2[i+12>>2])&&S2[i+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[C-4>>2])),T2[i+12>>2]=e,p2[i+16|0]=1,T2[i+8>>2]=N,C=T2[i+4>>2];}e=T2[i+12>>2]+(C<<4)|0,j2[e+8>>2]=V,j2[e+4>>2]=U,j2[e>>2]=M,e=e+12|0;}j2[e>>2]=T,T2[i+4>>2]=T2[i+4>>2]+1;}if((0|(O=O+1|0))==(0|W))break;C=T2[D+12>>2],Z=J,F=V,R=U,m=M;}W=T2[D+4>>2];}if((0|W)<=-1)for(T2[D+8>>2]<=-1&&((e=T2[D+12>>2])&&S2[D+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),p2[D+16|0]=1,T2[D+8>>2]=0,T2[D+12>>2]=0),C=W<<4;E=T2[4+X>>2],e=T2[D+12>>2]+C|0,T2[e>>2]=T2[X>>2],T2[e+4>>2]=E,O=T2[(E=8+X|0)+4>>2],T2[(e=e+8|0)>>2]=T2[E>>2],T2[e+4>>2]=O,C=C+16|0,(e=W)>>>0<=(W=e+1|0)>>>0;);if(T2[D+4>>2]=0,Z=j2[r+40>>2],T=j2[r+36>>2],U=j2[r+32>>2],m=j2[r+24>>2],F=j2[r+20>>2],M=j2[r+16>>2],V=j2[r+8>>2],J=j2[r+4>>2],x=j2[r>>2],e=i,E=p,i=D,l)break;}if(!((0|(W=T2[e+4>>2]))<1))for(R=j2[20+b>>2],_=z2(R*x),x=j2[24+b>>2],_=z2(_+z2(x*J)),J=j2[28+b>>2],V=z2(_+z2(J*V)),m=z2(z2(z2(R*M)+z2(x*F))+z2(J*m)),Z=z2(z2(z2(R*U)+z2(x*T))+z2(J*Z)),R=z2(j2[32+b>>2]-z2(z2(z2(V*j2[r+48>>2])+z2(m*j2[r+52>>2]))+z2(Z*j2[r+56>>2]))),E=C=0;r=(f=T2[e+12>>2]+C|0)+8|0,C=C+16|0,(F=(F=z2(R+z2(z2(z2(V*j2[f>>2])+z2(m*j2[f+4>>2]))+z2(Z*j2[r>>2]))))<=a?a:F)<=n&&(D=T2[r+4>>2],T2[(i=8+X|0)>>2]=T2[r>>2],T2[i+4>>2]=D,r=T2[f+4>>2],T2[X>>2]=T2[f>>2],T2[4+X>>2]=r,n1[T2[T2[o>>2]+16>>2]](o,A,X,F),W=T2[e+4>>2]),(0|(E=E+1|0))<(0|W););}}L2=16+X|0;}function x0(A,f,r,e,i,a){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0;var n,o,b,t,c,u,k,l,s,v,d,B,Q=0,g=0,w=z2(0),G=z2(0),C=z2(0),E=z2(0),D=z2(0),h=z2(0);L2=Q=L2-288|0,n=T2[A+4>>2],T2[n+292>>2]=1566444395,T2[n+296>>2]=1566444395,T2[(g=n+336|0)>>2]=0,T2[g+4>>2]=0,T2[(g=n+300|0)>>2]=1566444395,T2[g+4>>2]=0,T2[(g=n+344|0)>>2]=0,T2[g+4>>2]=0,p2[n+352|0]=0,p2[0|(g=n+332|0)]=240&S2[0|g],p2[n+312|0]=0,p2[n+356|0]=1,T2[n>>2]=0,w=j2[r+52>>2],G=j2[f+52>>2],E=j2[i+52>>2],D=j2[e+52>>2],h=j2[r+56>>2],C=j2[(o=f+56|0)>>2],t=j2[i+56>>2],c=j2[(b=e+56|0)>>2],u=j2[r+48>>2],k=j2[f+48>>2],l=j2[i+48>>2],s=j2[e+48>>2],p2[264+Q|0]=0,T2[260+Q>>2]=1566444395,T2[224+Q>>2]=12428,T2[(n=156+Q|0)>>2]=0,T2[4+n>>2]=0,T2[144+Q>>2]=12272,T2[164+Q>>2]=0,T2[148+Q>>2]=0,T2[152+Q>>2]=1065353216,n=T2[A+12>>2],T2[176+Q>>2]=n,g=T2[A+8>>2],T2[172+Q>>2]=g,T2[168+Q>>2]=T2[A+4>>2],T2[180+Q>>2]=T2[g+4>>2],T2[184+Q>>2]=T2[n+4>>2],d=Q,B=z2(n1[T2[T2[g>>2]+48>>2]](g)),j2[188+d>>2]=B,v=z2(n1[T2[T2[n>>2]+48>>2]](n)),T2[216+Q>>2]=1,T2[220+Q>>2]=1,T2[204+Q>>2]=-1,p2[196+Q|0]=0,j2[192+Q>>2]=v,g=T2[4+(n=f+8|0)>>2],T2[(A=16+Q|0)>>2]=T2[n>>2],T2[A+4>>2]=g,g=T2[4+(n=f+24|0)>>2],T2[(A=32+Q|0)>>2]=T2[n>>2],T2[A+4>>2]=g,g=T2[4+(n=f+40|0)>>2],T2[(A=48+Q|0)>>2]=T2[n>>2],T2[A+4>>2]=g,n=T2[4+o>>2],T2[(A=Q+64|0)>>2]=T2[o>>2],T2[A+4>>2]=n,g=T2[4+(n=e+8|0)>>2],T2[(A=80+Q|0)>>2]=T2[n>>2],T2[A+4>>2]=g,T2[136+Q>>2]=1566444395,A=T2[f+4>>2],T2[8+Q>>2]=T2[f>>2],T2[12+Q>>2]=A,A=T2[f+20>>2],T2[24+Q>>2]=T2[f+16>>2],T2[28+Q>>2]=A,A=T2[f+36>>2],T2[40+Q>>2]=T2[f+32>>2],T2[44+Q>>2]=A,A=T2[f+52>>2],T2[56+Q>>2]=T2[f+48>>2],T2[60+Q>>2]=A,A=T2[e+4>>2],T2[72+Q>>2]=T2[e>>2],T2[76+Q>>2]=A,g=T2[4+(n=e+24|0)>>2],T2[(A=96+Q|0)>>2]=T2[n>>2],T2[A+4>>2]=g,n=T2[e+20>>2],T2[(A=88+Q|0)>>2]=T2[e+16>>2],T2[A+4>>2]=n,g=T2[4+(n=e+40|0)>>2],T2[(A=112+Q|0)>>2]=T2[n>>2],T2[A+4>>2]=g,n=T2[e+36>>2],T2[(A=104+Q|0)>>2]=T2[e+32>>2],T2[A+4>>2]=n,n=T2[4+b>>2],T2[(A=128+Q|0)>>2]=T2[b>>2],T2[A+4>>2]=n,n=T2[e+52>>2],T2[(A=120+Q|0)>>2]=T2[e+48>>2],T2[A+4>>2]=n,J0(144+Q|0,8+Q|0,224+Q|0,0,0),g=T2[4+(n=252+Q|0)>>2],T2[(A=280+Q|0)>>2]=T2[n>>2],T2[A+4>>2]=g,A=T2[248+Q>>2],T2[272+Q>>2]=T2[244+Q>>2],T2[276+Q>>2]=A;A:if(S2[264+Q|(A=0)]){t=z2(z2(h-C)-z2(t-c)),c=z2(z2(w-G)-z2(E-D)),u=z2(z2(u-k)-z2(l-s)),E=j2[236+Q>>2],D=j2[232+Q>>2],h=j2[228+Q>>2];f:{if((C=j2[260+Q>>2])>z2(.0010000000474974513)){for(n=244+Q|0,g=33,G=z2(0);;){if(!(g=g-1|(A=0)))break A;if(A=0,(w=z2(G-z2(C/z2(z2(z2(u*h)+z2(c*D))+z2(t*E)))))<=G)break A;if(A=0,w>z2(1))break A;if(w<z2(A=0))break A;if(n1[T2[T2[a>>2]>>2]](a,w),G=z2(z2(1)-w),j2[56+Q>>2]=z2(G*j2[f+48>>2])+z2(w*j2[r+48>>2]),j2[60+Q>>2]=z2(G*j2[f+52>>2])+z2(w*j2[r+52>>2]),j2[64+Q>>2]=z2(G*j2[f+56>>2])+z2(w*j2[r+56>>2]),j2[120+Q>>2]=z2(G*j2[e+48>>2])+z2(w*j2[i+48>>2]),j2[124+Q>>2]=z2(G*j2[e+52>>2])+z2(w*j2[i+52>>2]),j2[128+Q>>2]=z2(G*j2[e+56>>2])+z2(w*j2[i+56>>2]),J0(144+Q|0,8+Q|0,224+Q|0,0,0),!S2[264+Q|(A=0)])break A;if((C=j2[260+Q>>2])<z2(0)){j2[a+164>>2]=w,A=T2[232+Q>>2],T2[a+132>>2]=T2[228+Q>>2],T2[a+136>>2]=A,f=T2[240+Q>>2],T2[(A=a+140|0)>>2]=T2[236+Q>>2],T2[A+4>>2]=f,A=T2[4+n>>2],T2[a+148>>2]=T2[n>>2],T2[a+152>>2]=A,r=T2[(f=8+n|0)+4>>2],T2[(A=a+156|0)>>2]=T2[f>>2],T2[A+4>>2]=r;break f;}if(b=T2[4+(o=8+n|0)>>2],T2[(A=280+Q|0)>>2]=T2[o>>2],T2[A+4>>2]=b,A=T2[4+n>>2],T2[272+Q>>2]=T2[n>>2],T2[276+Q>>2]=A,E=j2[236+Q>>2],D=j2[232+Q>>2],h=j2[228+Q>>2],G=w,!(C>z2(.0010000000474974513)))break;}G=j2[240+Q>>2];}else w=z2(0),G=j2[240+Q>>2];if(A=0,z2(-j2[a+172>>2])<=z2(z2(z2(u*h)+z2(c*D))+z2(t*E)))break A;j2[a+132>>2]=h,j2[a+164>>2]=w,A=T2[276+Q>>2],T2[a+148>>2]=T2[272+Q>>2],T2[a+152>>2]=A,j2[a+144>>2]=G,j2[a+140>>2]=E,j2[a+136>>2]=D,r=T2[(f=280+Q|0)+4>>2],T2[(A=a+156|0)>>2]=T2[f>>2],T2[A+4>>2]=r;}A=1;}return L2=288+Q|0,0|A;}function y0(A,f,r,e,i,a,n,o,b,t,c){var u,k=z2(0),l=z2(0),s=z2(0),v=z2(0),d=z2(0),B=(z2(0)),Q=(j2[(o=(o<<2)+t|0)>>2]),g=z2(j2[t+48>>2]-j2[b+48>>2]),w=j2[o+16>>2],G=z2(j2[t+52>>2]-j2[b+52>>2]),C=j2[o+32>>2],E=z2(j2[t+56>>2]-j2[b+56>>2]),s=z2(z2(z2(Q*g)+z2(w*G))+z2(C*E)),D=j2[(n=(n<<2)+b|0)>>2],v=j2[n+16>>2],h=j2[n+32>>2],B=z2(z2(z2(D*g)+z2(v*G))+z2(h*E)),d=z2(z2(z2(D*Q)+z2(v*w))+z2(h*C));(l=z2(z2(1)-z2(d*d)))!=z2(0)&&(k=z2(-r),(l=z2(z2(B-z2(d*s))/l))<k||r<(k=l)&&(k=r));A:{if((l=z2(z2(d*k)-s))<(s=z2(-i))){if(k=z2(-r),(i=z2(B-z2(d*i)))<k){l=s;break A;}if(!(r<i)){l=s,k=i;break A;}i=s;}else {if(!(i<l))break A;if(k=z2(-r),(s=z2(z2(d*i)+B))<k){l=i;break A;}if(!(r<s)){l=i,k=s;break A;}}l=i,k=r;}return u=c,s=z2(C*l),r=z2(s+z2(E-z2(h*k))),d=z2(Q*l),i=z2(d+z2(g-z2(D*k))),l=z2(w*l),c=z2(l+z2(G-z2(v*k))),k=z2(z2(r*r)+z2(z2(i*i)+z2(c*c))),B=z2(_2(k)),u<(Q=z2(z2(B-e)-a))||(k<=z2(14210854715202004e-30)?z2(O2(h))>z2(.7071067690849304)?(T2[A>>2]=0,e=z2(z2(1)/z2(_2(z2(z2(v*v)+z2(h*h))))),r=z2(v*e),j2[A+8>>2]=r,k=z2(e*z2(-h)),j2[A+4>>2]=k,e=z2(0)):(T2[A+8>>2]=0,r=z2(z2(1)/z2(_2(z2(z2(D*D)+z2(v*v))))),k=z2(D*r),j2[A+4>>2]=k,e=z2(r*z2(-v)),j2[A>>2]=e,r=z2(0)):(T2[A+12>>2]=0,e=z2(z2(-1)/B),r=z2(r*e),j2[A+8>>2]=r,k=z2(c*e),j2[A+4>>2]=k,e=z2(i*e),j2[A>>2]=e),i=j2[t+48>>2],c=j2[t+52>>2],v=j2[t+56>>2],T2[f+12>>2]=0,j2[f+8>>2]=z2(s+v)+z2(r*a),j2[f+4>>2]=z2(l+c)+z2(k*a),j2[f>>2]=z2(d+i)+z2(e*a)),Q;}function U0(A,f,r,e){}function X0(A,f,r,e,i,a){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0;var n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M,I=0,x=0,y=z2(0),U=0,X=z2(0),p=0,T=z2(0),S=(z2(0)),j=z2(0),P=z2(0),z=0,O=z2(0),H=z2(0),_=z2(0),L=z2(0),K=0,q=(z2(0)),$=z2(0),A2=0,f2=z2(0),r2=(z2(0)),e2=(z2(0)),i2=z2(0),a2=z2(0),n2=z2(0),o2=(z2(0)),b2=z2(0),t2=(z2(0)),c2=z2(0),u2=(z2(0)),k2=z2(0),l2=z2(0),s2=(z2(0));L2=x=L2-32|0,p=T2[A+4>>2],p2[p+312|0]=0,p2[p+356|0]=1,T2[p>>2]=0,T2[p+292>>2]=1566444395,T2[p+296>>2]=1566444395,T2[(I=p+336|0)>>2]=0,T2[I+4>>2]=0,T2[(I=p+300|0)>>2]=1566444395,T2[I+4>>2]=0,T2[(I=p+344|0)>>2]=0,T2[I+4>>2]=0,p2[p+352|0]=0,p2[0|(I=p+332|0)]=240&S2[0|I],D=j2[(u=e+40|0)>>2],h=j2[(k=e+36|0)>>2],Z=j2[(l=e+24|0)>>2],Y=j2[(s=e+20|0)>>2],v=j2[(R=f+20|0)>>2],d=j2[(F=f+36|0)>>2],B=j2[(U=f+24|0)>>2],T=j2[r+52>>2],o2=j2[(z=f+52|0)>>2],O=j2[i+52>>2],b2=j2[(K=e+52|0)>>2],Q=j2[(A2=f+40|0)>>2],r2=j2[r+56>>2],t2=j2[(p=f+56|0)>>2],S=j2[i+56>>2],c2=j2[(I=e+56|0)>>2],W=j2[e+32>>2],m=j2[e+16>>2],N=j2[e+8>>2],V=j2[e+4>>2],J=j2[e>>2],g=j2[f>>2],w=j2[f+16>>2],G=j2[f+32>>2],C=j2[f+4>>2],E=j2[f+8>>2],y=j2[r+48>>2],u2=j2[f+48>>2],j=j2[i+48>>2],k2=j2[e+48>>2],M=T2[A+8>>2],T2[12+x>>2]=0,c=z2(z2(T-o2)-z2(O-b2)),O=z2(-c),o=z2(z2(y-u2)-z2(j-k2)),b=z2(z2(r2-t2)-z2(S-c2)),j2[8+x>>2]=z2(z2(B*O)-z2(E*o))-z2(Q*b),j2[4+x>>2]=z2(z2(v*O)-z2(o*C))-z2(b*d),j2[x>>2]=z2(z2(w*O)-z2(o*g))-z2(b*G),n1[T2[T2[M>>2]+64>>2]](16+x|0,M,x),P=j2[p>>2],e2=j2[A2>>2],i2=j2[F>>2],a2=j2[z>>2],n2=j2[U>>2],q=j2[R>>2],$=j2[f+32>>2],n=j2[f+48>>2],X=j2[f+8>>2],T=j2[f>>2],S=j2[f+4>>2],y=j2[f+16>>2],_=j2[24+x>>2],L=j2[16+x>>2],f2=j2[20+x>>2],p=T2[A+12>>2],T2[12+x>>2]=0,j2[8+x>>2]=z2(z2(o*j2[e+8>>2])+z2(c*j2[l>>2]))+z2(b*j2[u>>2]),j2[4+x>>2]=z2(z2(o*j2[e+4>>2])+z2(c*j2[s>>2]))+z2(b*j2[k>>2]),j2[x>>2]=z2(z2(o*j2[e>>2])+z2(c*j2[e+16>>2]))+z2(b*j2[e+32>>2]),n1[T2[T2[p>>2]+64>>2]](16+x|0,p,x),O=z2(0),r2=z2(0),j=z2(0);A:{f:if(X=z2(n+z2(z2(z2(L*T)+z2(f2*S))+z2(_*X))),t=j2[16+x>>2],n=j2[20+x>>2],S=j2[24+x>>2],X=z2(X-z2(z2(z2(z2(t*j2[e>>2])+z2(n*j2[e+4>>2]))+z2(S*j2[e+8>>2]))+j2[e+48>>2])),T=z2(z2(a2+z2(z2(z2(L*y)+z2(f2*q))+z2(_*n2)))-z2(z2(z2(z2(t*j2[e+16>>2])+z2(n*j2[s>>2]))+z2(S*j2[l>>2]))+j2[K>>2])),y=z2(z2(P+z2(z2(z2(L*$)+z2(f2*i2))+z2(_*e2)))-z2(z2(z2(z2(t*j2[e+32>>2])+z2(n*j2[k>>2]))+z2(S*j2[u>>2]))+j2[I>>2])),z2(z2(z2(X*X)+z2(T*T))+z2(y*y))>z2(9999999747378752e-20))for(p=31,S=z2(0);;){if(I=T2[A+8>>2],T2[12+x>>2]=z=0,n=z2(-T),j2[8+x>>2]=z2(z2(B*n)-z2(E*X))-z2(Q*y),j2[4+x>>2]=z2(z2(v*n)-z2(C*X))-z2(d*y),j2[x>>2]=z2(z2(w*n)-z2(g*X))-z2(G*y),n1[T2[T2[I>>2]+64>>2]](16+x|0,I,x),f2=j2[24+x>>2],t=j2[16+x>>2],q=j2[20+x>>2],I=T2[A+12>>2],T2[12+x>>2]=0,j2[8+x>>2]=z2(z2(N*X)+z2(Z*T))+z2(D*y),j2[4+x>>2]=z2(z2(V*X)+z2(Y*T))+z2(h*y),j2[x>>2]=z2(z2(J*X)+z2(m*T))+z2(W*y),n1[T2[T2[I>>2]+64>>2]](16+x|0,I,x),H>z2(1))break A;if(e2=z2(u2+z2(z2(z2(g*t)+z2(C*q))+z2(E*f2))),P=j2[16+x>>2],$=j2[20+x>>2],n=j2[24+x>>2],i2=z2(k2+z2(z2(z2(J*P)+z2(V*$))+z2(N*n))),_=z2(e2-i2),a2=z2(o2+z2(z2(z2(w*t)+z2(v*q))+z2(B*f2))),n2=z2(b2+z2(z2(z2(m*P)+z2(Y*$))+z2(Z*n))),L=z2(a2-n2),q=z2(t2+z2(z2(z2(G*t)+z2(d*q))+z2(Q*f2))),$=z2(c2+z2(z2(z2(W*P)+z2(h*$))+z2(D*n))),P=z2(q-$),(n=z2(z2(z2(_*X)+z2(L*T))+z2(P*y)))>z2(0)){if((j=z2(z2(z2(o*X)+z2(c*T))+z2(b*y)))>=z2(-14210854715202004e-30))break A;H=z2(H-z2(n/j)),j=z2(z2(1)-H),c2=z2(z2(j*j2[e+56>>2])+z2(H*j2[i+56>>2])),b2=z2(z2(j*j2[e+52>>2])+z2(H*j2[i+52>>2])),k2=z2(z2(j*j2[e+48>>2])+z2(H*j2[i+48>>2])),t2=z2(z2(j*j2[f+56>>2])+z2(H*j2[r+56>>2])),o2=z2(z2(j*j2[f+52>>2])+z2(H*j2[r+52>>2])),u2=z2(z2(j*j2[f+48>>2])+z2(H*j2[r+48>>2])),O=X,r2=T,l2=y,j=S;}U=T2[A+4>>2];r:if((0|(I=T2[U>>2]))<1)A2=0;else for(K=U+12|0,S=j2[U+308>>2],A2=1;;){if(y=z2(_-j2[K-8>>2]),X=z2(y*y),y=z2(L-j2[K-4>>2]),X=z2(X+z2(y*y)),y=z2(P-j2[K>>2]),S>=z2(X+z2(y*y)))break r;if(K=K+16|0,A2=(0|(z=z+1|0))<(0|I),(0|I)==(0|z))break;}r:{e:{if(j2[U+304>>2]==z2(0)&&P==j2[U+300>>2]&&L==j2[U+296>>2]){if(!(_==j2[U+292>>2]|A2))break e;break r;}if(A2)break r;}T2[U+304>>2]=0,j2[U+296>>2]=L,j2[U+300>>2]=P,p2[U+356|0]=1,j2[U+292>>2]=_,T2[(I=(I<<4)+U|0)+16>>2]=0,j2[I+8>>2]=L,j2[I+12>>2]=P,j2[I+4>>2]=_,I=(T2[U>>2]<<4)+U|0,T2[I+96>>2]=0,j2[I+88>>2]=a2,j2[I+92>>2]=q,j2[I+84>>2]=e2,I=(T2[U>>2]<<4)+U|0,T2[I+176>>2]=0,j2[I+168>>2]=n2,j2[I+172>>2]=$,j2[I+164>>2]=i2,T2[U>>2]=T2[U>>2]+1,U=T2[A+4>>2];}if(!N0(U))break f;if(X=j2[U+276>>2],T=j2[U+280>>2],y=j2[U+284>>2],!(z2(z2(z2(X*X)+z2(T*T))+z2(y*y))>z2(9999999747378752e-20)))break f;if(!p)break f;S=j2[U+288>>2],p=p-1|0;}j2[a+164>>2]=H,X=z2(0),T=z2(0),y=z2(0),(S=z2(z2(z2(O*O)+z2(r2*r2))+z2(l2*l2)))>=z2(14210854715202004e-30)&&(y=z2(z2(1)/z2(_2(S))),T=z2(l2*y),X=z2(r2*y),s2=z2(O*y),y=j),j2[a+132>>2]=s2,j2[a+144>>2]=y,j2[a+140>>2]=T,j2[a+136>>2]=X,z=0,z2(-j2[a+172>>2])<=z2(z2(z2(o*s2)+z2(c*X))+z2(b*T))||(N0(A=T2[A+4>>2]),i=T2[A+260>>2],e=T2[A+264>>2],A=T2[(f=A+268|0)+4>>2],T2[(r=a+156|0)>>2]=T2[f>>2],T2[r+4>>2]=A,T2[a+148>>2]=i,T2[a+152>>2]=e,z=1);}return L2=32+x|0,0|z;}function p0(A){return 2;}function T0(A){return 3;}function S0(A){return 1;}function j0(A,f,r){var e,i,a,n,o=0,b=0,t=0,c=0,u=0;if(L2=t=L2-32|0,n=S2[A+68|0],a=T2[(i=n?r:f)+4>>2],e=T2[a+24>>2],(0|(u=T2[A+52>>2]))<(0|e)){if(T2[A+56>>2]<(0|e)){if(e&&(T2[5498]=T2[5498]+1,(o=K2(19+(e<<2)|0))&&(T2[(c=o+19&-16)-4>>2]=o)),1<=(0|u))for(o=u;T2[b+c>>2]=T2[T2[A+60>>2]+b>>2],b=b+4|0,o=o-1|0;);(o=T2[A+60>>2])&&S2[A- -64|0]&&(T2[5499]=T2[5499]+1,q2(T2[o-4>>2])),T2[A+60>>2]=c,T2[A+56>>2]=e,p2[A- -64|0]=1;}for(b=u<<2,o=e-u|0;b=b+4|(T2[T2[A+60>>2]+b>>2]=0),o=o-1|0;);}if(1<=(0|(T2[A+52>>2]=e)))for(f=n?f:r,o=64,c=b=0;T2[a+72>>2]?T2[T2[A+60>>2]+b>>2]=0:(r=T2[T2[a+32>>2]+o>>2],T2[28+t>>2]=c,T2[24+t>>2]=-1,T2[8+t>>2]=i,u=T2[i+12>>2],T2[16+t>>2]=T2[i+8>>2],T2[20+t>>2]=u,T2[12+t>>2]=r,r=T2[A+4>>2],r=0|n1[T2[T2[r>>2]+8>>2]](r,8+t|0,f,T2[A+72>>2],1),T2[T2[A+60>>2]+b>>2]=r),o=o+80|0,b=b+4|0,(0|(c=c+1|0))!=(0|e););L2=32+t|0;}function P0(A){var f,r=0,e=0;if(T2[(A|=0)>>2]=13820,1<=(0|(e=T2[A+52>>2])))for(;(f=T2[T2[A+60>>2]+r>>2])&&(n1[T2[T2[f>>2]>>2]](f),f=T2[A+4>>2],n1[T2[T2[f>>2]+60>>2]](f,T2[T2[A+60>>2]+r>>2])),r=r+4|0,e=e-1|0;);return (r=T2[A+60>>2])&&S2[A- -64|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+60>>2]=0,T2[A+52>>2]=0,T2[A+56>>2]=0,p2[A- -64|0]=1,(r=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+40>>2]=0,p2[A+44|0]=1,T2[(r=A+32|0)>>2]=0,T2[r+4>>2]=0,(r=T2[A+20>>2])&&S2[A+24|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+20>>2]=0,p2[A+24|0]=1,T2[(r=A+12|0)>>2]=0,(T2[r+4>>2]=0)|A;}function z0(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k=0,l=0,s=0,v=0,d=z2(0),B=z2(0),Q=z2(0),g=z2(0),w=z2(0),G=z2(0),C=z2(0),E=z2(0),D=z2(0),h=z2(0),Z=z2(0),Y=z2(0),R=z2(0),F=z2(0),W=z2(0),m=z2(0),N=z2(0),V=z2(0),J=z2(0),M=z2(0),I=z2(0),x=z2(0),y=z2(0),U=z2(0);if(L2=l=L2-160|0,a=S2[A+68|0],n=T2[(o=a?r:f)+4>>2],T2[n+76>>2]!=T2[A+80>>2]){if(1<=(0|(v=T2[A+52>>2])))for(;(s=T2[T2[A+60>>2]+k>>2])&&(n1[T2[T2[s>>2]>>2]](s),s=T2[A+4>>2],n1[T2[T2[s>>2]+60>>2]](s,T2[T2[A+60>>2]+k>>2])),k=k+4|0,v=v-1|0;);j0(A,f,r),T2[A+80>>2]=T2[n+76>>2];}if(s=T2[A+52>>2]){if(v=T2[n+72>>2],T2[148+l>>2]=i,T2[144+l>>2]=e,T2[136+l>>2]=a=a?f:r,T2[132+l>>2]=o,T2[128+l>>2]=13860,T2[156+l>>2]=T2[A+72>>2],T2[152+l>>2]=T2[A+60>>2],T2[140+l>>2]=T2[A+4>>2],(0|(k=T2[A+32>>2]))<=-1){for(T2[A+36>>2]<=-1&&((f=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+36>>2]=0,T2[A+40>>2]=0,p2[A+44|0]=1),s=k<<2;s=s+4|(T2[T2[A+40>>2]+s>>2]=0),(f=k)>>>0<=(k=f+1|0)>>>0;);s=T2[A+52>>2];}if(1<=((T2[A+32>>2]=0)|s))for(c=A+28|0,r=0;;){if(f=T2[T2[A+60>>2]+(r<<2)>>2]){if(n1[T2[T2[f>>2]+16>>2]](f,c),1<=(0|(k=T2[A+32>>2])))for(f=s=0;e=T2[T2[A+40>>2]+s>>2],T2[e+844>>2]&&(T2[i+4>>2]=e,b=T2[T2[i+8>>2]+8>>2],t=T2[e+836>>2],u=e,e=T2[T2[i+12>>2]+8>>2],m0(u,((k=(0|b)==(0|t))?t:e)+4|0,(k?e:b)+4|0),T2[i+4>>2]=0,k=T2[A+32>>2]),s=s+4|0,(0|(f=f+1|0))<(0|k););if((0|k)<=-1)for(T2[A+36>>2]<=-1&&((f=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),p2[A+44|0]=1,T2[A+36>>2]=0,T2[A+40>>2]=0),s=k<<2;s=s+4|(T2[T2[A+40>>2]+s>>2]=0),(f=k)>>>0<=(k=f+1|0)>>>0;);T2[A+32>>2]=0,s=T2[A+52>>2];}if(!((0|(r=r+1|0))<(0|s)))break;}if(v){if(f=T2[o+12>>2],h=j2[f+52>>2],Z=j2[f+56>>2],r=T2[a+12>>2],Y=j2[r+52>>2],R=j2[r+56>>2],d=j2[f+20>>2],B=j2[f+36>>2],F=j2[r+20>>2],W=j2[r+36>>2],m=j2[r+24>>2],Q=j2[f+24>>2],N=j2[r+40>>2],g=j2[f+40>>2],V=j2[r+32>>2],w=j2[f+32>>2],J=j2[r>>2],G=j2[f>>2],M=j2[r+16>>2],C=j2[f+16>>2],I=j2[f+48>>2],x=j2[r+48>>2],E=j2[f+4>>2],y=j2[r+4>>2],U=j2[r+8>>2],D=j2[f+8>>2],T2[92+l>>2]=0,T2[76+l>>2]=0,T2[60+l>>2]=0,j2[72+l>>2]=z2(z2(D*U)+z2(Q*m))+z2(g*N),j2[68+l>>2]=z2(z2(D*y)+z2(Q*F))+z2(g*W),j2[56+l>>2]=z2(z2(E*U)+z2(d*m))+z2(B*N),j2[52+l>>2]=z2(z2(E*y)+z2(d*F))+z2(B*W),h=z2(-h),j2[88+l>>2]=z2(z2(z2(Q*h)-z2(D*I))-z2(g*Z))+z2(z2(z2(D*x)+z2(Q*Y))+z2(g*R)),j2[84+l>>2]=z2(z2(z2(d*h)-z2(E*I))-z2(B*Z))+z2(z2(z2(E*x)+z2(d*Y))+z2(B*R)),T2[44+l>>2]=0,j2[32+l>>2]=z2(z2(G*J)+z2(C*M))+z2(w*V),j2[64+l>>2]=z2(z2(D*J)+z2(Q*M))+z2(g*V),j2[48+l>>2]=z2(z2(E*J)+z2(d*M))+z2(B*V),j2[40+l>>2]=z2(z2(G*U)+z2(C*m))+z2(w*N),j2[36+l>>2]=z2(z2(G*y)+z2(C*F))+z2(w*W),j2[80+l>>2]=z2(z2(z2(C*h)-z2(G*I))-z2(w*Z))+z2(z2(z2(G*x)+z2(C*Y))+z2(w*R)),f=T2[a+4>>2],n1[T2[T2[f>>2]+8>>2]](f,32+l|0,112+l|0,96+l|0),d=j2[i+32>>2],B=z2(j2[112+l>>2]-d),j2[112+l>>2]=B,Q=z2(j2[116+l>>2]-d),j2[116+l>>2]=Q,g=z2(j2[120+l>>2]-d),j2[120+l>>2]=g,w=z2(d+j2[96+l>>2]),j2[96+l>>2]=w,G=z2(d+j2[100+l>>2]),j2[100+l>>2]=G,d=z2(d+j2[104+l>>2]),j2[104+l>>2]=d,e=T2[v>>2]){if(f=T2[A+16>>2],(0|(k=T2[A+12>>2]))<=-1)for((0|f)<=-1&&((f=T2[A+20>>2])&&S2[A+24|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+16>>2]=0,T2[A+20>>2]=0,p2[A+24|0]=1,f=0),s=k<<2;s=s+4|(T2[T2[A+20>>2]+s>>2]=0),(r=k)>>>0<=(k=r+1|0)>>>0;);if(((T2[A+12>>2]=k=0)|f)<=63&&(T2[5498]=T2[5498]+1,s=0,(f=K2(275))&&(T2[(s=f+19&-16)-4>>2]=f),(f=T2[A+20>>2])&&S2[A+24|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]),k=T2[A+12>>2]),T2[A+20>>2]=s,T2[A+16>>2]=64,p2[A+24|0]=1,f=64),(0|f)==(0|k))if((0|(i=f<<1))<=(0|f))k=f;else {for(k=0,T2[5498]=T2[5498]+1,(r=K2(19+(f<<3)|(v=0)))&&(T2[(v=r+19&-16)-4>>2]=r),s=f;T2[k+v>>2]=T2[T2[A+20>>2]+k>>2],k=k+4|0,s=s-1|0;);(r=T2[A+20>>2])&&S2[A+24|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]),f=T2[A+12>>2]),k=f,T2[A+20>>2]=v,T2[A+16>>2]=i,p2[A+24|0]=1;}for(T2[T2[A+20>>2]+(k<<2)>>2]=e,k=k+1|0;;){if(T2[A+12>>2]=s=k-1|0,i=T2[A+20>>2],e=T2[i+(s<<2)>>2],w>=j2[e>>2]){if(B<=j2[e+16>>2]){if(G>=j2[e+4>>2]){if(Q<=j2[e+20>>2]){if(d>=j2[e+8>>2]){if(g<=j2[e+24>>2]){if(T2[e+40>>2]){if((0|s)==(0|(r=T2[A+16>>2])))if((0|(r=s?s<<1:1))<(0|k))r=s;else {if(i=0,r&&(T2[5498]=T2[5498]+1,(f=K2(19+(r<<2)|0))&&(T2[(i=f+19&-16)-4>>2]=f)),2<=(0|k))for(f=k-1|0,k=0;T2[i+k>>2]=T2[T2[A+20>>2]+k>>2],k=k+4|0,f=f-1|0;);(f=T2[A+20>>2])&&S2[A+24|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]),s=T2[A+12>>2]),T2[A+20>>2]=i,p2[A+24|0]=1,T2[A+16>>2]=r;}if(T2[A+12>>2]=f=s+1|0,T2[(s<<2)+i>>2]=T2[e+36>>2],(0|f)==(0|r))if((0|(v=r?r<<1:1))<=(0|r))f=r;else {if(i=0,v&&(T2[5498]=T2[5498]+1,(f=K2(19+(v<<2)|0))&&(T2[(i=f+19&-16)-4>>2]=f)),1<=(0|r))for(k=0,s=r;T2[i+k>>2]=T2[T2[A+20>>2]+k>>2],k=k+4|0,s=s-1|0;);f=r,(r=T2[A+20>>2])&&S2[A+24|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]),f=T2[A+12>>2]),T2[A+20>>2]=i,p2[A+24|0]=1,T2[A+16>>2]=v;}T2[A+12>>2]=k=f+1|0,T2[T2[A+20>>2]+(f<<2)>>2]=T2[e+40>>2];}else n1[T2[T2[128+l>>2]+12>>2]](128+l|0,e),k=T2[A+12>>2];}else k=s;}else k=s;}else k=s;}else k=s;}else k=s;}else k=s;if(!(0<(0|k)))break;}}}else if(!((0|s)<1))for(k=0,v=64;O0(128+l|0,T2[T2[n+32>>2]+v>>2],k),v=v+80|0,(0|s)!=(0|(k=k+1|0)););if(f=T2[A+52>>2],(0|(k=T2[A+32>>2]))<=-1)for(T2[A+36>>2]<=-1&&((r=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+36>>2]=0,T2[A+40>>2]=0,p2[A+44|0]=1),s=k<<2;s=s+4|(T2[T2[A+40>>2]+s>>2]=0),(r=k)>>>0<=(k=r+1|0)>>>0;);if(!(((T2[A+32>>2]=0)|f)<1))for(i=32,v=0;T2[T2[A+60>>2]+v>>2]&&(r=T2[n+32>>2]+i|0,k=T2[r+32>>2],e=T2[o+12>>2],y=j2[e+52>>2],U=j2[e+56>>2],Z=j2[r+16>>2],Y=j2[r+20>>2],R=j2[r+24>>2],d=j2[e+20>>2],B=j2[e+24>>2],F=j2[r-32>>2],W=j2[r-16>>2],m=j2[r>>2],N=j2[r-28>>2],V=j2[r-12>>2],J=j2[r+4>>2],M=j2[r-24>>2],Q=j2[e+36>>2],I=j2[r-8>>2],g=j2[e+40>>2],x=j2[r+8>>2],h=j2[e+48>>2],w=j2[e+8>>2],G=j2[e>>2],C=j2[e+4>>2],E=j2[e+16>>2],D=j2[e+32>>2],T2[92+l>>2]=s=0,T2[76+l>>2]=0,T2[60+l>>2]=0,T2[44+l>>2]=0,j2[72+l>>2]=z2(z2(D*M)+z2(Q*I))+z2(g*x),j2[68+l>>2]=z2(z2(D*N)+z2(Q*V))+z2(g*J),j2[64+l>>2]=z2(z2(D*F)+z2(Q*W))+z2(g*m),j2[56+l>>2]=z2(z2(E*M)+z2(d*I))+z2(B*x),j2[52+l>>2]=z2(z2(E*N)+z2(d*V))+z2(B*J),j2[48+l>>2]=z2(z2(E*F)+z2(d*W))+z2(B*m),j2[40+l>>2]=z2(z2(G*M)+z2(C*I))+z2(w*x),j2[36+l>>2]=z2(z2(G*N)+z2(C*V))+z2(w*J),j2[32+l>>2]=z2(z2(G*F)+z2(C*W))+z2(w*m),j2[88+l>>2]=U+z2(z2(z2(D*Z)+z2(Q*Y))+z2(g*R)),j2[84+l>>2]=y+z2(z2(z2(E*Z)+z2(d*Y))+z2(B*R)),j2[80+l>>2]=h+z2(z2(z2(G*Z)+z2(C*Y))+z2(w*R)),n1[T2[T2[k>>2]+8>>2]](k,32+l|0,112+l|0,96+l|0),r=T2[a+4>>2],n1[T2[T2[r>>2]+8>>2]](r,T2[a+12>>2],16+l|0,l),r=0,j2[112+l>>2]>j2[l>>2]||(r=0,j2[96+l>>2]<j2[16+l>>2]||(r=1)),j2[120+l>>2]>j2[8+l>>2]||j2[104+l>>2]<j2[24+l>>2]||(s=r),!(j2[100+l>>2]<j2[20+l>>2])&s&&!(j2[116+l>>2]>j2[4+l>>2])||(r=T2[T2[A+60>>2]+v>>2],n1[T2[T2[r>>2]>>2]](r),r=T2[A+4>>2],n1[T2[T2[r>>2]+60>>2]](r,T2[T2[A+60>>2]+v>>2]),T2[T2[A+60>>2]+v>>2]=0)),i=i+80|0,v=v+4|0,f=f-1|0;);}L2=160+l|0;}function O0(A,f,r){var e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z=0,Y=0,R=(0);L2=Z=L2-160|0,R=T2[A+4>>2],Y=T2[R+12>>2],s=j2[Y+52>>2],o=j2[Y+56>>2],e=j2[Y+24>>2],b=j2[Y+20>>2],i=j2[Y+40>>2],a=j2[Y+36>>2],t=T2[T2[R+4>>2]+32>>2],D=j2[Y+48>>2],c=j2[Y+8>>2],u=j2[Y>>2],k=j2[Y+4>>2],l=j2[Y+16>>2],n=j2[Y+32>>2],T2[156+Z>>2]=R=0,T2[140+Z>>2]=0,T2[124+Z>>2]=0,Y=t+P2(r,80)|0,v=j2[Y+8>>2],d=j2[Y+24>>2],B=j2[Y+40>>2],j2[136+Z>>2]=z2(z2(n*v)+z2(a*d))+z2(i*B),Q=j2[Y+4>>2],g=j2[Y+20>>2],w=j2[Y+36>>2],j2[132+Z>>2]=z2(z2(n*Q)+z2(a*g))+z2(i*w),j2[120+Z>>2]=z2(z2(l*v)+z2(b*d))+z2(e*B),j2[116+Z>>2]=z2(z2(l*Q)+z2(b*g))+z2(e*w),G=o,o=j2[Y+48>>2],C=j2[Y+52>>2],E=j2[Y+56>>2],j2[152+Z>>2]=G+z2(z2(z2(n*o)+z2(a*C))+z2(i*E)),j2[148+Z>>2]=s+z2(z2(z2(l*o)+z2(b*C))+z2(e*E)),T2[108+Z>>2]=0,G=n,n=j2[Y>>2],s=a,a=j2[Y+16>>2],h=i,i=j2[Y+32>>2],j2[128+Z>>2]=z2(z2(G*n)+z2(s*a))+z2(h*i),j2[112+Z>>2]=z2(z2(l*n)+z2(b*a))+z2(e*i),j2[96+Z>>2]=z2(z2(u*n)+z2(k*a))+z2(c*i),j2[104+Z>>2]=z2(z2(u*v)+z2(k*d))+z2(c*B),j2[100+Z>>2]=z2(z2(u*Q)+z2(k*g))+z2(c*w),j2[144+Z>>2]=D+z2(z2(z2(u*o)+z2(k*C))+z2(c*E)),n1[T2[T2[f>>2]+8>>2]](f,96+Z|0,80+Z|0,Z+64|0),e=j2[T2[A+20>>2]+32>>2],j2[80+Z>>2]=j2[80+Z>>2]-e,j2[84+Z>>2]=j2[84+Z>>2]-e,j2[88+Z>>2]=j2[88+Z>>2]-e,j2[64+Z>>2]=e+j2[64+Z>>2],j2[68+Z>>2]=e+j2[68+Z>>2],j2[72+Z>>2]=e+j2[72+Z>>2],Y=T2[A+8>>2],t=T2[Y+4>>2],n1[T2[T2[t>>2]+8>>2]](t,T2[Y+12>>2],48+Z|0,32+Z|0),Y=0,j2[80+Z>>2]>j2[32+Z>>2]||(Y=0,j2[64+Z>>2]<j2[48+Z>>2]||(Y=1)),j2[88+Z>>2]>j2[40+Z>>2]||j2[72+Z>>2]<j2[56+Z>>2]||(R=Y),j2[84+Z>>2]>j2[36+Z>>2]||1^R|j2[68+Z>>2]<j2[52+Z>>2]||(T2[28+Z>>2]=r,T2[24+Z>>2]=-1,T2[12+Z>>2]=f,f=T2[A+4>>2],T2[8+Z>>2]=f,T2[16+Z>>2]=T2[f+8>>2],e=j2[T2[A+20>>2]+32>>2],T2[20+Z>>2]=96+Z,e>z2(0)?(f=T2[A+12>>2],f=0|n1[T2[T2[f>>2]+8>>2]](f,8+Z|0,T2[A+8>>2],0,2)):(f=T2[(Y=r<<2)+T2[A+24>>2]>>2])||(f=T2[A+12>>2],f=0|n1[T2[T2[f>>2]+8>>2]](f,8+Z|0,T2[A+8>>2],T2[A+28>>2],1),T2[Y+T2[A+24>>2]>>2]=f,f=T2[Y+T2[A+24>>2]>>2]),Y=T2[A+20>>2],R=T2[Y+8>>2],T2[R+8>>2]!=T2[T2[A+4>>2]+8>>2]?(R=T2[Y+12>>2],T2[Y+12>>2]=8+Z,n1[T2[T2[Y>>2]+12>>2]](Y,-1,r)):(T2[Y+8>>2]=8+Z,n1[T2[T2[Y>>2]+8>>2]](Y,-1,r)),n1[T2[T2[f>>2]+8>>2]](f,8+Z|0,T2[A+8>>2],T2[A+16>>2],T2[A+20>>2]),f=T2[A+20>>2],T2[(T2[T2[f+8>>2]+8>>2]==T2[T2[A+4>>2]+8>>2]?8:12)+f>>2]=R),L2=160+Z|0;}function H0(A){var f,r,e,i,a=0,n=0,o=0,b=0,t=0;if(!((0|(f=T2[A+12>>2]))<=(0|(r=T2[A+28>>2])))){A:if(T2[A+32>>2]>=(0|f))o=T2[A+36>>2];else {if(f&&(T2[5498]=T2[5498]+1,(n=K2(19+(f<<2)|0))&&(T2[(o=n+19&-16)-4>>2]=n)),a=T2[A+36>>2],1<=(0|r))for(n=o,t=a,b=r;T2[n>>2]=T2[t>>2],n=n+4|0,t=t+4|0,b=b-1|0;);else if(!a){T2[A+36>>2]=o,T2[A+32>>2]=f,p2[A+40|0]=1;break A;}S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2])),T2[A+36>>2]=o,p2[A+40|0]=1,T2[A+32>>2]=f;}if(d2((r<<2)+o|0,0,f-r<<2),e=(T2[A+28>>2]=f)<<2,(0|(a=T2[A+48>>2]))<(0|f)){A:if(T2[A+52>>2]>=(0|f))o=T2[A+56>>2];else {if(o=0,f&&(T2[5498]=T2[5498]+1,(n=K2(16+(3|e)|0))&&(T2[(o=n+19&-16)-4>>2]=n)),i=T2[A+56>>2],1<=(0|a))for(n=o,t=i,b=a;T2[n>>2]=T2[t>>2],n=n+4|0,t=t+4|0,b=b-1|0;);else if(!i){T2[A+56>>2]=o,T2[A+52>>2]=f,p2[A+60|0]=1;break A;}S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2])),T2[A+56>>2]=o,p2[A+60|0]=1,T2[A+52>>2]=f;}d2((a<<2)+o|0,0,f-a<<2);}if(1<=(0|(T2[A+48>>2]=f))&&(d2(T2[A+36>>2],255,e),d2(T2[A+56>>2],255,e)),!((0|r)<1))for(t=T2[A+56>>2],n=T2[A+16>>2],o=T2[A+36>>2],b=0;a=T2[n>>2]|T2[n+4>>2]<<16,a=P2((a=(a<<15^-1)+a|0)>>>10^a,9),a=o+((T2[A+12>>2]-1&((a=((a^=a>>>6)<<11^-1)+a|0)>>>16^a))<<2)|0,T2[t>>2]=T2[a>>2],n=n+12|0,t=t+4|0,(0|r)!=(0|(b=(T2[a>>2]=b)+1|0)););}}function _0(A){return T2[(A|=0)+16>>2];}function L0(A){var f,r,e,i=0,a=0,n=0;if((i=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2])),T2[A+16>>2]=0,p2[A+20|0]=1,T2[(i=A+8|0)>>2]=0,T2[i+4>>2]=0,(i=T2[A+36>>2])&&S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2])),T2[A+36>>2]=0,p2[A+40|0]=1,T2[(i=A+28|0)>>2]=0,T2[i+4>>2]=0,(i=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2])),T2[A+56>>2]=0,p2[A+60|0]=1,T2[(i=A+48|0)>>2]=0,T2[i+4>>2]=0,T2[A+12>>2]<=1){if(T2[5498]=T2[5498]+1,(i=K2(43))&&(T2[(n=i+19&-16)-4>>2]=i),1<=(0|(a=T2[A+8>>2])))for(i=0;f=T2[A+16>>2]+i|0,e=T2[4+f>>2],T2[(r=i+n|0)>>2]=T2[f>>2],T2[4+r>>2]=e,T2[8+r>>2]=T2[8+f>>2],i=i+12|0,a=a-1|0;);(i=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2])),T2[A+16>>2]=n,p2[A+20|0]=1,T2[A+12>>2]=2;}H0(A);}function K0(A){var f,r,e=0,i=0,a=0;if(T2[(A|=0)>>2]=14028,e=T2[A+84>>2],1<=(0|(i=T2[e+(a=8)>>2]))){for(;(f=T2[T2[e+16>>2]+a>>2])&&(n1[T2[T2[f>>2]>>2]](f),r=T2[A+4>>2],n1[T2[T2[r>>2]+60>>2]](r,f)),a=a+12|0,i=i-1|0;);e=T2[A+84>>2];}return L0(e),e=T2[A+84>>2],n1[T2[T2[e>>2]>>2]](e),(e=T2[A+84>>2])&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),(e=T2[A+100>>2])&&S2[A+104|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+100>>2]=0,p2[A+104|0]=1,T2[(e=A+92|0)>>2]=0,T2[e+4>>2]=0,P0(A),0|A;}function q0(A,f,r,e,i){return z2(z2(1));}function $0(A,f){A|=0,f|=0;var r,e=0,i=0,a=0,n=0;if((a=T2[A+12>>2])&&S2[A+8|0]){if((0|(i=T2[f+4>>2]))==T2[f+8>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){if(r&&(T2[5498]=T2[5498]+1,(e=K2(19+(r<<2)|0))&&(T2[(n=e+19&-16)-4>>2]=e)),1<=(0|i))for(a=0,e=i;T2[a+n>>2]=T2[T2[f+12>>2]+a>>2],a=a+4|0,e=e-1|0;);(e=T2[f+12>>2])&&S2[f+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]),i=T2[f+4>>2]),T2[f+12>>2]=n,p2[f+16|0]=1,T2[f+8>>2]=r,a=T2[A+12>>2];}T2[f+4>>2]=i+1,T2[T2[f+12>>2]+(i<<2)>>2]=a;}}function A4(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t=z2(0),c=z2(0),u=z2(0),k=z2(0),l=z2(0),s=z2(0),v=z2(0),d=z2(0),B=z2(0),Q=0,g=z2(0),w=z2(0),G=z2(0),C=z2(0),E=z2(0),D=z2(0),h=z2(0),Z=z2(0),Y=z2(0),R=z2(0),F=z2(0),W=z2(0),m=z2(0),N=0;L2=e=L2-32|0,Q=T2[A+8>>2],D=j2[Q+80>>2],u=j2[Q+64>>2],l=z2(D-u),G=j2[Q+100>>2],s=j2[Q+68>>2],t=z2(G-s),h=j2[Q+84>>2],B=z2(h-s),R=j2[Q+96>>2],k=z2(R-u),d=z2(z2(l*t)-z2(B*k)),E=j2[Q+104>>2],F=j2[Q+72>>2],c=z2(E-F),m=j2[Q+88>>2],g=z2(m-F),t=z2(z2(B*c)-z2(g*t)),k=z2(z2(g*k)-z2(l*c)),c=z2(z2(d*d)+z2(z2(t*t)+z2(k*k)));A:if(c>=z2(14210854715202004e-30)&&(N=T2[A+4>>2],W=z2(j2[N+36>>2]*j2[N+20>>2]),v=z2(W+j2[A+12>>2]),c=z2(z2(1)/z2(_2(c))),t=z2(t*c),w=z2(j2[f+48>>2]-j2[f+112>>2]),C=z2(j2[f+52>>2]-j2[f+116>>2]),a=z2(j2[f+56>>2]-j2[f+120>>2]),Z=z2(z2(z2(w*j2[f+64>>2])+z2(C*j2[f+80>>2]))+z2(a*j2[f+96>>2])),o=z2(Z-u),k=z2(k*c),Y=z2(z2(z2(w*j2[f+68>>2])+z2(C*j2[f+84>>2]))+z2(a*j2[f+100>>2])),b=z2(Y-s),d=z2(d*c),w=z2(z2(z2(w*j2[f+72>>2])+z2(C*j2[f+88>>2]))+z2(a*j2[f+104>>2])),C=z2(w-F),(c=z2(z2(z2(t*o)+z2(k*b))+z2(d*C)))<z2(0)&&(d=z2(-d),k=z2(-k),c=z2(-c),t=z2(-t)),c<v)){l=z2(z2(C*z2(z2(l*k)-z2(B*t)))+z2(z2(o*z2(z2(B*d)-z2(g*k)))+z2(b*z2(z2(g*t)-z2(l*d))))),B=z2(R-D),g=z2(G-h),C=z2(z2(w-m)*z2(z2(B*k)-z2(g*t))),a=z2(g*d),g=z2(E-m),B=z2(C+z2(z2(z2(Z-D)*z2(a-z2(g*k)))+z2(z2(Y-h)*z2(z2(g*t)-z2(B*d)))));f:{r:{if(u=z2(u-R),s=z2(s-G),g=z2(z2(w-E)*z2(z2(u*k)-z2(s*t))),C=z2(s*d),s=z2(F-E),!((u=z2(g+z2(z2(z2(Z-R)*z2(C-z2(s*k)))+z2(z2(Y-G)*z2(z2(s*t)-z2(u*d))))))>z2(0)&&l>z2(0)&&B>z2(0))){if(!(u<=z2(0)))break r;if(!(l<=z2(0)))break r;if(!(B<=z2(0)))break r;}E=z2(w-z2(c*d)),D=z2(Y-z2(c*k)),h=z2(Z-z2(c*t)),R=z2(v*v);break f;}if((0|n1[T2[T2[Q>>2]+100>>2]](Q))<1)break A;for(R=z2(v*v),Q=N=0;n=T2[A+8>>2],n1[T2[T2[n>>2]+104>>2]](n,Q,e+16|0,e),c=z2(0),F=j2[e+16>>2],v=z2(Z-F),G=z2(j2[e>>2]-F),g=j2[e+20>>2],u=z2(Y-g),s=z2(j2[e+4>>2]-g),m=j2[e+24>>2],l=z2(w-m),B=z2(j2[e+8>>2]-m),(C=z2(z2(z2(v*G)+z2(u*s))+z2(l*B)))>z2(0)&&(C<(c=z2(z2(z2(G*G)+z2(s*s))+z2(B*B)))?(c=z2(C/c),l=z2(l-z2(B*c)),u=z2(u-z2(s*c)),v=z2(v-z2(G*c))):(l=z2(l-B),u=z2(u-s),v=z2(v-G),c=z2(1))),z2(z2(z2(v*v)+z2(u*u))+z2(l*l))<R&&(h=z2(F+z2(G*c)),D=z2(g+z2(s*c)),N=1,E=z2(m+z2(B*c))),n=T2[A+8>>2],Q=Q+1|0,(0|n1[T2[T2[n>>2]+100>>2]](n))>(0|Q););if(!N)break A;}c=z2(Z-h),v=z2(Y-D),u=z2(w-E),(l=z2(z2(z2(c*c)+z2(v*v))+z2(u*u)))<R&&(l>z2(1.1920928955078125e-7)&&(t=z2(_2(l)),W=z2(W-t),t=z2(z2(1)/t),d=z2(u*t),k=z2(v*t),t=z2(c*t)),c=z2(-W),i?(v=j2[f+72>>2],u=j2[f+64>>2],l=j2[f+68>>2],Z=j2[f+88>>2],Y=j2[f+80>>2],w=j2[f+84>>2],G=j2[f+104>>2],s=j2[f+96>>2],B=j2[f+100>>2],T2[e+28>>2]=0,R=z2(z2(z2(t*s)+z2(k*B))+z2(d*G)),j2[e+24>>2]=-R,F=z2(z2(z2(t*Y)+z2(k*w))+z2(d*Z)),j2[e+20>>2]=-F,t=z2(z2(z2(u*t)+z2(l*k))+z2(v*d)),j2[e+16>>2]=-t,T2[e+12>>2]=0,j2[e+8>>2]=z2(z2(z2(z2(h*s)+z2(D*B))+z2(E*G))+j2[f+120>>2])-z2(W*R),j2[e+4>>2]=z2(z2(z2(z2(h*Y)+z2(D*w))+z2(E*Z))+j2[f+116>>2])-z2(W*F),j2[e>>2]=z2(z2(z2(z2(h*u)+z2(D*l))+z2(E*v))+j2[f+112>>2])-z2(W*t)):(T2[e+28>>2]=0,W=j2[f+96>>2],v=j2[f+100>>2],u=j2[f+104>>2],j2[e+24>>2]=z2(z2(t*W)+z2(k*v))+z2(d*u),l=j2[f+80>>2],Z=j2[f+84>>2],Y=j2[f+88>>2],j2[e+20>>2]=z2(z2(t*l)+z2(k*Z))+z2(d*Y),w=j2[f+64>>2],s=z2(w*t),t=j2[f+68>>2],s=z2(s+z2(t*k)),k=j2[f+72>>2],j2[e+16>>2]=s+z2(k*d),T2[e+12>>2]=0,j2[e+8>>2]=z2(z2(z2(h*W)+z2(D*v))+z2(E*u))+j2[f+120>>2],j2[e+4>>2]=z2(z2(z2(h*l)+z2(D*Z))+z2(E*Y))+j2[f+116>>2],j2[e>>2]=z2(z2(z2(h*w)+z2(D*t))+z2(E*k))+j2[f+112>>2]),n1[T2[T2[r>>2]+16>>2]](r,e+16|0,e,c));}L2=e+32|0;}function f4(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z=0,Y=z2(0),R=z2(0),F=z2(0),W=0,m=z2(0),N=z2(0),V=z2(0),J=z2(0),M=z2(0),I=z2(0),x=z2(0),y=0,U=z2(0),X=z2(0),p=z2(0),T=0,S=z2(0),j=z2(0),P=z2(0),z=z2(0),O=z2(0),H=z2(0),_=z2(0),L=z2(0),K=z2(0),q=z2(0),$=0,A2=z2(0),f2=z2(0),r2=z2(0),e2=z2(0),i2=z2(0),a2=z2(0),n2=z2(0),o2=z2(0),b2=z2(0),t2=z2(0),c2=0,u2=0,k2=(z2(0)),l2=0,s2=(z2(0)),v2=0,d2=(0);j2[48+(L2=Z=L2-448|0)>>2]=j2[f>>2],j2[Z>>2]=j2[f+64>>2],e=T2[f+8>>2],T2[52+Z>>2]=T2[f+4>>2],T2[56+Z>>2]=e,i=T2[(e=f+68|0)+4>>2],T2[4+Z>>2]=T2[e>>2],T2[8+Z>>2]=i,e=T2[f+20>>2],T2[64+Z>>2]=T2[f+16>>2],T2[68+Z>>2]=e,i=T2[(e=f+80|0)+4>>2],T2[16+Z>>2]=T2[e>>2],T2[20+Z>>2]=i,j2[72+Z>>2]=j2[f+24>>2],j2[24+Z>>2]=j2[f+88>>2],j2[80+Z>>2]=j2[f+32>>2],Y=j2[f+96>>2],i=T2[(e=f+36|0)+4>>2],T2[84+Z>>2]=T2[e>>2],T2[88+Z>>2]=i,j2[40+Z>>2]=j2[f+104>>2],j2[36+Z>>2]=j2[f+100>>2],j2[32+Z>>2]=Y,e=T2[A+4>>2],Y=j2[e+40>>2],R=j2[e+44>>2],M=j2[e+36>>2],U=z2(n1[T2[T2[e>>2]+48>>2]](e)),X=z2(n1[T2[T2[e>>2]+48>>2]](e)),V=z2(n1[T2[T2[e>>2]+48>>2]](e)),A=T2[A+8>>2],F=j2[A+44>>2],J=j2[A+40>>2],N=j2[A+36>>2],I=z2(n1[T2[T2[A>>2]+48>>2]](A)),m=z2(n1[T2[T2[A>>2]+48>>2]](A)),P=z2(n1[T2[T2[A>>2]+48>>2]](A)),R=z2(R+V),V=z2(z2(R+R)*z2(.5)),j2[380+Z>>2]=V,Y=z2(Y+X),p=z2(z2(Y+Y)*z2(.5)),j2[376+Z>>2]=p,Y=z2(M+U),x=z2(z2(Y+Y)*z2(.5)),j2[372+Z>>2]=x,Y=z2(J+m),J=z2(z2(Y+Y)*z2(.5)),j2[364+Z>>2]=J,Y=z2(N+I),N=z2(z2(Y+Y)*z2(.5)),j2[360+Z>>2]=N,Y=z2(F+P),I=z2(z2(Y+Y)*z2(.5)),j2[368+Z>>2]=I;A:if(M=z2(j2[(i=f+112|0)>>2]-j2[f+48>>2]),s2=j2[48+Z>>2],U=z2(j2[f+116>>2]-j2[f+52>>2]),Y=j2[64+Z>>2],X=z2(j2[f+120>>2]-j2[f+56>>2]),R=j2[80+Z>>2],P=z2(z2(z2(M*s2)+z2(U*Y))+z2(X*R)),f2=j2[Z>>2],q=j2[16+Z>>2],z=j2[32+Z>>2],A2=z2(z2(z2(s2*f2)+z2(Y*q))+z2(R*z)),a=z2(O2(A2)),n=j2[4+Z>>2],e2=j2[20+Z>>2],o2=j2[36+Z>>2],i2=z2(z2(z2(s2*n)+z2(Y*e2))+z2(R*o2)),b=z2(O2(i2)),o=j2[8+Z>>2],k2=j2[24+Z>>2],k=j2[40+Z>>2],r2=z2(z2(z2(s2*o)+z2(Y*k2))+z2(R*k)),t=z2(O2(r2)),!((R=z2(z2(O2(P))-z2(z2(z2(x+z2(N*a))+z2(J*b))+z2(I*t))))>z2(0)||(Y=j2[52+Z>>2],m=j2[68+Z>>2],S=j2[84+Z>>2],F=z2(z2(z2(M*Y)+z2(U*m))+z2(X*S)),L=z2(z2(z2(Y*o)+z2(m*k2))+z2(S*k)),c=z2(O2(L)),K=z2(z2(z2(Y*n)+z2(m*e2))+z2(S*o2)),a2=z2(O2(K)),S=z2(z2(z2(Y*f2)+z2(m*q))+z2(S*z)),O=z2(O2(S)),Y=z2(-34028234663852886e22),A=e=0,R>z2(-34028234663852886e22)&&(e=P<z2(0),W=48+Z|0,Y=R,A=1),(R=z2(z2(O2(F))-z2(z2(z2(p+z2(N*O))+z2(J*a2))+z2(I*c))))>z2(0)||(j=j2[56+Z>>2],b2=j2[72+Z>>2],n2=j2[88+Z>>2],m=z2(z2(z2(M*j)+z2(U*b2))+z2(X*n2)),H=z2(z2(z2(j*o)+z2(b2*k2))+z2(n2*k)),l=z2(O2(H)),_=z2(z2(z2(j*n)+z2(b2*e2))+z2(n2*o2)),s=z2(O2(_)),j=z2(z2(z2(j*f2)+z2(b2*q))+z2(n2*z)),u=z2(O2(j)),Y<R&&(W=48+Z|4,e=F<z2(0),Y=R,A=2),(R=z2(z2(O2(m))-z2(z2(z2(V+z2(N*u))+z2(J*s))+z2(I*l))))>z2(0)||(Y<R&&(W=48+Z|8,e=m<z2(0),Y=R,A=3),f2=z2(z2(z2(M*f2)+z2(U*q))+z2(X*z)),(R=z2(z2(O2(f2))-z2(N+z2(z2(V*u)+z2(z2(x*a)+z2(p*O))))))>z2(0)||(Y<R&&(e=f2<z2(0),W=Z,Y=R,A=4),f2=z2(z2(z2(M*n)+z2(U*e2))+z2(X*o2)),(R=z2(z2(O2(f2))-z2(J+z2(z2(V*s)+z2(z2(x*b)+z2(p*a2))))))>z2(0)||(Y<R&&(W=4|Z,e=f2<z2(0),Y=R,A=5),M=z2(z2(z2(M*o)+z2(U*k2))+z2(X*k)),(R=z2(z2(O2(M))-z2(I+z2(z2(V*l)+z2(z2(x*t)+z2(p*c))))))>z2(0)||(Y<R&&(W=8|Z,e=M<z2(0),Y=R,A=6),t2=z2(z2(m*S)-z2(F*j)),b=z2(b+z2(9999999747378752e-21)),u=z2(u+z2(9999999747378752e-21)),v=z2(O+z2(9999999747378752e-21)),t=z2(t+z2(9999999747378752e-21)),(R=z2(z2(O2(t2))-z2(z2(I*b)+z2(z2(z2(p*u)+z2(V*v))+z2(J*t)))))>z2(1.1920928955078125e-7)||(f2=z2(s+z2(9999999747378752e-21)),n=z2(a2+z2(9999999747378752e-21)),o=z2(a+z2(9999999747378752e-21)),X=z2(0),s=z2(S*S),a=z2(z2(j*j)+z2(0)),(a2=z2(_2(z2(s+a))))>z2(1.1920928955078125e-7)?(U=z2(0),R=z2(R/a2),M=z2(0),z2(R*z2(1.0499999523162842))>Y&&(e=t2<z2(0),U=z2(S/a2),X=z2(z2(0)/a2),W=0,A=7,Y=R,M=z2(z2(-j)/a2))):(U=z2(0),M=z2(0)),t2=z2(z2(m*K)-z2(F*_)),(R=z2(z2(O2(t2))-z2(z2(I*o)+z2(z2(z2(p*f2)+z2(V*n))+z2(N*t)))))>z2(1.1920928955078125e-7)||(a2=z2(l+z2(9999999747378752e-21)),c=z2(c+z2(9999999747378752e-21)),l=z2(K*K),Q=z2(z2(_*_)+z2(0)),(O=z2(_2(z2(l+Q))))>z2(1.1920928955078125e-7)&&(R=z2(R/O),z2(R*z2(1.0499999523162842))>Y&&(e=t2<z2(0),U=z2(K/O),M=z2(z2(-_)/O),X=z2(z2(0)/O),W=0,A=8,Y=R)),t2=z2(z2(m*L)-z2(F*H)),(R=z2(z2(O2(t2))-z2(z2(J*o)+z2(z2(N*b)+z2(z2(p*a2)+z2(V*c))))))>z2(1.1920928955078125e-7)||(g=z2(L*L),w=z2(z2(H*H)+z2(0)),(O=z2(_2(z2(g+w))))>z2(1.1920928955078125e-7)&&(R=z2(R/O),z2(R*z2(1.0499999523162842))>Y&&(e=t2<z2(0),U=z2(L/O),M=z2(z2(-H)/O),X=z2(z2(0)/O),W=0,A=9,Y=R)),t2=z2(z2(P*j)-z2(m*A2)),(R=z2(z2(O2(t2))-z2(z2(I*n)+z2(z2(z2(x*u)+z2(V*o))+z2(J*c)))))>z2(1.1920928955078125e-7)||(G=z2(A2*A2),(O=z2(_2(z2(G+a))))>z2(1.1920928955078125e-7)&&(R=z2(R/O),z2(R*z2(1.0499999523162842))>Y&&(e=t2<z2(0),U=z2(z2(-A2)/O),M=z2(z2(0)/O),X=z2(j/O),W=0,A=10,Y=R)),O=z2(z2(P*_)-z2(m*i2)),(R=z2(z2(O2(O))-z2(z2(I*v)+z2(z2(z2(x*f2)+z2(V*b))+z2(N*c)))))>z2(1.1920928955078125e-7)||(a=z2(i2*i2),(j=z2(_2(z2(a+Q))))>z2(1.1920928955078125e-7)&&(R=z2(R/j),z2(R*z2(1.0499999523162842))>Y&&(e=O<z2(0),U=z2(z2(-i2)/j),M=z2(z2(0)/j),X=z2(_/j),W=0,A=11,Y=R)),_=z2(z2(P*H)-z2(m*r2)),(R=z2(z2(O2(_))-z2(z2(J*v)+z2(z2(N*n)+z2(z2(x*a2)+z2(V*t))))))>z2(1.1920928955078125e-7)||(j=z2(r2*r2),(m=z2(_2(z2(j+w))))>z2(1.1920928955078125e-7)&&(R=z2(R/m),z2(R*z2(1.0499999523162842))>Y&&(e=_<z2(0),U=z2(z2(-r2)/m),M=z2(z2(0)/m),X=z2(H/m),W=0,A=12,Y=R)),H=z2(z2(F*A2)-z2(P*S)),(R=z2(z2(O2(H))-z2(z2(I*f2)+z2(z2(z2(x*v)+z2(p*o))+z2(J*a2)))))>z2(1.1920928955078125e-7)||((m=z2(_2(z2(z2(s+G)+z2(0)))))>z2(1.1920928955078125e-7)&&(R=z2(R/m),z2(R*z2(1.0499999523162842))>Y&&(e=H<z2(0),U=z2(z2(0)/m),M=z2(A2/m),X=z2(z2(-S)/m),W=0,A=13,Y=R)),A2=z2(z2(F*i2)-z2(P*K)),(R=z2(z2(O2(A2))-z2(z2(I*u)+z2(z2(z2(x*n)+z2(p*b))+z2(N*a2)))))>z2(1.1920928955078125e-7)||((m=z2(_2(z2(z2(l+a)+z2(0)))))>z2(1.1920928955078125e-7)&&(R=z2(R/m),z2(R*z2(1.0499999523162842))>Y&&(e=A2<z2(0),U=z2(z2(0)/m),M=z2(i2/m),X=z2(z2(-K)/m),W=0,A=14,Y=R)),m=z2(z2(F*r2)-z2(P*L)),(R=z2(z2(O2(m))-z2(z2(J*u)+z2(z2(N*f2)+z2(z2(x*c)+z2(p*t))))))>z2(1.1920928955078125e-7))))))))))))))))){f:{r:{if((F=z2(_2(z2(z2(g+j)+z2(0)))))>z2(1.1920928955078125e-7)&&(R=z2(R/F),z2(R*z2(1.0499999523162842))>Y))e=m<z2(0),U=z2(z2(0)/F),M=z2(r2/F),X=z2(z2(-L)/F),A=15;else {if(!A)break A;if(W)break r;R=Y;}m=z2(z2(z2(X*j2[80+Z>>2])+z2(M*j2[84+Z>>2]))+z2(U*n2)),F=z2(z2(z2(s2*X)+z2(M*j2[52+Z>>2]))+z2(U*j2[56+Z>>2])),Y=z2(z2(z2(X*j2[64+Z>>2])+z2(M*j2[68+Z>>2]))+z2(U*b2));break f;}m=j2[W+32>>2],F=j2[W>>2],R=Y,Y=j2[W+16>>2];}if(M=e?z2(-m):m,U=e?z2(-Y):Y,X=e?z2(-F):F,7<=(0|A))j=j2[f+48>>2],s2=j2[f+52>>2],f2=j2[f+56>>2],Y=j2[56+Z>>2],m=j2[80+Z>>2],P=j2[48+Z>>2],A2=j2[64+Z>>2],i2=j2[84+Z>>2],r2=j2[52+Z>>2],L=j2[68+Z>>2],T2[(f=184+Z|0)>>2]=T2[i+8>>2],e=T2[i+4>>2],T2[176+Z>>2]=T2[i>>2],T2[180+Z>>2]=e,F=z2(0),H=j2[Z>>2],N=z2(z2(z2(X*H)+z2(U*q))+z2(M*z))>z2(0)?z2(-N):N,_=j2[4+Z>>2],J=z2(z2(z2(X*_)+z2(U*e2))+z2(M*o2))>z2(0)?z2(-J):J,S=z2(z2(j2[f>>2]+z2(N*z))+z2(J*o2)),z=j2[8+Z>>2],I=z2(z2(z2(X*z)+z2(U*k2))+z2(M*k))>z2(0)?z2(-I):I,K=z2(S+z2(I*k)),S=z2(z2(z2(j2[180+Z>>2]+z2(N*q))+z2(J*e2))+z2(I*k2)),J=z2(z2(z2(j2[176+Z>>2]+z2(N*H))+z2(J*_))+z2(I*z)),q=j2[(A=(48+Z|0)+((0|(f=A-7|0))/3<<24>>24<<2)|0)>>2],N=j2[(f=((0|f)%3<<24>>24<<2)+Z|0)>>2],z=j2[A+16>>2],I=j2[f+16>>2],e2=j2[A+32>>2],H=j2[f+32>>2],_=z2(z2(z2(q*N)+z2(z*I))+z2(e2*H)),(o2=z2(z2(1)-z2(_*_)))<=z2(9999999747378752e-20)||(x=z2(z2(z2(X*P)+z2(U*A2))+z2(M*m))>z2(0)?x:z2(-x),p=z2(z2(z2(X*r2)+z2(U*L))+z2(M*i2))>z2(0)?p:z2(-p),V=z2(z2(z2(X*Y)+z2(U*b2))+z2(M*n2))>z2(0)?V:z2(-V),Y=z2(J-z2(z2(z2(j+z2(x*P))+z2(p*r2))+z2(V*Y))),F=z2(S-z2(z2(z2(s2+z2(x*A2))+z2(p*L))+z2(V*b2))),V=z2(K-z2(z2(z2(f2+z2(x*m))+z2(p*i2))+z2(V*n2))),F=z2(z2(z2(z2(z2(z2(Y*q)+z2(F*z))+z2(V*e2))*_)-z2(z2(z2(Y*N)+z2(F*I))+z2(V*H)))*z2(z2(1)/o2))),j2[184+Z>>2]=K+z2(F*H),j2[180+Z>>2]=S+z2(F*I),j2[176+Z>>2]=J+z2(F*N),T2[284+Z>>2]=0,j2[280+Z>>2]=-M,j2[276+Z>>2]=-U,j2[272+Z>>2]=-X,n1[T2[T2[r>>2]+16>>2]](r,272+Z|0,176+Z|0,R);else {$=f+48|0,f=(0|A)<4?(y=48+Z|0,u2=372+Z|0,W=360+Z|0,R=X,p=U,V=M,Z):(V=z2(-M),p=z2(-U),R=z2(-X),f=i,W=372+(y=Z)|0,u2=360+Z|0,i=$,$=f,48+Z|0),x=z2(z2(z2(R*j2[f>>2])+z2(p*j2[f+16>>2]))+z2(V*j2[f+32>>2])),j2[344+Z>>2]=x,F=z2(z2(z2(R*j2[f+4>>2])+z2(p*j2[f+20>>2]))+z2(V*j2[f+36>>2])),j2[348+Z>>2]=F,l2=1,Y=z2(z2(z2(R*j2[f+8>>2])+z2(p*j2[f+24>>2]))+z2(V*j2[f+40>>2])),j2[352+Z>>2]=Y,Y=z2(O2(Y)),F=z2(O2(F));f:{if((x=z2(O2(x)))<F){if(l2=0,Y<F){v2=2,e=1;break f;}}else {if(Y<x){v2=2,e=0;break f;}l2=0;}v2=1,e=2;}Y=j2[(e<<=2)+W>>2],x=z2(Y*j2[f+e>>2]),F=z2(j2[i>>2]-j2[$>>2]),x=j2[e+(344+Z|0)>>2]<z2(0)?(A2=z2(z2(j2[i+8>>2]-j2[$+8>>2])+z2(Y*j2[f+(32|e)>>2])),i2=z2(F+x),z2(z2(j2[i+4>>2]-j2[$+4>>2])+z2(Y*j2[f+(16|e)>>2]))):(A2=z2(z2(j2[i+8>>2]-j2[$+8>>2])-z2(Y*j2[f+(32|e)>>2])),i2=z2(F-x),z2(z2(j2[i+4>>2]-j2[$+4>>2])-z2(Y*j2[f+(16|e)>>2]))),e=1,i=2;f:{r:{e:switch(0|(d2=((0|A)<4?-1:-4)+A|0)){case 0:break f;case 1:break e;default:break r;}e=0;break f;}i=1,e=0;}Y=j2[(i=(T=i<<2)+y|0)>>2],F=j2[i+16>>2],J=j2[i+32>>2],b2=z2(z2(z2(i2*Y)+z2(x*F))+z2(A2*J)),I=j2[(d=(i=l2<<2)+f|0)>>2],m=j2[16+d>>2],P=j2[32+d>>2],n2=z2(z2(z2(Y*I)+z2(F*m))+z2(J*P)),L=j2[i+W>>2],K=z2(n2*L),z=z2(b2+K),S=j2[(B=(i=v2<<2)+f|0)>>2],q=j2[16+B>>2],e2=j2[32+B>>2],H=z2(z2(z2(Y*S)+z2(F*q))+z2(J*e2)),o2=j2[i+W>>2],Y=z2(H*o2),r2=z2(z-Y),F=j2[(e=(i=e<<2)+y|0)>>2],J=j2[e+16>>2],N=j2[e+32>>2],_=z2(z2(z2(i2*F)+z2(x*J))+z2(A2*N)),j=z2(z2(z2(F*I)+z2(J*m))+z2(N*P)),k2=z2(j*L),m=z2(_+k2),q=z2(z2(z2(F*S)+z2(J*q))+z2(N*e2)),S=z2(q*o2),I=z2(m-S),L=z2(z+Y),m=z2(m+S),F=z2(b2-K),P=z2(F+Y),z=z2(_-k2),N=z2(z+S),K=z2(F-Y),J=j2[T+u2>>2],F=j2[i+u2>>2],Y=z2(-F);f:{r:{e:{i:{a:{n:{o:{b:{t:{c:{u:{k:{l:{s:{S=z2(z-S);v:{if(!(y=F>z2(-S))){if(T=1,e=i=272+Z|(W=0),F>z2(-N))break v;break k;}if(j2[276+Z>>2]=K,j2[272+Z>>2]=S,e=272+Z|8,T=2,F>z2(-N))break s;}if(j2[(i=e)>>2]=Y,j2[i+4>>2]=K+z2(z2(Y-S)*z2(z2(P-K)/z2(N-S))),e=i+8|0,y){W=T,i=e;break k;}j2[i+12>>2]=P,j2[i+8>>2]=N,W=T+1|0;break l;}j2[284+Z>>2]=P,j2[280+Z>>2]=N,W=2;}if(i=e+8|0,e=0,F>z2(-m))break t;break u;}if(e=1,!(F>z2(-m)))break c;}if(j2[i>>2]=Y,j2[i+4>>2]=P+z2(z2(Y-N)*z2(z2(L-P)/z2(m-N))),8&(W=W+1|0)){e=W;break f;}if(i=i+8|0,e)break t;}if(e=1,F>z2(-I))break b;break o;}if(j2[i+4>>2]=L,j2[i>>2]=m,8&(W=W+1|0)){e=W;break f;}if(i=i+8|0,e=0,F>z2(-I))break n;}if(j2[i>>2]=Y,j2[i+4>>2]=L+z2(z2(Y-m)*z2(z2(r2-L)/z2(I-m))),8&(W=W+1|0)){e=W;break f;}if(i=i+8|0,e)break n;}if(y)break a;if(((e=0)|W)<=0)break e;break i;}if(j2[i+4>>2]=r2,j2[i>>2]=I,8&(W=W+1|0)){e=W;break f;}if(y)break i;i=i+8|0;}if(j2[i>>2]=Y,j2[i+4>>2]=r2+z2(z2(Y-I)*z2(z2(K-r2)/z2(S-I))),8&(e=W=W+1|0))break f;}for(C=272+Z|4,i=272+Z|(e=0),y=176+Z|0;;){if((Y=j2[i>>2])<F){if(j2[y>>2]=Y,j2[y+4>>2]=j2[i+4>>2],8&(e=e+1|0))break e;y=y+8|0,Y=j2[i>>2];}if(T=i+8|0,(Y<F|0)!=((I=j2[((c2=1<(0|W))?T:272+Z|0)>>2])<F|0)){if(m=j2[(c2?i+12|0:C)>>2],N=j2[i+4>>2],j2[y>>2]=F,j2[y+4>>2]=N+z2(z2(F-Y)*z2(z2(m-N)/z2(I-Y))),8&(e=e+1|0))break e;y=y+8|0;}if(W=W-1|0,i=T,!c2)break;}if((0|e)<1)e=0;else {for(N=z2(-J),E=176+Z|4,W=272+Z|(y=0),i=176+Z|0;;){if(Y=j2[(T=i+4|0)>>2],(F=z2(-Y))<J){if(j2[W>>2]=j2[i>>2],j2[W+4>>2]=j2[T>>2],8&(y=y+1|0)){e=y;break r;}Y=j2[T>>2],F=z2(-Y),W=W+8|0;}if(T=i+8|0,I=j2[((c2=1<(0|e))?i+12|0:E)>>2],(F<J|0)!=(J>z2(-I)|0)){if(m=j2[(c2?T:176+Z|0)>>2],F=j2[i>>2],j2[W+4>>2]=N,j2[W>>2]=F+z2(z2(N-Y)*z2(z2(m-F)/z2(I-Y))),8&(y=y+1|0)){e=y;break r;}W=W+8|0;}if(e=e-1|0,i=T,!c2)break;}if(!(((e=0)|y)<1))for(i=272+Z|0,W=176+Z|0;;){if((F=j2[(T=i+4|0)>>2])<J){if(j2[W>>2]=j2[i>>2],j2[W+4>>2]=j2[T>>2],8&(e=e+1|0))break e;F=j2[T>>2],W=W+8|0;}if(T=i+8|0,(F<J|0)!=((N=j2[((c2=1<(0|y))?i+12|0:C)>>2])<J|0)){if(I=j2[(c2?T:272+Z|0)>>2],Y=j2[i>>2],j2[W+4>>2]=J,j2[W>>2]=Y+z2(z2(J-F)*z2(z2(I-Y)/z2(N-F))),8&(e=e+1|0))break e;W=W+8|0;}if(y=y-1|0,i=T,!c2)break;}}}$2(272+Z|0,176+Z|0,e<<3);}if((0|e)<1)break A;}for(Y=z2(z2(1)/z2(z2(j*H)-z2(n2*q))),J=z2(Y*z2(-n2)),N=z2(H*Y),I=z2(q*Y),m=z2(j*Y),P=j2[(d2<<2)+u2>>2],r2=j2[f+(32|(i=v2<<2))>>2],L=j2[f+(32|(W=l2<<2))>>2],K=j2[f+(16|i)>>2],S=j2[f+(16|W)>>2],n2=j2[B>>2],H=j2[d>>2],f=272+Z|(W=0);i=(176+Z|0)+P2(W,12)|0,j=j2[f>>2],F=z2(j-_),q=j2[f+4>>2],z=z2(q-b2),Y=z2(z2(N*F)-z2(I*z)),F=z2(z2(J*F)+z2(m*z)),z=z2(z2(i2+z2(Y*H))+z2(F*n2)),j2[i>>2]=z,e2=z2(z2(x+z2(Y*S))+z2(F*K)),j2[i+4>>2]=e2,Y=z2(z2(A2+z2(Y*L))+z2(F*r2)),j2[i+8>>2]=Y,Y=z2(P-z2(z2(z2(R*z)+z2(p*e2))+z2(V*Y))),(j2[(144+Z|0)+(W<<2)>>2]=Y)>=z2(0)&&(j2[(i=W<<3)+(272+Z|0)>>2]=j,j2[(272+Z|0)+(4|i)>>2]=q,W=W+1|0),f=f+8|0,e=e-1|0;);if(!((0|W)<1))if((0|W)<=(0|(u2=1<(0|(y=(0|W)<4?W:4))?y:1))){if(4<=(0|A))for(R=z2(-M),V=z2(-U),p=z2(-X),i=144+Z|0,f=176+Z|0;Y=j2[i>>2],j2[416+Z>>2]=z2(j2[f>>2]+j2[$>>2])-z2(X*Y),j2[420+Z>>2]=z2(j2[f+4>>2]+j2[$+4>>2])-z2(U*Y),j2[424+Z>>2]=z2(j2[f+8>>2]+j2[$+8>>2])-z2(M*Y),T2[396+Z>>2]=0,j2[392+Z>>2]=R,j2[388+Z>>2]=V,j2[384+Z>>2]=p,n1[T2[T2[r>>2]+16>>2]](r,384+Z|0,416+Z|0,z2(-Y)),f=f+12|0,i=i+4|0,W=W-1|0;);else for(Y=z2(-M),R=z2(-U),M=z2(-X),i=144+Z|0,f=176+Z|0;j2[416+Z>>2]=j2[f>>2]+j2[$>>2],j2[420+Z>>2]=j2[f+4>>2]+j2[$+4>>2],j2[424+Z>>2]=j2[f+8>>2]+j2[$+8>>2],T2[396+Z>>2]=0,j2[392+Z>>2]=Y,j2[388+Z>>2]=R,j2[384+Z>>2]=M,n1[T2[T2[r>>2]+16>>2]](r,384+Z|0,416+Z|0,z2(-j2[i>>2])),f=f+12|0,i=i+4|0,W=W-1|0;);}else {for(f=144+Z|4,T=0,F=j2[144+Z>>2],i=1;F=(e=F<(Y=j2[f>>2]))?Y:F,T=e?i:T,f=f+4|0,(0|W)!=(0|(i=i+1|0)););f:{r:{e:{i:switch(0|(i=W-1|0)){case 1:break e;case 0:break i;default:break r;}F=j2[276+Z>>2],Y=j2[272+Z>>2];break f;}F=z2(z2(j2[276+Z>>2]+j2[284+Z>>2])*z2(.5)),Y=z2(z2(j2[272+Z>>2]+j2[280+Z>>2])*z2(.5));break f;}for(Y=z2(0),f=272+Z|0,m=z2(0),R=z2(0);N=Y,Y=j2[f+12>>2],V=j2[f+4>>2],F=z2(Y+V),p=j2[f>>2],x=j2[(f=f+8|0)>>2],V=z2(z2(p*Y)-z2(x*V)),Y=z2(N+z2(F*V)),R=z2(R+V),m=z2(m+z2(z2(p+x)*V)),i=i-1|0;);V=z2(0xde0b6b000000000),N=R,p=j2[(f=(272+Z|0)+(W<<3)|0)-8>>2],x=j2[276+Z>>2],J=j2[272+Z>>2],F=j2[f-4>>2],R=z2(z2(p*x)-z2(J*F)),N=z2(N+R),z2(O2(N))>z2(1.1920928955078125e-7)&&(V=z2(z2(1)/z2(N*z2(3)))),F=z2(z2(Y+z2(z2(x+F)*R))*V),Y=z2(z2(m+z2(z2(p+J)*R))*V);}for(i=416+Z|0,f=272+Z|0,e=W;D=i,h=B2(z2(j2[f+4>>2]-F),z2(j2[f>>2]-Y)),j2[D>>2]=h,f=f+8|0,i=i+4|0,e=e-1|0;);for(f=384+Z|0,i=W;T2[f>>2]=1,f=f+4|0,i=i-1|0;);if(T2[112+Z>>2]=T,2<=((T2[(f=T<<2)+(384+Z|0)>>2]=0)|y))for(V=z2(z2(6.2831854820251465)/z2(0|u2)),p=j2[f+(416+Z|0)>>2],y=112+Z|0,l2=1;;){for(T2[y+4>>2]=T,x=(Y=z2(z2(V*z2(0|l2))+p))>z2(3.1415927410125732)?z2(Y+z2(-6.2831854820251465)):Y,y=y+4|0,e=0,Y=z2(1e9),i=416+Z|0,f=384+Z|0,v2=T;T2[f>>2]&&(R=(R=z2(O2(z2(j2[i>>2]-x))))>z2(3.1415927410125732)?z2(z2(6.2831854820251465)-R):R)<Y&&(v2=T2[y>>2]=e,Y=R),f=f+4|0,i=i+4|0,(0|W)!=(0|(e=e+1|0)););if(((T2[(384+Z|0)+(v2<<2)>>2]=0)|u2)==(0|(l2=l2+1|0)))break;}if(R=z2(-M),V=z2(-U),p=z2(-X),4<=(0|A))for(i=u2-1|0,A=112+Z|4;;){if(f=(176+Z|0)+P2(T,12)|0,x=z2(j2[f>>2]+j2[$>>2]),j2[416+Z>>2]=x,F=z2(j2[f+4>>2]+j2[$+4>>2]),j2[420+Z>>2]=F,Y=z2(j2[f+8>>2]+j2[$+8>>2]),j2[424+Z>>2]=Y,T2[396+Z>>2]=0,j2[392+Z>>2]=R,j2[388+Z>>2]=V,j2[384+Z>>2]=p,T2[108+Z>>2]=0,N=Y,Y=j2[(144+Z|0)+(T<<2)>>2],j2[104+Z>>2]=N-z2(M*Y),j2[100+Z>>2]=F-z2(U*Y),j2[96+Z>>2]=x-z2(X*Y),n1[T2[T2[r>>2]+16>>2]](r,384+Z|0,96+Z|0,z2(-Y)),!i)break A;i=i-1|0,T=T2[A>>2],A=A+4|0;}for(i=u2-1|0,A=112+Z|4;;){if(f=(176+Z|0)+P2(T,12)|0,j2[416+Z>>2]=j2[f>>2]+j2[$>>2],j2[420+Z>>2]=j2[f+4>>2]+j2[$+4>>2],j2[424+Z>>2]=j2[f+8>>2]+j2[$+8>>2],T2[396+Z>>2]=0,j2[392+Z>>2]=R,j2[388+Z>>2]=V,j2[384+Z>>2]=p,n1[T2[T2[r>>2]+16>>2]](r,384+Z|0,416+Z|0,z2(-j2[(144+Z|0)+(T<<2)>>2])),!i)break A;i=i-1|0,T=T2[A>>2],A=A+4|0;}}}}L2=448+Z|0;}function r4(A,f,r){var e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G=0,C=z2(0),E=0,D=z2(0),h=0,Z=0,Y=z2(0),R=z2(0),F=z2(0),W=0,m=z2(0),N=z2(0),V=0,J=z2(0),M=0,I=z2(0),x=z2(0),y=z2(0),U=0,X=z2(0),p=z2(0),T=z2(0),S=0,j=(0),P=z2(0),z=(0),O=(z2(0)),H=(0),_=0;L2=G=L2-128|0,T2[A+376>>2]=0,T2[A+364>>2]=4,T2[A+368>>2]=0,T2[A+360>>2]=W=A+316|0,T2[A+356>>2]=A+284,T2[A+352>>2]=A+252,T2[A+348>>2]=A+220,h=T2[f+4>>2],T2[A>>2]=T2[f>>2],T2[A+4>>2]=h,h=T2[(E=f+16|0)+4>>2],T2[(Z=A+16|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[f+12>>2],T2[A+8>>2]=T2[f+8>>2],T2[A+12>>2]=h,h=T2[(E=f+32|0)+4>>2],T2[(Z=A+32|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[(E=f+24|0)+4>>2],T2[(Z=A+24|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[(E=f+48|0)+4>>2],T2[(Z=A+48|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[(E=f+40|0)+4>>2],T2[(Z=A+40|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[(E=f- -64|0)+4>>2],T2[(Z=A- -64|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[f+60>>2],T2[A+56>>2]=T2[f+56>>2],T2[A+60>>2]=h,h=T2[(E=f+80|0)+4>>2],T2[(Z=A+80|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[(E=f+72|0)+4>>2],T2[(Z=A+72|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[(E=f+96|0)+4>>2],T2[(Z=A+96|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[(E=f+88|0)+4>>2],T2[(Z=A+88|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[(E=f+104|0)+4>>2],T2[(Z=A+104|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,h=T2[(E=f+112|0)+4>>2],T2[(Z=A+112|0)>>2]=T2[E>>2],T2[Z+4>>2]=h,E=T2[f+120>>2],f=T2[f+124>>2],T2[A+144>>2]=0,T2[(h=A+180|0)>>2]=0,T2[A+120>>2]=E,T2[A+124>>2]=f,f=T2[r+4>>2],T2[A+128>>2]=T2[r>>2],T2[A+132>>2]=f,f=T2[(r=r+8|0)+4>>2],T2[(E=Z=A+136|0)>>2]=T2[r>>2],T2[E+4>>2]=f,R=j2[E>>2],C=j2[(r=A+132|0)>>2],D=j2[A+128>>2],T2[A+364>>2]=3,T2[(f=A+164|0)>>2]=0,T2[h>>2]=1,T2[(B=A+148|0)>>2]=W,Y=z2(-D),e4(A,(h=(D=z2(z2(z2(D*D)+z2(C*C))+z2(R*R)))>z2(0))?Y:z2(1),z2(h?-C:0),z2(h?-R:0),W),T2[f>>2]=1065353216,E=T2[B>>2],f=T2[E+20>>2],T2[A+128>>2]=T2[E+16>>2],T2[A+132>>2]=f,f=T2[(h=E+24|0)+4>>2],T2[Z>>2]=T2[h>>2],T2[Z+4>>2]=f,V=T2[h+4>>2],h=T2[h>>2],T2[(f=88+G|0)>>2]=h,T2[f+4>>2]=V,T2[(f=72+G|0)>>2]=h,T2[f+4>>2]=V,T2[(f=56+G|0)>>2]=h,T2[f+4>>2]=V,W=T2[E+20>>2],f=T2[E+16>>2],T2[80+G>>2]=f,T2[84+G>>2]=W,T2[64+G>>2]=f,T2[68+G>>2]=W,T2[48+G>>2]=f,T2[52+G>>2]=W,T2[40+G>>2]=h,T2[44+G>>2]=V,T2[32+G>>2]=f,T2[36+G>>2]=W,h=A+128|0,x=j2[r>>2],C=j2[Z>>2],U=T2[A+368>>2],y=j2[A+128>>2];A:{f:{r:{for(;;){if((R=z2(_2(z2(z2(z2(y*y)+z2(x*x))+z2(C*C)))))<z2(9999999747378752e-20)){T2[A+376>>2]=1;break r;}if(f=T2[A+364>>2]-1|0,T2[A+364>>2]=f,z=P2(U,36),r=T2[(j=180+(n=z+A|0)|0)>>2],T2[j>>2]=r+1,f=T2[348+((f<<2)+A|0)>>2],T2[(r=(M=148+n|0)+(r<<2)|0)>>2]=f,T2[r+16>>2]=0,e4(A,z2(-y),z2(-x),z2(-C),f),Z=T2[j>>2],f=T2[(M+(Z<<2)|0)-4>>2],m=j2[f+16>>2],C=z2(m-j2[32+G>>2]),Y=z2(C*C),N=j2[f+20>>2],C=z2(N-j2[36+G>>2]),Y=z2(Y+z2(C*C)),F=j2[f+24>>2],C=z2(F-j2[40+G>>2]),z2(Y+z2(C*C))<z2(9999999747378752e-20)||(C=z2(m-j2[48+G>>2]),Y=z2(C*C),C=z2(N-j2[52+G>>2]),Y=z2(Y+z2(C*C)),C=z2(F-j2[56+G>>2]),z2(Y+z2(C*C))<z2(9999999747378752e-20)||(C=z2(m-j2[64+G>>2]),Y=z2(C*C),C=z2(N-j2[68+G>>2]),Y=z2(Y+z2(C*C)),C=z2(F-j2[72+G>>2]),z2(Y+z2(C*C))<z2(9999999747378752e-20)||(C=z2(m-j2[80+G>>2]),Y=z2(C*C),C=z2(N-j2[84+G>>2]),Y=z2(Y+z2(C*C)),C=z2(F-j2[88+G>>2]),z2(Y+z2(C*C))<z2(9999999747378752e-20)))))break;if(f=T2[(r=(W=f+16|0)+8|0)+4>>2],T2[(E=V=(32+G|0)+((H=H+1&3)<<4)|0)+8>>2]=T2[r>>2],T2[E+12>>2]=f,f=T2[W+4>>2],T2[E>>2]=T2[W>>2],T2[E+4>>2]=f,C=z2(z2(z2(z2(j2[A+128>>2]*m)+z2(j2[A+132>>2]*N))+z2(j2[A+136>>2]*F))/R),z2(z2(R-(O=O<C?C:O))+z2(R*z2(-9999999747378752e-20)))<=z2(0)){h=T2[A+364>>2],T2[A+364>>2]=h+1,U=T2[A+368>>2],r=P2(U,36)+A|0,E=T2[(f=r+180|0)>>2]-1|0,T2[f>>2]=E,T2[348+((h<<2)+A|0)>>2]=T2[148+(r+(E<<2)|0)>>2];break r;}e:{i:{a:{n:{o:switch(Z-2|(T2[12+G>>2]=0)){case 0:if(r=T2[152+n>>2],F=j2[r+16>>2],f=T2[M>>2],I=j2[f+16>>2],T=z2(F-I),R=j2[r+20>>2],X=j2[f+20>>2],m=z2(R-X),C=j2[r+24>>2],p=j2[f+24>>2],N=z2(C-p),!((D=z2(z2(z2(T*T)+z2(m*m))+z2(N*N)))>z2(0)))break i;if((J=z2(z2(-z2(z2(z2(I*T)+z2(X*m))+z2(p*N)))/D))>=z2(1)){T2[16+G>>2]=0,T2[20+G>>2]=1065353216,T2[12+G>>2]=2,D=z2(z2(z2(F*F)+z2(R*R))+z2(C*C));break a;}if(!(J<=z2(0)))break n;T2[16+G>>2]=1065353216,T2[20+G>>2]=0,T2[12+G>>2]=1,D=z2(z2(z2(I*I)+z2(X*X))+z2(p*p));break a;case 1:D=i4(T2[M>>2]+16|0,T2[152+n>>2]+16|0,T2[156+n>>2]+16|0,16+G|0,12+G|0);break a;case 2:break o;default:break a;}if(S=T2[M>>2],Q=j2[S+16>>2],e=T2[160+n>>2],x=j2[e+16>>2],u=z2(Q-x),M=T2[152+n>>2],c=j2[M+20>>2],y=j2[e+20>>2],k=z2(c-y),i=z2(u*k),V=T2[156+n>>2],J=j2[V+24>>2],P=j2[e+24>>2],o=z2(J-P),g=j2[S+20>>2],l=z2(g-y),w=j2[M+24>>2],s=z2(w-P),I=z2(l*s),C=j2[V+16>>2],b=z2(C-x),Y=j2[S+24>>2],v=z2(Y-P),R=j2[M+16>>2],d=z2(R-x),X=z2(v*d),D=j2[V+20>>2],t=z2(D-y),p=z2(u*s),T=z2(l*d),m=z2(v*k),!((a=z2(z2(z2(i*o)+z2(z2(z2(z2(I*b)+z2(X*t))-z2(p*t))-z2(T*o)))-z2(m*b)))>z2(0)|a<z2(0)))break i;if(N=z2(g-c),F=z2(R-C),R=z2(Q-R),D=z2(c-D),c=z2(Y*z2(z2(N*F)-z2(R*D))),C=z2(Y-w),Y=z2(C*D),D=z2(w-J),!(z2(a*z2(c+z2(z2(Q*z2(Y-z2(N*D)))+z2(g*z2(z2(R*D)-z2(C*F))))))<=z2(0)))break i;if(Z=S+16|0,W=e+16|0,E=M+16|0,T2[120+G>>2]=0,T2[112+G>>2]=0,T2[116+G>>2]=0,T2[108+G>>2]=0,D=z2(-1),z2(a*z2(z2(z2(z2(I-m)*x)+z2(y*z2(X-p)))+z2(z2(i-T)*P)))>z2(0)&&(D=i4(Z,E,W,112+G|0,108+G|0),T2[24+G>>2]=0,f=T2[116+G>>2],T2[16+G>>2]=T2[112+G>>2],T2[20+G>>2]=f,j2[28+G>>2]=j2[120+G>>2],f=T2[108+G>>2],T2[12+G>>2]=2&f|f<<1&8|1&f,y=j2[e+20>>2],x=j2[e+16>>2],P=j2[e+24>>2]),r=V+16|0,z2(a*z2(z2(z2(z2(z2(k*o)-z2(s*t))*x)+z2(y*z2(z2(s*b)-z2(o*d))))+z2(z2(z2(t*d)-z2(k*b))*P)))>z2(0)&&((C=i4(E,r,W,112+G|0,108+G|0))<D||D<z2(0))&&(j2[20+G>>2]=j2[112+G>>2],T2[16+G>>2]=0,f=T2[120+G>>2],T2[24+G>>2]=T2[116+G>>2],T2[28+G>>2]=f,T2[12+G>>2]=T2[108+G>>2]<<1&14,D=C),z2(a*z2(z2(z2(z2(z2(t*v)-z2(o*l))*j2[e+16>>2])+z2(j2[e+20>>2]*z2(z2(o*u)-z2(v*b))))+z2(z2(z2(l*b)-z2(t*u))*j2[e+24>>2])))>z2(0)&&((C=i4(r,Z,W,112+G|0,108+G|0))<D||D<z2(0))&&(j2[24+G>>2]=j2[112+G>>2],T2[20+G>>2]=0,j2[16+G>>2]=j2[116+G>>2],j2[28+G>>2]=j2[120+G>>2],f=T2[108+G>>2],T2[12+G>>2]=f>>>1&1|f<<1&8|f<<2&4,D=C),!(D<z2(0)))break a;T2[12+G>>2]=15,X=j2[S+20>>2],p=j2[V+24>>2],i=j2[e+16>>2],T=j2[S+24>>2],C=j2[V+16>>2],J=j2[e+20>>2],m=j2[S+16>>2],I=j2[e+24>>2],D=j2[V+20>>2],R=z2(z2(z2(z2(z2(z2(z2(z2(X*p)*i)+z2(z2(T*C)*J))-z2(J*z2(p*m)))-z2(z2(X*C)*I))+z2(I*z2(m*D)))-z2(i*z2(T*D)))/a),j2[20+G>>2]=R,N=j2[M+24>>2],F=j2[M+16>>2],Y=z2(z2(z2(z2(i*z2(D*N))+z2(J*z2(p*F)))-z2(J*z2(N*C)))-z2(I*z2(D*F))),D=j2[M+20>>2],C=z2(z2(z2(Y+z2(I*z2(C*D)))-z2(i*z2(p*D)))/a),j2[16+G>>2]=C,D=z2(z2(z2(z2(z2(z2(z2(i*z2(D*T))+z2(J*z2(N*m)))-z2(J*z2(T*F)))-z2(I*z2(D*m)))+z2(I*z2(F*X)))-z2(i*z2(N*X)))/a),j2[24+G>>2]=D,j2[28+G>>2]=z2(1)-z2(z2(C+R)+D),D=z2(0);break a;}T2[12+G>>2]=3,j2[20+G>>2]=J,j2[16+G>>2]=z2(1)-J,D=z2(p+z2(N*J)),Y=z2(D*D),D=z2(I+z2(T*J)),C=z2(D*D),D=z2(X+z2(m*J)),D=z2(Y+z2(C+z2(D*D)));}if(D>=z2(0)){if(V=P2(U=1-U|0,36)+A|0,T2[(W=V+180|0)>>2]=0,T2[h>>2]=0,T2[h+4>>2]=0,T2[A+368>>2]=U,T2[(f=h+8|0)>>2]=0,T2[f+4>>2]=0,M=T2[12+G>>2],!(Z=T2[j>>2])){C=z2(0),x=z2(0),y=z2(0);break e;}for(f=z+B|0,C=z2(0),j=16+G|(S=0),x=z2(0),y=z2(0),r=0;z=T2[f>>2],M>>>r&1?(T2[(E=V+(S<<2)|0)+148>>2]=z,F=j2[j>>2],j2[E+164>>2]=F,T2[W>>2]=S=S+1|0,E=T2[f>>2],R=j2[E+24>>2],C=j2[E+20>>2],y=z2(z2(F*j2[E+16>>2])+j2[A+128>>2]),j2[A+128>>2]=y,x=z2(z2(F*C)+j2[A+132>>2]),j2[A+132>>2]=x,C=z2(z2(F*R)+j2[A+136>>2]),j2[A+136>>2]=C):(E=T2[A+364>>2],T2[A+364>>2]=E+1,T2[348+((E<<2)+A|0)>>2]=z),f=f+4|0,j=j+4|0,(0|Z)!=(0|(r=r+1|0)););break e;}}h=T2[A+364>>2],T2[A+364>>2]=h+1,U=T2[A+368>>2],r=P2(U,36)+A|0,E=T2[(f=r+180|0)>>2]-1|0,T2[f>>2]=E,T2[348+((h<<2)+A|0)>>2]=T2[148+(r+(E<<2)|0)>>2];break r;}if(15==(0|M)&&(T2[A+376>>2]=1),127==(0|_)){T2[A+376>>(f=2)]=2,T2[A+372>>2]=148+(P2(U,36)+A|0);break A;}if(_=_+1|0,f=T2[A+376>>2])break f;}h=T2[A+364>>2],T2[A+364>>2]=h+1,U=T2[A+368>>2],r=P2(U,36)+A|0,E=T2[(f=r+180|0)>>2]-1|0,T2[f>>2]=E,T2[348+((h<<2)+A|0)>>2]=T2[148+(r+(E<<2)|0)>>2];}f=T2[A+376>>2];}T2[A+372>>2]=148+(P2(U,36)+A|0);f:switch(0|f){case 0:D=j2[A+128>>2],C=z2(D*D),D=j2[A+132>>2],C=z2(C+z2(D*D)),D=j2[A+136>>2],j2[A+144>>2]=_2(z2(C+z2(D*D))),f=0;break A;case 1:break f;default:break A;}T2[A+144>>2]=0,f=1;}return L2=128+G|0,f;}function e4(A,f,r,e,i){var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C=0,E=0,D=0;L2=C=L2-48|0,T2[i+12>>2]=0,a=z2(z2(1)/z2(_2(z2(z2(z2(f*f)+z2(r*r))+z2(e*e))))),j2[i+8>>2]=a*e,j2[i+4>>2]=a*r,j2[i>>2]=a*f,D=T2[A+120>>2],c=T2[A+124>>2],E=T2[A>>2]+(c>>1)|0,1&c&&(D=T2[D+T2[E>>2]>>2]),n1[0|D](C,E,i),e=j2[i+8>>2],r=j2[i>>2],D=T2[A+124>>2],n=T2[A+4>>2]+(D>>1)|0,f=z2(-j2[i+4>>2]),E=T2[A+120>>2],E=1&D?T2[T2[n>>2]+E>>2]:E,T2[28+C>>2]=0,j2[24+C>>2]=z2(z2(j2[A+44>>2]*f)-z2(r*j2[A+40>>2]))-z2(e*j2[A+48>>2]),j2[20+C>>2]=z2(z2(j2[A+28>>2]*f)-z2(r*j2[A+24>>2]))-z2(e*j2[A+32>>2]),j2[16+C>>2]=z2(z2(j2[A+12>>2]*f)-z2(r*j2[A+8>>2]))-z2(e*j2[A+16>>2]),n1[0|E](32+C|0,n,16+C|0),u=j2[A+104>>2],k=j2[A- -64>>2],l=j2[A+60>>2],s=j2[A+108>>2],v=j2[A+80>>2],d=j2[A+72>>2],B=j2[A+76>>2],Q=j2[A+112>>2],g=j2[A+96>>2],w=j2[A+88>>2],G=j2[A+92>>2],a=j2[A+56>>2],o=j2[40+C>>2],b=j2[32+C>>2],t=j2[36+C>>2],e=j2[C>>2],r=j2[4+C>>2],f=j2[8+C>>2],T2[i+28>>2]=0,j2[i+24>>2]=f-z2(Q+z2(z2(z2(b*w)+z2(t*G))+z2(o*g))),j2[i+20>>2]=r-z2(s+z2(z2(z2(b*d)+z2(t*B))+z2(o*v))),j2[i+16>>2]=e-z2(u+z2(z2(z2(b*a)+z2(t*l))+z2(o*k))),L2=48+C|0;}function i4(A,f,r,e,i){var a=z2(0),n=z2(0),o=z2(0),b=z2(0),t=z2(0),c=z2(0),u=z2(0),k=z2(0),l=z2(0),s=z2(0),v=z2(0),d=z2(0),B=z2(0),Q=z2(0),g=0,w=z2(0),G=z2(0),C=z2(0),E=(z2(0)),D=z2(0),a=z2(-1),u=j2[A>>2],o=j2[f>>2],n=z2(u-o),c=j2[f+4>>2],w=j2[r+4>>2],h=z2(c-w),d=j2[A+4>>2],t=z2(d-c),G=j2[r>>2],Z=z2(o-G),k=z2(z2(n*h)-z2(t*Z)),b=j2[f+8>>2],C=j2[r+8>>2],Y=z2(b-C),B=j2[A+8>>2],s=z2(B-b),R=z2(z2(t*Y)-z2(s*h)),F=z2(z2(s*Z)-z2(n*Y));return (D=z2(z2(k*k)+z2(z2(R*R)+z2(F*F))))>z2(0)&&(z2(z2(z2(u*z2(z2(k*t)-z2(F*s)))+z2(d*z2(z2(R*s)-z2(k*n))))+z2(z2(z2(F*n)-z2(R*t))*B))>z2(0)?(t=z2(-1),s=z2(o-u),l=z2(c-d),v=z2(b-B),(a=z2(z2(z2(s*s)+z2(l*l))+z2(v*v)))>z2(0)?(n=z2(1),(a=z2(z2(-z2(z2(z2(u*s)+z2(d*l))+z2(B*v)))/a))>=z2(1)?(t=z2(z2(z2(o*o)+z2(c*c))+z2(b*b)),g=2):(n=z2(0),g=1,a<=z2(0)?(t=z2(z2(z2(u*u)+z2(d*d))+z2(B*B)),Q=z2(1)):(n=z2(B+z2(v*a)),t=z2(n*n),n=z2(u+z2(s*a)),o=z2(n*n),n=z2(d+z2(l*a)),t=z2(t+z2(o+z2(n*n))),Q=z2(z2(1)-a),g=3,n=a))):n=z2(0),T2[e+8>>2]=0,j2[e+4>>2]=n,j2[e>>2]=Q,T2[i>>2]=g,b=j2[f+8>>2],c=j2[f+4>>2],o=j2[f>>2]):(t=z2(-1),n=z2(0)),B=z2(C-B),d=z2(w-d),s=z2(G-u),z2(z2(z2(o*z2(z2(k*h)-z2(F*Y)))+z2(c*z2(z2(R*Y)-z2(k*Z))))+z2(z2(z2(F*Z)-z2(R*h))*b))>z2(0)?(w=j2[r>>2],u=z2(w-o),G=j2[r+4>>2],l=z2(G-c),C=j2[r+8>>2],v=z2(C-b),E=z2(z2(z2(u*u)+z2(l*l))+z2(v*v)),a=z2(-1),E>z2(0)&&(n=z2(1),a=(a=z2(z2(-z2(z2(z2(o*u)+z2(c*l))+z2(b*v)))/E))>=z2(1)?(Q=z2(0),g=2,z2(z2(z2(w*w)+z2(G*G))+z2(C*C))):(n=z2(0),g=1,a<=z2(0)?(Q=z2(1),z2(z2(z2(o*o)+z2(c*c))+z2(b*b))):(Q=z2(z2(1)-a),g=3,a=z2(b+z2(v*(n=a))),b=z2(a*a),a=z2(o+z2(u*n)),o=z2(a*a),a=z2(c+z2(l*n)),z2(b+z2(o+z2(a*a)))))),t<z2(0)||a<t?(j2[e+8>>2]=n,j2[e+4>>2]=Q,T2[e>>2]=0,T2[i>>2]=g<<1):a=t):a=t,c=j2[r>>2],b=j2[r+4>>2],u=j2[r+8>>2],z2(z2(z2(c*z2(z2(k*d)-z2(F*B)))+z2(b*z2(z2(R*B)-z2(k*s))))+z2(z2(z2(F*s)-z2(R*d))*u))>z2(0)&&(o=z2(-1),G=j2[A>>2],l=z2(G-c),C=j2[A+4>>2],v=z2(C-b),E=j2[A+8>>2],w=z2(E-u),(t=z2(z2(z2(l*l)+z2(v*v))+z2(w*w)))>z2(0)&&(n=z2(1),(t=z2(z2(-z2(z2(z2(c*l)+z2(b*v))+z2(u*w)))/t))>=z2(1)?(o=z2(z2(z2(G*G)+z2(C*C))+z2(E*E)),Q=z2(0),g=2):(n=z2(0),t<=z2(0)?(o=z2(z2(z2(c*c)+z2(b*b))+z2(u*u)),Q=z2(1),g=1):(n=z2(u+z2(w*t)),o=z2(n*n),n=z2(c+z2(l*t)),c=z2(n*n),n=z2(b+z2(v*t)),o=z2(o+z2(c+z2(n*n))),Q=z2(z2(1)-t),g=3,n=t))),(o<a||a<z2(0))&&(j2[e+8>>2]=Q,T2[e+4>>2]=0,j2[e>>2]=n,T2[i>>2]=g<<2&4|g>>>1,a=o)),a<z2(0)&&(t=z2(z2(z2(z2(R*j2[A>>2])+z2(F*j2[A+4>>2]))+z2(k*j2[A+8>>2]))/D),a=z2(F*t),o=z2(j2[f+4>>2]-a),n=z2(R*t),c=z2(j2[f>>2]-n),b=z2(z2(Z*o)-z2(h*c)),u=z2(b*b),t=z2(k*t),b=z2(j2[f+8>>2]-t),o=z2(z2(h*b)-z2(o*Y)),k=z2(o*o),o=z2(z2(c*Y)-z2(Z*b)),b=z2(_2(z2(u+z2(k+z2(o*o))))),o=z2(_2(D)),c=z2(b/o),j2[e>>2]=c,T2[i>>2]=7,b=z2(j2[r+4>>2]-a),Q=z2(j2[r>>2]-n),k=z2(z2(s*b)-z2(Q*d)),u=z2(k*k),k=z2(j2[r+8>>2]-t),b=z2(z2(d*k)-z2(b*B)),l=z2(b*b),b=z2(z2(Q*B)-z2(s*k)),o=z2(z2(_2(z2(u+z2(l+z2(b*b)))))/o),j2[e+4>>2]=o,j2[e+8>>2]=z2(1)-z2(c+o),a=z2(z2(t*t)+z2(z2(n*n)+z2(a*a))))),a;}function a4(A,f,r,e,i){var a,n,o,b,t,c,u,k,l,s,v,d=0,B=0,Q=z2(0),g=z2(0),w=z2(0),G=(0);if(d=T2[A+18504>>2]){if((B=T2[d+48>>2])&&(T2[B+44>>2]=T2[d+44>>2]),(B=T2[d+44>>2])&&(T2[B+48>>2]=T2[d+48>>2]),T2[A+18504>>2]==(0|d)&&(T2[A+18504>>2]=T2[d+48>>2]),T2[d+44>>2]=0,T2[d+48>>2]=T2[A+18496>>2],T2[(B=A+18508|0)>>2]=T2[B>>2]-1,(B=T2[A+18496>>2])&&(T2[B+44>>2]=d),T2[A+18496>>2]=d,T2[(B=A+18500|0)>>2]=T2[B>>2]+1,p2[d+55|0]=0,T2[d+28>>2]=e,T2[d+24>>2]=r,T2[d+20>>2]=f,a=j2[e+16>>2],n=j2[(B=r+16|0)>>2],w=j2[(o=f+16|0)>>2],t=j2[(b=r+20|0)>>2],c=j2[e+24>>2],u=j2[(k=r+24|0)>>2],Q=j2[(l=f+24|0)>>2],g=j2[(s=f+20|0)>>2],v=j2[e+20>>2],T2[d+12>>2]=0,t=z2(t-g),c=z2(c-Q),u=z2(u-Q),g=z2(v-g),Q=z2(z2(t*c)-z2(u*g)),j2[d>>2]=Q,a=z2(a-w),n=z2(n-w),w=z2(z2(u*a)-z2(n*c)),j2[d+4>>2]=w,g=z2(z2(n*g)-z2(t*a)),j2[d+8>>2]=g,G=2,(a=z2(_2(z2(z2(z2(Q*Q)+z2(w*w))+z2(g*g)))))>z2(9999999747378752e-20)){if(n=j2[B>>2],n4(Q,w,g,j2[o>>2],j2[s>>2],j2[l>>2],n,j2[b>>2],j2[k>>2],B=d+16|0)||(Q=j2[r+16>>2],g=j2[r+20>>2],w=j2[r+24>>2],n4(j2[d>>2],j2[(G=d+4|0)>>2],j2[(o=d+8|0)>>2],Q,g,w,j2[(r=e+16|0)>>2],j2[(b=e+20|0)>>2],j2[(e=e+24|0)>>2],B)||n4(j2[d>>2],j2[G>>2],j2[o>>2],j2[r>>2],j2[b>>2],j2[e>>2],j2[f+16>>2],j2[f+20>>2],j2[f+24>>2],B)||(j2[d+16>>2]=z2(z2(z2(j2[f+16>>2]*j2[d>>2])+z2(j2[f+20>>2]*j2[d+4>>2]))+z2(j2[f+24>>2]*j2[d+8>>2]))/a)),Q=z2(z2(1)/a),j2[d>>2]=Q*j2[d>>2],j2[(f=d+4|0)>>2]=Q*j2[f>>2],j2[(f=d+8|0)>>2]=Q*j2[f>>2],i)return d;if(G=3,j2[B>>2]>=z2(-9999999747378752e-21))return d;}return T2[A>>2]=G,(f=T2[d+48>>2])&&(T2[f+44>>2]=T2[d+44>>2]),(f=T2[d+44>>2])&&(T2[f+48>>2]=T2[d+48>>2]),T2[A+18496>>2]==(0|d)&&(T2[A+18496>>2]=T2[d+48>>2]),T2[d+44>>2]=0,T2[d+48>>2]=T2[A+18504>>2],T2[A+18500>>2]=T2[A+18500>>2]-1,(f=T2[A+18504>>2])&&(T2[f+44>>2]=d),T2[A+18504>>2]=d,T2[A+18508>>2]=T2[A+18508>>2]+1,0;}return T2[A>>2]=5,0;}function n4(A,f,r,e,i,a,n,o,b,t){var c=0,u=z2(n-e),k=z2(o-i),l=z2(b-a);return (c=z2(z2(z2(z2(u*f)-z2(k*A))*a)+z2(z2(z2(z2(k*r)-z2(l*f))*e)+z2(z2(z2(l*A)-z2(u*r))*i)))<z2(0))&&(A=z2(z2(z2(e*e)+z2(i*i))+z2(a*a)),z2(z2(z2(u*e)+z2(k*i))+z2(l*a))>z2(0)||(A=z2(z2(z2(n*n)+z2(o*o))+z2(b*b)),z2(z2(z2(u*n)+z2(k*o))+z2(l*b))<z2(0)||(A=z2(z2(z2(n*e)+z2(o*i))+z2(b*a)),A=(A=z2(z2(z2(z2(z2(z2(n*n)+z2(o*o))+z2(b*b))*z2(z2(z2(e*e)+z2(i*i))+z2(a*a)))-z2(A*A))/z2(z2(z2(u*u)+z2(k*k))+z2(l*l))))>z2(0)?A:z2(0))),j2[t>>2]=_2(A)),c;}function o4(){S2[23440]||(T2[5778]=1062847606,T2[5779]=0,T2[5776]=1042701022,T2[5777]=1056964440,T2[5774]=1062847606,T2[5775]=0,T2[5772]=-1093024784,T2[5773]=1050556081,T2[5770]=1062847606,T2[5771]=0,T2[5768]=-1093024784,T2[5769]=-1096927567,T2[5766]=1062847606,T2[5767]=0,T2[5764]=1042701022,T2[5765]=-1090519208,T2[5762]=1062847572,T2[5763]=0,T2[5760]=1057396286,T2[5761]=0,T2[5758]=1057396386,T2[5759]=0,T2[5756]=1060121912,T2[5757]=1056964507,T2[5754]=1057396420,T2[5755]=0,T2[5752]=-1098475836,T2[5753]=1062148969,T2[5750]=1057396386,T2[5751]=0,T2[5748]=-1084636143,T2[5749]=0,T2[5746]=1057396420,T2[5747]=0,T2[5744]=-1098475836,T2[5745]=-1085334679,T2[5742]=1057396386,T2[5743]=0,T2[5740]=1060121912,T2[5741]=-1090519141,T2[5738]=-2147483648,T2[5739]=0,T2[5736]=1058437413,T2[5737]=1062149053,T2[5734]=-2147483648,T2[5735]=0,T2[5732]=-2147483648,T2[5733]=1065353216,T2[5730]=-2147483648,T2[5731]=0,T2[5728]=-1089046235,T2[5729]=1062149053,T2[5726]=-2147483648,T2[5727]=0,T2[5724]=-1082951543,T2[5725]=1050556148,T2[5722]=-2147483648,T2[5723]=0,T2[5720]=-1082951543,T2[5721]=-1096927500,T2[5718]=0,T2[5719]=0,T2[5716]=-1089046235,T2[5717]=-1085334595,T2[5714]=0,T2[5715]=0,T2[5712]=0,T2[5713]=-1082130432,T2[5710]=0,T2[5711]=0,T2[5708]=1058437413,T2[5709]=-1085334595,T2[5706]=0,T2[5707]=0,T2[5704]=1064532105,T2[5705]=-1096927500,T2[5702]=0,T2[5703]=0,T2[5700]=1064532105,T2[5701]=1050556148,T2[5698]=-1090087228,T2[5699]=0,T2[5696]=1049007812,T2[5697]=1062148969,T2[5694]=-1090087262,T2[5695]=0,T2[5692]=-1087361736,T2[5693]=1056964507,T2[5690]=-1084636042,T2[5691]=0,T2[5688]=-1104782626,T2[5689]=1056964440,T2[5686]=-1090087262,T2[5687]=0,T2[5684]=-1087361736,T2[5685]=-1090519141,T2[5682]=-1084636076,T2[5683]=0,T2[5680]=-1090087362,T2[5681]=-2147483648,T2[5678]=-1090087262,T2[5679]=0,T2[5676]=1062847505,T2[5677]=-2147483648,T2[5674]=-1084636042,T2[5675]=0,T2[5672]=1054458864,T2[5673]=1050556081,T2[5670]=-1090087228,T2[5671]=0,T2[5668]=1049007812,T2[5669]=-1085334679,T2[5666]=-1084636042,T2[5667]=0,T2[5664]=-1104782626,T2[5665]=-1090519208,T2[5662]=-1084636042,T2[5663]=0,T2[5660]=1054458864,T2[5661]=-1096927567,T2[5658]=1065353216,T2[5659]=0,T2[5656]=-2147483648,T2[5657]=0,T2[5654]=1055193471,T2[5655]=0,T2[5652]=1063581978,T2[5653]=0,T2[5650]=1055193572,T2[5651]=0,T2[5648]=1049461434,T2[5649]=1062847522,T2[5646]=1055193572,T2[5647]=0,T2[5644]=-1086767520,T2[5645]=1057396202,T2[5642]=1055193572,T2[5643]=0,T2[5640]=-1086767520,T2[5641]=-1090087446,T2[5638]=1055193605,T2[5639]=0,T2[5636]=1049461434,T2[5637]=-1084636126,T2[5634]=-1092290076,T2[5635]=0,T2[5632]=1060716128,T2[5633]=1057396202,T2[5630]=-1092290043,T2[5631]=0,T2[5628]=-1098022214,T2[5629]=1062847522,T2[5626]=-1092290177,T2[5627]=0,T2[5624]=-1083901670,T2[5625]=-2147483648,T2[5622]=-1092290076,T2[5623]=0,T2[5620]=-1098022214,T2[5621]=-1084636126,T2[5618]=-1092290076,T2[5619]=0,T2[5616]=1060716128,T2[5617]=-1090087446,T2[5614]=-1082130432,T2[5615]=0,T2[5612]=0,T2[5613]=-2147483648,p2[23440]=1);}function b4(A){var f,r=0,e=0,i=0,a=0,n=0,o=0;if(T2[6041]=15080,a=T2[5498],r=T2[A+20>>2],(n=K2(23))&&(T2[(i=n+19&-16)-4>>2]=n),T2[6047]=i,T2[i>>2]=r?14688:15012,T2[5498]=a+2,(r=K2(39))&&(T2[(e=r+19&-16)-4>>2]=r,i=T2[6047]),T2[e+12>>2]=0,T2[e+16>>2]=3,T2[e>>2]=12568,p2[e+4|(n=0)]=0,T2[e+8>>2]=i,T2[6048]=e,e=0,(r=K2(27))&&(T2[(e=r+19&-16)-4>>2]=r),T2[e>>2]=15112,p2[e+4|0]=0,T2[6049]=e,(r=K2(27))&&(T2[(n=r+19&-16)-4>>2]=r),T2[n>>2]=15132,p2[n+4|(e=0)]=0,T2[6050]=n,T2[5498]=a+5,i=0,(r=K2(27))&&(T2[(i=r+19&-16)-4>>2]=r),T2[i>>2]=15152,p2[i+4|0]=0,T2[6051]=i,(r=K2(27))&&(T2[(e=r+19&-16)-4>>2]=r),T2[e>>2]=15172,p2[e+4|(i=0)]=0,T2[6052]=e,e=0,(r=K2(27))&&(T2[(e=r+19&-16)-4>>2]=r),T2[e>>2]=15192,p2[e+4|0]=0,T2[6053]=e,T2[5498]=a+8,(r=K2(27))&&(T2[(i=r+19&-16)-4>>2]=r),T2[i>>2]=15212,p2[i+4|(e=0)]=0,T2[6054]=i,i=0,(r=K2(27))&&(T2[(i=r+19&-16)-4>>2]=r),T2[i>>2]=15232,p2[i+4|0]=0,T2[6055]=i,(r=K2(27))&&(T2[(e=r+19&-16)-4>>2]=r),T2[e>>2]=15252,p2[e+4|(i=0)]=0,T2[6059]=e,T2[5498]=a+11,e=0,(r=K2(27))&&(T2[(e=r+19&-16)-4>>2]=r),T2[6060]=e,T2[e>>2]=15252,p2[e+4|0]=1,(r=K2(27))&&(T2[(i=r+19&-16)-4>>2]=r),T2[i>>2]=15272,p2[i+4|(e=0)]=0,T2[6058]=i,i=0,(r=K2(35))&&(T2[(i=r+19&-16)-4>>2]=r),T2[i+8>>2]=1,T2[i+12>>2]=0,T2[i>>2]=15292,p2[i+4|0]=0,T2[6062]=i,T2[5498]=o=a+14|0,(r=K2(35))&&(T2[(e=r+19&-16)-4>>2]=r),T2[e+8>>2]=1,T2[e+12>>2]=0,T2[e>>2]=15292,T2[6061]=e,p2[e+4|0]=1,f=T2[A+16>>2],r=T2[A>>2])T2[6043]=r,p2[24176]=0;else {if(p2[24176]=1,e=0,T2[5498]=a+15,a=0,(r=K2(43))&&(T2[(a=r+19&-16)-4>>2]=r),T2[a>>2]=868,T2[a+20>>2]=0,n=T2[A+8>>2],T2[a+4>>2]=n,o=T2[5498]+1|0,T2[5498]=o,(r=K2(P2(n,868)+19|0))&&(T2[(e=r+19&-16)-4>>2]=r),T2[a+12>>2]=e,T2[a+16>>2]=e,i=(T2[a+8>>2]=n)-1|0)for(n=T2[a>>2];e=T2[e>>2]=r=e+n|0,i=i-1|0;);else r=e;T2[r>>2]=0,T2[6043]=a;}if(r=T2[A+4>>2])return T2[6045]=r,void(p2[24184]=0);if(n=116<(0|(r=80<(0|f)?f:80))?r+16&-16:128,p2[24184]=1,e=0,T2[5498]=o+1,a=0,(r=K2(43))&&(T2[(a=r+19&-16)-4>>2]=r),T2[a>>2]=n,T2[a+20>>2]=0,r=T2[A+12>>2],T2[a+4>>2]=r,T2[5498]=T2[5498]+1,(A=K2(16+(3|P2(r,n))|0))&&(T2[(e=A+19&-16)-4>>2]=A),T2[a+12>>2]=e,T2[a+16>>2]=e,i=(T2[a+8>>2]=r)-1|0)for(A=T2[a>>2];e=T2[e>>2]=r=A+e|0,i=i-1|0;);else r=e;T2[r>>2]=0,T2[6045]=a;}function t4(A){var f=0,r=0;return T2[(A|=0)>>2]=15080,S2[A+20|0]&&(f=T2[A+16>>2],(r=T2[f+16>>2])&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]),f=T2[A+16>>2]),f&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),S2[A+12|0]&&(f=T2[A+8>>2],(r=T2[f+16>>2])&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]),f=T2[A+8>>2]),f&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),f=T2[A+28>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+28>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+32>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+32>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+36>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+36>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+40>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+40>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+44>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+44>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+48>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+48>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+52>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+52>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+56>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+56>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+72>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+72>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+76>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+76>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+68>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+68>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+84>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+84>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+80>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+80>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),f=T2[A+24>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+24>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),0|A;}function c4(A){return T2[(A|=0)+72>>2];}function u4(A){var f,r,e,i,a=0,n=0,o=0,b=0,t=0;if(!((0|(f=T2[A+12>>2]))<=(0|(r=T2[A+32>>2])))){A:if(T2[A+36>>2]>=(0|f))o=T2[A+40>>2];else {if(f&&(T2[5498]=T2[5498]+1,(n=K2(19+(f<<2)|0))&&(T2[(o=n+19&-16)-4>>2]=n)),a=T2[A+40>>2],1<=(0|r))for(n=o,t=a,b=r;T2[n>>2]=T2[t>>2],n=n+4|0,t=t+4|0,b=b-1|0;);else if(!a){T2[A+40>>2]=o,T2[A+36>>2]=f,p2[A+44|0]=1;break A;}S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2])),T2[A+40>>2]=o,p2[A+44|0]=1,T2[A+36>>2]=f;}if(d2((r<<2)+o|0,0,f-r<<2),e=(T2[A+32>>2]=f)<<2,(0|(a=T2[A+52>>2]))<(0|f)){A:if(T2[A+56>>2]>=(0|f))o=T2[A+60>>2];else {if(o=0,f&&(T2[5498]=T2[5498]+1,(n=K2(16+(3|e)|0))&&(T2[(o=n+19&-16)-4>>2]=n)),i=T2[A+60>>2],1<=(0|a))for(n=o,t=i,b=a;T2[n>>2]=T2[t>>2],n=n+4|0,t=t+4|0,b=b-1|0;);else if(!i){T2[A+60>>2]=o,T2[A+56>>2]=f,p2[A- -64|0]=1;break A;}S2[A- -64|0]&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2])),T2[A+60>>2]=o,p2[A+64|0]=1,T2[A+56>>2]=f;}d2((a<<2)+o|0,0,f-a<<2);}if(1<=(0|(T2[A+52>>2]=f))&&(d2(T2[A+40>>2],255,e),d2(T2[A+60>>2],255,e)),!((0|r)<1))for(t=T2[A+60>>2],n=T2[A+16>>2],o=T2[A+40>>2],b=0;a=T2[T2[n>>2]+12>>2]|T2[T2[n+4>>2]+12>>2]<<16,a=P2((a=(a<<15^-1)+a|0)>>>10^a,9),a=o+((T2[A+12>>2]-1&((a=((a^=a>>>6)<<11^-1)+a|0)>>>16^a))<<2)|0,T2[t>>2]=T2[a>>2],n=n+16|0,t=t+4|0,(0|r)!=(0|(b=(T2[a>>2]=b)+1|0)););}}function k4(A,f,r){for(var e,i,a,n,o,b=0,t=0,c=0,u=0,k=0,l=0,s=0,v=0,d=0,B=0,Q=0;;){for(B=T2[A+12>>2],a=T2[(k=B+(((n=f)+r|0)/2<<4)|0)+8>>2],e=T2[k+4>>2],i=T2[k>>2],l=r;;){A:{if(!i)for(c=(f<<4)+B|0;;){t=u=-1,(s=T2[c>>2])&&(t=T2[s+12>>2]),(k=T2[c+4>>2])&&(u=T2[k+12>>2]),b=e?T2[e+12>>2]:-1;f:if(!(-1<(0|t))){if(!((0|b)<(0|u)||s)){if((0|e)!=(0|k))break A;if(T[c+8>>2]>a>>>0)break f;k=e;break A;}if(s)break A;if((0|u)<=(0|b))break A;}c=c+16|0,f=f+1|0;}for(c=(f<<4)+B|0,v=T2[i+12>>2];;){t=u=-1,(s=T2[c>>2])&&(t=T2[s+12>>2]),(k=T2[c+4>>2])&&(u=T2[k+12>>2]),b=e?T2[e+12>>2]:-1;f:if(!((0|v)<(0|t))){if(!((0|b)<(0|u))&&(0|i)==(0|s)){if((0|e)!=(0|k))break A;if(T[c+8>>2]>a>>>0)break f;k=e;break A;}if((0|i)!=(0|s))break A;if((0|u)<=(0|b))break A;}c=c+16|0,f=f+1|0;}}A:{if(!i)for(t=(l<<4)+B|0;;){u=-1,(d=T2[t>>2])&&(u=T2[d+12>>2]),v=e?T2[e+12>>2]:-1,b=-1,(Q=T2[t+4>>2])&&(b=T2[Q+12>>2]);f:if(!((0|u)<-1)){if(!((0|b)<(0|v)||d)){if((0|e)!=(0|Q))break A;if(T[t+8>>2]<a>>>0)break f;break A;}if(d)break A;if((0|v)<=(0|b))break A;}t=t-16|0,l=l-1|0;}for(t=(l<<4)+B|0,o=T2[i+12>>2];;){if(u=-1,(d=T2[t>>2])&&(u=T2[d+12>>2]),v=e?T2[e+12>>2]:-1,b=-1,(Q=T2[t+4>>2])&&(b=T2[Q+12>>2]),!((0|u)<(0|o)))if((0|b)<(0|v)||(0|i)!=(0|d)){if((0|i)!=(0|d))break A;if((0|v)<=(0|b))break A;}else {if((0|e)!=(0|Q))break A;if(T[t+8>>2]>=a>>>0)break A;}t=t-16|0,l=l-1|0;}}if((0|f)<=(0|l)&&(u=T2[(b=(f<<4)+B|0)+8>>2],v=T2[b+12>>2],b=T2[t+4>>2],T2[c>>2]=T2[t>>2],T2[c+4>>2]=b,b=c+8|0,c=T2[(t=t+8|0)+4>>2],T2[b>>2]=T2[t>>2],T2[b+4>>2]=c,b=T2[A+12>>2]+(l<<4)|0,T2[b+4>>2]=k,T2[b+8>>2]=u,T2[b+12>>2]=v,T2[b>>2]=s,l=l-1|0,f=f+1|0),!((0|f)<=(0|l)))break;B=T2[A+12>>2];}if((0|n)<(0|l)&&k4(A,n,l),!((0|f)<(0|r)))break;}}function l4(A){var f,r,e=0,i=0,a=0;if(T2[(A|=0)>>2]=16780,S2[A+152|0]&&(e=T2[A+96>>2],n1[T2[T2[e>>2]>>2]](e),(e=T2[A+96>>2])&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]))),1<=(0|(a=T2[A+160>>2])))for(e=8;i=T2[A+168>>2]+e|0,(r=T2[(f=i+4|0)>>2])&&S2[i+8|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[f>>2]=0,p2[i+8|0]=1,T2[(i=i-4|0)>>2]=0,e=e+20|(T2[i+4>>2]=0),a=a-1|0;);return (e=T2[A+168>>2])&&S2[A+172|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+168>>2]=0,T2[A+160>>2]=0,T2[A+164>>2]=0,p2[A+172|0]=1,A0(A+44|0),A0(A+4|0),0|A;}function s4(A,f,r){var e,i,a,n,o,b,t=0,c=0,u=0,k=0,l=0,s=0,v=0,d=0,B=0;if(L2=d=L2-256|0,A){for(e=j2[f+24>>2],i=j2[f+20>>2],a=j2[f+16>>2],n=j2[f+8>>2],o=j2[f+4>>2],b=j2[f>>2],T2[d>>2]=A,u=64,A=d,f=1;;){A:{f:{r:{if(l=T2[(B=(c=f-1|0)<<2)+A>>2],j2[l>>2]<=a&&j2[l+16>>2]>=b&&j2[l+4>>2]<=i&&j2[l+20>>2]>=o&&j2[l+8>>2]<=e&&j2[l+24>>2]>=n){if(T2[l+40>>2]){if((0|c)!=(0|u))break r;if((0|(t=u?u<<1:1))<(0|f))break r;if(c=0,t&&(T2[5498]=T2[5498]+1,(k=K2(19+(t<<2)|0))&&(T2[(c=k+19&-16)-4>>2]=k)),2<=(0|f))for(s=c,k=A;T2[s>>2]=T2[k>>2],s=s+4|0,k=k+4|0,u=u-1|0;);if(!v){v=1;break f;}T2[5499]=T2[5499]+(v=1),q2(T2[A-4>>2]);break f;}n1[T2[T2[r>>2]+12>>2]](r,l);}f=c;break A;}t=u,c=A;}if(T2[c+B>>2]=T2[l+36>>2],(0|f)==(0|t)){if((0|(u=f<<1))<=(0|f))u=f,A=c;else {if(A=0,T2[5498]=T2[5498]+1,(t=K2(19+(f<<3)|0))&&(T2[(A=t+19&-16)-4>>2]=t),1<=(0|f))for(s=A,t=c,k=f;T2[s>>2]=T2[t>>2],s=s+4|0,t=t+4|0,k=k-1|0;);v?(T2[5499]=T2[5499]+(v=1),q2(T2[c-4>>2])):v=1;}}else u=t,A=c;T2[(f<<2)+A>>2]=T2[l+40>>2],f=f+1|0;}if(!(0<(0|f)))break;}v&&A&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2]));}L2=256+d|0;}function v4(A,f,r,e){var i,a,n,o,b=0,t=0,c=0,u=0,k=0,l=0;if(f&&r){if(!(127<(0|(u=T2[A+24>>2]))||127<T2[A+28>>2])){if(T2[5498]=T2[5498]+1,(b=K2(1043))&&(T2[(t=b+19&-16)-4>>2]=b),1<=(0|u))for(;k=T2[A+32>>2]+c|0,l=T2[k+4>>2],T2[(b=t+c|0)>>2]=T2[k>>2],T2[b+4>>2]=l,c=c+8|0,u=u-1|0;);(b=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2])),T2[A+32>>2]=t,T2[A+28>>2]=128,p2[A+36|0]=1;}for(T2[A+24>>2]=128,b=T2[A+32>>2],T2[b+4>>2]=r,T2[b>>2]=f,u=124,f=1;;){if(k=T2[A+32>>2],t=T2[(b=k+(i=(f=(r=f)-1|0)<<3)|0)+4>>2],b=T2[b>>2],(0|u)<(0|f)){if(!((0|(l=(u=T2[A+24>>2])<<1))<=(0|u)||T2[A+28>>2]>=(0|l))){if(k=0,u&&(T2[5498]=T2[5498]+1,(c=K2(19+(u<<4)|0))&&(T2[(k=c+19&-16)-4>>2]=c),!((0|u)<1)))for(c=0;a=T2[A+32>>2]+c|0,o=T2[4+a>>2],T2[(n=c+k|0)>>2]=T2[a>>2],T2[4+n>>2]=o,c=c+8|0,u=u-1|0;);(u=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[u-4>>2])),T2[A+32>>2]=k,p2[A+36|0]=1,T2[A+28>>2]=l;}u=(T2[A+24>>2]=l)-4|0;}if((0|b)!=(0|t)?j2[b>>2]<=j2[t+16>>2]&&j2[b+16>>2]>=j2[t>>2]&&j2[b+4>>2]<=j2[t+20>>2]&&j2[b+20>>2]>=j2[t+4>>2]&&j2[b+8>>2]<=j2[t+24>>2]&&j2[b+24>>2]>=j2[t+8>>2]&&(c=T2[t+40>>2],T2[b+40>>2]?(f=T2[b+36>>2],f=c?(T2[(c=k+i|0)+4>>2]=T2[t+36>>2],T2[c>>2]=f,c=T2[b+40>>2],k=(f=r<<3)+T2[A+32>>2]|0,T2[k+4>>2]=T2[t+36>>2],T2[k>>2]=c,c=T2[b+36>>2],k=f+T2[A+32>>2]|0,T2[k+12>>2]=T2[t+40>>2],T2[k+8>>2]=c,b=T2[b+40>>2],f=f+T2[A+32>>2]|0,T2[f+20>>2]=T2[t+40>>2],T2[f+16>>2]=b,r+3|0):(T2[(c=k+i|0)+4>>2]=t,T2[c>>2]=f,f=T2[b+40>>2],b=T2[A+32>>2]+(r<<3)|0,T2[b+4>>2]=t,T2[b>>2]=f,r+1|0)):c?(T2[(f=k+i|0)+4>>2]=T2[t+36>>2],T2[f>>2]=b,f=T2[A+32>>2]+(r<<3)|0,T2[f+4>>2]=T2[t+40>>2],T2[f>>2]=b,f=r+1|0):n1[T2[T2[e>>2]+8>>2]](e,b,t)):T2[b+40>>2]&&(t=T2[b+36>>2],T2[(f=k+i|0)+4>>2]=t,T2[f>>2]=t,t=(f=r<<3)+T2[A+32>>2]|0,c=T2[b+40>>2],T2[t+4>>2]=c,T2[t>>2]=c,t=T2[b+40>>2],f=8+(f+T2[A+32>>2]|0)|0,T2[f>>2]=T2[b+36>>2],T2[f+4>>2]=t,f=r+2|0),!f)break;}}}function d4(A,f,r,e,i,a,n,o,b){var t,c,u,k,l,s=0,v=0,d=0,B=0,Q=0,g=z2(0),w=0,G=z2(0),C=z2(0),E=0;if(L2=Q=L2-32|0,A){if((0|(s=T2[o+4>>2]))<=127){if(T2[o+8>>2]<=127){if(T2[5498]=T2[5498]+1,(d=K2(531))&&(T2[(v=d+19&-16)-4>>2]=d),1<=(0|s))for(d=s;T2[v+B>>2]=T2[T2[o+12>>2]+B>>2],B=B+4|0,d=d-1|0;);(d=T2[o+12>>2])&&S2[o+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[d-4>>2])),T2[o+12>>2]=v,p2[o+16|0]=1,T2[o+8>>2]=128;}for(B=s<<2,d=s-128|0;B=B+4|(T2[T2[o+12>>2]+B>>2]=0),(s=d)>>>0<=(d=s+1|0)>>>0;);}for(T2[o+4>>2]=128,T2[T2[o+12>>2]>>2]=A,A=126,d=1;;){T2[12+Q>>2]=0,w=T2[o+12>>2],B=T2[w+(k=(s=d-1|0)<<2)>>2],j2[8+Q>>2]=j2[B+8>>2]-j2[n+8>>2],j2[4+Q>>2]=j2[B+4>>2]-j2[n+4>>2],j2[Q>>2]=j2[B>>2]-j2[n>>2],G=j2[B+24>>2],C=j2[B+16>>2],g=j2[a+8>>2],t=j2[a>>2],j2[20+Q>>2]=j2[B+20>>2]-j2[a+4>>2],j2[16+Q>>2]=C-t,j2[24+Q>>2]=G-g,v=T2[e+4>>2],t=j2[f+4>>2],c=j2[r+4>>2],G=z2(z2(j2[4+((v<<4)+Q|0)>>2]-t)*c),g=j2[r>>2],E=T2[e>>2],u=j2[f>>2],C=z2(g*z2(j2[(1-E<<4)+Q>>2]-u));A:if(!(C<G||(g=z2(z2(j2[(E<<4)+Q>>2]-u)*g),(t=z2(c*z2(j2[4+((1-v<<4)+Q|0)>>2]-t)))<g||(v=T2[e+8>>2],u=j2[f+8>>2],l=j2[r+8>>2],(C=t<C?t:C)<(c=z2(z2(j2[8+((v<<4)+Q|0)>>2]-u)*l))||(G=g<G?G:g,!(!((g=z2(l*z2(j2[8+((1-v<<4)+Q|0)>>2]-u)))<G)&&(G<c?c:G)<i&&(g<C?g:C)>z2(0))))))){if(T2[B+40>>2]){if((0|A)<(0|s)){if((0|(s=T2[o+4>>2]))<(0|(E=s<<1))){if((0|E)>T2[o+8>>2]){if(w=0,s&&(T2[5498]=T2[5498]+1,(A=K2(19+(s<<3)|0))&&(T2[(w=A+19&-16)-4>>2]=A),!((0|s)<1)))for(v=0,A=s;T2[v+w>>2]=T2[T2[o+12>>2]+v>>2],v=v+4|0,A=A-1|0;);(A=T2[o+12>>2])&&S2[o+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),T2[o+12>>2]=w,p2[o+16|0]=1,T2[o+8>>2]=E;}if(((T2[(v=s<<2)+w>>2]=0)|E)!=(s+1|0))for(A=s-1|0,v=v+4|0;v=v+4|(T2[T2[o+12>>2]+v>>2]=0),A=A-1|0;);w=T2[o+12>>2];}A=(T2[o+4>>2]=E)-2|0;}T2[w+k>>2]=T2[B+36>>2],T2[T2[o+12>>2]+(d<<2)>>2]=T2[B+40>>2],s=d+1|0;break A;}n1[T2[T2[b>>2]+12>>2]](b,B);}if(!(d=s))break;}}L2=32+Q|0;}function B4(A){return T2[(A|=0)+96>>2];}function Q4(A){}function g4(A,f){A=T2[(A|=0)+4>>2],n1[T2[T2[A>>2]+8>>2]](A,T2[(f|=0)+36>>2]);}function w4(A,f){var r,e,i,a,n,o,b,t,c,u,k,l,s,v=0,d=0,B=0,Q=z2(0),g=0,w=z2(0),G=z2(0),C=(z2(0));L2=g=L2-16|0,T2[A+372>>2]=0,T2[A+376>>2]=0,T2[A+252>>2]=2,T2[A+604>>2]=1065353216,T2[A+608>>2]=1065353216,T2[A+408>>2]=1065353216,T2[A+412>>2]=1065353216,T2[A+472>>2]=0,T2[A+476>>2]=0,T2[(v=A+380|0)>>2]=0,T2[v+4>>2]=0,T2[(v=A+388|0)>>2]=0,T2[v+4>>2]=0,T2[(v=A+396|0)>>2]=0,T2[v+4>>2]=0,T2[(v=A+612|0)>>2]=1065353216,T2[v+4>>2]=0,T2[(v=A+420|0)>>2]=0,T2[v+4>>2]=0,T2[A+416>>2]=1065353216,T2[(v=A+428|0)>>2]=0,T2[v+4>>2]=0,T2[(v=A+436|0)>>2]=0,T2[v+4>>2]=0,T2[(v=A+444|0)>>2]=0,T2[v+4>>2]=0,T2[A+452>>2]=0,T2[(v=A+480|0)>>2]=0,T2[v+4>>2]=0,T2[(v=A+488|0)>>2]=0,T2[v+4>>2]=0,T2[(v=A+496|0)>>2]=0,T2[v+4>>2]=0,w=j2[f+96>>2],Q=j2[f+92>>2],j2[12+g>>2]=Q,j2[8+g>>2]=w,T2[4+g>>2]=0,T2[g>>2]=1065353216,j2[A+504>>2]=j2[(Q<z2(0)?4+g|0:Q>z2(1)?g:12+g|0)>>2],T2[4+g>>2]=0,T2[g>>2]=1065353216,j2[A+508>>2]=j2[(w<z2(0)?4+g|0:w>z2(1)?g:8+g|0)>>2],T2[A+668>>2]=0,T2[A+672>>2]=0,v=T2[f+120>>2],T2[A+532>>2]=T2[f+116>>2],T2[A+536>>2]=v,d=T2[f+4>>2],T2[A+540>>2]=d,p2[A+512|0]=S2[f+124|0],v=T2[f+132>>2],T2[A+516>>2]=T2[f+128>>2],T2[A+520>>2]=v,v=T2[f+140>>2],T2[A+524>>2]=T2[f+136>>2],T2[A+528>>2]=v,d?n1[T2[T2[d>>2]+8>>2]](d,v=A+4|0):(v=T2[f+12>>2],T2[A+4>>2]=T2[f+8>>2],T2[A+8>>2]=v,B=T2[(d=f+16|0)+4>>2],T2[(v=A+12|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=f+32|0)+4>>2],T2[(v=A+28|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=f+24|0)+4>>2],T2[(v=A+20|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=f+40|0)+4>>2],T2[(v=A+36|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=f+48|0)+4>>2],T2[(v=A+44|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=f- -64|0)+4>>2],T2[(v=A+60|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=f+56|0)+4>>2],T2[(v=A+52|0)>>2]=T2[d>>2],T2[v+4>>2]=B,v=A+4|0),T2[A+132>>2]=0,T2[A+136>>2]=0,d=T2[v+4>>2],T2[A+68>>2]=T2[v>>2],T2[A+72>>2]=d,T2[(d=A+156|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+148|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+140|0)>>2]=0,T2[d+4>>2]=0,s=T2[(B=A+20|0)+4>>2],T2[(d=A+84|0)>>2]=T2[B>>2],T2[d+4>>2]=s,B=T2[(v=v+8|0)+4>>2],T2[(d=A+76|0)>>2]=T2[v>>2],T2[d+4>>2]=B,B=T2[(d=A+28|0)+4>>2],T2[(v=A+92|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=A+36|0)+4>>2],T2[(v=A+100|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=A+44|0)+4>>2],T2[(v=A+108|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=A+52|0)+4>>2],T2[(v=A+116|0)>>2]=T2[d>>2],T2[v+4>>2]=B,B=T2[(d=A+60|0)+4>>2],T2[(v=A+124|0)>>2]=T2[d>>2],T2[v+4>>2]=B,j2[A+228>>2]=j2[f+100>>2],j2[A+236>>2]=j2[f+104>>2],j2[A+240>>2]=j2[f+108>>2],j2[A+232>>2]=j2[f+112>>2],n1[T2[T2[A>>2]+8>>2]](A,T2[f+72>>2]),v=T2[5866],T2[A+568>>2]=v,T2[5866]=v+1,w=z2(0),v=T2[A+204>>2],(Q=j2[f>>2])!=z2(0)?(T2[A+204>>2]=-2&v,w=z2(z2(1)/Q)):T2[A+204>>2]=1|v,j2[A+404>>2]=w,T2[A+436>>2]=0,j2[A+424>>2]=Q*j2[A+440>>2],j2[A+432>>2]=Q*j2[A+448>>2],j2[A+428>>2]=Q*j2[A+444>>2],Q=j2[f+84>>2],G=j2[f+80>>2],C=j2[f+76>>2],T2[A+468>>2]=0,b=C!=z2(0)?z2(z2(1)/C):z2(0),j2[A+456>>2]=b,t=G!=z2(0)?z2(z2(1)/G):z2(0),j2[A+460>>2]=t,c=Q!=z2(0)?z2(z2(1)/Q):z2(0),j2[A+464>>2]=c,T2[A+368>>2]=0,T2[A+352>>2]=0,T2[A+336>>2]=0,Q=j2[A+44>>2],G=j2[A+36>>2],C=j2[A+40>>2],u=j2[A+28>>2],k=j2[A+20>>2],l=j2[A+24>>2],a=j2[A+12>>2],n=j2[A+8>>2],o=j2[A+4>>2],T2[A+564>>2]=8,r=z2(b*o),e=z2(t*n),i=z2(c*a),j2[A+324>>2]=z2(z2(o*r)+z2(n*e))+z2(a*i),j2[A+328>>2]=z2(z2(r*k)+z2(e*l))+z2(i*u),j2[A+332>>2]=z2(z2(r*G)+z2(e*C))+z2(i*Q),r=z2(b*k),e=z2(t*l),i=z2(c*u),j2[A+340>>2]=z2(z2(o*r)+z2(n*e))+z2(a*i),j2[A+344>>2]=z2(z2(k*r)+z2(l*e))+z2(u*i),j2[A+348>>2]=z2(z2(r*G)+z2(e*C))+z2(i*Q),r=o,o=z2(b*G),e=n,n=z2(t*C),i=a,a=z2(c*Q),j2[A+356>>2]=z2(z2(r*o)+z2(e*n))+z2(i*a),j2[A+360>>2]=z2(z2(k*o)+z2(l*n))+z2(u*a),j2[A+364>>2]=z2(z2(G*o)+z2(C*n))+z2(Q*a),T2[(f=A+596|0)>>2]=0,T2[f+4>>2]=0,T2[(f=A+588|0)>>2]=0,T2[f+4>>2]=0,T2[(f=A+580|0)>>2]=0,T2[f+4>>2]=0,T2[A+572>>2]=0,T2[A+576>>2]=0,Q=j2[A+408>>2],G=j2[A+412>>2],j2[A+628>>2]=w*j2[A+416>>2],j2[A+624>>2]=w*G,j2[A+620>>2]=w*Q,T2[A+664>>2]=0,T2[(f=A+656|0)>>2]=0,T2[f+4>>2]=0,T2[(f=A+648|0)>>2]=0,T2[f+4>>2]=0,T2[(f=A+640|0)>>2]=0,T2[f+4>>2]=0,T2[(A=A+632|0)>>2]=0,T2[A+4>>2]=0,L2=16+g|0;}function G4(A,f,r,e){var i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h=z2(0),Z=z2(0),Y=(0);L2=Y=L2+-64|0,k=j2[f+24>>2],l=j2[f+20>>2],s=j2[f+40>>2],v=j2[f+36>>2],n=j2[A+40>>2],o=j2[A+20>>2],b=j2[A+36>>2],t=j2[A+24>>2],d=j2[f+8>>2],B=j2[f>>2],Q=j2[f+4>>2],g=j2[f+16>>2],w=j2[f+32>>2],Z=j2[A+8>>2],i=j2[A+4>>2],u=j2[A+32>>2],c=j2[A+16>>2],a=j2[A>>2],T2[60+Y>>2]=0,T2[44+Y>>2]=0,C=z2(z2(o*n)-z2(t*b)),E=z2(z2(t*u)-z2(n*c)),D=z2(z2(b*c)-z2(o*u)),h=z2(z2(1)/z2(z2(z2(a*C)+z2(i*E))+z2(Z*D))),G=z2(z2(z2(t*i)-z2(o*Z))*h),t=z2(z2(z2(c*Z)-z2(t*a))*h),o=z2(z2(z2(o*a)-z2(c*i))*h),j2[56+Y>>2]=z2(z2(w*G)+z2(v*t))+z2(s*o),c=z2(z2(z2(b*Z)-z2(n*i))*h),Z=z2(z2(z2(n*a)-z2(u*Z))*h),i=z2(z2(z2(u*i)-z2(b*a))*h),j2[52+Y>>2]=z2(z2(w*c)+z2(v*Z))+z2(s*i),j2[40+Y>>2]=z2(z2(G*g)+z2(t*l))+z2(o*k),j2[36+Y>>2]=z2(z2(c*g)+z2(Z*l))+z2(i*k),T2[28+Y>>2]=0,a=z2(C*h),n=z2(E*h),h=z2(D*h),j2[48+Y>>2]=z2(z2(w*a)+z2(v*n))+z2(s*h),j2[32+Y>>2]=z2(z2(a*g)+z2(n*l))+z2(h*k),j2[24+Y>>2]=z2(d*o)+z2(z2(B*G)+z2(Q*t)),j2[20+Y>>2]=z2(d*i)+z2(z2(B*c)+z2(Q*Z)),j2[16+Y>>2]=z2(h*d)+z2(z2(B*a)+z2(Q*n)),C4(16+Y|0,Y),a=j2[Y>>2],n=j2[4+Y>>2],o=j2[8+Y>>2],h=j2[12+Y>>2],i=z2(z2(1)/z2(_2(z2(z2(z2(z2(a*a)+z2(n*n))+z2(o*o))+z2(h*h))))),v1(Z=z2(F2(z2(H2(z2(h*i),z2(-1))),z2(1))));A:if(1065353216<=(A=2147483647&(f=u1[2]))>>>0)h=z2((0|f)<0?3.141592502593994:0),1065353216!=(0|A)&&(h=z2(z2(0)/z2(Z-Z)));else f:{if(A>>>0<=1056964607){if(h=z2(1.570796251296997),A>>>0<847249409)break f;h=z2(Z*Z),h=z2(z2(z2(z2(7.549789415861596e-8)-z2(z2(z2(h*z2(z2(h*z2(z2(h*z2(-.008656363002955914))+z2(-.04274342209100723)))+z2(.16666586697101593)))/z2(z2(h*z2(-.7066296339035034))+z2(1)))*Z))-Z)+z2(1.570796251296997));break A;}if((0|f)<=-1){h=z2(z2(Z+z2(1))*z2(.5)),Z=z2(_2(h)),h=z2(z2(1.570796251296997)-z2(Z+z2(z2(Z*z2(z2(h*z2(z2(h*z2(z2(h*z2(-.008656363002955914))+z2(-.04274342209100723)))+z2(.16666586697101593)))/z2(z2(h*z2(-.7066296339035034))+z2(1))))+z2(-7.549789415861596e-8)))),h=z2(h+h);break A;}h=z2(z2(z2(1)-Z)*z2(.5)),k1(2,-4096&(v1(b=z2(_2(h))),u1[2])),Z=d1(),h=z2(z2(z2(b*z2(z2(h*z2(z2(h*z2(z2(h*z2(-.008656363002955914))+z2(-.04274342209100723)))+z2(.16666586697101593)))/z2(z2(h*z2(-.7066296339035034))+z2(1))))+z2(z2(h-z2(Z*Z))/z2(b+Z)))+Z),h=z2(h+h);}j2[e>>2]=h+h,T2[r+12>>2]=0,h=z2(a*i),Z=z2(n*i),i=z2(o*i),(a=z2(z2(z2(h*h)+z2(Z*Z))+z2(i*i)))<z2(14210854715202004e-30)?(T2[r+8>>2]=0,T2[r+12>>2]=0,T2[r>>2]=1065353216,T2[r+4>>2]=0):(n=i,i=z2(z2(1)/z2(_2(a))),j2[r+8>>2]=n*i,j2[r+4>>2]=Z*i,j2[r>>2]=h*i),L2=Y+64|0;}function C4(A,f){var r,e,i,a,n=z2(0),o=z2(0),b=0,t=z2(0),c=z2(0),u=L2-16|0,n=j2[A>>2],t=j2[A+20>>2],c=j2[A+40>>2];n=(o=z2(z2(n+t)+c))>z2(0)?(o=z2(_2(z2(o+z2(1)))),n=z2(z2(.5)/o),t=z2(n*z2(j2[A+16>>2]-j2[A+4>>2])),c=z2(n*z2(j2[A+8>>2]-j2[A+32>>2])),o=z2(o*z2(.5)),z2(n*z2(j2[A+36>>2]-j2[A+24>>2]))):(e=(r=n<t?t<c?2:1:(n<c)<<1)<<2,i=(r<<4)+A|0,a=((b=(1+r>>>0)%3|0)<<4)+A|0,r=A+((A=(2+r>>>0)%3|0)<<4)|0,A<<=2,n=z2(_2(z2(z2(z2(j2[i+e>>2]-j2[a+(b<<=2)>>2])-j2[r+A>>2])+z2(1)))),j2[(e|u)>>2]=n*z2(.5),n=z2(z2(.5)/n),j2[12+u>>2]=z2(j2[r+b>>2]-j2[A+a>>2])*n,j2[(u|b)>>2]=n*z2(j2[e+a>>2]+j2[b+i>>2]),j2[(A|u)>>2]=n*z2(j2[r+e>>2]+j2[A+i>>2]),o=j2[12+u>>2],t=j2[8+u>>2],c=j2[4+u>>2],j2[u>>2]),j2[f+12>>2]=o,j2[f+8>>2]=t,j2[f+4>>2]=c,j2[f>>2]=n;}function E4(A,f){var r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C=0,E=0,D=0;2&S2[A+204|0]?(C=T2[A+8>>2],T2[A+68>>2]=T2[A+4>>2],T2[A+72>>2]=C,D=T2[(E=A+12|0)+4>>2],T2[(C=A+76|0)>>2]=T2[E>>2],T2[C+4>>2]=D,D=T2[(E=A+20|0)+4>>2],T2[(C=A+84|0)>>2]=T2[E>>2],T2[C+4>>2]=D,D=T2[(E=A+28|0)+4>>2],T2[(C=A+92|0)>>2]=T2[E>>2],T2[C+4>>2]=D,D=T2[(E=A+36|0)+4>>2],T2[(C=A+100|0)>>2]=T2[E>>2],T2[C+4>>2]=D,D=T2[(E=A+44|0)+4>>2],T2[(C=A+108|0)>>2]=T2[E>>2],T2[C+4>>2]=D,D=T2[(E=A+52|0)+4>>2],T2[(C=A+116|0)>>2]=T2[E>>2],T2[C+4>>2]=D,D=T2[(E=A+60|0)+4>>2],T2[(C=A+124|0)>>2]=T2[E>>2],T2[C+4>>2]=D):(C=T2[f+4>>2],T2[A+68>>2]=T2[f>>2],T2[A+72>>2]=C,D=T2[(E=f+8|0)+4>>2],T2[(C=A+76|0)>>2]=T2[E>>2],T2[C+4>>2]=D,D=T2[(E=f+24|0)+4>>2],T2[(C=A+92|0)>>2]=T2[E>>2],T2[C+4>>2]=D,E=T2[f+20>>2],T2[(C=A+84|0)>>2]=T2[f+16>>2],T2[C+4>>2]=E,E=T2[f+36>>2],T2[(C=A+100|0)>>2]=T2[f+32>>2],T2[C+4>>2]=E,D=T2[(E=f+40|0)+4>>2],T2[(C=A+108|0)>>2]=T2[E>>2],T2[C+4>>2]=D,D=T2[(E=f+56|0)+4>>2],T2[(C=A+124|0)>>2]=T2[E>>2],T2[C+4>>2]=D,E=T2[f+52>>2],T2[(C=A+116|0)>>2]=T2[f+48>>2],T2[C+4>>2]=E),C=T2[A+392>>2],T2[A+148>>2]=T2[A+388>>2],T2[A+152>>2]=C,C=T2[A+376>>2],T2[A+132>>2]=T2[A+372>>2],T2[A+136>>2]=C,D=T2[(E=A+396|0)+4>>2],T2[(C=A+156|0)>>2]=T2[E>>2],T2[C+4>>2]=D,D=T2[(E=A+380|0)+4>>2],T2[(C=A+140|0)>>2]=T2[E>>2],T2[C+4>>2]=D,u=T2[(D=f+8|0)+4>>2],T2[(C=A+12|0)>>2]=T2[D>>2],T2[C+4>>2]=u,E=T2[f+4>>2],T2[A+4>>2]=T2[f>>2],T2[A+8>>2]=E,e=T2[4+(u=f+24|0)>>2],T2[(E=A+28|0)>>2]=T2[u>>2],T2[E+4>>2]=e,e=T2[f+20>>2],T2[(D=A+20|0)>>2]=T2[f+16>>2],T2[D+4>>2]=e,o=T2[4+(r=f+40|0)>>2],T2[(e=u=A+44|0)>>2]=T2[r>>2],T2[4+e>>2]=o,o=T2[f+36>>2],T2[(r=e=A+36|0)>>2]=T2[f+32>>2],T2[4+r>>2]=o,G=T2[4+(o=f+56|0)>>2],T2[(r=A+60|0)>>2]=T2[o>>2],T2[4+r>>2]=G,o=T2[f+52>>2],T2[(r=A+52|0)>>2]=T2[f+48>>2],T2[4+r>>2]=o,k=j2[A+8>>2],l=j2[C>>2],s=j2[E>>2],v=j2[D>>2],d=j2[A+24>>2],b=j2[u>>2],Q=j2[A+464>>2],t=j2[e>>2],c=j2[A+40>>2],g=j2[A+460>>2],B=j2[A+4>>2],w=j2[A+456>>2],T2[A+368>>2]=0,T2[A+352>>2]=0,T2[A+336>>2]=0,i=z2(w*t),a=z2(g*c),n=z2(Q*b),j2[A+364>>2]=z2(z2(t*i)+z2(c*a))+z2(b*n),j2[A+360>>2]=z2(z2(v*i)+z2(d*a))+z2(s*n),j2[A+356>>2]=z2(z2(B*i)+z2(k*a))+z2(l*n),i=z2(w*v),a=z2(g*d),n=z2(Q*s),j2[A+348>>2]=z2(z2(t*i)+z2(c*a))+z2(b*n),j2[A+344>>2]=z2(z2(v*i)+z2(d*a))+z2(s*n),j2[A+340>>2]=z2(z2(B*i)+z2(k*a))+z2(l*n),i=t,t=z2(B*w),a=c,c=z2(k*g),n=b,b=z2(l*Q),j2[A+332>>2]=z2(z2(i*t)+z2(a*c))+z2(n*b),j2[A+328>>2]=z2(z2(t*v)+z2(c*d))+z2(b*s),j2[A+324>>2]=z2(z2(B*t)+z2(k*c))+z2(l*b);}function D4(A,f){var r=0,e=0,i=0,a=0,n=0;A:{f:if(!((0|(e=T2[A+548>>2]))<1)){for(i=T2[A+556>>2],r=e;T2[i>>2]!=(0|f);)if(i=i+4|0,!(r=r-1|0))break f;if(r)break A;}if(T2[A+552>>2]==(0|e)&&!((0|(a=e?e<<1:1))<=(0|e))){if(a&&(T2[5498]=T2[5498]+1,(r=K2(19+(a<<2)|0))&&(T2[(n=r+19&-16)-4>>2]=r)),1<=(0|e))for(i=0,r=e;T2[i+n>>2]=T2[T2[A+556>>2]+i>>2],i=i+4|0,r=r-1|0;);(r=T2[A+556>>2])&&S2[A+560|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]),e=T2[A+548>>2]),T2[A+556>>2]=n,T2[A+552>>2]=a,p2[A+560|0]=1;}if(T2[T2[A+556>>2]+(e<<2)>>2]=f,T2[A+548>>2]=e+1,r=T2[f+32>>2],(0|(n=T2[f+28>>2]))!=(0|A)){if((0|(f=T2[r+288>>2]))==T2[r+292>>2]&&!((0|(a=f?f<<1:1))<=(0|f))){if(e=0,a&&(T2[5498]=T2[5498]+1,(A=K2(19+(a<<2)|0))&&(T2[(e=A+19&-16)-4>>2]=A)),1<=(0|f))for(i=0,A=f;T2[e+i>>2]=T2[T2[r+296>>2]+i>>2],i=i+4|0,A=A-1|0;);(A=T2[r+296>>2])&&S2[r+300|0]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2]),f=T2[r+288>>2]),T2[r+296>>2]=e,T2[r+292>>2]=a,p2[r+300|0]=1;}A=r,r=n;}else if((0|(f=T2[A+288>>2]))==T2[A+292>>2]&&!((0|(a=f?f<<1:1))<=(0|f))){if(n=0,a&&(T2[5498]=T2[5498]+1,(e=K2(19+(a<<2)|0))&&(T2[(n=e+19&-16)-4>>2]=e)),1<=(0|f))for(i=0,e=f;T2[i+n>>2]=T2[T2[A+296>>2]+i>>2],i=i+4|0,e=e-1|0;);(e=T2[A+296>>2])&&S2[A+300|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]),f=T2[A+288>>2]),T2[A+296>>2]=n,T2[A+292>>2]=a,p2[A+300|0]=1;}T2[A+288>>2]=f+1,T2[A+280>>2]=(-1^f)>>>31,T2[T2[A+296>>2]+(f<<2)>>2]=r;}}function h4(A,f){var r=0,e=0,i=0,a=0;A:if(!((0|(a=T2[A+548>>2]))<1)){for(e=i=T2[A+556>>2];T2[e>>2]!=(0|f);)if(e=e+4|0,(0|a)==(0|(r=r+1|0)))break A;if(!((0|a)<=(0|r))){r=0,e=i;f:{for(;T2[e>>2]!=(0|f);)if(e=e+4|0,(0|a)==(0|(r=r+1|0)))break f;(0|a)<=(0|r)||(T2[e>>2]=T2[(r=i)+(i=(e=a-1|0)<<2)>>2],T2[A+548>>2]=e,T2[i+T2[A+556>>2]>>2]=f);}if(a=T2[f+32>>2],(0|(i=T2[f+28>>2]))==(0|A)){f:if(!((0|(f=T2[A+288>>2]))<1)){for(r=0,e=i=T2[A+296>>2];T2[e>>2]!=(0|a);)if(e=e+4|0,(0|(r=r+1|0))==(0|f))break f;(0|f)<=(0|r)||(T2[e>>2]=T2[(r=i)+(i=(f=f-1|0)<<2)>>2],T2[A+288>>2]=f,T2[i+T2[A+296>>2]>>2]=a);}return void(T2[A+280>>2]=0<(0|f));}f:if(!((0|(f=T2[a+288>>2]))<1)){for(r=0,e=A=T2[a+296>>2];(0|i)!=T2[e>>2];)if(e=e+4|0,(0|(r=r+1|0))==(0|f))break f;(0|f)<=(0|r)||(T2[e>>2]=T2[(r=A)+(A=(f=f-1|0)<<2)>>2],T2[a+288>>2]=f,T2[A+T2[a+296>>2]>>2]=i);}T2[a+280>>2]=0<(0|f);}}}function Z4(A){var f=0;return T2[(A|=0)>>2]=17208,(f=T2[A+204>>2])&&S2[A+208|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+204>>2]=0,p2[A+208|0]=1,T2[(f=A+196|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+176>>2])&&S2[A+180|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+176>>2]=0,p2[A+180|0]=1,T2[(f=A+168|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+156>>2])&&S2[A+160|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+156>>2]=0,p2[A+160|0]=1,T2[(f=A+148|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+136>>2])&&S2[A+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+136>>2]=0,p2[A+140|0]=1,T2[(f=A+128|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+116>>2])&&S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+116>>2]=0,p2[A+120|0]=1,T2[(f=A+108|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+96>>2]=0,p2[A+100|0]=1,T2[(f=A+88|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+76>>2])&&S2[A+80|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+76>>2]=0,p2[A+80|0]=1,T2[(f=A+68|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+56>>2]=0,p2[A+60|0]=1,T2[(f=A+48|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+36>>2])&&S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+36>>2]=0,p2[A+40|0]=1,T2[(f=A+28|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+16>>2]=0,p2[A+20|0]=1,T2[(f=A+8|0)>>2]=0,(T2[f+4>>2]=0)|A;}function Y4(A,f,r){var e,i,a,n,o,b,t,c,u,k,l,s,v,d=0,B=(0),Q=(0);return L2=Q=L2-256|0,-1<(0|(B=T2[f+212>>2]))||(2&(d=T2[f+252>>2])&&(2&S2[(d=d<<30>>31&f)+204|0]||j2[d+404>>2]!=z2(0))?(B=T2[A+8>>2],d2(8+Q|0,0,244),A=m4(A+4|0,8+Q|0),d=T2[f+252>>2],T2[(e=A+88|0)>>2]=0,T2[4+e>>2]=0,T2[(e=A+80|0)>>2]=0,T2[4+e>>2]=0,T2[(e=A+72|0)>>2]=0,T2[4+e>>2]=0,T2[A+64>>2]=0,T2[A+68>>2]=0,T2[A+144>>2]=0,T2[A+148>>2]=0,T2[(e=A+152|0)>>2]=0,T2[4+e>>2]=0,T2[(e=A+160|0)>>2]=0,T2[4+e>>2]=0,T2[(e=A+168|0)>>2]=0,T2[4+e>>2]=0,2&d?(e=T2[(d=d<<30>>31&f)+8>>2],T2[A>>2]=T2[d+4>>2],T2[A+4>>2]=e,a=T2[4+(i=d+12|0)>>2],T2[(e=A+8|0)>>2]=T2[i>>2],T2[4+e>>2]=a,a=T2[4+(i=d+28|0)>>2],T2[(e=A+24|0)>>2]=T2[i>>2],T2[4+e>>2]=a,i=T2[4+(e=d+20|0)>>2],T2[A+16>>2]=T2[e>>2],T2[A+20>>2]=i,a=T2[4+(i=d+44|0)>>2],T2[(e=A+40|0)>>2]=T2[i>>2],T2[4+e>>2]=a,i=T2[4+(e=d+36|0)>>2],T2[A+32>>2]=T2[e>>2],T2[A+36>>2]=i,i=T2[4+(e=d+52|0)>>2],T2[A+48>>2]=T2[e>>2],T2[A+52>>2]=i,a=T2[4+(i=d+60|0)>>2],T2[(e=A+56|0)>>2]=T2[i>>2],T2[4+e>>2]=a,o=j2[d+412>>2],b=j2[(e=d+416|0)>>2],t=j2[d+408>>2],n=j2[d+404>>2],T2[A+140>>2]=0,j2[A+136>>2]=n*b,j2[A+132>>2]=n*o,j2[A+128>>2]=n*t,T2[A+240>>2]=d,c=T2[4+(a=d+612|0)>>2],T2[(i=A+104|0)>>2]=T2[a>>2],T2[4+i>>2]=c,i=T2[d+608>>2],T2[A+96>>2]=T2[d+604>>2],T2[A+100>>2]=i,a=T2[4+e>>2],T2[(i=A+120|0)>>2]=T2[e>>2],T2[4+i>>2]=a,e=T2[d+412>>2],T2[A+112>>2]=T2[d+408>>2],T2[A+116>>2]=e,a=T2[4+(i=d+380|0)>>2],T2[(e=A+184|0)>>2]=T2[i>>2],T2[4+e>>2]=a,e=T2[d+376>>2],T2[A+176>>2]=T2[d+372>>2],T2[A+180>>2]=e,e=T2[d+392>>2],T2[A+192>>2]=T2[d+388>>2],T2[A+196>>2]=e,a=T2[4+(i=d+396|0)>>2],T2[(e=A+200|0)>>2]=T2[i>>2],T2[4+e>>2]=a,o=j2[d+476>>2],b=j2[d+480>>2],t=j2[d+472>>2],n=j2[d+404>>2],T2[A+220>>2]=0,j2[A+216>>2]=z2(n*b)*r,j2[A+212>>2]=z2(n*o)*r,j2[A+208>>2]=z2(n*t)*r,t=j2[d+340>>2],u=j2[d+356>>2],k=j2[d+328>>2],l=j2[d+344>>2],s=j2[d+360>>2],v=j2[d+324>>2],n=j2[d+488>>2],o=j2[d+492>>2],b=j2[d+496>>2],j2[A+232>>2]=z2(z2(z2(n*j2[d+332>>2])+z2(o*j2[d+348>>2]))+z2(b*j2[d+364>>2]))*r,j2[A+228>>2]=z2(z2(z2(n*k)+z2(o*l))+z2(b*s))*r,j2[A+224>>2]=z2(z2(z2(v*n)+z2(t*o))+z2(u*b))*r):(T2[A+4>>2]=0,T2[A+8>>2]=0,T2[A>>2]=1065353216,T2[A+240>>2]=0,T2[A+128>>2]=0,T2[A+132>>2]=0,T2[A+112>>2]=1065353216,T2[A+116>>2]=1065353216,T2[A+96>>2]=1065353216,T2[A+100>>2]=1065353216,T2[A+176>>2]=0,T2[A+180>>2]=0,T2[(d=A+12|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+24|0)>>2]=0,T2[d+4>>2]=0,T2[A+20>>2]=1065353216,T2[(d=A+32|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+44|0)>>2]=0,T2[d+4>>2]=0,T2[A+40>>2]=1065353216,T2[(d=A+52|0)>>2]=0,T2[d+4>>2]=0,T2[A+60>>2]=0,T2[(d=A+136|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+120|0)>>2]=1065353216,T2[d+4>>2]=0,T2[(d=A+104|0)>>2]=1065353216,T2[d+4>>2]=0,T2[A+232>>2]=0,T2[(d=A+224|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+216|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+208|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+200|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+192|0)>>2]=0,T2[d+4>>2]=0,T2[(d=A+184|0)>>2]=0,T2[d+4>>2]=0),T2[A+236>>2]=0,T2[f+212>>2]=B):-1<(0|(B=T2[A+188>>2]))||(T2[A+188>>2]=T2[A+8>>2],d2(8+Q|0,0,244),f=m4(A+4|0,8+Q|0),T2[(d=f+88|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+80|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+72|0)>>2]=0,T2[d+4>>2]=0,T2[f+64>>2]=0,T2[f+68>>2]=0,T2[f+144>>2]=0,T2[f+148>>2]=0,T2[(d=f+152|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+160|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+168|0)>>2]=0,T2[d+4>>2]=0,T2[f+4>>2]=0,T2[f+8>>2]=0,T2[f>>2]=1065353216,T2[(d=f+12|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+24|0)>>2]=0,T2[d+4>>2]=0,T2[f+20>>2]=1065353216,T2[(d=f+32|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+44|0)>>2]=0,T2[d+4>>2]=0,T2[f+40>>2]=1065353216,T2[(d=f+52|0)>>2]=0,T2[d+4>>2]=0,T2[f+60>>2]=0,T2[(d=f+136|0)>>2]=0,T2[d+4>>2]=0,T2[f+128>>2]=0,T2[f+132>>2]=0,T2[(d=f+120|0)>>2]=1065353216,T2[d+4>>2]=0,T2[f+112>>2]=1065353216,T2[f+116>>2]=1065353216,T2[(d=f+104|0)>>2]=1065353216,T2[d+4>>2]=0,T2[f+96>>2]=1065353216,T2[f+100>>2]=1065353216,T2[(d=f+232|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+224|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+216|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+208|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+200|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+192|0)>>2]=0,T2[d+4>>2]=0,T2[(d=f+184|0)>>2]=0,T2[d+4>>2]=0,T2[f+176>>2]=0,T2[f+180>>2]=0,T2[f+240>>2]=0,B=T2[A+188>>2])),L2=256+Q|0,B;}function R4(A,f,r,e,i,a){var n,o,b,t,c=0,u=0,k=z2(0),l=z2(0),s=z2(0),v=z2(0),d=z2(0),B=0,Q=(0),g=0,w=z2(0),G=z2(0),C=z2(0),E=z2(0),D=z2(0),h=z2(0),Z=(z2(0)),Y=z2(0),R=z2(0),F=z2(0),c=Q=T2[A+88>>2];if((0|c)==T2[A+92>>2]&&!((0|(B=(c=Q)?c<<1:1))<=(0|c))){if(B&&(T2[5498]=T2[5498]+1,(c=K2(P2(B,152)+19|0))&&(T2[(g=c+19&-16)-4>>2]=c)),1<=(0|Q))for(c=0,u=Q;$2(c+g|0,T2[A+96>>2]+c|0,152),c=c+152|0,u=u-1|0;);(c=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[c-4>>2])),T2[A+96>>2]=g,T2[A+92>>2]=B,p2[A+100|0]=1,c=T2[A+88>>2];}T2[A+88>>2]=c+1,c=(B=T2[A+96>>2])+P2(Q,152)|0,T2[c+16>>2]=0,T2[c+20>>2]=0,T2[c+48>>2]=-2147483648,T2[c+52>>2]=-2147483648,T2[(u=c+24|0)>>2]=0,T2[u+4>>2]=0,T2[(u=c+56|0)>>2]=-2147483648,T2[u+4>>2]=0,j2[c+104>>2]=a,T2[c+96>>2]=0,T2[c+100>>2]=0,g=T2[A+16>>2],A=T2[240+(g+P2(r,244)|0)>>2],u=T2[240+(g+P2(e,244)|0)>>2],T2[c+132>>2]=0,T2[c+140>>2]=i,T2[c+148>>2]=e,T2[c+144>>2]=r,n=j2[f+8>>2],b=j2[f+4>>2],l=j2[f>>2],T2[c+12>>2]=0,t=z2(-l),j2[c>>2]=t,s=z2(-b),j2[c+4>>2]=s,j2[c+8>>2]=-n,i=c,k=A?(v=z2(z2(z2(z2(j2[A+360>>2]*s)-z2(l*j2[A+356>>2]))-z2(n*j2[A+364>>2]))*j2[A+612>>2]),d=z2(z2(z2(z2(j2[A+344>>2]*s)-z2(l*j2[A+340>>2]))-z2(n*j2[A+348>>2]))*j2[A+608>>2]),z2(z2(z2(z2(j2[A+328>>2]*s)-z2(l*j2[A+324>>2]))-z2(n*j2[A+332>>2]))*j2[A+604>>2])):z2(0),j2[i+64>>2]=k,T2[c+76>>2]=0,j2[c+72>>2]=v,j2[c+68>>2]=d,o=j2[f>>2],v=j2[f+4>>2],d=j2[f+8>>2],j2[c+44>>2]=j2[f+12>>2],j2[c+40>>2]=d,j2[c+36>>2]=v,j2[c+32>>2]=o,i=f=B+P2(Q,152)|0,k=u?(C=z2(z2(z2(z2(o*j2[u+356>>2])+z2(v*j2[u+360>>2]))+z2(d*j2[u+364>>2]))*j2[u+612>>2]),w=z2(z2(z2(z2(o*j2[u+340>>2])+z2(v*j2[u+344>>2]))+z2(d*j2[u+348>>2]))*j2[u+608>>2]),z2(z2(z2(z2(o*j2[u+324>>2])+z2(v*j2[u+328>>2]))+z2(d*j2[u+332>>2]))*j2[u+604>>2])):z2(0),j2[i+80>>2]=k,T2[f+92>>2]=0,j2[f+88>>2]=C,j2[f+84>>2]=w,w=z2(0),C=z2(0),f=B+P2(Q,152)|0,k=A?(E=z2(z2(z2(j2[A+360>>2]*s)-z2(l*j2[A+356>>2]))-z2(n*j2[A+364>>2])),w=z2(z2(z2(j2[A+328>>2]*s)-z2(l*j2[A+324>>2]))-z2(n*j2[A+332>>2])),z2(z2(z2(j2[A+344>>2]*s)-z2(l*j2[A+340>>2]))-z2(n*j2[A+348>>2]))):z2(0),k=z2(z2(z2(z2(k*s)-z2(l*w))-z2(n*E))+z2(0)),G=u?(D=z2(z2(z2(o*j2[u+356>>2])+z2(v*j2[u+360>>2]))+z2(d*j2[u+364>>2])),h=z2(z2(z2(o*j2[u+340>>2])+z2(v*j2[u+344>>2]))+z2(d*j2[u+348>>2])),z2(z2(z2(j2[u+324>>2]*o)+z2(j2[u+328>>2]*v))+z2(j2[u+332>>2]*d))):z2(0),G=z2(z2(1)/z2(k+z2(z2(z2(G*o)+z2(h*v))+z2(D*d)))),j2[f+108>>2]=G,l=z2(0),s=z2(0),w=z2(0),E=z2(0),A&&(A=g+P2(r,244)|0,l=z2(z2(j2[A+176>>2]+j2[A+208>>2])*z2(0)),E=j2[A+192>>2],w=j2[A+200>>2],C=j2[A+196>>2],Z=z2(z2(j2[A+184>>2]+j2[A+216>>2])*z2(0)),s=z2(z2(j2[A+180>>2]+j2[A+212>>2])*z2(0))),h=u?(A=g+P2(e,244)|0,D=z2(z2(j2[A+176>>2]+j2[A+208>>2])*z2(-0)),Y=j2[A+192>>2],R=j2[A+200>>2],F=j2[A+196>>2],k=z2(z2(j2[A+180>>2]+j2[A+212>>2])*z2(-0)),z2(z2(j2[A+184>>2]+j2[A+216>>2])*z2(-0))):(D=z2(-0),k=z2(-0),z2(-0)),A=B+P2(Q,152)|0,j2[A+124>>2]=a,j2[A+120>>2]=-a,T2[A+116>>2]=0,j2[A+112>>2]=G*z2(z2(0)-z2(z2(z2(z2(l+s)+Z)+z2(z2(z2(E*t)-z2(b*C))-z2(n*w)))+z2(z2(z2(D+k)+h)+z2(z2(d*R)+z2(z2(v*F)+z2(o*Y))))));}function F4(A,f,r,e,i,a,n,o,b,t,c,u){var k,l,s,v,d,B=0,Q=0,g=z2(0),w=z2(0),G=z2(0),C=z2(0),E=z2(0),D=z2(0),h=z2(0),Z=z2(0),Y=z2(0),R=0,F=0,W=0,m=z2(0),N=z2(0),V=z2(0),J=z2(0),M=z2(0),I=z2(0),x=z2(0),y=z2(0),U=z2(0),X=z2(0),p=z2(0),T=(z2(0)),S=z2(0),j=z2(0),P=z2(0),z=z2(0),B=(R=T2[A+68>>2]);if((0|B)==T2[A+72>>2]&&!((0|(F=(B=R)?B<<1:1))<=(0|B))){if(F&&(T2[5498]=T2[5498]+1,(B=K2(P2(F,152)+19|0))&&(T2[(Q=B+19&-16)-4>>2]=B)),1<=(0|R))for(B=0,W=R;$2(B+Q|0,T2[A+76>>2]+B|0,152),B=B+152|0,W=W-1|0;);(B=T2[A+76>>2])&&S2[A+80|0]&&(T2[5499]=T2[5499]+1,q2(T2[B-4>>2])),T2[A+76>>2]=Q,T2[A+72>>2]=F,p2[A+80|0]=1,B=T2[A+68>>2];}T2[A+68>>2]=B+1,B=(W=T2[A+76>>2])+P2(R,152)|0,T2[B+140>>2]=i,T2[B+148>>2]=e,T2[B+144>>2]=r,k=j2[a+84>>2],j2[B+104>>2]=k,T2[B+96>>2]=0,T2[B+100>>2]=0,F=T2[A+16>>2],A=T2[240+(F+P2(r,244)|0)>>2],i=T2[240+(F+P2(e,244)|0)>>2],T2[B+132>>2]=0,A?(Q=T2[f+4>>2],T2[B+16>>2]=T2[f>>2],T2[B+20>>2]=Q,s=T2[4+(l=f+8|0)>>2],T2[(Q=B+24|0)>>2]=T2[l>>2],T2[Q+4>>2]=s,G=j2[n>>2],g=j2[n+4>>2],w=j2[n+8>>2],T2[B+12>>2]=0,T=j2[Q>>2],S=j2[B+20>>2],I=z2(z2(g*T)-z2(w*S)),j2[B>>2]=I,j=j2[B+16>>2],x=z2(z2(S*G)-z2(g*j)),j2[B+8>>2]=x,y=z2(z2(w*j)-z2(T*G)),j2[B+4>>2]=y,G=j2[A+332>>2],g=j2[A+328>>2],w=j2[A+608>>2],C=j2[A+348>>2],D=j2[A+340>>2],Y=j2[A+344>>2],E=j2[A+612>>2],m=j2[A+364>>2],h=j2[A+356>>2],Z=j2[A+360>>2],U=j2[A+604>>2],J=j2[A+324>>2],T2[B+76>>2]=0,E=z2(E*z2(z2(z2(I*h)+z2(y*Z))+z2(x*m))),j2[B+72>>2]=E,D=z2(w*z2(z2(z2(I*D)+z2(y*Y))+z2(x*C))),j2[B+68>>2]=D,Y=z2(U*z2(z2(z2(I*J)+z2(y*g))+z2(x*G))),j2[B+64>>2]=Y):(T2[B>>2]=0,T2[B+4>>2]=0,T2[(Q=B+8|0)>>2]=0,T2[Q+4>>2]=0,T2[(Q=B+16|0)>>2]=0,T2[Q+4>>2]=0,T2[(Q=B+24|0)>>2]=0,T2[Q+4>>2]=0,T2[B+64>>2]=0,T2[B+68>>2]=0,T2[(B=B+72|0)>>2]=0,T2[B+4>>2]=0),i?(G=j2[f+4>>2],g=j2[f+8>>2],B=W+P2(R,152)|0,w=j2[f>>2],U=z2(-w),j2[B+48>>2]=U,T2[B+60>>2]=0,P=z2(-g),j2[B+56>>2]=P,z=z2(-G),j2[B+52>>2]=z,C=j2[o+8>>2],Z=j2[o+4>>2],h=j2[o>>2],T2[B+44>>2]=0,m=z2(z2(w*Z)-z2(G*h)),j2[B+40>>2]=m,h=z2(z2(g*h)-z2(w*C)),j2[B+36>>2]=h,Z=z2(z2(G*C)-z2(g*Z)),j2[B+32>>2]=Z,G=j2[i+332>>2],C=j2[i+328>>2],w=j2[i+608>>2],J=j2[i+348>>2],V=j2[i+340>>2],N=j2[i+344>>2],g=j2[i+612>>2],M=j2[i+364>>2],X=j2[i+356>>2],p=j2[i+360>>2],v=j2[i+604>>2],d=j2[i+324>>2],T2[B+92>>2]=0,g=z2(g*z2(z2(z2(Z*X)+z2(h*p))+z2(m*M))),j2[B+88>>2]=g,w=z2(w*z2(z2(z2(Z*V)+z2(h*N))+z2(m*J))),j2[B+84>>2]=w,C=z2(v*z2(z2(z2(Z*d)+z2(h*C))+z2(m*G))),j2[B+80>>2]=C):(B=W+P2(R,152)|0,T2[B+80>>2]=0,T2[B+84>>2]=0,T2[B+32>>2]=0,T2[B+36>>2]=0,T2[(Q=B+88|0)>>2]=0,T2[Q+4>>2]=0,T2[(Q=B+40|0)>>2]=0,T2[Q+4>>2]=0,T2[(Q=B+48|0)>>2]=0,T2[Q+4>>2]=0,T2[(B=B+56|0)>>2]=0,T2[B+4>>2]=0,m=z2(0),h=z2(0),Z=z2(0),U=z2(0),g=z2(0),w=z2(0),C=z2(0)),J=z2(0),B=W+P2(R,152)|0,G=b,b=A?(b=j2[n+8>>2],V=j2[n+4>>2],M=z2(z2(z2(D*b)-z2(E*V))*j2[f>>2]),N=E,E=j2[n>>2],z2(j2[A+404>>2]+z2(z2(M+z2(z2(z2(N*E)-z2(b*Y))*j2[f+4>>2]))+z2(z2(z2(V*Y)-z2(D*E))*j2[f+8>>2])))):z2(0),g=i?(E=j2[o+4>>2],D=j2[o+8>>2],Y=z2(z2(z2(g*E)-z2(w*D))*j2[f>>2]),N=g,g=j2[o>>2],z2(j2[i+404>>2]+z2(z2(Y+z2(z2(z2(C*D)-z2(N*g))*j2[f+4>>2]))+z2(z2(z2(w*g)-z2(C*E))*j2[f+8>>2])))):z2(0),G=z2(G/z2(b+g)),j2[B+108>>2]=G,V=z2(0),E=z2(0),D=z2(0),Y=z2(0),g=z2(0),w=z2(0),A&&(A=F+P2(r,244)|0,D=z2(j2[A+176>>2]+j2[A+208>>2]),V=z2(j2[A+184>>2]+j2[A+216>>2]),Y=j2[A+192>>2],w=j2[A+200>>2],E=z2(j2[A+180>>2]+j2[A+212>>2]),g=j2[A+196>>2]),C=z2(0),b=z2(0),N=z2(0),M=z2(0),X=z2(0),i&&(A=F+P2(e,244)|0,J=z2(j2[A+176>>2]+j2[A+208>>2]),C=z2(j2[A+180>>2]+j2[A+212>>2]),X=j2[A+192>>2],N=j2[A+200>>2],M=j2[A+196>>2],b=z2(j2[A+184>>2]+j2[A+216>>2])),p=z2(0),16&S2[a+128|0]&&(p=z2(G*z2(z2(j2[t+44>>2]*z2(-z2(z2(z2(z2(j2[a+48>>2]-j2[a+32>>2])*j2[f>>2])+z2(z2(j2[a+52>>2]-j2[a+36>>2])*j2[f+4>>2]))+z2(z2(j2[a+56>>2]-j2[a+40>>2])*j2[f+8>>2]))))/j2[t+12>>2]))),A=W+P2(R,152)|0,T2[A+128>>2]=0,j2[A+124>>2]=k,j2[A+120>>2]=-k,j2[A+116>>2]=u,j2[A+112>>2]=z2(G*z2(c-z2(z2(z2(z2(z2(D*j)+z2(E*S))+z2(V*T))+z2(z2(z2(Y*I)+z2(g*y))+z2(w*x)))+z2(z2(z2(z2(J*U)+z2(C*z))+z2(b*P))+z2(z2(z2(X*Z)+z2(M*h))+z2(N*m))))))+p;}function W4(A,f,r,e,i,a,n){var o,b,t,c,u,k,l,s,v=z2(0),d=(0);L2=d=L2-16|0,v=j2[A+52>>2],o=j2[A+56>>2],b=j2[A+48>>2],T2[n+60>>2]=0,j2[n+48>>2]=b+z2(f*a),j2[n+56>>2]=o+z2(e*a),j2[n+52>>2]=v+z2(r*a),e=j2[i>>2],t=j2[i+4>>2],c=j2[i+8>>2],f=(f=z2(z2(z2(e*e)+z2(t*t))+z2(c*c)))>z2(1.1920928955078125e-7)?z2(_2(f)):z2(0),f=(r=z2(f*a)>z2(.7853981852531433)?z2(z2(.7853981852531433)/a):f)<z2(.0010000000474974513)?z2(z2(a*z2(.5))+z2(r*z2(z2(z2(z2(a*a)*a)*z2(-.02083333395421505))*r))):z2(W2(z2(z2(r*z2(.5))*a))/r),C4(A,d),v=j2[4+d>>2],o=j2[12+d>>2],r=m2(z2(z2(r*a)*z2(.5))),b=z2(e*f),u=j2[d>>2],t=z2(t*f),c=z2(c*f),k=j2[8+d>>2],e=z2(z2(z2(z2(o*r)-z2(b*u))-z2(v*t))-z2(c*k)),f=z2(z2(z2(z2(c*o)+z2(r*k))+z2(b*v))-z2(t*u)),a=z2(z2(z2(z2(r*u)+z2(b*o))+z2(t*k))-z2(c*v)),r=z2(z2(z2(c*u)+z2(z2(t*o)+z2(r*v)))-z2(b*k)),(v=z2(z2(e*e)+z2(z2(f*f)+z2(z2(a*a)+z2(r*r)))))>z2(1.1920928955078125e-7)&&(v=z2(z2(1)/z2(_2(v))),e=z2(e*v),f=z2(f*v),r=z2(r*v),a=z2(a*v),v=z2(z2(e*e)+z2(z2(f*f)+z2(z2(r*r)+z2(a*a))))),v>z2(1.1920928955078125e-7)?(T2[n+12>>2]=0,T2[n+44>>2]=0,T2[n+28>>2]=0,o=z2(z2(2)/v),v=z2(f*o),b=z2(r*v),u=z2(a*o),t=z2(e*u),j2[n+36>>2]=b+t,c=z2(a*v),o=z2(r*o),k=z2(e*o),j2[n+32>>2]=c-k,j2[n+24>>2]=b-t,b=z2(a*o),e=z2(e*v),j2[n+16>>2]=b+e,j2[n+8>>2]=c+k,j2[n+4>>2]=b-e,e=z2(a*u),r=z2(r*o),j2[n+40>>2]=z2(1)-z2(e+r),f=z2(f*v),j2[n+20>>2]=z2(1)-z2(e+f),j2[n>>2]=z2(1)-z2(r+f)):(i=T2[A+4>>2],T2[n>>2]=T2[A>>2],T2[n+4>>2]=i,s=T2[4+(l=A+8|0)>>2],T2[(i=n+8|0)>>2]=T2[l>>2],T2[i+4>>2]=s,i=T2[A+20>>2],T2[n+16>>2]=T2[A+16>>2],T2[n+20>>2]=i,s=T2[4+(l=A+24|0)>>2],T2[(i=n+24|0)>>2]=T2[l>>2],T2[i+4>>2]=s,i=T2[A+36>>2],T2[n+32>>2]=T2[A+32>>2],T2[n+36>>2]=i,i=n+40|0,n=T2[(A=A+40|0)+4>>2],T2[i>>2]=T2[A>>2],T2[i+4>>2]=n),L2=16+d|0;}function m4(A,f){var r,e,i,a,n,o,b=0,t=0,c=0,u=0,k=0,l=0,c=t=T2[A+4>>2];if((0|t)==T2[A+8>>2]&&!((0|(n=(c=t)?t<<1:1))<=(0|t))){if(n&&(T2[5498]=T2[5498]+1,(c=K2(P2(n,244)+19|0))&&(T2[(l=c+19&-16)-4>>2]=c)),1<=(0|t))for(b=64,c=t;k=T2[A+12>>2]+b|0,a=T2[4+(e=k+-64|0)>>2],T2[(r=(u=b+l|0)+-64|0)>>2]=T2[e>>2],T2[4+r>>2]=a,i=T2[4+(e=8+e|0)>>2],T2[(r=8+r|0)>>2]=T2[e>>2],T2[4+r>>2]=i,o=T2[4+(a=8+(r=k-48|0)|0)>>2],T2[(i=8+(e=u-48|0)|0)>>2]=T2[a>>2],T2[4+i>>2]=o,i=T2[4+r>>2],T2[e>>2]=T2[r>>2],T2[4+e>>2]=i,o=T2[4+(a=8+(r=k-32|0)|0)>>2],T2[(i=8+(e=u-32|0)|0)>>2]=T2[a>>2],T2[4+i>>2]=o,i=T2[4+r>>2],T2[e>>2]=T2[r>>2],T2[4+e>>2]=i,a=T2[4+(e=k-16|0)>>2],T2[(r=u-16|0)>>2]=T2[e>>2],T2[4+r>>2]=a,i=T2[4+(e=8+e|0)>>2],T2[(r=8+r|0)>>2]=T2[e>>2],T2[4+r>>2]=i,$2(u,k,180),b=b+244|0,c=c-1|0;);(c=T2[A+12>>2])&&S2[A+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[c-4>>2])),T2[A+12>>2]=l,p2[A+16|0]=1,T2[A+8>>2]=n,c=T2[A+4>>2];}return T2[A+4>>2]=c+1,k=T2[(u=f+8|0)+4>>2],t=(c=P2(t,244))+T2[A+12>>2]|0,T2[(b=t+8|0)>>2]=T2[u>>2],T2[b+4>>2]=k,b=T2[f+4>>2],T2[t>>2]=T2[f>>2],T2[t+4>>2]=b,k=T2[(u=f+24|0)+4>>2],T2[(b=t+24|0)>>2]=T2[u>>2],T2[b+4>>2]=k,b=T2[f+20>>2],T2[t+16>>2]=T2[f+16>>2],T2[t+20>>2]=b,b=T2[f+36>>2],T2[t+32>>2]=T2[f+32>>2],T2[t+36>>2]=b,k=T2[(u=f+40|0)+4>>2],T2[(b=t+40|0)>>2]=T2[u>>2],T2[b+4>>2]=k,b=T2[f+52>>2],T2[t+48>>2]=T2[f+48>>2],T2[t+52>>2]=b,k=T2[(u=f+56|0)+4>>2],T2[(b=t+56|0)>>2]=T2[u>>2],T2[b+4>>2]=k,$2(t- -64|0,f- -64|0,180),c+T2[A+12>>2]|0;}function N4(A,f,r,e,i,a){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0;var n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E=0,D=z2(0),h=0,Z=z2(0),Y=(z2(0)),R=z2(0),F=z2(0),W=z2(0);L2=E=L2-272|0,R=j2[f+52>>2],F=j2[r+52>>2],W=j2[f+56>>2],c=j2[r+56>>2],u=j2[f+48>>2],k=j2[r+48>>2],G4(f,r,112+E|0,48+E|0),T2[268+E>>2]=r=0,D=j2[48+E>>2],Z=z2(D*j2[120+E>>2]),j2[264+E>>2]=Z,o=z2(D*j2[116+E>>2]),j2[260+E>>2]=o,D=z2(D*j2[112+E>>2]),j2[256+E>>2]=D,l=j2[e+52>>2],s=j2[i+52>>2],Q=j2[e+56>>2],g=j2[i+56>>2],v=j2[e+48>>2],w=j2[i+48>>2],G4(e,i,112+E|0,48+E|0),T2[252+E>>2]=0,n=j2[48+E>>2],b=z2(n*j2[120+E>>2]),j2[248+E>>2]=b,Y=z2(n*j2[116+E>>2]),j2[244+E>>2]=Y,n=z2(n*j2[112+E>>2]),j2[240+E>>2]=n,i=T2[A+12>>2],D=z2(z2(n1[T2[T2[i>>2]+16>>2]](i))*z2(_2(z2(z2(z2(D*D)+z2(o*o))+z2(Z*Z))))),i=T2[A+16>>2],Z=z2(i?n1[T2[T2[i>>2]+16>>2]](i):0),d=z2(D+z2(Z*z2(_2(z2(z2(z2(n*n)+z2(Y*Y))+z2(b*b)))))),v=z2(w-v),u=z2(k-u),o=z2(v-u),k=z2(s-l),l=z2(F-R),n=z2(k-l),s=z2(g-Q),c=z2(c-W),b=z2(s-c);A:if(z2(d+z2(_2(z2(z2(z2(o*o)+z2(n*n))+z2(b*b)))))!=z2(0)&&(p2[216+E|0]=0,T2[212+E>>2]=1566444395,T2[176+E>>2]=12428,V4(A,f,e,176+E|0),h=T2[4+(t=204+E|0)>>2],T2[(i=232+E|0)>>2]=T2[t>>2],T2[i+4>>2]=h,i=T2[200+E>>2],T2[224+E>>2]=T2[196+E>>2],T2[228+E>>2]=i,S2[216+E|0]&&(Y=j2[180+E>>2],R=j2[184+E>>2],F=j2[188+E>>2],!(z2(d+z2(z2(z2(o*Y)+z2(n*R))+z2(b*F)))<=z2(1.1920928955078125e-7))))){r=1;f:{if((W=z2(j2[212+E>>2]+j2[a+172>>2]))>z2(.0010000000474974513)){for(t=20+E|0,G=160+E|0,Z=z2(i=0);;){if((h=T2[a+168>>2])&&(T2[120+E>>2]=1065353216,T2[124+E>>2]=0,T2[112+E>>2]=1065353216,T2[116+E>>2]=1065353216,n1[T2[T2[h>>2]+28>>2]](h,224+E|0,z2(.20000000298023224),112+E|0)),(D=z2(d+z2(z2(z2(o*Y)+z2(n*R))+z2(b*F))))<=z2(1.1920928955078125e-7)){r=0;break A;}if((D=z2(Z+z2(W/D)))<=Z){r=0;break A;}if(D>z2(1)){r=0;break A;}if(D<z2(0)){r=0;break A;}if(W4(f,u,l,c,256+E|0,D,112+E|0),W4(e,v,k,s,240+E|0,D,48+E|0),(h=T2[a+168>>2])&&(T2[8+E>>2]=0,T2[12+E>>2]=0,T2[E>>2]=1065353216,T2[4+E>>2]=0,n1[T2[T2[h>>2]+28>>2]](h,G,z2(.20000000298023224),E)),n1[T2[T2[a>>2]>>2]](a,D),p2[40+E|0]=0,T2[36+E>>2]=1566444395,T2[E>>2]=12428,V4(A,112+E|0,48+E|0,E),!S2[40+E|0])break f;if(C=T2[4+(B=8+t|0)>>2],T2[(h=232+E|0)>>2]=T2[B>>2],T2[h+4>>2]=C,h=T2[4+t>>2],T2[224+E>>2]=T2[t>>2],T2[228+E>>2]=h,64==(0|i)){n1[T2[T2[a>>2]+8>>2]](a,-2,65),r=0;break A;}if(i=i+1|0,Y=j2[4+E>>2],R=j2[8+E>>2],F=j2[12+E>>2],Z=D,!((W=z2(j2[36+E>>2]+j2[a+172>>2]))>z2(.0010000000474974513)))break;}Z=j2[16+E>>2];}else D=z2(0),Z=j2[192+E>>2];j2[a+132>>2]=Y,j2[a+164>>2]=D,A=T2[228+E>>2],T2[a+148>>2]=T2[224+E>>2],T2[a+152>>2]=A,j2[a+144>>2]=Z,j2[a+140>>2]=F,j2[a+136>>2]=R,e=T2[(f=232+E|0)+4>>2],T2[(A=a+156|0)>>2]=T2[f>>2],T2[A+4>>2]=e;break A;}n1[T2[T2[a>>2]+8>>2]](a,-1,i),r=0;}return L2=272+E|0,0|r;}function V4(A,f,r,e){var i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M,I,x,y=0,U=0,X=0,p=(z2(0)),T=(z2(0)),S=(0),j=(0),P=(0);L2=y=L2-240|0,T2[A+16>>2]?(U=T2[A+4>>2],p2[U+312|0]=0,p2[U+356|0]=1,T2[U>>2]=0,T2[U+292>>2]=1566444395,T2[U+296>>2]=1566444395,T2[(X=U+336|0)>>2]=0,T2[X+4>>2]=0,T2[(X=U+300|0)>>2]=1566444395,T2[X+4>>2]=0,T2[(X=U+344|0)>>2]=0,T2[X+4>>2]=0,p2[U+352|0]=0,p2[0|(U=U+332|0)]=240&S2[0|U],U=T2[A+12>>2],X=T2[U+4>>2],j=T2[A+16>>2],P=T2[j+4>>2],T=z2(n1[T2[T2[U>>2]+48>>2]](U)),S=T2[A+16>>2],p=z2(n1[T2[T2[S>>2]+48>>2]](S)),T2[(S=172+y|0)>>2]=0,T2[S+4>>2]=0,T2[232+y>>2]=1,T2[236+y>>2]=1,T2[220+y>>2]=-1,p2[212+y|0]=0,j2[208+y>>2]=p,j2[204+y>>2]=T,T2[200+y>>2]=P,T2[196+y>>2]=X,T2[192+y>>2]=j,T2[188+y>>2]=U,T2[164+y>>2]=0,T2[168+y>>2]=1065353216,T2[160+y>>2]=12272,z=T2[A+4>>2],T2[180+y>>2]=T2[A+8>>2],T2[184+y>>2]=z,U=T2[(A=f+8|0)+4>>2],T2[(X=32+y|0)>>2]=T2[A>>2],T2[X+4>>2]=U,U=T2[(A=f+24|0)+4>>2],T2[(X=48+y|0)>>2]=T2[A>>2],T2[X+4>>2]=U,U=T2[(A=f+40|0)+4>>2],T2[(X=y+64|0)>>2]=T2[A>>2],T2[X+4>>2]=U,U=T2[(A=f+56|0)+4>>2],T2[(X=80+y|0)>>2]=T2[A>>2],T2[X+4>>2]=U,U=T2[(A=r+8|0)+4>>2],T2[(X=96+y|0)>>2]=T2[A>>2],T2[X+4>>2]=U,T2[152+y>>2]=1566444395,A=T2[f+4>>2],T2[24+y>>2]=T2[f>>2],T2[28+y>>2]=A,A=T2[f+20>>2],T2[40+y>>2]=T2[f+16>>2],T2[44+y>>2]=A,A=T2[f+36>>2],T2[56+y>>2]=T2[f+32>>2],T2[60+y>>2]=A,A=T2[f+52>>2],T2[72+y>>2]=T2[f+48>>2],T2[76+y>>2]=A,A=T2[r+4>>2],T2[88+y>>2]=T2[r>>2],T2[92+y>>2]=A,f=T2[(A=r+24|0)+4>>2],T2[(U=112+y|0)>>2]=T2[A>>2],T2[U+4>>2]=f,A=T2[r+20>>2],T2[(f=104+y|0)>>2]=T2[r+16>>2],T2[f+4>>2]=A,A=T2[r+36>>2],T2[(f=120+y|0)>>2]=T2[r+32>>2],T2[f+4>>2]=A,f=T2[(A=r+40|0)+4>>2],T2[(U=128+y|0)>>2]=T2[A>>2],T2[U+4>>2]=f,A=T2[r+52>>2],T2[(f=136+y|0)>>2]=T2[r+48>>2],T2[f+4>>2]=A,f=T2[(A=r+56|0)+4>>2],T2[(r=144+y|0)>>2]=T2[A>>2],T2[r+4>>2]=f,J0(160+y|0,24+y|0,e,0,0)):(I=j2[(X=r+52|0)>>2],Q=j2[(j=r+56|0)>>2],g=j2[f+52>>2],h=j2[f+56>>2],t=j2[f+20>>2],c=j2[f+36>>2],T=j2[(P=r+20|0)>>2],p=j2[(S=r+36|0)>>2],i=j2[(R=r+24|0)>>2],a=j2[f+24>>2],n=j2[(F=r+40|0)>>2],s=j2[f+40>>2],Z=j2[r+48>>2],Y=j2[f+48>>2],U=T2[A+12>>2],v=j2[f+32>>2],d=j2[f>>2],w=j2[f+16>>2],G=j2[f+4>>2],b=j2[r+32>>2],o=j2[r+16>>2],u=j2[r>>2],k=j2[r+4>>2],A=T2[A+20>>2],l=j2[r+8>>2],C=j2[f+8>>2],T2[172+y>>2]=0,W=z2(z2(z2(C*k)+z2(a*T))+z2(s*p)),E=z2(-j2[(f=A+60|0)>>2]),m=z2(z2(z2(C*u)+z2(a*o))+z2(s*b)),D=j2[A+56>>2],C=z2(z2(z2(C*l)+z2(a*i))+z2(s*n)),a=j2[(N=A- -64|0)>>2],j2[168+y>>2]=z2(z2(W*E)-z2(m*D))-z2(C*a),V=z2(z2(z2(G*k)+z2(t*T))+z2(c*p)),J=z2(z2(z2(G*u)+z2(t*o))+z2(c*b)),G=z2(z2(z2(G*l)+z2(t*i))+z2(c*n)),j2[164+y>>2]=z2(z2(V*E)-z2(D*J))-z2(a*G),M=z2(z2(z2(d*k)+z2(w*T))+z2(v*p)),B=z2(M*E),E=z2(z2(z2(d*u)+z2(w*o))+z2(v*b)),w=z2(z2(z2(d*l)+z2(w*i))+z2(v*n)),j2[160+y>>2]=z2(B-z2(D*E))-z2(a*w),n1[T2[T2[U>>2]+64>>2]](24+y|0,U,160+y|0),t=j2[f>>2],c=j2[N>>2],D=j2[A+72>>2],a=j2[A+56>>2],s=j2[24+y>>2],v=j2[28+y>>2],d=j2[32+y>>2],T2[172+y>>2]=0,x=z2(z2(z2(Y*u)+z2(g*o))+z2(h*b)),B=o,o=z2(-I),b=z2(z2(x+z2(z2(z2(B*o)-z2(u*Z))-z2(b*Q)))+z2(z2(z2(E*s)+z2(J*v))+z2(m*d))),n=z2(z2(z2(z2(z2(Y*l)+z2(g*i))+z2(h*n))+z2(z2(z2(i*o)-z2(l*Z))-z2(n*Q)))+z2(z2(z2(w*s)+z2(G*v))+z2(C*d))),i=z2(z2(z2(z2(z2(Y*k)+z2(g*T))+z2(h*p))+z2(z2(z2(T*o)-z2(k*Z))-z2(p*Q)))+z2(z2(z2(M*s)+z2(V*v))+z2(W*d))),T=z2(z2(z2(c*n)+z2(z2(a*b)+z2(t*i)))-D),p=z2(b-z2(a*T)),b=j2[r+32>>2],i=z2(i-z2(t*T)),o=j2[S>>2],n=z2(n-z2(c*T)),u=j2[F>>2],j2[168+y>>2]=z2(z2(z2(p*b)+z2(i*o))+z2(n*u))+j2[j>>2],k=j2[r+16>>2],l=j2[P>>2],Q=j2[R>>2],j2[164+y>>2]=z2(z2(z2(p*k)+z2(i*l))+z2(n*Q))+j2[X>>2],g=j2[r>>2],B=z2(g*p),p=j2[r+4>>2],B=z2(B+z2(i*p)),i=j2[r+8>>2],j2[160+y>>2]=z2(B+z2(n*i))+j2[r+48>>2],T2[20+y>>2]=0,j2[16+y>>2]=z2(z2(a*b)+z2(t*o))+z2(c*u),j2[12+y>>2]=z2(z2(a*k)+z2(t*l))+z2(c*Q),j2[8+y>>2]=z2(z2(a*g)+z2(t*p))+z2(c*i),n1[T2[T2[e>>2]+16>>2]](e,8+y|0,160+y|0,T)),L2=240+y|0;}function J4(A){var f,r,e=0,i=0,a=0;if(T2[(A|=0)>>2]=17524,1<=(0|(e=T2[A+8>>2])))for(;r=T2[T2[A+16>>2]+i>>2],(f=T2[r+188>>2])&&(e=T2[A+68>>2],e=0|n1[T2[T2[e>>2]+36>>2]](e),n1[T2[T2[e>>2]+40>>2]](e,f,T2[A+24>>2]),e=T2[A+68>>2],n1[T2[T2[e>>2]+12>>2]](e,f,T2[A+24>>2]),T2[r+188>>2]=0,e=T2[A+8>>2]),i=i+4|0,(0|(a=a+1|0))<(0|e););return (e=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+16>>2]=0,T2[A+8>>2]=0,T2[A+12>>2]=0,p2[A+20|0]=1,0|A;}function M4(A){A|=0;var f,r,e,i,a,n,o=0,b=0,t=0,c=0,u=0,k=0,l=z2(0),s=0,v=0,d=0,B=0,Q=(0);if(L2=o=L2-192|0,0|n1[T2[T2[A>>2]+20>>2]](A)){if(t=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[t>>2]+100>>2]](t),t=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[t>>2]+8>>2]](80+o|0,t),t=0|n1[T2[T2[A>>2]+20>>2]](A),8&n1[T2[T2[t>>2]+56>>2]](t)&&(t=T2[A+24>>2])&&!((0|(v=0|n1[T2[T2[t>>2]+36>>2]](t)))<1))for(B=176+o|0,t=0;;){if(u=T2[A+24>>2],u=0|n1[T2[T2[u>>2]+40>>2]](u,t),1<=(0|(s=T2[u+844>>2])))for(u=u+168|0;d=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[d>>2]+40>>2]](d,u-132|0,u-100|0,j2[u-84>>2],T2[u>>2],B),u=u+208|0,s=s-1|0;);if((0|v)==(0|(t=t+1|0)))break;}if(t=0|n1[T2[T2[A>>2]+20>>2]](A),3&n1[T2[T2[t>>2]+56>>2]](t)&&!(T2[A+8>>2]<1))for(s=160+o|0,v=96+o|0,B=112+o|0,d=128+o|0,f=144+o|0,u=0;;){if(t=T2[T2[A+16>>2]+u>>2],!(32&S2[t+204|0])){if(0|n1[T2[T2[A>>2]+20>>2]](A)&&(b=0|n1[T2[T2[A>>2]+20>>2]](A),1&n1[T2[T2[b>>2]+56>>2]](b))){A:{f:switch(T2[t+220>>2]-1|0){case 0:k=T2[(c=88+o|0)+4>>2],T2[(b=72+o|0)>>2]=T2[c>>2],T2[b+4>>2]=k,b=T2[84+o>>2],T2[64+o>>2]=T2[80+o>>2],T2[68+o>>2]=b;break A;case 1:k=T2[(c=v+8|0)+4>>2],T2[(b=72+o|0)>>2]=T2[c>>2],T2[b+4>>2]=k,b=T2[v+4>>2],T2[64+o>>2]=T2[v>>2],T2[68+o>>2]=b;break A;case 2:k=T2[(c=B+8|0)+4>>2],T2[(b=72+o|0)>>2]=T2[c>>2],T2[b+4>>2]=k,b=T2[B+4>>2],T2[64+o>>2]=T2[B>>2],T2[68+o>>2]=b;break A;case 3:k=T2[(c=d+8|0)+4>>2],T2[(b=72+o|0)>>2]=T2[c>>2],T2[b+4>>2]=k,b=T2[d+4>>2],T2[64+o>>2]=T2[d>>2],T2[68+o>>2]=b;break A;case 4:k=T2[(c=8+f|0)+4>>2],T2[(b=72+o|0)>>2]=T2[c>>2],T2[b+4>>2]=k,b=T2[4+f>>2],T2[64+o>>2]=T2[f>>2],T2[68+o>>2]=b;break A;default:break f;}T2[72+o>>2]=1050253722,T2[76+o>>2]=0,T2[64+o>>2]=1050253722,T2[68+o>>2]=1050253722;}1&p2[t+205|0]&&(k=T2[(c=t+316|0)+4>>2],T2[(b=72+o|0)>>2]=T2[c>>2],T2[b+4>>2]=k,b=T2[t+312>>2],T2[64+o>>2]=T2[t+308>>2],T2[68+o>>2]=b),n1[T2[T2[A>>2]+28>>2]](A,t+4|0,T2[t+192>>2],o+64|0);}(b=T2[A+72>>2])&&2&n1[T2[T2[b>>2]+56>>2]](b)&&(k=T2[(c=s+8|0)+4>>2],T2[(b=40+o|0)>>2]=T2[c>>2],T2[b+4>>2]=k,b=T2[s+4>>2],T2[32+o>>2]=T2[s>>2],T2[36+o>>2]=b,b=T2[t+192>>2],n1[T2[T2[b>>2]+8>>2]](b,t+4|0,o+64|0,48+o|0),j2[64+o>>2]=j2[64+o>>2]+z2(-.019999999552965164),j2[68+o>>2]=j2[68+o>>2]+z2(-.019999999552965164),j2[72+o>>2]=j2[72+o>>2]+z2(-.019999999552965164),j2[48+o>>2]=j2[48+o>>2]+z2(.019999999552965164),j2[52+o>>2]=j2[52+o>>2]+z2(.019999999552965164),j2[56+o>>2]=j2[56+o>>2]+z2(.019999999552965164),S2[A+44|0]&&2==T2[t+252>>2]&&(3&S2[t+204|0]||(b=T2[t+192>>2],n1[T2[T2[b>>2]+8>>2]](b,t+68|0,16+o|0,o),l=z2(j2[16+o>>2]+z2(-.019999999552965164)),j2[16+o>>2]=l,r=z2(j2[20+o>>2]+z2(-.019999999552965164)),j2[20+o>>2]=r,e=z2(j2[24+o>>2]+z2(-.019999999552965164)),j2[24+o>>2]=e,i=z2(j2[o>>2]+z2(.019999999552965164)),j2[o>>2]=i,a=z2(j2[4+o>>2]+z2(.019999999552965164)),j2[4+o>>2]=a,n=z2(j2[8+o>>2]+z2(.019999999552965164)),j2[8+o>>2]=n,l<j2[64+o>>2]&&(j2[64+o>>2]=l),j2[68+o>>2]>r&&(j2[68+o>>2]=r),j2[72+o>>2]>e&&(j2[72+o>>2]=e),(l=j2[28+o>>2])<j2[76+o>>2]&&(j2[76+o>>2]=l),j2[48+o>>2]<i&&(j2[48+o>>2]=i),j2[52+o>>2]<a&&(j2[52+o>>2]=a),j2[56+o>>2]<n&&(j2[56+o>>2]=n),(l=j2[12+o>>2])>j2[60+o>>2]&&(j2[60+o>>2]=l))),t=T2[A+72>>2],n1[T2[T2[t>>2]+60>>2]](t,o+64|0,48+o|0,32+o|0));}if(u=u+4|0,!((0|(Q=Q+1|0))<T2[A+8>>2]))break;}}L2=192+o|0;}function I4(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n=0,o=0,b=0,t=0,c=0,u=L2-96|0;if(L2=u,n=T2[A+8>>2],T2[f+216>>2]=n,T2[A+12>>2]==(0|n)&&!((0|(b=n?n<<1:1))<=(0|n))){if(b&&(T2[5498]=T2[5498]+1,(o=K2(19+(b<<2)|0))&&(T2[(t=o+19&-16)-4>>2]=o)),1<=(0|n))for(o=n;T2[c+t>>2]=T2[T2[A+16>>2]+c>>2],c=c+4|0,o=o-1|0;);(o=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[o-4>>2]),n=T2[A+8>>2]),T2[A+16>>2]=t,T2[A+12>>2]=b,p2[A+20|0]=1;}T2[A+8>>2]=n+1,T2[T2[A+16>>2]+(n<<2)>>2]=f,b=T2[(o=f+12|0)+4>>2],T2[(n=40+u|0)>>2]=T2[o>>2],T2[n+4>>2]=b,b=T2[(o=f+28|0)+4>>2],T2[(n=56+u|0)>>2]=T2[o>>2],T2[n+4>>2]=b,b=T2[(o=f+44|0)+4>>2],T2[(n=72+u|0)>>2]=T2[o>>2],T2[n+4>>2]=b,b=T2[(o=f+60|0)+4>>2],T2[(n=88+u|0)>>2]=T2[o>>2],T2[n+4>>2]=b,n=T2[f+8>>2],T2[32+u>>2]=T2[f+4>>2],T2[36+u>>2]=n,o=T2[(n=f+20|0)+4>>2],T2[48+u>>2]=T2[n>>2],T2[52+u>>2]=o,o=T2[(n=f+36|0)+4>>2],T2[64+u>>2]=T2[n>>2],T2[68+u>>2]=o,o=T2[(n=f+52|0)+4>>2],T2[80+u>>2]=T2[n>>2],T2[84+u>>2]=o,n=T2[f+192>>2],n1[T2[T2[n>>2]+8>>2]](n,32+u|0,16+u|0,u),n=T2[A+68>>2],a=0|n1[T2[T2[n>>2]+8>>2]](n,16+u|0,u,T2[T2[(i=f)+192>>2]+4>>2],f,r,e,T2[A+24>>2]),T2[i+188>>2]=a,L2=96+u|0;}function x4(A,f){A|=0;var r,e,i=0,a=0,n=0,o=0,b=0;(a=T2[(f|=0)+188>>2])&&(i=T2[A+68>>2],i=0|n1[T2[T2[i>>2]+36>>2]](i),n1[T2[T2[i>>2]+40>>2]](i,a,T2[A+24>>2]),i=T2[A+68>>2],n1[T2[T2[i>>2]+12>>2]](i,a,T2[A+24>>2]),T2[f+188>>2]=0),a=T2[A+8>>2];A:if((0|(i=T2[f+216>>2]))<0||(0|a)<=(0|i)){if(!((0|a)<1)){for(i=b=T2[A+16>>2];T2[i>>2]!=(0|f);)if(i=i+4|0,(0|a)==(0|(o=o+1|0)))break A;(0|a)<=(0|o)||(T2[(n=i)>>2]=T2[(i=(a=a-1|0)<<2)+b>>2],T2[A+8>>2]=a,T2[i+T2[A+16>>2]>>2]=f);}}else n=T2[(b=A+16|0)>>2],e=T2[(r=(o=i<<2)+n|0)>>2],T2[r>>2]=T2[n+(n=(a=a-1|0)<<2)>>2],T2[A+8>>2]=a,T2[n+T2[b>>2]>>2]=e,(0|a)<=(0|i)||(T2[T2[T2[A+16>>2]+o>>2]+216>>2]=i);T2[f+216>>2]=-1;}function y4(A,f){var r,e,i,a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0,l=0,s=0,v=0,d=0,B=0,Q=0,g=0,w=0,G=0,C=0,E=0,D=0;if(!((0|(n=T2[A+8>>2]))<1)){for(;;){r=T2[T2[T2[A+16>>2]+(C<<2)>>2]+192>>2],a=P2((a=r+(r<<15^-1)|0)>>>10^a,9),a=d>>>0<=(u=(e=(a=((a^=a>>>6)<<11^-1)+a|0)>>>16^a)&k-1)>>>0;A:{f:if(!a&&-1!=(0|(o=T2[(u<<2)+s>>2]))){for(;T2[(o<<3)+b>>2]!=(0|r);)if(-1==(0|(o=T2[(o<<2)+t>>2])))break f;if(l)break A;}f:{r:{if(!a&&-1!=(0|(o=T2[(u<<2)+s>>2])))for(;;){if(T2[(o<<3)+b>>2]==(0|r))break r;if(-1==(0|(o=T2[(o<<2)+t>>2])))break;}if((0|k)==(0|G)){e:if((0|(a=k?k<<1:1))<=(0|k))a=k,Q=l;else {if(Q=0,a&&(T2[5498]=T2[5498]+1,(n=K2(19+(a<<2)|0))&&(T2[(Q=n+19&-16)-4>>2]=n)),1<=(0|k))for(o=Q,n=l,c=k;T2[o>>2]=T2[n>>2],o=o+4|0,n=n+4|0,c=c-1|0;);else if(!l)break e;T2[5499]=T2[5499]+1,q2(T2[l-4>>2]);}n=k;}else a=k,Q=l,n=G;T2[((l=n)<<2)+Q>>2]=r;e:if((0|v)==(0|g)){if((0|(g=v?v<<1:1))<=(0|v))g=v,B=b;else {if(B=0,g&&(T2[5498]=T2[5498]+1,(n=K2(19+(g<<3)|0))&&(T2[(B=n+19&-16)-4>>2]=n)),1<=(0|v))for(o=B,n=b,c=v;i=T2[n+4>>2],T2[o>>2]=T2[n>>2],T2[o+4>>2]=i,o=o+8|0,n=n+8|0,c=c-1|0;);else if(!b)break e;T2[5499]=T2[5499]+1,q2(T2[b-4>>2]);}}else B=b;if(T2[(v<<3)+B>>2]=r,(0|k)<(0|a)){if((0|d)<(0|a)){if((0|a)<=(0|E))c=s;else {c=0,a&&(T2[5498]=T2[5498]+1,(b=K2(19+(a<<2)|0))&&(T2[(c=b+19&-16)-4>>2]=b));e:{if(1<=(0|d))for(o=c,n=s,b=d;T2[o>>2]=T2[n>>2],o=o+4|0,n=n+4|0,b=b-1|0;);else if(!s)break e;T2[5499]=T2[5499]+1,q2(T2[s-4>>2]);}E=a;}if(d2((d<<2)+c|0,0,a-d<<2),k=a<<2,(0|a)<=(0|w))u=t;else {if((0|a)<=(0|D))u=t;else {u=0,a&&(T2[5498]=T2[5498]+1,(b=K2(16+(3|k)|0))&&(T2[(u=b+19&-16)-4>>2]=b));e:{if(1<=(0|w))for(o=u,n=t,b=w;T2[o>>2]=T2[n>>2],o=o+4|0,n=n+4|0,b=b-1|0;);else if(!t)break e;T2[5499]=T2[5499]+1,q2(T2[t-4>>2]);}D=a;}d2((w<<2)+u|0,0,a-w<<2);}if(1<=(0|a)&&(d2(c,255,k),d2(u,255,k)),1<=(0|d))for(k=a-1|0,o=0,n=B,b=u;t=T2[n>>2],t=P2((t=(t<<15^-1)+t|0)>>>10^t,9),t^=t>>>6,T2[b>>2]=T2[(t=((k&((t=(t<<11^-1)+t|0)>>>16^t))<<2)+c|0)>>2],n=n+8|0,b=b+4|0,(0|d)!=(0|(o=(T2[t>>2]=o)+1|0)););s=c,d=w=a,t=u;}u=a-1&e;}v=v+1|0,T2[(G<<2)+t>>2]=T2[(b=(u<<2)+s|0)>>2],T2[b>>2]=G,k=a,G=l+1|0,l=Q,b=B;break f;}T2[(o<<2)+l>>2]=r;}n1[T2[T2[r>>2]+60>>2]](r,f),n=T2[A+8>>2];}if(!((0|(C=C+1|0))<(0|n)))break;}if(1<=(0|n))for(c=o=0;a=T2[T2[A+16>>2]+o>>2],1!=(0|(u=T2[a+252>>2]))&&64!=(0|u)||(n1[T2[T2[a>>2]+24>>2]](a,f),n=T2[A+8>>2]),o=o+4|0,(0|(c=c+1|0))<(0|n););b&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2])),l&&(T2[5499]=T2[5499]+1,q2(T2[l-4>>2])),t&&(T2[5499]=T2[5499]+1,q2(T2[t-4>>2])),s&&(T2[5499]=T2[5499]+1,q2(T2[s-4>>2]));}}function U4(A,f,r,e){var i,a,n,o,b,t,c,u,k,l,s,v=0,d=0,B=z2(0),Q=z2(0),g=z2(0),w=z2(0),G=0,C=0,E=z2(0),D=z2(0),h=z2(0),Z=z2(0),Y=z2(0),R=z2(0),F=z2(0),W=z2(0),m=0,N=z2(0),V=z2(0),J=z2(0),M=z2(0),I=0,x=z2(0),y=z2(0),U=z2(0),X=z2(0),p=0,T=z2(0),S=(0);T2[(d=264+(L2=v=L2-832|0)|0)>>2]=0,T2[d+4>>2]=0,T2[(d=272+v|0)>>2]=0,T2[d+4>>2]=0,T2[(d=280+v|0)>>2]=0,T2[d+4>>2]=0,T2[288+v>>2]=0,T2[260+v>>2]=1065353216,T2[252+v>>2]=1065353216,T2[256+v>>2]=1065353216,T2[236+v>>2]=8,T2[240+v>>2]=0,T2[244+v>>2]=0,T2[248+v>>2]=0,T2[232+v>>2]=11936,d=T2[r+12>>2];A:if(C=T2[r+4>>2],(0|(G=T2[C+4>>2]))<=19)T2[216+v>>2]=0,T2[220+v>>2]=0,T2[48+v>>2]=12640,j2[212+v>>2]=j2[e+4>>2],p2[652+v|0]=0,T2[628+v>>2]=953267991,T2[308+v>>2]=C,T2[296+v>>2]=13256,T2[304+v>>2]=232+v,T2[300+v>>2]=320+v,T2[32+v>>2]=12396,T2[44+v>>2]=C,G=8&T2[e+16>>2]?32+v|0:296+v|0,C=T2[G>>2],T2[40+v>>2]=232+v,C=T2[C+8>>2],T2[36+v>>2]=320+v,0|n1[0|C](G,A,f,d,d,48+v|0)&&(g=j2[180+v>>2],B=j2[184+v>>2],Q=j2[188+v>>2],(h=z2(z2(z2(g*g)+z2(B*B))+z2(Q*Q)))>z2(9999999747378752e-20)&&(E=j2[212+v>>2])<j2[e+4>>2]&&(x=Q,Q=z2(z2(1)/z2(_2(h))),j2[188+v>>2]=x*Q,j2[184+v>>2]=B*Q,j2[180+v>>2]=g*Q,G=T2[(d=(A=180+v|0)+8|0)+4>>2],T2[(f=16+v|0)>>2]=T2[d>>2],T2[f+4>>2]=G,j2[24+v>>2]=E,f=T2[A+4>>2],T2[8+v>>2]=T2[A>>2],T2[12+v>>2]=f,T2[4+v>>2]=0,T2[v>>2]=T2[r+8>>2],z2(n1[T2[T2[e>>2]+12>>2]](e,v,1))));else if(G-21>>>0<=8)B=j2[d+20>>2],Q=j2[d+36>>2],g=j2[(G=d+24|0)>>2],h=j2[d+52>>2],w=j2[(I=d+56|0)>>2],D=j2[(m=d+40|0)>>2],Z=j2[d+32>>2],W=j2[d+16>>2],N=j2[d>>2],V=j2[d+4>>2],R=j2[d+48>>2],Y=j2[d+8>>2],T2[308+v>>2]=0,F=z2(-h),U=z2(z2(z2(g*F)-z2(Y*R))-z2(D*w)),M=j2[A+48>>2],J=j2[A+52>>2],y=j2[A+56>>2],h=z2(U+z2(z2(z2(Y*M)+z2(g*J))+z2(D*y))),j2[304+v>>2]=h,X=z2(z2(z2(B*F)-z2(V*R))-z2(Q*w)),E=z2(X+z2(z2(z2(V*M)+z2(B*J))+z2(Q*y))),j2[300+v>>2]=E,F=z2(z2(z2(W*F)-z2(N*R))-z2(Z*w)),w=z2(F+z2(z2(z2(N*M)+z2(W*J))+z2(Z*y))),j2[296+v>>2]=w,R=j2[f+48>>2],J=z2(Y*R),Y=j2[f+52>>2],x=D,D=j2[f+56>>2],g=z2(U+z2(z2(J+z2(g*Y))+z2(x*D))),B=z2(X+z2(z2(z2(V*R)+z2(B*Y))+z2(Q*D))),Q=z2(F+z2(z2(z2(N*R)+z2(W*Y))+z2(Z*D))),21!=T2[C+4>>2]?(T2[352+v>>2]=0,j2[348+v>>2]=g,j2[344+v>>2]=B,T2[336+v>>2]=0,j2[332+v>>2]=h,j2[328+v>>2]=E,T2[360+v>>2]=1065353216,j2[324+v>>2]=w,T2[372+v>>2]=C,T2[320+v>>2]=17624,T2[368+v>>2]=T2[r+8>>2],T2[364+v>>2]=e,T2[356+v>>2]=T2[e+16>>2],j2[340+v>>2]=Q,r=T2[(f=d+8|0)+4>>2],T2[(A=384+v|0)>>2]=T2[f>>2],T2[A+4>>2]=r,A=T2[d+4>>2],T2[376+v>>2]=T2[d>>2],T2[380+v>>2]=A,f=T2[G+4>>2],T2[(A=400+v|0)>>2]=T2[G>>2],T2[A+4>>2]=f,f=T2[d+20>>2],T2[(A=392+v|0)>>2]=T2[d+16>>2],T2[A+4>>2]=f,f=T2[d+36>>2],T2[(A=408+v|0)>>2]=T2[d+32>>2],T2[A+4>>2]=f,f=T2[m+4>>2],T2[(A=416+v|0)>>2]=T2[m>>2],T2[A+4>>2]=f,f=T2[d+52>>2],T2[(A=424+v|0)>>2]=T2[d+48>>2],T2[A+4>>2]=f,f=T2[I+4>>2],T2[(A=432+v|0)>>2]=T2[I>>2],T2[A+4>>2]=f,j2[360+v>>2]=j2[e+4>>2],T2[60+v>>2]=0,j2[56+v>>2]=h,j2[52+v>>2]=E,Q<(j2[48+v>>2]=w)&&(j2[48+v>>2]=Q),B<E&&(j2[52+v>>2]=B),g<h&&(j2[56+v>>2]=g),T2[12+v>>2]=0,j2[8+v>>2]=h,j2[4+v>>2]=E,(j2[v>>2]=w)<Q&&(j2[v>>2]=Q),E<B&&(j2[4+v>>2]=B),h<g&&(j2[8+v>>2]=g),n1[T2[T2[C>>2]+64>>2]](C,320+v|0,48+v|0,v)):(T2[352+v>>2]=0,j2[348+v>>2]=g,j2[344+v>>2]=B,p=T2[(f=304+v|0)+4>>2],T2[(A=332+v|0)>>2]=T2[f>>2],T2[A+4>>2]=p,A=T2[300+v>>2],T2[324+v>>2]=T2[296+v>>2],T2[328+v>>2]=A,T2[360+v>>2]=1065353216,j2[340+v>>2]=Q,T2[320+v>>2]=17624,T2[368+v>>2]=T2[r+8>>2],T2[364+v>>2]=e,T2[356+v>>2]=T2[e+16>>2],T2[372+v>>2]=C,r=T2[(f=d+8|0)+4>>2],T2[(A=384+v|0)>>2]=T2[f>>2],T2[A+4>>2]=r,A=T2[d+4>>2],T2[376+v>>2]=T2[d>>2],T2[380+v>>2]=A,f=T2[G+4>>2],T2[(A=400+v|0)>>2]=T2[G>>2],T2[A+4>>2]=f,f=T2[d+20>>2],T2[(A=392+v|0)>>2]=T2[d+16>>2],T2[A+4>>2]=f,f=T2[d+36>>2],T2[(A=408+v|0)>>2]=T2[d+32>>2],T2[A+4>>2]=f,f=T2[m+4>>2],T2[(A=416+v|0)>>2]=T2[m>>2],T2[A+4>>2]=f,f=T2[d+52>>2],T2[(A=424+v|0)>>2]=T2[d+48>>2],T2[A+4>>2]=f,f=T2[I+4>>2],T2[(A=432+v|0)>>2]=T2[I>>2],T2[A+4>>2]=f,j2[360+v>>2]=j2[e+4>>2],T2[32+v>>2]=10956,T2[36+v>>2]=T2[C+56>>2],T2[40+v>>2]=320+v,A=T2[C+60>>2],T2[(f=56+v|0)>>2]=0,T2[f+4>>2]=0,T2[48+v>>2]=0,T2[52+v>>2]=0,T2[(f=8+v|0)>>2]=0,T2[f+4>>2]=0,T2[v>>2]=0,T2[4+v>>2]=0,S2[A+60|0]?g0(A,32+v|0,296+v|0,Q,B,g,48+v|0,v,T2[A+56>>2]):Q0(A,32+v|0,296+v|0,Q,B,g,48+v|0,v));else if(31==(0|G))if(G=T2[C+72>>2],T2[24+v>>2]=e,T2[20+v>>2]=f,T2[16+v>>2]=A,T2[12+v>>2]=d,T2[8+v>>2]=C,T2[v>>2]=17648,T2[4+v>>2]=T2[r+8>>2],G){if(r=T2[G>>2]){for(g=j2[d+56>>2],J=j2[A+56>>2],B=j2[d+40>>2],Q=j2[d+52>>2],y=j2[A+52>>2],h=j2[d+24>>2],E=j2[d+48>>2],U=j2[A+48>>2],w=j2[d+8>>2],D=j2[d+36>>2],Z=j2[d+20>>2],W=j2[d+4>>2],N=j2[d+32>>2],V=j2[d+16>>2],R=j2[d>>2],Y=j2[f+56>>2],F=j2[f+52>>2],M=j2[f+48>>2],T2[320+v>>2]=r,Y=z2(Y-g),F=z2(F-Q),M=z2(M-E),T=z2(z2(B*Y)+z2(z2(h*F)+z2(w*M))),E=z2(U-E),Q=z2(y-Q),x=B,B=z2(J-g),h=z2(z2(z2(w*E)+z2(h*Q))+z2(x*B)),J=w=z2(T-h),x=z2(z2(N*Y)+z2(z2(V*F)+z2(M*R))),N=z2(z2(z2(E*R)+z2(Q*V))+z2(B*N)),g=z2(x-N),E=z2(z2(z2(E*W)+z2(Q*Z))+z2(B*D)),B=z2(z2(z2(D*Y)+z2(z2(Z*F)+z2(M*W)))-E),w=z2(z2(1)/z2(_2(z2(z2(z2(g*g)+z2(B*B))+z2(w*w))))),Q=z2(J*w),g=z2((D=g)*w),B=z2((x=B)*w),R=z2(z2(J*Q)+z2(z2(D*g)+z2(x*B))),o=(48+v|0)+((A=(Q=Q==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/Q))<z2(0))<<4)|8,b=(48+v|0)+((f=(B=B==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/B))<z2(0))<<4)|4,t=(48+v|0)+(!A<<4)|8,c=(48+v|0)+(!f<<4)|4,u=(48+v|0)+((A=(g=g==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/g))<z2(0))<<4)|0,k=(48+v|0)+(!A<<4)|0,p=v+64|0,I=126,A=320+v|0,f=r=128,C=1;;){if(m=T2[(n=(e=C-1|0)<<2)+A>>2],G=T2[(d=m)+20>>2],T2[p>>2]=T2[d+16>>2],T2[p+4>>2]=G,l=T2[(d=d+24|0)+4>>2],T2[(G=p+8|0)>>2]=T2[d>>2],T2[G+4>>2]=l,d=T2[m+4>>2],T2[48+v>>2]=T2[m>>2],T2[52+v>>2]=d,G=T2[(d=m+8|0)+4>>2],T2[56+v>>2]=T2[d>>2],T2[60+v>>2]=G,w=z2(B*z2(j2[b>>2]-E)),!((D=z2(g*z2(j2[k>>2]-N)))<w||(Z=z2(g*z2(j2[u>>2]-N)),(W=z2(B*z2(j2[c>>2]-E)))<Z||(D=W<D?W:D)<(V=z2(Q*z2(j2[o>>2]-h)))||(w=Z<w?w:Z,!(!((Z=z2(Q*z2(j2[t>>2]-h)))<w)&&(w<V?V:w)<R&&(Z<D?Z:D)>z2(0))))))if(T2[m+40>>2]){if((0|I)<(0|e)){if((0|f)<(0|(d=f<<1))){if((0|r)<(0|d)){if(G=0,f&&(T2[5498]=T2[5498]+1,(r=K2(19+(f<<3)|0))&&(T2[(G=r+19&-16)-4>>2]=r),!((0|f)<1)))for(e=G,I=A,r=f;T2[e>>2]=T2[I>>2],e=e+4|0,I=I+4|0,r=r-1|0;);S&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),S=1,r=d,A=G;}d2((f<<=2)+A|0,0,f);}I=d-2|0,f=d;}T2[A+n>>2]=T2[m+36>>2],T2[(C<<2)+A>>2]=T2[m+40>>2],e=C+1|0;}else n1[T2[T2[v>>2]+12>>2]](v,m);if(!(C=e))break;}S&&A&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2]));}}else if(!((0|(A=T2[C+24>>2]))<1))for(G=A-1|0,A=32,r=0;;){if(f=T2[C+32>>2]+A|0,e=T2[f+32>>2],s=j2[d+52>>2],T=j2[d+56>>2],N=j2[f+16>>2],V=j2[f+20>>2],R=j2[f+24>>2],g=j2[d+20>>2],B=j2[d+24>>2],Y=j2[f-32>>2],F=j2[f-16>>2],M=j2[f>>2],J=j2[f-28>>2],y=j2[f-12>>2],U=j2[f+4>>2],X=j2[f-24>>2],Q=j2[d+36>>2],i=j2[f-8>>2],h=j2[d+40>>2],a=j2[f+8>>2],x=j2[d+48>>2],E=j2[d+8>>2],w=j2[d>>2],D=j2[d+4>>2],Z=j2[d+16>>2],W=j2[d+32>>2],T2[380+v>>2]=0,T2[364+v>>2]=0,T2[348+v>>2]=0,T2[332+v>>2]=0,j2[360+v>>2]=z2(z2(X*W)+z2(i*Q))+z2(a*h),j2[356+v>>2]=z2(z2(J*W)+z2(y*Q))+z2(U*h),j2[352+v>>2]=z2(z2(Y*W)+z2(F*Q))+z2(M*h),j2[344+v>>2]=z2(z2(X*Z)+z2(i*g))+z2(a*B),j2[340+v>>2]=z2(z2(J*Z)+z2(y*g))+z2(U*B),j2[336+v>>2]=z2(z2(Y*Z)+z2(F*g))+z2(M*B),j2[328+v>>2]=z2(z2(w*X)+z2(D*i))+z2(E*a),j2[324+v>>2]=z2(z2(w*J)+z2(D*y))+z2(E*U),j2[320+v>>2]=z2(z2(Y*w)+z2(F*D))+z2(M*E),j2[376+v>>2]=T+z2(z2(z2(W*N)+z2(Q*V))+z2(h*R)),j2[372+v>>2]=s+z2(z2(z2(Z*N)+z2(g*V))+z2(B*R)),j2[368+v>>2]=x+z2(z2(z2(w*N)+z2(D*V))+z2(E*R)),T2[316+v>>2]=r,T2[312+v>>2]=-1,T2[304+v>>2]=T2[4+v>>2],T2[300+v>>2]=e,T2[296+v>>2]=0,T2[308+v>>2]=320+v,T2[52+v>>2]=1065353216,T2[56+v>>2]=0,T2[64+v>>2]=0,T2[76+v>>2]=r,T2[68+v>>2]=e,T2[48+v>>2]=17684,f=T2[24+v>>2],T2[72+v>>2]=f,j2[52+v>>2]=j2[f+4>>2],T2[64+v>>2]=T2[f+16>>2],U4(T2[16+v>>2],T2[20+v>>2],296+v|0,48+v|0),(0|r)==(0|G))break A;r=r+1|0,A=A+80|0,d=T2[12+v>>2],C=T2[8+v>>2];}L2=832+v|0;}function X4(A,f,r,e,i,a){var n,o,b,t,c,u,k,l=0,s=0,v=z2(0),d=0,B=z2(0),Q=z2(0),g=z2(0),w=0,G=z2(0),C=z2(0),E=z2(0),D=z2(0),h=z2(0),Z=z2(0),Y=z2(0),R=z2(0),F=z2(0),W=0,m=0,N=z2(0),V=z2(0),J=z2(0),M=z2(0),I=z2(0),x=z2(0),y=z2(0),U=z2(0),X=z2(0),p=0,T=z2(0),S=z2(0),j=0,P=0,z=0,O=0,H=0,_=0,L=0;L2=l=L2-672|0,s=T2[e+12>>2],n=T2[e+4>>2];A:if((0|(p=T2[n+4>>2]))<=19)j2[644+l>>2]=a,T2[640+l>>2]=0,T2[472+l>>2]=12640,j2[636+l>>2]=j2[i+4>>2],p2[444+l|0]=0,T2[420+l>>2]=953267991,T2[32+l>>2]=14688,T2[668+l>>2]=0,T2[664+l>>2]=n,T2[660+l>>2]=A,T2[648+l>>2]=17352,T2[656+l>>2]=32+l,T2[652+l>>2]=112+l,N4(648+l|0,f,r,s,s,472+l|0)&&(a=j2[604+l>>2],v=j2[608+l>>2],B=j2[612+l>>2],(Q=z2(z2(z2(a*a)+z2(v*v))+z2(B*B)))>z2(9999999747378752e-20)&&(G=j2[636+l>>2])<j2[i+4>>2]&&(g=B,B=z2(z2(1)/z2(_2(Q))),j2[612+l>>2]=g*B,j2[608+l>>2]=v*B,j2[604+l>>2]=a*B,T2[56+l>>2]=n,r=T2[(f=628+l|0)+4>>2],T2[(A=96+l|0)>>2]=T2[f>>2],T2[A+4>>2]=r,s=T2[(r=(A=604+l|0)+8|0)+4>>2],T2[(f=80+l|0)>>2]=T2[r>>2],T2[f+4>>2]=s,f=T2[624+l>>2],T2[88+l>>2]=T2[620+l>>2],T2[92+l>>2]=f,j2[104+l>>2]=G,f=T2[A+4>>2],T2[72+l>>2]=T2[A>>2],T2[76+l>>2]=f,T2[64+l>>2]=T2[e+8>>2],T2[68+l>>2]=48+l,z2(n1[T2[T2[i>>2]+12>>2]](i,l+64|0,1))));else if((P=p-21|0)>>>0<=8){f:switch(0|P){case 0:if(v=j2[s+20>>2],B=j2[s+36>>2],Q=j2[(p=s+8|0)>>2],G=j2[(P=s+24|0)>>2],R=j2[s+52>>2],Z=j2[(W=s+56|0)>>2],h=j2[(z=s+40|0)>>2],E=j2[s+32>>2],D=j2[s+16>>2],C=j2[s>>2],g=j2[s+4>>2],Y=j2[s+48>>2],T2[76+l>>2]=0,R=z2(-R),T=z2(z2(z2(G*R)-z2(Q*Y))-z2(h*Z)),F=j2[f+48>>2],N=j2[f+52>>2],V=j2[(m=f+56|0)>>2],j2[72+l>>2]=T+z2(z2(z2(Q*F)+z2(G*N))+z2(h*V)),S=z2(z2(z2(v*R)-z2(g*Y))-z2(B*Z)),j2[68+l>>2]=S+z2(z2(z2(g*F)+z2(v*N))+z2(B*V)),M=z2(z2(z2(D*R)-z2(C*Y))-z2(E*Z)),j2[64+l>>2]=M+z2(z2(z2(C*F)+z2(D*N))+z2(E*V)),Z=j2[r+52>>2],Y=j2[(O=r+56|0)>>2],R=j2[r+48>>2],T2[500+l>>2]=0,F=j2[(H=r+8|0)>>2],N=j2[(_=r+24|0)>>2],V=j2[(L=r+40|0)>>2],j2[512+l>>2]=z2(z2(Q*F)+z2(G*N))+z2(h*V),I=j2[r+4>>2],x=j2[r+20>>2],J=j2[r+36>>2],j2[508+l>>2]=z2(z2(Q*I)+z2(G*x))+z2(h*J),j2[496+l>>2]=z2(z2(g*F)+z2(v*N))+z2(B*V),j2[492+l>>2]=z2(z2(g*I)+z2(v*x))+z2(B*J),T2[484+l>>2]=0,y=j2[r>>2],U=j2[r+16>>2],X=j2[r+32>>2],j2[504+l>>2]=z2(z2(Q*y)+z2(G*U))+z2(h*X),j2[488+l>>2]=z2(z2(g*y)+z2(v*U))+z2(B*X),j2[480+l>>2]=z2(z2(C*F)+z2(D*N))+z2(E*V),j2[476+l>>2]=z2(z2(C*I)+z2(D*x))+z2(E*J),j2[472+l>>2]=z2(z2(C*y)+z2(D*U))+z2(E*X),T2[532+l>>2]=0,T2[(d=524+l|0)>>2]=0,T2[d+4>>2]=0,T2[(d=516+l|0)>>2]=0,T2[d+4>>2]=0,e=T2[e+8>>2],F=z2(n1[T2[T2[n>>2]+48>>2]](n)),j=T2[(w=f+8|0)+4>>2],T2[(d=128+l|0)>>2]=T2[w>>2],T2[d+4>>2]=j,w=T2[f+20>>2],T2[(d=136+l|0)>>2]=T2[f+16>>2],T2[d+4>>2]=w,j=T2[(w=f+24|0)+4>>2],T2[(d=144+l|0)>>2]=T2[w>>2],T2[d+4>>2]=j,w=T2[f+36>>2],T2[(d=152+l|0)>>2]=T2[f+32>>2],T2[d+4>>2]=w,j=T2[(w=f+40|0)+4>>2],T2[(d=160+l|0)>>2]=T2[w>>2],T2[d+4>>2]=j,w=T2[f+52>>2],T2[(d=168+l|0)>>2]=T2[f+48>>2],T2[d+4>>2]=w,w=T2[m+4>>2],T2[(d=176+l|0)>>2]=T2[m>>2],T2[d+4>>2]=w,d=T2[H+4>>2],T2[(m=192+l|0)>>2]=T2[H>>2],T2[m+4>>2]=d,T2[116+l>>2]=A,T2[112+l>>2]=17456,m=T2[f+4>>2],T2[120+l>>2]=T2[f>>2],T2[124+l>>2]=m,f=T2[r+4>>2],T2[184+l>>2]=T2[r>>2],T2[188+l>>2]=f,m=T2[r+36>>2],T2[(f=216+l|0)>>2]=T2[r+32>>2],T2[f+4>>2]=m,m=T2[_+4>>2],T2[(f=208+l|0)>>2]=T2[_>>2],T2[f+4>>2]=m,m=T2[r+20>>2],T2[(f=200+l|0)>>2]=T2[r+16>>2],T2[f+4>>2]=m,m=T2[L+4>>2],T2[(f=224+l|0)>>2]=T2[L>>2],T2[f+4>>2]=m,m=T2[r+52>>2],T2[(f=232+l|0)>>2]=T2[r+48>>2],T2[f+4>>2]=m,r=T2[O+4>>2],T2[(f=240+l|0)>>2]=T2[O>>2],T2[f+4>>2]=r,r=T2[p+4>>2],T2[(f=256+l|0)>>2]=T2[p>>2],T2[f+4>>2]=r,f=T2[s+4>>2],T2[248+l>>2]=T2[s>>2],T2[252+l>>2]=f,r=T2[P+4>>2],T2[(f=272+l|0)>>2]=T2[P>>2],T2[f+4>>2]=r,r=T2[s+20>>2],T2[(f=264+l|0)>>2]=T2[s+16>>2],T2[f+4>>2]=r,r=T2[z+4>>2],T2[(f=288+l|0)>>2]=T2[z>>2],T2[f+4>>2]=r,r=T2[s+36>>2],T2[(f=280+l|0)>>2]=T2[s+32>>2],T2[f+4>>2]=r,r=T2[W+4>>2],T2[(f=304+l|0)>>2]=T2[W>>2],T2[f+4>>2]=r,r=T2[s+52>>2],T2[(f=296+l|0)>>2]=T2[s+48>>2],T2[f+4>>2]=r,j2[316+l>>2]=F,T2[328+l>>2]=e,T2[332+l>>2]=n,T2[112+l>>2]=18564,j2[320+l>>2]=a,T2[324+l>>2]=i,j2[312+l>>2]=j2[i+4>>2],n1[T2[T2[A>>2]+8>>2]](A,472+l|0,648+l|0,48+l|0),T2[32+l>>2]=11092,T2[36+l>>2]=T2[n+56>>2],a=z2(T+z2(z2(z2(Q*R)+z2(G*Z))+z2(h*Y))),v=z2(S+z2(z2(z2(g*R)+z2(v*Z))+z2(B*Y))),B=z2(M+z2(z2(z2(C*R)+z2(D*Z))+z2(E*Y))),T2[40+l>>2]=112+l,A=T2[n+60>>2],S2[A+60|0]){g0(A,32+l|0,l+64|0,B,v,a,648+l|0,48+l|0,T2[A+56>>2]);break A;}Q0(A,32+l|0,l+64|0,B,v,a,648+l|0,48+l|0);break A;case 7:if(j2[284+l>>2]=a,T2[280+l>>2]=0,T2[112+l>>2]=12640,j2[276+l>>2]=j2[i+4>>2],T2[84+l>>2]=n,T2[80+l>>2]=0,T2[76+l>>2]=A,T2[68+l>>2]=0,T2[72+l>>2]=0,T2[64+l>>2]=17352,!N4(l+64|0,f,r,s,s,112+l|0))break A;if(a=j2[244+l>>2],v=j2[248+l>>2],B=j2[252+l>>2],!((Q=z2(z2(z2(a*a)+z2(v*v))+z2(B*B)))>z2(9999999747378752e-20)))break A;if(!((G=j2[276+l>>2])<j2[i+4>>2]))break A;g=B,B=z2(z2(1)/z2(_2(Q))),j2[252+l>>2]=g*B,j2[248+l>>2]=v*B,j2[244+l>>2]=a*B,T2[656+l>>2]=n,r=T2[(f=268+l|0)+4>>2],T2[(A=504+l|0)>>2]=T2[f>>2],T2[A+4>>2]=r,s=T2[(r=(A=244+l|0)+8|0)+4>>2],T2[(f=488+l|0)>>2]=T2[r>>2],T2[f+4>>2]=s,f=T2[264+l>>2],T2[496+l>>2]=T2[260+l>>2],T2[500+l>>2]=f,j2[512+l>>2]=G,f=T2[A+4>>2],T2[480+l>>2]=T2[A>>2],T2[484+l>>2]=f,T2[472+l>>2]=T2[e+8>>2],T2[476+l>>2]=648+l,z2(n1[T2[T2[i>>2]+12>>2]](i,472+l|0,1));break A;default:break f;}Z=j2[(p=r+56|0)>>2],Y=j2[r+52>>2],R=j2[(P=s+56|0)>>2],k=j2[s+52>>2],F=j2[(W=f+56|0)>>2],N=j2[f+52>>2],v=j2[s+20>>2],B=j2[s+36>>2],Q=j2[(z=s+40|0)>>2],G=j2[(m=s+8|0)>>2],h=j2[(O=s+24|0)>>2],V=j2[r+48>>2],I=j2[s+48>>2],x=j2[f+48>>2],E=j2[s+32>>2],D=j2[s>>2],C=j2[s+16>>2],g=j2[s+4>>2],T2[500+l>>2]=0,J=j2[(H=r+8|0)>>2],y=j2[(_=r+24|0)>>2],U=j2[(L=r+40|0)>>2],j2[512+l>>2]=z2(z2(G*J)+z2(h*y))+z2(Q*U),X=j2[r+4>>2],T=j2[r+20>>2],S=j2[r+36>>2],j2[508+l>>2]=z2(z2(G*X)+z2(h*T))+z2(Q*S),j2[496+l>>2]=z2(z2(g*J)+z2(v*y))+z2(B*U),j2[492+l>>2]=z2(z2(g*X)+z2(v*T))+z2(B*S),T2[484+l>>2]=0,M=j2[r>>2],o=j2[r+16>>2],b=j2[r+32>>2],j2[504+l>>2]=z2(z2(G*M)+z2(h*o))+z2(Q*b),j2[488+l>>2]=z2(z2(g*M)+z2(v*o))+z2(B*b),j2[480+l>>2]=z2(z2(D*J)+z2(C*y))+z2(E*U),j2[476+l>>2]=z2(z2(D*X)+z2(C*T))+z2(E*S),j2[472+l>>2]=z2(z2(D*M)+z2(C*o))+z2(E*b),T2[532+l>>2]=0,T2[(d=524+l|0)>>2]=0,T2[d+4>>2]=0,T2[(d=516+l|0)>>2]=0,T2[d+4>>2]=0,e=T2[e+8>>2],J=z2(n1[T2[T2[n>>2]+48>>2]](n)),j=T2[(w=f+8|0)+4>>2],T2[(d=128+l|0)>>2]=T2[w>>2],T2[d+4>>2]=j,w=T2[f+20>>2],T2[(d=136+l|0)>>2]=T2[f+16>>2],T2[d+4>>2]=w,j=T2[(w=f+24|0)+4>>2],T2[(d=144+l|0)>>2]=T2[w>>2],T2[d+4>>2]=j,w=T2[f+36>>2],T2[(d=152+l|0)>>2]=T2[f+32>>2],T2[d+4>>2]=w,j=T2[(w=f+40|0)+4>>2],T2[(d=160+l|0)>>2]=T2[w>>2],T2[d+4>>2]=j,w=T2[f+52>>2],T2[(d=168+l|0)>>2]=T2[f+48>>2],T2[d+4>>2]=w,w=T2[W+4>>2],T2[(d=176+l|0)>>2]=T2[W>>2],T2[d+4>>2]=w,d=T2[H+4>>2],T2[(W=192+l|0)>>2]=T2[H>>2],T2[W+4>>2]=d,T2[116+l>>2]=A,T2[112+l>>2]=17456,W=T2[f+4>>2],T2[120+l>>2]=T2[f>>2],T2[124+l>>2]=W,f=T2[r+4>>2],T2[184+l>>2]=T2[r>>2],T2[188+l>>2]=f,W=T2[r+36>>2],T2[(f=216+l|0)>>2]=T2[r+32>>2],T2[f+4>>2]=W,W=T2[_+4>>2],T2[(f=208+l|0)>>2]=T2[_>>2],T2[f+4>>2]=W,W=T2[r+20>>2],T2[(f=200+l|0)>>2]=T2[r+16>>2],T2[f+4>>2]=W,W=T2[L+4>>2],T2[(f=224+l|0)>>2]=T2[L>>2],T2[f+4>>2]=W,W=T2[r+52>>2],T2[(f=232+l|0)>>2]=T2[r+48>>2],T2[f+4>>2]=W,r=T2[p+4>>2],T2[(f=240+l|0)>>2]=T2[p>>2],T2[f+4>>2]=r,r=T2[m+4>>2],T2[(f=256+l|0)>>2]=T2[m>>2],T2[f+4>>2]=r,f=T2[s+4>>2],T2[248+l>>2]=T2[s>>2],T2[252+l>>2]=f,r=T2[O+4>>2],T2[(f=272+l|0)>>2]=T2[O>>2],T2[f+4>>2]=r,r=T2[s+20>>2],T2[(f=264+l|0)>>2]=T2[s+16>>2],T2[f+4>>2]=r,r=T2[z+4>>2],T2[(f=288+l|0)>>2]=T2[z>>2],T2[f+4>>2]=r,r=T2[s+36>>2],T2[(f=280+l|0)>>2]=T2[s+32>>2],T2[f+4>>2]=r,r=T2[P+4>>2],T2[(f=304+l|0)>>2]=T2[P>>2],T2[f+4>>2]=r,r=T2[s+52>>2],T2[(f=296+l|0)>>2]=T2[s+48>>2],T2[f+4>>2]=r,j2[316+l>>2]=J,T2[328+l>>2]=e,T2[332+l>>2]=n,T2[112+l>>2]=18588,j2[320+l>>2]=a,T2[324+l>>2]=i,j2[312+l>>2]=j2[i+4>>2],n1[T2[T2[A>>2]+8>>2]](A,472+l|0,l+64|0,648+l|0),T2[60+l>>2]=0,T2[44+l>>2]=0,J=z2(-k),y=z2(z2(z2(C*J)-z2(D*I))-z2(E*R)),a=z2(y+z2(z2(z2(D*V)+z2(C*Y))+z2(E*Z))),E=z2(y+z2(z2(z2(D*x)+z2(C*N))+z2(E*F))),j2[48+l>>2]=j2[64+l>>2]+(a<E?a:E),C=z2(z2(z2(v*J)-z2(g*I))-z2(B*R)),D=z2(C+z2(z2(z2(g*V)+z2(v*Y))+z2(B*Z))),v=z2(C+z2(z2(z2(g*x)+z2(v*N))+z2(B*F))),j2[52+l>>2]=j2[68+l>>2]+(D<v?D:v),C=z2(z2(z2(h*J)-z2(G*I))-z2(Q*R)),B=z2(C+z2(z2(z2(G*V)+z2(h*Y))+z2(Q*Z))),Q=z2(C+z2(z2(z2(G*x)+z2(h*N))+z2(Q*F))),j2[56+l>>2]=j2[72+l>>2]+(B<Q?B:Q),j2[32+l>>2]=j2[648+l>>2]+(E<a?a:E),j2[36+l>>2]=j2[652+l>>2]+(v<D?D:v),j2[40+l>>2]=j2[656+l>>2]+(Q<B?B:Q),n1[T2[T2[n>>2]+64>>2]](n,112+l|0,48+l|0,32+l|0);}else if(31==(0|p)){if(M=j2[(p=s+52|0)>>2],Z=j2[(P=s+56|0)>>2],Y=j2[f+52>>2],R=j2[f+56>>2],v=j2[(W=s+20|0)>>2],B=j2[(z=s+36|0)>>2],F=j2[f+20>>2],N=j2[f+36>>2],V=j2[f+24>>2],Q=j2[(m=s+24|0)>>2],I=j2[f+40>>2],G=j2[(O=s+40|0)>>2],h=j2[s+32>>2],E=j2[s>>2],D=j2[s+16>>2],x=j2[f+32>>2],J=j2[f>>2],y=j2[f+16>>2],U=j2[s+48>>2],X=j2[f+48>>2],C=j2[s+4>>2],T=j2[f+4>>2],S=j2[f+8>>2],g=j2[s+8>>2],T2[(H=172+l|0)>>2]=0,T2[(_=156+l|0)>>2]=0,T2[(L=140+l|0)>>2]=0,j2[(d=152+l|0)>>2]=z2(z2(g*S)+z2(Q*V))+z2(G*I),j2[(w=148+l|0)>>2]=z2(z2(g*T)+z2(Q*F))+z2(G*N),j2[(j=136+l|0)>>2]=z2(z2(C*S)+z2(v*V))+z2(B*I),j2[(t=132+l|0)>>2]=z2(z2(C*T)+z2(v*F))+z2(B*N),c=168+l|0,M=z2(-M),j2[c>>2]=z2(z2(z2(Q*M)-z2(g*U))-z2(G*Z))+z2(z2(z2(g*X)+z2(Q*Y))+z2(G*R)),j2[(u=164+l|0)>>2]=z2(z2(z2(v*M)-z2(C*U))-z2(B*Z))+z2(z2(z2(C*X)+z2(v*Y))+z2(B*R)),T2[124+l>>2]=0,j2[144+l>>2]=z2(z2(g*J)+z2(Q*y))+z2(G*x),j2[128+l>>2]=z2(z2(C*J)+z2(v*y))+z2(B*x),j2[120+l>>2]=z2(z2(E*S)+z2(D*V))+z2(h*I),j2[160+l>>2]=z2(z2(z2(D*M)-z2(E*U))-z2(h*Z))+z2(z2(z2(E*X)+z2(D*Y))+z2(h*R)),j2[116+l>>2]=z2(z2(E*T)+z2(D*F))+z2(h*N),j2[112+l>>2]=z2(z2(E*J)+z2(D*y))+z2(h*x),n1[T2[T2[A>>2]+8>>2]](A,112+l|0,48+l|0,32+l|0),M=j2[p>>2],Z=j2[P>>2],Y=j2[r+52>>2],R=j2[r+56>>2],v=j2[W>>2],B=j2[z>>2],F=j2[r+20>>2],N=j2[r+36>>2],V=j2[r+24>>2],Q=j2[m>>2],I=j2[r+40>>2],G=j2[O>>2],h=j2[s+32>>2],E=j2[s>>2],D=j2[s+16>>2],x=j2[r+32>>2],J=j2[r>>2],y=j2[r+16>>2],U=j2[s+48>>2],X=j2[r+48>>2],C=j2[s+4>>2],T=j2[r+4>>2],S=j2[r+8>>2],g=j2[s+8>>2],T2[H>>2]=0,T2[_>>2]=0,T2[L>>2]=0,j2[d>>2]=z2(z2(g*S)+z2(Q*V))+z2(G*I),j2[w>>2]=z2(z2(g*T)+z2(Q*F))+z2(G*N),j2[j>>2]=z2(z2(C*S)+z2(v*V))+z2(B*I),j2[t>>2]=z2(z2(C*T)+z2(v*F))+z2(B*N),M=z2(-M),j2[c>>2]=z2(z2(z2(Q*M)-z2(g*U))-z2(G*Z))+z2(z2(z2(g*X)+z2(Q*Y))+z2(G*R)),j2[u>>2]=z2(z2(z2(v*M)-z2(C*U))-z2(B*Z))+z2(z2(z2(C*X)+z2(v*Y))+z2(B*R)),T2[124+l>>2]=0,j2[144+l>>2]=z2(z2(g*J)+z2(Q*y))+z2(G*x),j2[128+l>>2]=z2(z2(C*J)+z2(v*y))+z2(B*x),j2[120+l>>2]=z2(z2(E*S)+z2(D*V))+z2(h*I),j2[160+l>>2]=z2(z2(z2(D*M)-z2(E*U))-z2(h*Z))+z2(z2(z2(E*X)+z2(D*Y))+z2(h*R)),j2[116+l>>2]=z2(z2(E*T)+z2(D*F))+z2(h*N),j2[112+l>>2]=z2(z2(E*J)+z2(D*y))+z2(h*x),n1[T2[T2[A>>2]+8>>2]](A,112+l|0,16+l|0,l),(v=j2[16+l>>2])<j2[48+l>>2]&&(j2[48+l>>2]=v),(v=j2[20+l>>2])<j2[52+l>>2]&&(j2[52+l>>2]=v),(v=j2[24+l>>2])<j2[56+l>>2]&&(j2[56+l>>2]=v),(v=j2[28+l>>2])<j2[60+l>>2]&&(j2[60+l>>2]=v),(v=j2[l>>2])>j2[32+l>>2]&&(j2[32+l>>2]=v),(v=j2[4+l>>2])>j2[36+l>>2]&&(j2[36+l>>2]=v),(v=j2[8+l>>2])>j2[40+l>>2]&&(j2[40+l>>2]=v),(v=j2[12+l>>2])>j2[44+l>>2]&&(j2[44+l>>2]=v),T2[504+l>>2]=i,T2[500+l>>2]=s,j2[492+l>>2]=a,T2[488+l>>2]=r,T2[484+l>>2]=f,T2[480+l>>2]=A,T2[476+l>>2]=e,T2[472+l>>2]=18612,T2[496+l>>2]=n,!(A=T2[n+72>>2])){if(T2[n+24>>2]<1)break A;for(A=32,f=1;;){if(r=T2[n+32>>2]+A|0,e=T2[r+32>>2],a=j2[r+16>>2],v=j2[r+20>>2],B=j2[r+24>>2],Q=j2[r-32>>2],G=j2[r-16>>2],h=j2[r>>2],E=j2[r-28>>2],D=j2[r-12>>2],C=j2[r+4>>2],g=j2[r-24>>2],Z=j2[r-8>>2],Y=j2[r+8>>2],T2[172+l>>2]=0,T2[156+l>>2]=0,T2[140+l>>2]=0,T2[124+l>>2]=0,R=j2[s+32>>2],F=j2[s+36>>2],N=j2[s+40>>2],j2[152+l>>2]=z2(z2(g*R)+z2(Z*F))+z2(Y*N),j2[148+l>>2]=z2(z2(E*R)+z2(D*F))+z2(C*N),j2[144+l>>2]=z2(z2(Q*R)+z2(G*F))+z2(h*N),V=j2[s+16>>2],I=j2[s+20>>2],x=j2[s+24>>2],j2[136+l>>2]=z2(z2(g*V)+z2(Z*I))+z2(Y*x),j2[132+l>>2]=z2(z2(E*V)+z2(D*I))+z2(C*x),j2[128+l>>2]=z2(z2(Q*V)+z2(G*I))+z2(h*x),J=g,g=j2[s>>2],M=Z,Z=j2[s+4>>2],y=Y,Y=j2[s+8>>2],j2[120+l>>2]=z2(z2(J*g)+z2(M*Z))+z2(y*Y),j2[116+l>>2]=z2(z2(E*g)+z2(D*Z))+z2(C*Y),j2[112+l>>2]=z2(z2(Q*g)+z2(G*Z))+z2(h*Y),j2[168+l>>2]=z2(z2(z2(a*R)+z2(v*F))+z2(B*N))+j2[s+56>>2],j2[164+l>>2]=z2(z2(z2(a*V)+z2(v*I))+z2(B*x))+j2[s+52>>2],j2[160+l>>2]=z2(z2(z2(a*g)+z2(v*Z))+z2(B*Y))+j2[s+48>>2],T2[68+l>>2]=1065353216,T2[72+l>>2]=1,T2[76+l>>2]=-1,T2[88+l>>2]=r=f-1|0,i=T2[504+l>>2],T2[84+l>>2]=i,T2[80+l>>2]=e,T2[64+l>>2]=18648,j2[68+l>>2]=j2[i+4>>2],T2[668+l>>2]=r,T2[664+l>>2]=-1,T2[652+l>>2]=e,r=T2[476+l>>2],T2[648+l>>2]=r,T2[656+l>>2]=T2[r+8>>2],T2[660+l>>2]=112+l,X4(T2[480+l>>2],T2[484+l>>2],T2[488+l>>2],648+l|0,l+64|0,j2[492+l>>2]),T2[n+24>>2]<=(0|f))break A;A=A+80|0,f=f+1|0,s=T2[500+l>>2];}}e=T2[(r=56+l|0)+4>>2],T2[(f=120+l|0)>>2]=T2[r>>2],T2[f+4>>2]=e,e=T2[(r=40+l|0)+4>>2],T2[(f=136+l|0)>>2]=T2[r>>2],T2[f+4>>2]=e,f=T2[52+l>>2],T2[112+l>>2]=T2[48+l>>2],T2[116+l>>2]=f,f=T2[36+l>>2],T2[128+l>>2]=T2[32+l>>2],T2[132+l>>2]=f,s4(T2[A>>2],112+l|0,472+l|0);}L2=672+l|0;}function p4(A,f,r,e,i,a){A|=0,f|=0,r|=0,e=z2(e),i|=0;var n,o,b=0;return T2[52+(L2=b=L2+-64|0)>>2]=a|=0,T2[48+b>>2]=i,T2[56+b>>2]=T2[A+220>>2],i=T2[A+212>>2],j2[i+4>>2]>=e&&(o=T2[4+(n=r+8|0)>>2],T2[(a=32+b|0)>>2]=T2[n>>2],T2[a+4>>2]=o,o=T2[4+(n=f+8|0)>>2],T2[(a=16+b|0)>>2]=T2[n>>2],T2[a+4>>2]=o,a=T2[r+4>>2],T2[24+b>>2]=T2[r>>2],T2[28+b>>2]=a,r=T2[f+4>>2],T2[8+b>>2]=T2[f>>2],T2[12+b>>2]=r,j2[40+b>>2]=e,T2[b>>2]=T2[A+216>>2],T2[4+b>>2]=48+b,e=z2(n1[T2[T2[i>>2]+12>>2]](i,b,1))),L2=b+64|0,z2(e);}function T4(A,f,r,e,i,a){var n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M,I,x,y=0;L2=y=L2-368|0,b=T2[4+(v=r+8|0)>>2],T2[(n=312+y|0)>>2]=T2[v>>2],T2[4+n>>2]=b,c=T2[4+(t=r+24|0)>>2],T2[(n=328+y|0)>>2]=T2[t>>2],T2[4+n>>2]=c,E=T2[4+(b=r+40|0)>>2],T2[(n=344+y|0)>>2]=T2[b>>2],T2[4+n>>2]=E,d=T2[4+(c=r+56|0)>>2],T2[(n=360+y|0)>>2]=T2[c>>2],T2[4+n>>2]=d,D=T2[4+(E=e+8|0)>>2],T2[(n=248+y|0)>>2]=T2[E>>2],T2[4+n>>2]=D,n=T2[r+4>>2],T2[304+y>>2]=T2[r>>2],T2[308+y>>2]=n,n=T2[r+20>>2],T2[320+y>>2]=T2[r+16>>2],T2[324+y>>2]=n,n=T2[r+36>>2],T2[336+y>>2]=T2[r+32>>2],T2[340+y>>2]=n,n=T2[r+52>>2],T2[352+y>>2]=T2[r+48>>2],T2[356+y>>2]=n,n=T2[e+4>>2],T2[240+y>>2]=T2[e>>2],T2[244+y>>2]=n,B=T2[4+(d=e+24|0)>>2],T2[(n=264+y|0)>>2]=T2[d>>2],T2[4+n>>2]=B,h=T2[4+(D=e+40|0)>>2],T2[(n=280+y|0)>>2]=T2[D>>2],T2[4+n>>2]=h,Z=T2[4+(B=e+56|0)>>2],T2[(n=296+y|0)>>2]=T2[B>>2],T2[4+n>>2]=Z,n=T2[e+20>>2],T2[256+y>>2]=T2[e+16>>2],T2[260+y>>2]=n,n=T2[e+36>>2],T2[272+y>>2]=T2[e+32>>2],T2[276+y>>2]=n,n=T2[e+52>>2],T2[288+y>>2]=T2[e+48>>2],T2[292+y>>2]=n,G4(304+y|0,240+y|0,8+y|0,224+y|0),M=j2[16+y>>2],I=j2[8+y>>2],x=j2[12+y>>2],Q=j2[224+y>>2],T2[(n=h=20+y|0)>>2]=0,T2[4+n>>2]=0,T2[(n=Z=32+y|0)>>2]=0,T2[4+n>>2]=0,T2[(Y=28+y|0)>>2]=1065353216,T2[(n=W=40+y|0)>>2]=0,T2[4+n>>2]=0,T2[(n=52+y|0)>>2]=0,T2[4+n>>2]=0,T2[(m=48+y|0)>>2]=1065353216,T2[(G=F=60+y|0)>>2]=0,T2[4+G>>2]=0,T2[(G=68+y|0)>>2]=0,T2[12+y>>2]=0,T2[16+y>>2]=0,T2[8+y>>2]=1065353216,C4(304+y|0,224+y|0),T2[n>>2]=0,T2[(N=36+y|0)>>2]=0,T2[h>>2]=0,o=j2[224+y>>2],u=j2[228+y>>2],l=j2[232+y>>2],k=j2[236+y>>2],s=z2(z2(2)/z2(z2(z2(z2(o*o)+z2(u*u))+z2(l*l))+z2(k*k))),g=z2(l*s),w=z2(u*g),R=z2(o*s),C=z2(k*R),j2[44+y>>2]=w+C,V=z2(o*g),s=z2(u*s),J=z2(k*s),j2[W>>2]=V-J,j2[Z>>2]=w-C,w=z2(o*R),u=z2(u*s),j2[m>>2]=z2(1)-z2(w+u),l=z2(l*g),j2[Y>>2]=z2(1)-z2(w+l),o=z2(o*s),k=z2(k*g),j2[24+y>>2]=o+k,j2[16+y>>2]=V+J,j2[12+y>>2]=o-k,j2[8+y>>2]=z2(1)-z2(u+l),n1[T2[T2[f>>2]+8>>2]](f,8+y|0,224+y|0,208+y|0),u=j2[208+y>>2],k=j2[212+y>>2],l=j2[216+y>>2],s=j2[224+y>>2],g=j2[228+y>>2],o=j2[232+y>>2],w=z2(n1[T2[T2[f>>2]+16>>2]](f)),T2[220+y>>2]=0,T2[236+y>>2]=0,R=z2(o+z2(0)),o=z2(I*Q),C=z2(o*o),o=z2(Q*x),C=z2(C+z2(o*o)),o=z2(Q*M),o=z2(w*z2(_2(z2(C+z2(o*o))))),j2[232+y>>2]=R-o,j2[228+y>>2]=z2(g+z2(0))-o,j2[224+y>>2]=z2(s+z2(0))-o,j2[216+y>>2]=o+l,j2[212+y>>2]=o+k,j2[208+y>>2]=o+u,Y=T2[4+v>>2],T2[n>>2]=T2[v>>2],T2[4+n>>2]=Y,n=T2[r+20>>2],T2[F>>2]=T2[r+16>>2],T2[4+F>>2]=n,n=T2[4+t>>2],T2[G>>2]=T2[t>>2],T2[4+G>>2]=n,v=T2[r+36>>2],T2[(n=76+y|0)>>2]=T2[r+32>>2],T2[4+n>>2]=v,v=T2[4+b>>2],T2[(n=84+y|0)>>2]=T2[b>>2],T2[4+n>>2]=v,t=T2[r+52>>2],T2[(n=92+y|0)>>2]=T2[r+48>>2],T2[4+n>>2]=t,b=T2[4+c>>2],T2[(t=v=100+y|0)>>2]=T2[c>>2],T2[4+t>>2]=b,b=T2[4+E>>2],T2[(t=116+y|0)>>2]=T2[E>>2],T2[4+t>>2]=b,T2[8+y>>2]=19520,t=T2[r+4>>2],T2[44+y>>2]=T2[r>>2],T2[48+y>>2]=t,r=T2[e+4>>2],T2[108+y>>2]=T2[e>>2],T2[112+y>>2]=r,b=T2[e+52>>2],T2[(r=156+y|0)>>2]=T2[e+48>>2],T2[r+4>>2]=b,c=T2[4+B>>2],T2[(b=t=164+y|0)>>2]=T2[B>>2],T2[4+b>>2]=c,c=T2[4+d>>2],T2[(b=132+y|0)>>2]=T2[d>>2],T2[4+b>>2]=c,c=T2[e+20>>2],T2[(b=124+y|0)>>2]=T2[e+16>>2],T2[4+b>>2]=c,c=T2[4+D>>2],T2[(b=148+y|0)>>2]=T2[D>>2],T2[4+b>>2]=c,c=T2[e+36>>2],T2[(b=140+y|0)>>2]=T2[e+32>>2],T2[4+b>>2]=c,T2[192+y>>2]=i,j2[196+y>>2]=a,T2[200+y>>2]=f,o=j2[96+y>>2],u=j2[160+y>>2],a=j2[n>>2],k=j2[r>>2],Q=j2[v>>2],l=j2[t>>2],T2[188+y>>2]=A,a=z2(k-a),o=z2(u-o),u=z2(l-Q),k=z2(z2(1)/z2(_2(z2(z2(z2(a*a)+z2(o*o))+z2(u*u))))),s=(Q=z2(u*k))==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/Q),T2[N>>2]=s<z2(0),g=(l=z2(o*k))==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/l),T2[Z>>2]=g<z2(0),j2[h>>2]=s,j2[16+y>>2]=g,a=z2((s=a)*k),j2[40+y>>2]=z2(u*Q)+z2(z2(s*a)+z2(o*l)),a=a==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/a),j2[12+y>>2]=a,T2[28+y>>2]=a<z2(0),A=T2[A+68>>2],n1[T2[T2[A>>2]+24>>2]](A,352+y|0,288+y|0,8+y|0,224+y|0,208+y|0),L2=368+y|0;}function S4(A,f,r){var e,i=0,a=0,a=f|=0,n=0|n1[T2[T2[(r|=0)>>2]+28>>2]](r,T2[(A|=0)+28>>2]);if(T2[a>>2]=n,a=f,n=0|n1[T2[T2[r>>2]+28>>2]](r,T2[A+32>>2]),T2[a+4>>2]=n,i=0|n1[T2[T2[r>>2]+40>>2]](r,A),e=0|n1[T2[T2[r>>2]+28>>2]](r,i),(T2[f+8>>2]=e)&&n1[T2[T2[r>>2]+48>>2]](r,i),T2[f+12>>2]=T2[A+4>>2],T2[f+24>>2]=S2[A+21|0],T2[f+40>>2]=T2[A+24>>2],j2[f+44>>2]=j2[A+16>>2],T2[f+48>>2]=S2[A+20|0],r=T2[A+12>>2],i=T2[A+40>>2],T2[f+28>>2]=T2[A+36>>2],T2[f+32>>2]=i,T2[f+20>>2]=r,T2[f+36>>2]=0,T2[f+16>>2]=T2[A+8>>2],r=T2[A+28>>2],!((0|(i=T2[r+548>>2]))<1)&&(r=T2[r+556>>2],T2[r>>2]==(0|A)&&(T2[f+36>>2]=1),1!=(0|i)))for(r=r+4|0,i=i-1|0;T2[r>>2]==(0|A)&&(T2[f+36>>2]=1),r=r+4|0,i=i-1|0;);if(r=T2[A+32>>2],!((0|(i=T2[r+548>>2]))<1)&&(r=T2[r+556>>2],T2[r>>2]==(0|A)&&(T2[f+36>>2]=1),1!=(0|i)))for(r=r+4|0,i=i-1|0;T2[r>>2]==(0|A)&&(T2[f+36>>2]=1),r=r+4|0,i=i-1|0;);return 19704;}function j4(A,f,r,e,i,a,n,o,b,t){var c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W=T2[a+4>>2];T2[A>>2]=T2[a>>2],T2[A+4>>2]=W,Y=T2[(a=a+8|0)+4>>2],T2[(W=A+8|0)>>2]=T2[a>>2],T2[4+W>>2]=Y,G=j2[f+24>>2],B=j2[f+20>>2],l=j2[f+40>>2],u=j2[f+36>>2],Q=j2[f+8>>2],g=j2[f>>2],C=j2[f+4>>2],E=j2[f+16>>2],c=j2[f+32>>2],v=j2[e+4>>2],s=j2[e+8>>2],w=j2[e>>2],T2[A+28>>2]=0,D=c,c=j2[W>>2],k=j2[A+4>>2],d=z2(z2(v*c)-z2(s*k)),h=u,Z=s,s=j2[A>>2],u=z2(z2(Z*s)-z2(c*w)),v=z2(z2(k*w)-z2(v*s)),w=z2(z2(z2(D*d)+z2(h*u))+z2(l*v)),j2[A+24>>2]=w,G=z2(z2(z2(d*E)+z2(u*B))+z2(v*G)),j2[A+20>>2]=G,v=z2(z2(z2(d*g)+z2(C*u))+z2(v*Q)),j2[A+16>>2]=v,Q=j2[r+24>>2],g=j2[r+20>>2],C=j2[r+40>>2],E=j2[r+36>>2],R=j2[r+8>>2],F=j2[r>>2],D=j2[r+4>>2],h=j2[r+16>>2],l=j2[r+32>>2],d=j2[i+4>>2],u=j2[i>>2],B=j2[i+8>>2],T2[A+44>>2]=0,Z=l,l=z2(z2(k*B)-z2(c*d)),c=z2(z2(c*u)-z2(s*B)),k=z2(z2(s*d)-z2(k*u)),s=z2(z2(z2(Z*l)+z2(E*c))+z2(C*k)),j2[A+40>>2]=s,d=z2(z2(z2(l*h)+z2(c*g))+z2(k*Q)),j2[A+36>>2]=d,c=z2(z2(z2(F*l)+z2(D*c))+z2(k*R)),j2[A+32>>2]=c,k=j2[n+8>>2],u=j2[n+4>>2],B=j2[n>>2],T2[A+60>>2]=0,B=z2(B*v),j2[A+48>>2]=B,u=z2(u*G),j2[A+52>>2]=u,k=z2(k*w),j2[A+56>>2]=k,l=j2[b+8>>2],Q=j2[b+4>>2],g=j2[b>>2],T2[A+76>>2]=0,g=z2(g*c),j2[A+64>>2]=g,Q=z2(Q*d),j2[A+68>>2]=Q,l=z2(l*s),j2[A+72>>2]=l,j2[A+80>>2]=z2(z2(z2(z2(z2(v*B)+z2(G*u))+z2(w*k))+o)+t)+z2(z2(z2(c*g)+z2(d*Q))+z2(s*l));}function P4(A){var f=0,r=0,e=0,i=0,e=T2[A+8>>2],a=(r=T2[A+32>>2])?T2[A+40>>2]:0,n=r,o=(f=T2[A+52>>2])?T2[A+60>>2]:0;if(r=f,i=0,(f=T2[A+72>>2])&&(i=T2[A+80>>2]),z2(n1[T2[T2[e>>2]+12>>2]](e,a,n,o,r,i,f,T2[A+4>>2],T2[A+20>>2],T2[A+24>>2])),(0|(f=T2[A+32>>2]))<=-1)for(T2[A+36>>2]<=-1&&((r=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+36>>2]=0,T2[A+40>>2]=0,p2[A+44|0]=1),e=f<<2;e=e+4|(T2[T2[A+40>>2]+e>>2]=0),(r=f)>>>0<=(f=f+1|0)>>>0;);if(((T2[A+32>>2]=0)|(f=T2[A+52>>2]))<=-1)for(T2[A+56>>2]<=-1&&((r=T2[A+60>>2])&&S2[A- -64|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+56>>2]=0,T2[A+60>>2]=0,p2[A- -64|0]=1),e=f<<2;e=e+4|(T2[T2[A+60>>2]+e>>2]=0),(r=f)>>>0<=(f=f+1|0)>>>0;);if(((T2[A+52>>2]=0)|(f=T2[A+72>>2]))<=-1)for(T2[A+76>>2]<=-1&&((r=T2[A+80>>2])&&S2[A+84|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+76>>2]=0,T2[A+80>>2]=0,p2[A+84|0]=1),e=f<<2;e=e+4|(T2[T2[A+80>>2]+e>>2]=0),(r=f)>>>0<=(f=f+1|0)>>>0;);T2[A+72>>2]=0;}function z4(A){var f=0;return T2[(A|=0)>>2]=19784,S2[A+288|0]&&(f=T2[A+220>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+220>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),(f=T2[A+212>>2])&&(n1[T2[T2[f>>2]>>2]](f),(f=T2[A+212>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),S2[A+289|0]&&(f=T2[A+216>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+216>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),(f=T2[A+332>>2])&&S2[A+336|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+332>>2]=0,p2[A+336|0]=1,T2[(f=A+324|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+304>>2])&&S2[A+308|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+304>>2]=0,p2[A+308|0]=1,T2[(f=A+296|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+256>>2])&&S2[A+260|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+256>>2]=0,p2[A+260|0]=1,T2[(f=A+248|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+236>>2])&&S2[A+240|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+236>>2]=0,p2[A+240|0]=1,T2[(f=A+228|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+204>>2])&&S2[A+208|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+204>>2]=0,p2[A+208|0]=1,T2[(f=A+196|0)>>2]=0,T2[f+4>>2]=0,J4(A),0|A;}function O4(A,f){return T2[T2[(A|=0)+236>>2]+((f|=0)<<2)>>2];}function H4(A,f){n1[T2[T2[(A|=0)>>2]+68>>2]](A,f|=0);}function _4(A,f,r){var e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q=z2(0);(Q=j2[A+404>>2])!=z2(0)&&(i=j2[f+8>>2],e=j2[f+4>>2],a=j2[A+408>>2],j2[A+372>>2]=z2(Q*z2(j2[f>>2]*a))+j2[A+372>>2],o=e,e=j2[A+412>>2],j2[(n=A+376|0)>>2]=z2(Q*z2(o*e))+j2[n>>2],o=Q,Q=j2[A+416>>2],j2[(n=A+380|0)>>2]=z2(o*z2(i*Q))+j2[n>>2],c=j2[A+612>>2],u=j2[A+364>>2],k=j2[A+356>>2],l=j2[A+360>>2],s=j2[A+608>>2],v=j2[A+348>>2],d=j2[A+340>>2],B=j2[A+344>>2],t=j2[r+4>>2],i=z2(Q*j2[f+8>>2]),e=z2(e*j2[f+4>>2]),b=j2[r+8>>2],Q=z2(z2(t*i)-z2(e*b)),a=z2(a*j2[f>>2]),o=z2(a*b),b=j2[r>>2],i=z2(o-z2(i*b)),e=z2(z2(e*b)-z2(a*t)),j2[A+388>>2]=z2(z2(z2(z2(j2[A+324>>2]*Q)+z2(j2[A+328>>2]*i))+z2(e*j2[A+332>>2]))*j2[A+604>>2])+j2[A+388>>2],j2[(f=A+392|0)>>2]=z2(s*z2(z2(z2(Q*d)+z2(i*B))+z2(e*v)))+j2[f>>2],j2[(A=A+396|0)>>2]=z2(c*z2(z2(z2(Q*k)+z2(i*l))+z2(e*u)))+j2[A>>2]);}function L4(A){T2[(A|=0)>>2]=19636,T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);}function K4(A,f,r){var e,i,a,n=j2[A+552>>2],o=j2[f>>2],b=j2[A+568>>2],t=j2[f+4>>2],c=j2[A+584>>2],u=j2[f+8>>2],k=j2[A+620>>2],l=j2[A+636>>2],s=j2[A+652>>2],v=z2(z2(z2(k*j2[r>>2])+z2(l*j2[r+4>>2]))+z2(s*j2[r+8>>2])),d=j2[f+16>>2],B=j2[f+20>>2],Q=j2[f+24>>2],g=z2(z2(z2(k*j2[r+16>>2])+z2(l*j2[r+20>>2]))+z2(s*j2[r+24>>2])),w=z2(z2(z2(z2(z2(n*o)+z2(b*t))+z2(c*u))*v)+z2(z2(z2(z2(n*d)+z2(b*B))+z2(c*Q))*g)),G=n;return n=j2[f+32>>2],e=b,b=j2[f+36>>2],i=c,c=j2[f+40>>2],s=z2(z2(z2(k*j2[r+32>>2])+z2(l*j2[r+36>>2]))+z2(s*j2[r+40>>2])),k=o,o=j2[A+556>>2],l=t,t=j2[A+572>>2],a=u,u=j2[A+588>>2],z2(B2(z2(w+z2(z2(z2(z2(G*n)+z2(e*b))+z2(i*c))*s)),z2(z2(z2(z2(z2(z2(k*o)+z2(l*t))+z2(a*u))*v)+z2(z2(z2(z2(d*o)+z2(B*t))+z2(Q*u))*g))+z2(z2(z2(z2(n*o)+z2(b*t))+z2(c*u))*s)))*j2[A+732>>2]);}function q4(A){return z2(j2[(A|=0)>>2]);}function $4(A){(A|=0)&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2]));}function A1(A){return z2(j2[(A|=0)+4>>2]);}function f1(A){return z2(j2[(A|=0)+8>>2]);}function r1(A,f,r,e,i){A|=0,f=z2(f),r=z2(r),e=z2(e),i=z2(i),j2[A+12>>2]=i,j2[A+8>>2]=e,j2[A+4>>2]=r,j2[A>>2]=f;}function e1(A,f,r,e){var i=0,a=0,n=0,o=0,b=0,t=P2(i=r>>>16|0,a=A>>>16|0);return i=(65535&(a=((b=P2(n=65535&r,o=65535&A))>>>16|0)+P2(a,n)|0))+P2(i,o)|0,z=(P2(f,r)+t|0)+P2(A,e)+(a>>>16)+(i>>>16)|0,65535&b|i<<16;}function i1(A,f,r){var e,i,a=0,n=0,o=0,b=0,t=0,c=0,u=0;A:{f:{r:{e:{i:{a:{n:{o:{b:{t:{if(f){if(!r)break t;break b;}A=(A>>>0)/(r>>>0)|0,z=0;break A;}if(!A)break o;break n;}if(!(r-1&r))break a;b=0-(o=(k(r)+33|0)-k(f)|0)|0;break e;}A=(f>>>0)/0|0,z=0;break A;}if((a=32-k(f)|0)>>>0<31)break i;break r;}if(1==(0|r))break f;r=31&(a=r?31-k(r-1^r)|0:32),A=32<=(63&a)>>>0?f>>>r|(a=0):(a=f>>>r|0,((1<<r)-1&f)<<32-r|A>>>r),z=a;break A;}o=a+1|0,b=63-a|0;}if(n=31&(a=63&o),t=32<=a>>>0?f>>>n|(a=0):(a=f>>>n|0,((1<<n)-1&f)<<32-n|A>>>n),n=31&(b&=63),32<=b>>>0?(f=A<<n,A=0):(f=(1<<n)-1&A>>>32-n|f<<n,A<<=n),o)for(b=-1!=(0|(n=r-1|0))?0:-1;c=a<<1|t>>>31,t=(a=t<<1|f>>>31)-(i=r&(e=(t=b-(c+(n>>>0<a>>>0)|0)|0)>>31))|0,a=c-(a>>>0<i>>>0)|0,f=f<<1|A>>>31,A=u|A<<1,u=c=1&e,o=o-1|0;);z=f<<1|A>>>31,A=c|A<<1;break A;}f=A=0;}z=f;}return A;}function a1(A){var f=0;return (-1>>>(f=31&A)&-2)<<f|(-1<<(A=0-A&31)&-2)>>>A;}c1(t1=S2,1024,""),c1(t1,21072,"BQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAMxVAAAAAAAAAAAAAAAAAAACAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="),c1(tvar n1=[null,function(A){var f=0,f=0;return (A=0|i(T2[(A|=0)+56>>2]))&&(T2[5420]=A,f=-1),0|f;},function(A,f,r){A|=0,f|=0;var e,i=0,a=0,n=0,o=0,b=0;T2[12+(L2=i=L2-16|0)>>2]=r|=0,T2[8+i>>2]=f,f=T2[A+24>>2],T2[i>>2]=f,f=T2[A+20>>2]-f|0,T2[4+i>>2]=f;A:{if((0|(a=s(T2[A+56>>(o=2)],i,2)))!=(0|(b=f+r|0)))for(f=i;;){if((0|a)<=-1){if(T2[A+24>>2]=0,T2[A+16>>2]=0,T2[A+20>>2]=0,T2[A>>2]=32|T2[A>>2],2==((A=0)|o))break A;A=r-T2[f+4>>2]|0;break A;}if(n=T2[f+4>>2],T2[(f=(e=n>>>0<a>>>0)?f+8|0:f)>>2]=(n=a-(e?n:0)|0)+T2[f>>2],T2[f+4>>2]=T2[f+4>>2]-n,(0|(b=b-a|0))==(0|(a=s(T2[A+56>>2],f,o=o-e|0))))break;}f=T2[A+40>>2],T2[A+24>>2]=f,T2[A+20>>2]=f,T2[A+16>>2]=f+T2[A+44>>2],A=r;}return L2=16+i|0,0|A;},function(A,f,r,e){var i=0;return L2=i=L2-16|0,A=(A=0|o(T2[(A|=0)+56>>2],0|(f|=0),0|(r|=0),255&(e|=0),8+i|0))?(T2[5420]=76==(0|A)?70:A,f=-1):(f=T2[12+i>>2],T2[8+i>>2]),L2=16+i|0,z=f,0|A;},g,w,w,function(A){var f=0;T2[12+(L2=f=L2-16|0)>>2]=A|=0,g(A=T2[12+f>>2]),u(A),L2=16+f|0;},Q,Q,function(A,f,r){f|=0,r|=0;var e,i=0;if(T2[72+(L2=i=L2-80|0)>>2]=A|=0,T2[68+i>>2]=f,T2[64+i>>2]=r,1&C(f=T2[72+i>>2],T2[68+i>>2],0))p2[79+i|0]=1;else {if(r=T2[68+(e=i)>>2]){if(T2[(L2=A=L2-96|0)+92>>2]=r,T2[A+88>>2]=3536,T2[A+84>>2]=3584,T2[A+80>>2]=0,T2[A+76>>2]=T2[T2[A+92>>2]>>2],T2[A+72>>2]=T2[T2[A+76>>2]-8>>2],T2[A+68>>2]=T2[A+92>>2]+T2[A+72>>2],T2[A+64>>2]=T2[T2[A+76>>2]-4>>2],T2[A+60>>2]=0,T2[A>>2]=T2[A+84>>2],T2[A+4>>2]=T2[A+92>>2],T2[A+8>>2]=T2[A+88>>2],T2[A+12>>2]=T2[A+80>>2],T2[A+16>>2]=0,T2[A+20>>2]=0,T2[A+24>>2]=0,T2[A+28>>2]=0,T2[A+32>>2]=0,T2[A+36>>2]=0,T2[A+40>>2]=0,T2[A+44>>2]=0,T2[A+48>>2]=0,p2[A+52|0]=0,p2[A+53|0]=0,p2[A+54|0]=0,1&C(T2[A+64>>2],T2[A+84>>2],0))T2[A+48>>2]=1,r=T2[A+64>>2],n1[T2[T2[r>>2]+20>>2]](r,A,T2[A+68>>2],T2[A+68>>2],1,0),1==T2[A+24>>2]&&(T2[A+60>>2]=T2[A+68>>2]);else if(r=T2[A+64>>2],n1[T2[T2[r>>2]+24>>2]](r,A,T2[A+68>>2],1,0),!(1<(r=T2[A+36>>2])>>>0))if(1==(0|r))A:{if(1!=T2[A+24>>2]){if(T2[A+40>>2])break A;if(1!=T2[A+28>>2])break A;if(1!=T2[A+32>>2])break A;}T2[A+60>>2]=T2[A+16>>2];}else 1==T2[A+40>>2]&&1==T2[A+28>>2]&&1==T2[A+32>>2]&&(T2[A+60>>2]=T2[A+20>>2]);L2=A+96|0,A=T2[A+60>>2];}else A=0;T2[60+e>>2]=A,T2[60+i>>2]?(T2[i>>2]=T2[60+i>>2],T2[4+i>>2]=0,T2[8+i>>2]=f,T2[12+i>>2]=-1,T2[16+i>>2]=0,T2[20+i>>2]=0,T2[24+i>>2]=0,T2[28+i>>2]=0,T2[32+i>>2]=0,T2[36+i>>2]=0,T2[40+i>>2]=0,T2[44+i>>2]=0,T2[48+i>>2]=0,p2[52+i|0]=0,p2[53+i|0]=0,p2[54+i|0]=0,T2[48+i>>2]=1,A=T2[60+i>>2],n1[T2[T2[A>>2]+28>>2]](A,i,T2[T2[64+i>>2]>>2],1),1!=T2[24+i>>2]?p2[79+i|0]=0:(T2[T2[64+i>>2]>>2]=T2[16+i>>2],p2[79+i|0]=1)):p2[79+i|0]=0;}return L2=80+i|0,1&p2[79+i|0];},function(A,f,r,e,i,a){f|=0,r|=0,e|=0,i|=0,a|=0;var n=0;T2[28+(L2=n=L2-32|0)>>2]=A|=0,T2[24+n>>2]=f,T2[20+n>>2]=r,T2[16+n>>2]=e,T2[12+n>>2]=i,p2[11+n|0]=a,1&C(A=T2[28+n>>2],T2[T2[24+n>>2]+8>>2],1&p2[11+n|0])&&h(A,T2[24+n>>2],T2[20+n>>2],T2[16+n>>2],T2[12+n>>2]),L2=32+n|0;},function(A,f,r,e,i){f|=0,r|=0,e|=0,i|=0;var a=0;T2[28+(L2=a=L2-32|0)>>2]=A|=0,T2[24+a>>2]=f,T2[20+a>>2]=r,T2[16+a>>2]=e,p2[15+a|0]=i,1&C(A=T2[28+a>>2],T2[T2[24+a>>2]+8>>2],1&p2[15+a|0])?Z(A,T2[24+a>>2],T2[20+a>>2],T2[16+a>>2]):1&C(A,T2[T2[24+a>>2]>>2],1&p2[15+a|0])&&(T2[20+a>>2]!=T2[T2[24+a>>2]+20>>2]&&T2[20+a>>2]!=T2[T2[24+a>>2]+16>>2]?(T2[T2[24+a>>2]+32>>2]=T2[16+a>>2],T2[T2[24+a>>2]+20>>2]=T2[20+a>>2],A=T2[24+a>>2],T2[A+40>>2]=T2[A+40>>2]+1,1==T2[T2[24+a>>2]+36>>2]&&2==T2[T2[24+a>>2]+24>>2]&&(p2[T2[24+a>>2]+54|0]=1),T2[T2[24+a>>2]+44>>2]=4):1==T2[16+a>>2]&&(T2[T2[24+a>>2]+32>>2]=1)),L2=32+a|0;},function(A,f,r,e){f|=0,r|=0,e|=0;var i=0;T2[12+(L2=i=L2-16|0)>>2]=A|=0,T2[8+i>>2]=f,T2[4+i>>2]=r,T2[i>>2]=e,1&C(A=T2[12+i>>2],T2[T2[8+i>>2]+8>>2],0)&&E(A,T2[8+i>>2],T2[4+i>>2],T2[i>>2]),L2=16+i|0;},G,function(A,f,r,e,i,a){f|=0,r|=0,e|=0,i|=0,a|=0;var n=0;T2[28+(L2=n=L2-32|0)>>2]=A|=0,T2[24+n>>2]=f,T2[20+n>>2]=r,T2[16+n>>2]=e,T2[12+n>>2]=i,p2[11+n|0]=a,1&C(A=T2[28+n>>2],T2[T2[24+n>>2]+8>>2],1&p2[11+n|0])?h(A,T2[24+n>>2],T2[20+n>>2],T2[16+n>>2],T2[12+n>>2]):(A=T2[A+8>>2],n1[T2[T2[A>>2]+20>>2]](A,T2[24+n>>2],T2[20+n>>2],T2[16+n>>2],T2[12+n>>2],1&p2[11+n|0])),L2=32+n|0;},function(A,f,r,e,i){f|=0,r|=0,e|=0,i|=0;var a=0;T2[28+(L2=a=L2-32|0)>>2]=A|=0,T2[24+a>>2]=f,T2[20+a>>2]=r,T2[16+a>>2]=e,p2[15+a|0]=i,1&C(A=T2[28+a>>2],T2[T2[24+a>>2]+8>>2],1&p2[15+a|0])?Z(A,T2[24+a>>2],T2[20+a>>2],T2[16+a>>2]):1&C(A,T2[T2[24+a>>2]>>2],1&p2[15+a|0])?T2[20+a>>2]!=T2[T2[24+a>>2]+20>>2]&&T2[20+a>>2]!=T2[T2[24+a>>2]+16>>2]?(T2[T2[24+a>>2]+32>>2]=T2[16+a>>2],p2[14+a|0]=0,4!=T2[T2[24+a>>2]+44>>2]&&(p2[13+a|0]=0,p2[T2[24+a>>2]+52|0]=0,p2[T2[24+a>>2]+53|0]=0,A=T2[A+8>>2],n1[T2[T2[A>>2]+20>>2]](A,T2[24+a>>2],T2[20+a>>2],T2[20+a>>2],1,1&p2[15+a|0]),1&p2[T2[24+a>>2]+53|0]&&(p2[13+a|0]=1)&p2[T2[24+a>>2]+52|0]&&(p2[14+a|0]=1),1&p2[13+a|0]?T2[T2[24+a>>2]+44>>2]=3:T2[T2[24+a>>2]+44>>2]=4),1&p2[14+a|0]||(T2[T2[24+a>>2]+20>>2]=T2[20+a>>2],A=T2[24+a>>2],T2[A+40>>2]=T2[A+40>>2]+1,1==T2[T2[24+a>>2]+36>>2]&&2==T2[T2[24+a>>2]+24>>2]&&(p2[T2[24+a>>2]+54|0]=1))):1==T2[16+a>>2]&&(T2[T2[24+a>>2]+32>>2]=1):(A=T2[A+8>>2],n1[T2[T2[A>>2]+24>>2]](A,T2[24+a>>2],T2[20+a>>2],T2[16+a>>2],1&p2[15+a|0])),L2=32+a|0;},function(A,f,r,e){f|=0,r|=0,e|=0;var i=0;T2[12+(L2=i=L2-16|0)>>2]=A|=0,T2[8+i>>2]=f,T2[4+i>>2]=r,T2[i>>2]=e,1&C(A=T2[12+i>>2],T2[T2[8+i>>2]+8>>2],0)?E(A,T2[8+i>>2],T2[4+i>>2],T2[i>>2]):(A=T2[A+8>>2],n1[T2[T2[A>>2]+28>>2]](A,T2[8+i>>2],T2[4+i>>2],T2[i>>2])),L2=16+i|0;},G,function(A,f,r,e,i,a){f|=0,r|=0,e|=0,i|=0,a|=0;var n=0;if(T2[28+(L2=n=L2-32|0)>>2]=A|=0,T2[24+n>>2]=f,T2[20+n>>2]=r,T2[16+n>>2]=e,T2[12+n>>2]=i,p2[11+n|0]=a,1&C(A=T2[28+n>>2],T2[T2[24+n>>2]+8>>2],1&p2[11+n|0]))h(A,T2[24+n>>2],T2[20+n>>2],T2[16+n>>2],T2[12+n>>2]);else {if(p2[10+n|0]=1&p2[T2[24+n>>2]+52|0],p2[9+n|0]=1&p2[T2[24+n>>2]+53|0],T2[4+n>>2]=(A+16|0)+(T2[A+12>>2]<<3),T2[n>>2]=A+16,p2[T2[24+n>>2]+52|0]=0,p2[T2[24+n>>2]+53|0]=0,Y(T2[n>>2],T2[24+n>>2],T2[20+n>>2],T2[16+n>>2],T2[12+n>>2],1&p2[11+n|0]),p2[10+n|0]=1&p2[T2[24+n>>2]+52|0]|1&p2[10+n|0],p2[9+n|0]=1&p2[T2[24+n>>2]+53|0]|1&p2[9+n|0],f=T2[n>>2]+8|0,(T2[n>>2]=f)>>>0<T[4+n>>2])for(;;){A:if(!(1&p2[T2[24+n>>2]+54|0])){if(1&p2[T2[24+n>>2]+52|0]){if(1==T2[T2[24+n>>2]+24>>2])break A;if(!(2&T2[A+8>>2]))break A;}else if(!(1&T2[A+8>>2])&&1&p2[T2[24+n>>2]+53|0])break A;if(p2[T2[24+n>>2]+52|0]=0,p2[T2[24+n>>2]+53|0]=0,Y(T2[n>>2],T2[24+n>>2],T2[20+n>>2],T2[16+n>>2],T2[12+n>>2],1&p2[11+n|0]),p2[10+n|0]=1&p2[T2[24+n>>2]+52|0]|1&p2[10+n|0],p2[9+n|0]=1&p2[T2[24+n>>2]+53|0]|1&p2[9+n|0],f=T2[n>>2]+8|0,(T2[n>>2]=f)>>>0<T[4+n>>2])continue;}break;}p2[T2[24+n>>2]+52|0]=1&p2[10+n|0],p2[T2[24+n>>2]+53|0]=1&p2[9+n|0];}L2=32+n|0;},function(A,f,r,e,i){f|=0,r|=0,e|=0,i|=0;var a=0;if(T2[44+(L2=a=L2-48|0)>>2]=A|=0,T2[40+a>>2]=f,T2[36+a>>2]=r,T2[32+a>>2]=e,p2[31+a|0]=i,1&C(A=T2[44+a>>2],T2[T2[40+a>>2]+8>>2],1&p2[31+a|0]))Z(A,T2[40+a>>2],T2[36+a>>2],T2[32+a>>2]);else if(1&C(A,T2[T2[40+a>>2]>>2],1&p2[31+a|0])){if(T2[36+a>>2]!=T2[T2[40+a>>2]+20>>2]&&T2[36+a>>2]!=T2[T2[40+a>>2]+16>>2]){if(T2[T2[40+a>>2]+32>>2]=T2[32+a>>2],p2[30+a|0]=0,4!=T2[T2[40+a>>2]+44>>2]){for(p2[29+a|0]=0,T2[24+a>>2]=(A+16|0)+(T2[A+12>>2]<<3),T2[20+a>>2]=A+16;;){A:if(!(T[20+a>>2]>=T[24+a>>2]||(p2[T2[40+a>>2]+52|0]=0,p2[T2[40+a>>2]+53|0]=0,Y(T2[20+a>>2],T2[40+a>>2],T2[36+a>>2],T2[36+a>>2],1,1&p2[31+a|0]),1&p2[T2[40+a>>2]+54|0]))){if(1&p2[T2[40+a>>2]+53|0])if((p2[29+a|0]=1)&p2[T2[40+a>>2]+52|0]){if((p2[30+a|0]=1)==T2[T2[40+a>>2]+24>>2])break A;if(!(2&T2[A+8>>2]))break A;}else if(!(1&T2[A+8>>2]))break A;T2[20+a>>2]=T2[20+a>>2]+8;continue;}break;}1&p2[29+a|0]?T2[T2[40+a>>2]+44>>2]=3:T2[T2[40+a>>2]+44>>2]=4;}1&p2[30+a|0]||(T2[T2[40+a>>2]+20>>2]=T2[36+a>>2],A=T2[40+a>>2],T2[A+40>>2]=T2[A+40>>2]+1,1==T2[T2[40+a>>2]+36>>2]&&2==T2[T2[40+a>>2]+24>>2]&&(p2[T2[40+a>>2]+54|0]=1));}else 1==T2[32+a>>2]&&(T2[T2[40+a>>2]+32>>2]=1);}else if(T2[16+a>>2]=(A+16|0)+(T2[A+12>>2]<<3),T2[12+a>>2]=A+16,F(T2[12+a>>2],T2[40+a>>2],T2[36+a>>2],T2[32+a>>2],1&p2[31+a|0]),f=T2[12+a>>2]+8|0,(T2[12+a>>2]=f)>>>0<T[16+a>>2])if(1==T2[T2[40+a>>2]+36>>2]||2&T2[A+8>>2])for(;!(1&p2[T2[40+a>>2]+54|0])&&(F(T2[12+a>>2],T2[40+a>>2],T2[36+a>>2],T2[32+a>>2],1&p2[31+a|0]),A=T2[12+a>>2]+8|0,(T2[12+a>>2]=A)>>>0<T[16+a>>2]););else if(1&T2[A+8>>2])for(;!(1&p2[T2[40+a>>2]+54|0]||1==T2[T2[40+a>>2]+36>>2]&&1==T2[T2[40+a>>2]+24>>2])&&(F(T2[12+a>>2],T2[40+a>>2],T2[36+a>>2],T2[32+a>>2],1&p2[31+a|0]),A=T2[12+a>>2]+8|0,(T2[12+a>>2]=A)>>>0<T[16+a>>2]););else for(;!(1&p2[T2[40+a>>2]+54|0]||1==T2[T2[40+a>>2]+36>>2])&&(F(T2[12+a>>2],T2[40+a>>2],T2[36+a>>2],T2[32+a>>2],1&p2[31+a|0]),A=T2[12+a>>2]+8|0,(T2[12+a>>2]=A)>>>0<T[16+a>>2]););L2=48+a|0;},function(A,f,r,e){f|=0,r|=0,e|=0;var i=0;if(T2[28+(L2=i=L2-32|0)>>2]=A|=0,T2[24+i>>2]=f,T2[20+i>>2]=r,T2[16+i>>2]=e,1&C(A=T2[28+i>>2],T2[T2[24+i>>2]+8>>2],0))E(A,T2[24+i>>2],T2[20+i>>2],T2[16+i>>2]);else if(T2[12+i>>2]=(A+16|0)+(T2[A+12>>2]<<3),T2[8+i>>2]=A+16,D(T2[8+i>>2],T2[24+i>>2],T2[20+i>>2],T2[16+i>>2]),A=T2[8+i>>2]+8|0,(T2[8+i>>2]=A)>>>0<T[12+i>>2])for(;D(T2[8+i>>2],T2[24+i>>2],T2[20+i>>2],T2[16+i>>2]),!(1&p2[T2[24+i>>2]+54|0])&&(A=T2[8+i>>2]+8|0,(T2[8+i>>2]=A)>>>0<T[12+i>>2]););L2=32+i|0;},function(A){T2[5501]=7328;},function(A){x(22100);},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o=0,b=z2(0),t=z2(0),c=z2(0);L2=o=L2-32|0,a=T2[4+(i=r+8|0)>>2],T2[(e=n=24+o|0)>>2]=T2[i>>2],T2[4+e>>2]=a,e=T2[r+4>>2],T2[16+o>>2]=T2[r>>2],T2[20+o>>2]=e,b=j2[16+o>>2],c=j2[20+o>>2],t=j2[n>>2],z2(z2(z2(b*b)+z2(c*c))+z2(t*t))<z2(14210854715202004e-30)&&(T2[28+o>>2]=0,t=z2(-1),c=z2(-1),b=z2(-1)),n=t,t=z2(z2(1)/z2(_2(z2(z2(z2(b*b)+z2(c*c))+z2(t*t))))),j2[24+o>>2]=n*t,j2[20+o>>2]=c*t,j2[16+o>>2]=b*t,t2(o,f,16+o|0);A:{f:switch(T2[f+4>>2]){case 8:b=z2(j2[f+36>>2]*j2[f+20>>2]);break A;case 0:case 1:case 13:case 11:case 10:b=j2[f+52>>2];break A;case 4:case 5:b=j2[f+52>>2];break A;default:break f;}b=z2(n1[T2[T2[f>>2]+48>>2]](f));}T2[A+12>>2]=0,j2[A+8>>2]=z2(b*j2[24+o>>2])+j2[8+o>>2],j2[A+4>>2]=z2(b*j2[20+o>>2])+j2[4+o>>2],j2[A>>2]=z2(b*j2[16+o>>2])+j2[o>>2],L2=32+o|0;},t2,function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o=z2(0),b=z2(0),t=z2(0),c=z2(0);return (b=j2[r+128>>2])!=z2(0)&&(T2[5868]=T2[5868]+1,o=j2[r+96>>2],t=z2(b-z2(o*j2[r+116>>2])),c=j2[r+16>>2],e=j2[r+20>>2],i=j2[r+24>>2],b=j2[r+108>>2],b=z2(z2(t-z2(z2(z2(z2(z2(c*j2[A+144>>2])+z2(e*j2[A+148>>2]))+z2(i*j2[A+152>>2]))+z2(z2(z2(j2[r>>2]*j2[A+160>>2])+z2(j2[r+4>>2]*j2[A+164>>2]))+z2(j2[r+8>>2]*j2[A+168>>2])))*b))-z2(b*z2(z2(z2(z2(j2[r+48>>2]*j2[f+144>>2])+z2(j2[r+52>>2]*j2[f+148>>2]))+z2(j2[r+56>>2]*j2[f+152>>2]))+z2(z2(z2(j2[r+32>>2]*j2[f+160>>2])+z2(j2[r+36>>2]*j2[f+164>>2]))+z2(j2[r+40>>2]*j2[f+168>>2]))))),a=z2(o+b),t=j2[r+120>>2],j2[r+96>>2]=(n=a<t)?t:a,o=n?z2(t-o):b,T2[A+240>>2]&&(j2[A+144>>2]=z2(j2[A+112>>2]*z2(o*z2(c*j2[A+128>>2])))+j2[A+144>>2],j2[A+148>>2]=z2(z2(o*z2(e*j2[A+132>>2]))*j2[A+116>>2])+j2[A+148>>2],j2[A+152>>2]=z2(z2(o*z2(i*j2[A+136>>2]))*j2[A+120>>2])+j2[A+152>>2],b=j2[r+72>>2],t=j2[r+68>>2],j2[A+160>>2]=z2(z2(o*j2[A+96>>2])*j2[r+64>>2])+j2[A+160>>2],c=j2[A+104>>2],j2[A+164>>2]=z2(t*z2(o*j2[A+100>>2]))+j2[A+164>>2],j2[A+168>>2]=z2(b*z2(o*c))+j2[A+168>>2]),T2[f+240>>2]&&(b=j2[r+56>>2],t=j2[r+52>>2],j2[f+144>>2]=z2(j2[f+112>>2]*z2(o*z2(j2[r+48>>2]*j2[f+128>>2])))+j2[f+144>>2],j2[f+148>>2]=z2(z2(o*z2(t*j2[f+132>>2]))*j2[f+116>>2])+j2[f+148>>2],j2[f+152>>2]=z2(z2(o*z2(b*j2[f+136>>2]))*j2[f+120>>2])+j2[f+152>>2],b=j2[r+88>>2],t=j2[r+84>>2],j2[f+160>>2]=z2(z2(o*j2[f+96>>2])*j2[r+80>>2])+j2[f+160>>2],c=j2[f+104>>2],j2[f+164>>2]=z2(t*z2(o*j2[f+100>>2]))+j2[f+164>>2],j2[f+168>>2]=z2(b*z2(o*c))+j2[f+168>>2])),z2(o);},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a=z2(0),n=z2(0),o=z2(0),b=z2(0),a=(j2[r+100>>2]),b=j2[r+16>>2],t=j2[r+20>>2],c=j2[r+24>>2],n=j2[r+108>>2];return n=z2(z2(z2(j2[r+112>>2]-z2(a*j2[r+116>>2]))-z2(z2(z2(z2(z2(b*j2[A+64>>2])+z2(t*j2[A+68>>2]))+z2(c*j2[A+72>>2]))+z2(z2(z2(j2[r>>2]*j2[A+80>>2])+z2(j2[r+4>>2]*j2[A+84>>2]))+z2(j2[r+8>>2]*j2[A+88>>2])))*n))-z2(n*z2(z2(z2(z2(j2[r+48>>2]*j2[f+64>>2])+z2(j2[r+52>>2]*j2[f+68>>2]))+z2(j2[r+56>>2]*j2[f+72>>2]))+z2(z2(z2(j2[r+32>>2]*j2[f+80>>2])+z2(j2[r+36>>2]*j2[f+84>>2]))+z2(j2[r+40>>2]*j2[f+88>>2]))))),e=z2(a+n),o=j2[r+120>>2],j2[r+100>>2]=(i=e<o)?o:e,a=i?z2(o-a):n,T2[A+240>>2]&&(j2[A+64>>2]=z2(j2[A+112>>2]*z2(a*z2(b*j2[A+128>>2])))+j2[A+64>>2],j2[A+68>>2]=z2(z2(a*z2(t*j2[A+132>>2]))*j2[A+116>>2])+j2[A+68>>2],j2[A+72>>2]=z2(z2(a*z2(c*j2[A+136>>2]))*j2[A+120>>2])+j2[A+72>>2],n=j2[r+72>>2],o=j2[r+68>>2],j2[A+80>>2]=z2(z2(a*j2[A+96>>2])*j2[r+64>>2])+j2[A+80>>2],b=j2[A+104>>2],j2[A+84>>2]=z2(o*z2(a*j2[A+100>>2]))+j2[A+84>>2],j2[A+88>>2]=z2(n*z2(a*b))+j2[A+88>>2]),T2[f+240>>2]&&(n=j2[r+56>>2],o=j2[r+52>>2],j2[f+64>>2]=z2(j2[f+112>>2]*z2(a*z2(j2[r+48>>2]*j2[f+128>>2])))+j2[f+64>>2],j2[f+68>>2]=z2(z2(a*z2(o*j2[f+132>>2]))*j2[f+116>>2])+j2[f+68>>2],j2[f+72>>2]=z2(z2(a*z2(n*j2[f+136>>2]))*j2[f+120>>2])+j2[f+72>>2],n=j2[r+88>>2],o=j2[r+84>>2],j2[f+80>>2]=z2(z2(a*j2[f+96>>2])*j2[r+80>>2])+j2[f+80>>2],b=j2[f+104>>2],j2[f+84>>2]=z2(o*z2(a*j2[f+100>>2]))+j2[f+84>>2],j2[f+88>>2]=z2(n*z2(a*b))+j2[f+88>>2]),z2(a);},function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0),i=z2(0),a=z2(0),n=z2(0),n=(j2[r+100>>2]),o=j2[r+16>>2],b=j2[r+20>>2],t=j2[r+24>>2],i=j2[r+108>>2],e=z2(z2(z2(j2[r+112>>2]-z2(n*j2[r+116>>2]))-z2(z2(z2(z2(z2(o*j2[A+64>>2])+z2(b*j2[A+68>>2]))+z2(t*j2[A+72>>2]))+z2(z2(z2(j2[r>>2]*j2[A+80>>2])+z2(j2[r+4>>2]*j2[A+84>>2]))+z2(j2[r+8>>2]*j2[A+88>>2])))*i))-z2(i*z2(z2(z2(z2(j2[r+48>>2]*j2[f+64>>2])+z2(j2[r+52>>2]*j2[f+68>>2]))+z2(j2[r+56>>2]*j2[f+72>>2]))+z2(z2(z2(j2[r+32>>2]*j2[f+80>>2])+z2(j2[r+36>>2]*j2[f+84>>2]))+z2(j2[r+40>>2]*j2[f+88>>2])))));return ((i=z2(n+e))<(a=j2[r+120>>2])||(a=j2[r+124>>2])<i)&&(e=z2(a-n),i=a),j2[r+100>>2]=i,T2[A+240>>2]&&(j2[A+64>>2]=z2(j2[A+112>>2]*z2(e*z2(o*j2[A+128>>2])))+j2[A+64>>2],j2[A+68>>2]=z2(z2(e*z2(b*j2[A+132>>2]))*j2[A+116>>2])+j2[A+68>>2],j2[A+72>>2]=z2(z2(e*z2(t*j2[A+136>>2]))*j2[A+120>>2])+j2[A+72>>2],i=j2[r+72>>2],a=j2[r+68>>2],j2[A+80>>2]=z2(z2(e*j2[A+96>>2])*j2[r+64>>2])+j2[A+80>>2],n=j2[A+104>>2],j2[A+84>>2]=z2(a*z2(e*j2[A+100>>2]))+j2[A+84>>2],j2[A+88>>2]=z2(i*z2(e*n))+j2[A+88>>2]),T2[f+240>>2]&&(i=j2[r+56>>2],a=j2[r+52>>2],j2[f+64>>2]=z2(j2[f+112>>2]*z2(e*z2(j2[r+48>>2]*j2[f+128>>2])))+j2[f+64>>2],j2[f+68>>2]=z2(z2(e*z2(a*j2[f+132>>2]))*j2[f+116>>2])+j2[f+68>>2],j2[f+72>>2]=z2(z2(e*z2(i*j2[f+136>>2]))*j2[f+120>>2])+j2[f+72>>2],i=j2[r+88>>2],a=j2[r+84>>2],j2[f+80>>2]=z2(z2(e*j2[f+96>>2])*j2[r+80>>2])+j2[f+80>>2],n=j2[f+104>>2],j2[f+84>>2]=z2(a*z2(e*j2[f+100>>2]))+j2[f+84>>2],j2[f+88>>2]=z2(i*z2(e*n))+j2[f+88>>2]),z2(e);},function(A){t4(24164);},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a=0,n=0;L2=a=L2-96|0,e=T2[T2[A>>2]>>2],i=T2[T2[A+4>>2]>>2],0|n1[T2[T2[f>>2]+24>>2]](f,e,i)&&(T2[88+a>>2]=-1,T2[92+a>>2]=-1,T2[72+a>>2]=0,T2[80+a>>2]=e,T2[84+a>>2]=e+4,T2[76+a>>2]=T2[e+192>>2],T2[64+a>>2]=-1,T2[68+a>>2]=-1,T2[48+a>>2]=0,T2[56+a>>2]=i,T2[60+a>>2]=i+4,T2[52+a>>2]=T2[i+192>>2],((n=T2[A+8>>2])||(n=0|n1[T2[T2[f>>2]+8>>2]](f,72+a|0,48+a|0,0,1),T2[A+8>>2]=n))&&(T2[40+a>>2]=0,T2[12+a>>2]=0,T2[8+a>>2]=12508,A=T2[r+8>>2],T2[20+a>>2]=48+a,T2[16+a>>2]=72+a,1!=(0|A)?(i=z2(n1[T2[T2[n>>2]+12>>2]](n,e,i,r,8+a|0)))<j2[r+12>>2]&&(j2[r+12>>2]=i):n1[T2[T2[n>>2]+8>>2]](n,72+a|0,48+a|0,r,8+a|0))),L2=96+a|0;},function(A){A|=0,T2[5870]=17124,(A=T2[6009])&&S2[24040]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),p2[24040]=1,T2[6007]=0,T2[6008]=0,T2[5870]=7664,T2[6009]=0,(A=T2[5944])&&S2[23780]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),p2[23780]=1,T2[5942]=0,T2[5943]=0,T2[5944]=0;},function(A){return T2[(A|=0)>>2]=7328,0|A;},I,function(A,f){var r=0;return T2[(A|=0)+12>>2]&T2[(f|=0)+4>>2]?(r=1,S2[A+88|0]||(A=T2[f>>2])&&(r=!(4&S2[A+204|0])),0|r):0;},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o,b,t,c=0,u=z2(0),k=z2(0),l=0,c=(T2[f>>2]),l=T2[c+192>>2];return 31==T2[l+4>>2]&&(t=T2[f+4>>2])&&(l=T2[64+(T2[l+32>>2]+P2(T2[t>>2],80)|0)>>2]),T2[A+8>>2]=c,T2[A+84>>2]=T2[l+8>>2],j2[A+4>>2]=j2[f+24>>2],r?(r=T2[f+12>>2],T2[A+52>>2]=T2[f+8>>2],T2[A+56>>2]=r,l=T2[(c=f+16|0)+4>>2],T2[(r=A+60|0)>>2]=T2[c>>2],T2[r+4>>2]=l):(e=j2[c+8>>2],i=j2[c+12>>2],a=j2[c+20>>2],n=j2[c+24>>2],o=j2[c+28>>2],b=j2[c+36>>2],t=j2[c+40>>2],u=j2[f+12>>2],r=j2[c+44>>2],k=j2[f+16>>2],l=j2[c+4>>2],c=j2[f+8>>2],T2[A- -64>>2]=0,j2[A+60>>2]=z2(z2(c*b)+z2(u*t))+z2(k*r),j2[A+56>>2]=z2(z2(c*a)+z2(u*n))+z2(k*o),j2[A+52>>2]=z2(z2(l*c)+z2(e*u))+z2(i*k)),u=j2[f+24>>2],k=z2(z2(1)-u),j2[A+68>>2]=z2(k*j2[A+20>>2])+z2(u*j2[A+36>>2]),j2[A+72>>2]=z2(k*j2[A+24>>2])+z2(u*j2[A+40>>2]),j2[A+76>>2]=z2(k*j2[A+28>>2])+z2(u*j2[A+44>>2]),z2(j2[f+24>>2]);},M,function(A,f){return (A=T2[(A|=0)+12>>2])&T2[(f|=0)+4>>2]?0!=(A&T2[f+8>>2])|0:0;},function(){var A=0;T2[12+(L2=A=L2-16|0)>>2]=1088,T2[8+A>>2]=0,f(T2[280],T2[12+A>>2],T2[8+A>>2]),f(T2[280],3477,T2[12+(L2=A=L2-16|0)>>2]=0),L2=16+A|0,j();},x,function(A){u(x(A|=0));},function(A,f){var r=0;return T2[(A|=0)+12>>2]&T2[(f|=0)+4>>2]?(r=1,S2[A+152|0]||(A=T2[f>>2])&&(r=!(4&S2[A+204|0])),0|r):0;},function(A,f,r){A|=0,r|=0;var e=0,i=0,a=0,n=0,o=0,b=0,t=0,i=T2[T2[(f|=0)>>2]+192>>2];if(31==T2[i+4>>2]&&(a=T2[f+4>>2])){if(t=T2[T2[64+(T2[i+32>>2]+P2(T2[a>>2],80)|0)>>2]+8>>2],(0|(e=T2[A+136>>2]))==T2[A+140>>2]&&!((0|(n=e?e<<1:1))<=(0|e))){n&&(T2[5498]=T2[5498]+1,(i=K2(19+(n<<2)|0))&&(T2[(o=i+19&-16)-4>>2]=i)),b=T2[A+144>>2];A:{if(1<=(0|e))for(i=o,a=b;T2[i>>2]=T2[a>>2],i=i+4|0,a=a+4|0,e=e-1|0;);else if(!b)break A;S2[A+148|0]&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2])),e=T2[A+136>>2];}T2[A+144>>2]=o,T2[A+140>>2]=n,p2[A+148|0]=1;}}else if(t=T2[i+8>>2],(0|(e=T2[A+136>>2]))==T2[A+140>>2]&&!((0|(n=e?e<<1:1))<=(0|e))){n&&(T2[5498]=T2[5498]+1,(i=K2(19+(n<<2)|0))&&(T2[(o=i+19&-16)-4>>2]=i)),b=T2[A+144>>2];A:{if(1<=(0|e))for(i=o,a=b;T2[i>>2]=T2[a>>2],i=i+4|0,a=a+4|0,e=e-1|0;);else if(!b)break A;S2[A+148|0]&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2])),e=T2[A+136>>2];}T2[A+144>>2]=o,T2[A+140>>2]=n,p2[A+148|0]=1;}return T2[T2[A+144>>2]+(e<<2)>>2]=t,T2[A+136>>2]=T2[A+136>>2]+1,z2(y(A,f,r));},function(A){var f=0;return T2[(A|=0)>>2]=7532,(f=T2[A+124>>2])&&S2[A+128|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+124>>2]=0,p2[A+128|0]=1,T2[(f=A+116|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+104>>2])&&S2[A+108|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+104>>2]=0,p2[A+108|0]=1,T2[(f=A+96|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+84>>2])&&S2[A+88|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+84>>2]=0,p2[A+88|0]=1,T2[(f=A+76|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,T2[A>>2]=7328,p2[A+36|0]=1,T2[(f=A+24|0)>>2]=0,(T2[f+4>>2]=0)|A;},function(A){var f=0;T2[(A|=0)>>2]=7532,(f=T2[A+124>>2])&&S2[A+128|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+124>>2]=0,p2[A+128|0]=1,T2[(f=A+116|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+104>>2])&&S2[A+108|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+104>>2]=0,p2[A+108|0]=1,T2[(f=A+96|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+84>>2])&&S2[A+88|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+84>>2]=0,p2[A+88|0]=1,T2[(f=A+76|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),u(A);},y,function(A){var f=0;return T2[(A|=0)>>2]=7664,(f=T2[A+296>>2])&&S2[A+300|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+296>>2]=0,p2[A+300|0]=1,T2[(f=A+288|0)>>2]=0,(T2[f+4>>2]=0)|A;},function(A){var f=0;T2[(A|=0)>>2]=7664,(f=T2[A+296>>2])&&S2[A+300|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+296>>2]=0,p2[A+300|0]=1,T2[(f=A+288|0)>>2]=0,T2[f+4>>2]=0,T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f){T2[(A|=0)+200>>2]=f|=0,T2[A+192>>2]=f,T2[A+304>>2]=T2[A+304>>2]+1;},function(A,f){f|=0;var r=0,e=0,r=e=T2[(A|=0)+288>>2];A:if(!((0|e)<1)){for(A=T2[A+296>>2],r=0;;){if(T2[A>>2]==(0|f))break A;if(A=A+4|0,(0|e)==(0|(r=r+1|0)))break;}r=e;}return (0|e)<=(0|r)|0;},function(A){return 264;},K,function(A,f){var r=0,e=0,e=f|=0,i=0|n1[T2[T2[(A|=0)>>2]+16>>2]](A),a=T2[T2[f>>2]+16>>2],r=0|n1[a](0|e,0|i,1);e=0|n1[T2[T2[A>>2]+20>>2]](A,T2[8+(i=r)>>2],r=f),a=T2[T2[f>>2]+20>>2],n1[a](0|r,0|i,0|e,1245859651,0|A);},a2,function(A){A=a2(A|=0),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A){var f;return T2[(A|=0)>>2]=7916,(f=T2[A+60>>2])&&(n1[T2[T2[f>>2]>>2]](f),(f=T2[A+60>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),0|A;},M,g2,function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o,b,t,c=0;T2[(t=44+(L2=c=L2-96|0)|0)>>2]=0,T2[4+t>>2]=0,T2[(t=56+c|0)>>2]=0,T2[4+t>>2]=0,T2[52+c>>2]=1065353216,T2[(t=c+64|0)>>2]=0,T2[4+t>>2]=0,T2[(t=76+c|0)>>2]=0,T2[4+t>>2]=0,T2[72+c>>2]=1065353216,T2[(t=84+c|0)>>2]=0,T2[4+t>>2]=0,T2[92+c>>2]=0,T2[36+c>>2]=0,T2[40+c>>2]=0,T2[32+c>>2]=1065353216,n1[T2[T2[A>>2]+8>>2]](A,32+c|0,16+c|0,c),n=j2[c>>2],o=j2[16+c>>2],e=z2(n-o),a=z2(e*e),e=j2[4+c>>2],b=j2[20+c>>2],i=z2(e-b),t=z2(a+z2(i*i)),i=j2[8+c>>2],a=j2[24+c>>2],A=z2(i-a),j2[r>>2]=z2(_2(z2(t+z2(A*A))))*z2(.5),T2[f+12>>2]=0,j2[f+8>>2]=z2(i+a)*z2(.5),j2[f+4>>2]=z2(e+b)*z2(.5),j2[f>>2]=z2(n+o)*z2(.5),L2=96+c|0;},function(A){A|=0;var f,r=0;return L2=r=L2-32|0,n1[T2[T2[A>>2]+12>>2]](A,16+r|0,12+r|0),L2=32+r|0,f=j2[16+r>>2],A=z2(f*f),f=j2[20+r>>2],A=z2(A+z2(f*f)),f=j2[24+r>>2],z2(z2(j2[12+r>>2]+z2(_2(z2(A+z2(f*f))))));},function(A,f){return A|=0,f=z2(f),z2(z2(z2(n1[T2[T2[A>>2]+16>>2]](A))*f));},function(A,f){A|=0,f|=0,z2(0);var r=j2[f>>2],e=j2[f+4>>2],f=j2[f+8>>2];T2[A+32>>2]=0,j2[A+28>>2]=O2(f),j2[A+24>>2]=O2(e),j2[A+20>>2]=O2(r);},function(A){return (A|=0)+20|0;},function(A,f,r){A|=0,f=z2(f),r|=0;var e,i,a=0;L2=a=L2-96|0,e=z2(n1[T2[T2[A>>2]+48>>2]](A)),T2[(i=44+a|0)>>2]=0,T2[4+i>>2]=0,T2[(i=56+a|0)>>2]=0,T2[4+i>>2]=0,T2[52+a>>2]=1065353216,T2[(i=a+64|0)>>2]=0,T2[4+i>>2]=0,T2[(i=76+a|0)>>2]=0,T2[4+i>>2]=0,T2[72+a>>2]=1065353216,T2[(i=84+a|0)>>2]=0,T2[4+i>>2]=0,T2[92+a>>2]=0,T2[36+a>>2]=0,T2[40+a>>2]=0,T2[32+a>>2]=1065353216,n1[T2[T2[A>>2]+8>>2]](A,32+a|0,16+a|0,a),T2[r+12>>2]=0,f=z2(f*z2(.0833333283662796)),i=z2(e+z2(z2(j2[a>>2]-j2[16+a>>2])*z2(.5))),i=z2(i+i),i=z2(i*i),A=z2(e+z2(z2(j2[4+a>>2]-j2[20+a>>2])*z2(.5))),A=z2(A+A),A=z2(A*A),j2[r+8>>2]=f*z2(i+A),e=z2(e+z2(z2(j2[8+a>>2]-j2[24+a>>2])*z2(.5))),e=z2(e+e),e=z2(e*e),j2[r+4>>2]=f*z2(i+e),j2[r>>2]=f*z2(A+e),L2=96+a|0;},function(A,f){T2[(A|=0)+8>>2]=1065353216,T2[A+12>>2]=0,T2[A>>2]=1065353216,T2[A+4>>2]=1065353216;},w2,function(A){return z2(j2[(A|=0)+52>>2]);},J2,function(A,f,r){f|=0;var e=0|n1[T2[T2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|n1[T2[T2[r>>2]+28>>2]](r,e);return (T2[f>>2]=i)&&n1[T2[T2[r>>2]+48>>2]](r,e),r=T2[A+4>>2],T2[f+8>>2]=0,j2[f+28>>2]=j2[A+36>>2],j2[f+32>>2]=j2[A+40>>2],j2[f+36>>2]=j2[A+44>>2],j2[f+40>>2]=j2[A+48>>2],j2[f+12>>2]=j2[A+20>>2],j2[f+16>>2]=j2[A+24>>2],j2[f+20>>2]=j2[A+28>>2],j2[f+24>>2]=j2[A+32>>2],T2[f+4>>2]=r,j2[f+44>>2]=j2[A+52>>2],T2[f+48>>2]=0,8448;},function(A,f){var r=0,e=0,e=f|=0,i=0|n1[T2[T2[(A|=0)>>2]+52>>2]](A),a=T2[T2[f>>2]+16>>2],r=0|n1[a](0|e,0|i,1);e=0|n1[T2[T2[A>>2]+56>>2]](A,T2[8+(i=r)>>2],r=f),a=T2[T2[f>>2]+20>>2],n1[a](0|r,0|i,0|e,1346455635,0|A);},i2,function(A,f,r){A|=0,f|=0,r|=0;var e=0,i=z2(0),a=z2(0),n=0,o=z2(0),b=z2(0),t=0,c=0,u=0,k=0,l=z2(0),s=z2(0),v=z2(0);if(L2=t=L2-2048|0,T2[A>>2]=0,T2[A+4>>2]=0,T2[(e=A+8|0)>>2]=0,T2[e+4>>2]=0,o=j2[r>>2],i=j2[r+4>>2],b=j2[r+8>>2],a=z2(z2(z2(o*o)+z2(i*i))+z2(b*b)),l=z2(1),a<z2(9999999747378752e-20)||(a=z2(z2(1)/z2(_2(a))),s=z2(b*a),v=z2(i*a),l=z2(o*a)),a=l,1<=(0|n1[T2[T2[f>>2]+96>>2]](f)))for(b=z2(-0xde0b6b000000000);;){if(c=128,127<((0|n1[T2[T2[f>>2]+96>>2]](f))-u|0)||1<=(0|(c=(0|n1[T2[T2[f>>2]+96>>2]](f))-u|0))){for(r=0,e=t;n1[T2[T2[f>>2]+108>>2]](f,r,e),e=e+16|0,(0|c)!=(0|(r=r+1|0)););for(e=0,k=-1,i=z2(-34028234663852886e22),r=t;i=(n=i<(o=z2(z2(z2(a*j2[r>>2])+z2(v*j2[r+4>>2]))+z2(s*j2[r+8>>2]))))?o:i,k=n?e:k,r=r+16|0,(0|c)!=(0|(e=e+1|0)););}else i=z2(-34028234663852886e22),k=-1;if(b<i&&(r=T2[(n=(k<<4)+t|0)+12>>2],T2[(e=A+8|0)>>2]=T2[n+8>>2],T2[e+4>>2]=r,r=T2[n+4>>2],T2[A>>2]=T2[n>>2],T2[A+4>>2]=r,b=i),u=u+128|0,!((0|n1[T2[T2[f>>2]+96>>2]](f))>(0|u)))break;}L2=2048+t|0;},function(A,f,r,e,i,a,n){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0,n|=0;var o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M=0;T2[44+(L2=M=L2-48|0)>>2]=0,o=j2[r>>2],b=j2[r+4>>2],t=j2[r+8>>2],j2[32+M>>2]=z2(z2(j2[f>>2]*o)+z2(j2[f+16>>2]*b))+z2(j2[f+32>>2]*t),k=f+24|0,N=f+40|0,j2[40+M>>2]=z2(z2(o*j2[f+8>>2])+z2(b*j2[k>>2]))+z2(t*j2[N>>2]),l=f+20|0,V=f+36|0,j2[36+M>>2]=z2(z2(o*j2[f+4>>2])+z2(b*j2[l>>2]))+z2(t*j2[V>>2]),n1[T2[T2[A>>2]+64>>2]](16+M|0,A,32+M|0),s=j2[(m=f+56|0)>>2],v=j2[N>>2],d=j2[V>>2],c=j2[(J=f+52|0)>>2],B=j2[k>>2],Q=j2[l>>2],g=j2[f+32>>2],u=j2[f+48>>2],w=j2[f+8>>2],G=j2[f>>2],C=j2[f+4>>2],E=j2[f+16>>2],o=j2[24+M>>2],b=j2[16+M>>2],t=j2[20+M>>2],T2[12+M>>2]=0,j2[8+M>>2]=-j2[40+M>>2],j2[4+M>>2]=-j2[36+M>>2],j2[M>>2]=-j2[32+M>>2],n1[T2[T2[A>>2]+64>>2]](16+M|0,A,M),D=j2[m>>2],h=j2[N>>2],Z=j2[V>>2],Y=j2[J>>2],R=j2[k>>2],F=j2[l>>2],W=j2[f+32>>2],A=j2[f+48>>2],m=j2[f+8>>2],N=j2[f>>2],V=j2[f+4>>2],J=j2[f+16>>2],k=j2[24+M>>2],l=j2[16+M>>2],f=j2[20+M>>2],u=z2(u+z2(z2(z2(b*G)+z2(t*C))+z2(o*w))),c=z2(c+z2(z2(z2(b*E)+z2(t*Q))+z2(o*B))),o=z2(s+z2(z2(z2(b*g)+z2(t*d))+z2(o*v))),j2[e>>2]=z2(z2(u*j2[r>>2])+z2(c*j2[r+4>>2]))+z2(o*j2[r+8>>2]),b=z2(A+z2(z2(z2(l*N)+z2(f*V))+z2(k*m))),t=z2(Y+z2(z2(z2(l*J)+z2(f*F))+z2(k*R))),k=z2(D+z2(z2(z2(l*W)+z2(f*Z))+z2(k*h))),j2[i>>2]=z2(z2(b*j2[r>>2])+z2(t*j2[r+4>>2]))+z2(k*j2[r+8>>2]),T2[n+12>>2]=0,j2[n+8>>2]=k,j2[n+4>>2]=t,j2[n>>2]=b,T2[a+12>>2]=0,j2[a+8>>2]=o,j2[a+4>>2]=c,j2[a>>2]=u,l=j2[e>>2],(f=j2[i>>2])<l&&(j2[e>>2]=f,j2[i>>2]=l,T2[n+12>>2]=0,j2[n+8>>2]=o,j2[n+4>>2]=c,j2[n>>2]=u,T2[a+12>>2]=0,j2[a+8>>2]=k,j2[a+4>>2]=t,j2[a>>2]=b),L2=48+M|0;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c,u,k,l,s=0,v=0,d=z2(0),B=0,Q=0,g=0,w=0,G=0;if(L2=Q=L2-2048|0,1<=(0|e)){for(v=r+12|0,s=e;T2[v>>2]=-581039253,v=v+16|0,s=s-1|0;);for(;;){if(1<=(0|n1[T2[T2[A>>2]+96>>2]](A)))for(n=12+(i=(s=G<<4)+r|0)|0,t=8+(a=f+s|0)|0,c=4+a|0,g=0;;){if(w=128,127<((0|n1[T2[T2[A>>2]+96>>2]](A))-g|0)||1<=(0|(w=(0|n1[T2[T2[A>>2]+96>>2]](A))-g|0))){for(v=0,s=Q;n1[T2[T2[A>>2]+108>>2]](A,v,s),s=s+16|0,(0|w)!=(0|(v=v+1|0)););for(u=j2[t>>2],k=j2[c>>2],l=j2[a>>2],s=0,B=-1,d=z2(-34028234663852886e22),v=Q;d=(b=d<(o=z2(z2(z2(l*j2[v>>2])+z2(k*j2[v+4>>2]))+z2(u*j2[v+8>>2]))))?o:d,B=b?s:B,v=v+16|0,(0|w)!=(0|(s=s+1|0)););}else d=z2(-34028234663852886e22),B=-1;if(j2[n>>2]<d&&(B=T2[(s=(B<<4)+Q|0)+12>>2],T2[(v=8+i|0)>>2]=T2[s+8>>2],T2[v+4>>2]=B,v=T2[s+4>>2],T2[i>>2]=T2[s>>2],T2[4+i>>2]=v,j2[n>>2]=d),g=g+128|0,!((0|n1[T2[T2[A>>2]+96>>2]](A))>(0|g)))break;}if((0|(G=G+1|0))==(0|e))break;}}L2=2048+Q|0;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c=0,u=(0);for(L2=c=L2-80|0,t=z2(n1[T2[T2[A>>2]+48>>2]](A)),b=72+c|0;T2[b>>2]=0,T2[4+b>>2]=0,T2[64+c>>2]=0,T2[68+c>>2]=0,T2[(o=(c+64|0)+u|0)>>2]=1065353216,T2[44+c>>2]=0,i=j2[64+c>>2],a=j2[68+c>>2],n=j2[b>>2],j2[40+c>>2]=z2(z2(i*j2[f+8>>2])+z2(a*j2[f+24>>2]))+z2(n*j2[f+40>>2]),j2[36+c>>2]=z2(z2(i*j2[f+4>>2])+z2(a*j2[f+20>>2]))+z2(n*j2[f+36>>2]),j2[32+c>>2]=z2(z2(i*j2[f>>2])+z2(a*j2[f+16>>2]))+z2(n*j2[f+32>>2]),n1[T2[T2[A>>2]+64>>2]](48+c|0,A,32+c|0),T2[44+c>>2]=0,i=j2[48+c>>2],a=j2[52+c>>2],n=j2[56+c>>2],j2[40+c>>2]=z2(z2(z2(i*j2[f+32>>2])+z2(a*j2[f+36>>2]))+z2(n*j2[f+40>>2]))+j2[f+56>>2],j2[36+c>>2]=z2(z2(z2(i*j2[f+16>>2])+z2(a*j2[f+20>>2]))+z2(n*j2[f+24>>2]))+j2[f+52>>2],j2[32+c>>2]=z2(z2(z2(i*j2[f>>2])+z2(a*j2[f+4>>2]))+z2(n*j2[f+8>>2]))+j2[f+48>>2],T2[o>>2]=-1082130432,j2[e+u>>2]=t+j2[(o=(32+c|0)+u|0)>>2],T2[12+c>>2]=0,i=j2[64+c>>2],a=j2[68+c>>2],n=j2[b>>2],j2[8+c>>2]=z2(z2(i*j2[f+8>>2])+z2(a*j2[f+24>>2]))+z2(n*j2[f+40>>2]),j2[4+c>>2]=z2(z2(i*j2[f+4>>2])+z2(a*j2[f+20>>2]))+z2(n*j2[f+36>>2]),j2[c>>2]=z2(z2(i*j2[f>>2])+z2(a*j2[f+16>>2]))+z2(n*j2[f+32>>2]),n1[T2[T2[A>>2]+64>>2]](16+c|0,A,c),T2[44+c>>2]=0,i=j2[16+c>>2],a=j2[20+c>>2],n=j2[24+c>>2],j2[40+c>>2]=z2(z2(z2(i*j2[f+32>>2])+z2(a*j2[f+36>>2]))+z2(n*j2[f+40>>2]))+j2[f+56>>2],j2[36+c>>2]=z2(z2(z2(i*j2[f+16>>2])+z2(a*j2[f+20>>2]))+z2(n*j2[f+24>>2]))+j2[f+52>>2],j2[32+c>>2]=z2(z2(z2(i*j2[f>>2])+z2(a*j2[f+4>>2]))+z2(n*j2[f+8>>2]))+j2[f+48>>2],j2[r+u>>2]=j2[o>>2]-t,12!=(0|(u=u+4|0)););L2=80+c|0;},G2,C2,function(A,f){A|=0,f|=0;var r,e,i,a,n,o=0,b=0,t=0,c=0,u=0,k=0,l=0,s=z2(0),v=0,d=z2(0),B=0,Q=z2(0),g=z2(0),w=0,G=0,C=0,E=z2(0),D=0,h=0,Z=0,Y=z2(0),R=z2(0),F=z2(0),W=z2(0),m=0,N=0,V=0,J=0,M=0,I=0,x=z2(0),y=z2(0),U=0,X=z2(0),p=z2(0),T=0,S=0;if(L2=c=L2-208|0,(b=T2[A+60>>2])&&(n1[T2[T2[b>>2]>>2]](b),(b=T2[A+60>>2])&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2]))),T2[5498]=T2[5498]+1,(b=K2(151))&&(T2[(o=b+19&-16)-4>>2]=b),T2[o>>2]=7868,p2[o+20|0]=1,T2[o+16>>2]=0,p2[o+40|0]=1,T2[o+8>>2]=0,T2[o+12>>2]=0,T2[o+36>>2]=0,p2[o+60|0]=1,T2[o+28>>2]=0,T2[o+32>>2]=0,T2[o+56>>2]=0,T2[o+48>>2]=0,T2[o+52>>2]=0,T2[A+60>>2]=o,!(((o=0)|n1[T2[T2[A>>2]+96>>2]](A))<1)){for(;;){if((0|u)==(0|Z)&&!((0|(b=u?u<<1:1))<=(0|u))){k=0,b&&(T2[5498]=T2[5498]+1,(o=K2(19+(b<<4)|0))&&(T2[(k=o+19&-16)-4>>2]=o));A:{if(1<=(0|u))for(o=k,t=J;v=T2[t+4>>2],T2[o>>2]=T2[t>>2],T2[o+4>>2]=v,m=T2[(D=t+8|0)+4>>2],T2[(v=o+8|0)>>2]=T2[D>>2],T2[v+4>>2]=m,o=o+16|0,t=t+16|0,u=u-1|0;);else if(!J)break A;T2[5499]=T2[5499]+1,q2(T2[J-4>>2]);}u=b,J=k;}if(k=T2[108+c>>2],T2[(o=(Z<<4)+J|0)>>2]=T2[104+c>>2],T2[o+4>>2]=k,t=T2[(k=112+c|0)+4>>2],T2[(b=o+8|0)>>2]=T2[k>>2],T2[b+4>>2]=t,n1[T2[T2[A>>2]+108>>2]](A,Z,o),Z=Z+1|0,!((0|n1[T2[T2[A>>2]+96>>2]](A))>(0|Z)))break;}o=J;}p2[140+c|0]=1,T2[136+c>>2]=0,p2[160+c|0]=1,T2[(b=128+c|0)>>2]=0,T2[b+4>>2]=0,T2[156+c>>2]=0,T2[(b=148+c|0)>>2]=0,T2[b+4>>2]=0,T2[116+c>>2]=0,p2[120+c|0]=1,T2[108+c>>2]=0,T2[112+c>>2]=0;A:{f:{if(!f){Q2(104+c|0,o,Z);break A;}if(!((0|Z)<1)){for(N=Z-1|0,k=J+24|0;;){if((B=(f=B)+1|0)>>>0<Z>>>0)for(m=(l=(f<<4)+J|0)+8|0,M=l+4|0,v=B;;){if((0|(v=(f=v)+1|0))<(0|Z))for(T=(h=(f<<4)+J|0)+8|0,I=h+4|0,D=v;;){for(s=j2[l>>2],d=z2(j2[h>>2]-s),Q=j2[M>>2],g=z2(j2[(f=(D<<4)+J|0)+4>>2]-Q),Q=z2(j2[I>>2]-Q),s=z2(j2[f>>2]-s),Y=z2(z2(d*g)-z2(Q*s)),F=j2[m>>2],W=z2(j2[T>>2]-F),E=z2(W*s),s=z2(j2[f+8>>2]-F),F=z2(E-z2(d*s)),W=z2(z2(Q*s)-z2(W*g)),d=z2(1),f=1;;){s=z2(Y*d),Q=z2(W*d),d=z2(F*d);r:if((g=z2(z2(s*s)+z2(z2(Q*Q)+z2(d*d))))>z2(9999999747378752e-20)){g=z2(z2(1)/z2(_2(g))),s=z2(s*g),d=z2(d*g),Q=z2(Q*g);e:if(!(u=(0|w)<1)){if(z2(z2(z2(Q*j2[G>>2])+z2(d*j2[G+4>>2]))+z2(s*j2[G+8>>2]))>z2(.9990000128746033))break r;for(b=w-1|0,o=G+24|0,t=0;;){if((0|b)==(0|t))break e;if(V=o-4|0,U=o-8|0,g=j2[o>>2],o=o+16|0,t=t+1|0,z2(z2(z2(Q*j2[U>>2])+z2(d*j2[V>>2]))+z2(s*g))>z2(.9990000128746033))break;}if((0|t)<(0|w))break r;}if(g=z2(z2(z2(Q*j2[l>>2])+z2(d*j2[M>>2]))+z2(s*j2[m>>2])),!(z2(z2(z2(z2(z2(Q*j2[J>>2])+z2(d*j2[J+4>>2]))+z2(s*j2[J+8>>2]))-g)+z2(-.009999999776482582))>z2(0))){E=z2(-g),t=0,o=k;e:{for(;;){if((0|t)==(0|N))break e;if(b=o-4|0,V=o-8|0,R=j2[o>>2],o=o+16|0,t=t+1|0,z2(z2(z2(z2(z2(Q*j2[V>>2])+z2(d*j2[b>>2]))+z2(s*R))-g)+z2(-.009999999776482582))>z2(0))break;}if((0|t)<(0|Z))break r;}if((0|w)==(0|C))if((0|(C=w?w<<1:1))<=(0|w))C=w;else {b=0,C&&(T2[5498]=T2[5498]+1,(o=K2(19+(C<<4)|0))&&(T2[(b=o+19&-16)-4>>2]=o));e:{if(u){if(!G)break e;}else for(o=b,t=G,u=w;V=T2[t+4>>2],T2[o>>2]=T2[t>>2],T2[o+4>>2]=V,S=T2[(U=t+8|0)+4>>2],T2[(V=o+8|0)>>2]=T2[U>>2],T2[V+4>>2]=S,o=o+16|0,t=t+16|0,u=u-1|0;);T2[5499]=T2[5499]+1,q2(T2[G-4>>2]);}G=b;}j2[(o=(w<<4)+G|0)+12>>2]=E,j2[o+8>>2]=s,j2[o+4>>2]=d,j2[o>>2]=Q,w=w+1|0;}}if(o=1&f,d=z2(-1),f=0,!o)break;}if(!((0|(D=D+1|0))<(0|Z)))break;}if((0|v)==(0|Z))break;}if((0|B)==(0|Z))break;}if((0|w)<1)l=0;else {for(k=f=l=0;;){if(T2[(C=40+c|0)>>2]=T2[(o=(k<<4)+G|0)+8>>2],b=T2[o+4>>2],T2[32+c>>2]=T2[o>>2],T2[36+c>>2]=b,s=z2(j2[o+12>>2]-z2(n1[T2[T2[A>>2]+48>>2]](A))),(0|k)==(0|(b=f))){if((0|(f=b?b<<1:1))<=(0|b))f=b;else {v=0,f&&(T2[5498]=T2[5498]+1,(o=K2(19+(f<<4)|0))&&(T2[(v=o+19&-16)-4>>2]=o));r:{if(1<=(0|b))for(o=v,t=l,u=b;B=T2[t+4>>2],T2[o>>2]=T2[t>>2],T2[o+4>>2]=B,Z=T2[(D=t+8|0)+4>>2],T2[(B=o+8|0)>>2]=T2[D>>2],T2[B+4>>2]=Z,o=o+16|0,t=t+16|0,u=u-1|0;);else if(!l)break r;T2[5499]=T2[5499]+1,q2(T2[l-4>>2]);}l=v;}}else b=k;if(o=(b<<4)+l|0,b=T2[36+c>>2],T2[o>>2]=T2[32+c>>2],T2[o+4>>2]=b,b=T2[C>>2],j2[o+12>>2]=s,T2[o+8>>2]=b,(0|w)==(0|(k=k+1|0)))break;}if(!((0|w)<1)){for(B=D=o=f=0;;){if((B=(b=B)+1|0)>>>0<w>>>0)for(h=(C=(b<<4)+l|0)+12|0,N=C+4|0,T=C+8|0,Z=B;;){if((0|(Z=(b=Z)+1|0))<(0|w))for(I=(M=(b<<4)+l|0)+12|0,V=M+8|0,U=M+4|0,t=Z;;){if(b=o,Q=j2[(o=(t<<4)+l|0)+4>>2],g=j2[M>>2],Y=j2[U>>2],F=j2[o>>2],W=z2(z2(Q*g)-z2(Y*F)),E=j2[o+8>>2],R=j2[V>>2],y=z2(z2(Y*E)-z2(R*Q)),X=z2(z2(R*F)-z2(E*g)),z2(z2(W*W)+z2(z2(y*y)+z2(X*X)))>z2(9999999747378752e-20)){if(s=j2[N>>2],d=j2[C>>2],p=z2(z2(F*s)-z2(Q*d)),x=Q,Q=j2[T>>2],x=z2(z2(x*Q)-z2(E*s)),F=z2(z2(E*d)-z2(F*Q)),z2(z2(p*p)+z2(z2(x*x)+z2(F*F)))>z2(9999999747378752e-20)){if(E=z2(z2(Y*d)-z2(g*s)),Y=z2(z2(R*s)-z2(Y*Q)),g=z2(z2(g*Q)-z2(R*d)),z2(z2(E*E)+z2(z2(Y*Y)+z2(g*g)))>z2(9999999747378752e-20)){if(s=z2(z2(Q*W)+z2(z2(s*X)+z2(y*d))),z2(O2(s))>z2(9.999999974752427e-7)){for(s=z2(z2(-1)/s),d=j2[o+12>>2],Q=j2[h>>2],R=z2(W*Q),W=j2[I>>2],E=z2(s*z2(z2(E*d)+z2(R+z2(p*W)))),g=z2(s*z2(z2(g*d)+z2(z2(X*Q)+z2(F*W)))),s=z2(s*z2(z2(Y*d)+z2(z2(y*Q)+z2(x*W)))),u=0,k=1,o=l;!(z2(z2(j2[o+12>>2]+z2(z2(z2(s*j2[o>>2])+z2(g*j2[o+4>>2]))+z2(E*j2[o+8>>2])))+z2(-.009999999776482582))>z2(0)||(o=o+16|0,k=(u=u+1|0)>>>0<w>>>0,(0|u)==(0|w))););if(1&k)o=b;else {if((0|b)==(0|D)){if((0|(o=b?b<<1:1))<=(0|b))o=b;else {v=0,o&&(T2[5498]=T2[5498]+1,(k=K2(19+(o<<4)|0))&&(T2[(v=k+19&-16)-4>>2]=k));r:{if(1<=(0|b))for(u=v,k=f,m=b;S=T2[k+4>>2],T2[u>>2]=T2[k>>2],T2[u+4>>2]=S,e=T2[4+(r=k+8|0)>>2],T2[(S=u+8|0)>>2]=T2[r>>2],T2[S+4>>2]=e,u=u+16|0,k=k+16|0,m=m-1|0;);else if(!f)break r;T2[5499]=T2[5499]+1,q2(T2[f-4>>2]);}f=v;}}else o=b,b=D;T2[(b=(b<<4)+f|0)+12>>2]=0,j2[b+8>>2]=E,j2[b+4>>2]=g,j2[b>>2]=s,D=D+1|0;}}else o=b;}else o=b;}else o=b;}else o=b;if(!((0|(t=t+1|0))<(0|w)))break;}if((0|w)==(0|Z))break;}if((0|B)==(0|w))break;}if(Q2(104+c|0,f,D),!f)break f;T2[5499]=T2[5499]+1,q2(T2[f-4>>2]);break f;}}}Q2(104+c|0,0,0);}l&&(T2[5499]=T2[5499]+1,q2(T2[l-4>>2])),G&&(T2[5499]=T2[5499]+1,q2(T2[G-4>>2]));}if(1<=((Z=0)|(k=T2[148+c>>2])))for(T2[5498]=T2[5498]+1,(f=K2(19+(k<<4)|0))&&(T2[(Z=f+19&-16)-4>>2]=f),o=Z,t=k;f=T2[36+c>>2],T2[o>>2]=T2[32+c>>2],T2[o+4>>2]=f,u=T2[(b=40+c|0)+4>>2],T2[(f=o+8|0)>>2]=T2[b>>2],T2[f+4>>2]=u,o=o+16|0,t=t-1|0;);if(T2[92+c>>2]=0,p2[96+c|0]=1,T2[84+c>>2]=0,T2[88+c>>2]=0,p2[0|(f=47+c|0)]=0,p2[f+1|0]=0,p2[f+2|0]=0,p2[f+3|0]=0,T2[(f=40+c|0)>>2]=0,T2[f+4>>2]=0,T2[32+c>>2]=0,-1<((T2[36+c>>2]=0)|k)){if(k)for(E2(80+c|0,k),o=T2[92+c>>2]+20|0,f=32+c|3,u=k;T2[(b=v=o-16|0)>>2]=0,T2[b+4>>2]=0,p2[o-4|0]=1,b=S2[f+4|0]|S2[f+5|0]<<8|(S2[f+6|0]<<16|S2[f+7|0]<<24),t=S2[0|f]|S2[f+1|0]<<8|(S2[f+2|0]<<16|S2[f+3|0]<<24),p2[0|o]=t,p2[o+1|0]=t>>>8,p2[o+2|0]=t>>>16,p2[o+3|0]=t>>>24,p2[o+4|0]=b,p2[o+5|0]=b>>>8,p2[o+6|0]=b>>>16,p2[o+7|0]=b>>>24,T2[v+8>>2]=0,v=S2[(t=f+8|0)+4|0]|S2[t+5|0]<<8|(S2[t+6|0]<<16|S2[t+7|0]<<24),t=S2[0|t]|S2[t+1|0]<<8|(S2[t+2|0]<<16|S2[t+3|0]<<24),p2[0|(b=o+8|0)]=t,p2[b+1|0]=t>>>8,p2[b+2|0]=t>>>16,p2[b+3|0]=t>>>24,p2[b+4|0]=v,p2[b+5|0]=v>>>8,p2[b+6|0]=v>>>16,p2[b+7|0]=v>>>24,o=o+36|0,u=u-1|0;);if(T2[84+c>>2]=k,t=T2[108+c>>2],v=T2[A+60>>2],(0|(b=T2[v+8>>2]))<(0|t)){if(T2[v+12>>2]<(0|t)){if(f=0,t&&(T2[5498]=T2[5498]+1,(o=K2(19+(t<<4)|0))&&(T2[(f=o+19&-16)-4>>2]=o)),1<=(0|b))for(o=0,u=b;l=T2[v+16>>2]+o|0,D=T2[l+4>>2],T2[(B=C=f+o|0)>>2]=T2[l>>2],T2[B+4>>2]=D,B=T2[(l=l+8|0)+4>>2],T2[(C=C+8|0)>>2]=T2[l>>2],T2[C+4>>2]=B,o=o+16|0,u=u-1|0;);(o=T2[v+16>>2])&&S2[v+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[o-4>>2])),T2[v+16>>2]=f,T2[v+12>>2]=t,p2[v+20|0]=1;}for(o=b<<4,u=t-b|0;l=T2[36+c>>2],f=T2[v+16>>2]+o|0,T2[f>>2]=T2[32+c>>2],T2[f+4>>2]=l,l=T2[(b=40+c|0)+4>>2],T2[(f=f+8|0)>>2]=T2[b>>2],T2[f+4>>2]=l,o=o+16|0,u=u-1|0;);}if(1<=(0|(T2[v+8>>2]=t)))for(o=0;f=T2[116+c>>2]+o|0,v=T2[f+4>>2],b=T2[T2[A+60>>2]+16>>2]+o|0,T2[b>>2]=T2[f>>2],T2[b+4>>2]=v,u=T2[(f=f+8|0)+4>>2],T2[(b=b+8|0)>>2]=T2[f>>2],T2[b+4>>2]=u,o=o+16|0,t=t-1|0;);if(!((0|k)<1))for(G=0;;){for(f=0,b=h=T2[136+c>>2]+P2(T2[T2[156+c>>2]+(G<<2)>>2],12)|0;;){if(C=(l=(w=P2(G,36))+T2[92+c>>2]|0)+4|0,m=T2[8+(P2(T2[b+4>>2],12)+b|0)>>2],(0|(u=T2[l+4>>2]))==T2[l+8>>2]&&!((0|(D=u?u<<1:1))<=(0|u))){D?(B=0,T2[5498]=T2[5498]+1,(o=K2(19+(D<<2)|0))&&(T2[(B=o+19&-16)-4>>2]=o),u=T2[C>>2]):B=0,N=l+8|0,M=l+12|0,v=T2[l+12>>2];A:{if(1<=(0|u))for(o=B,t=v;T2[o>>2]=T2[t>>2],o=o+4|0,t=t+4|0,u=u-1|0;);else if(!v)break A;S2[l+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[v-4>>2])),T2[M>>2]=0,u=T2[C>>2];}T2[M>>2]=B,T2[N>>2]=D,p2[l+16|0]=1;}if(T2[T2[l+12>>2]+(u<<2)>>2]=m,T2[C>>2]=T2[C>>2]+1,f=(0|f)<=1?(t=T2[116+c>>2],s=j2[(o=t+(m<<4)|0)+4>>2],t=t+(T2[b+8>>2]<<4)|0,Q=j2[t+4>>2],d=j2[o>>2],g=j2[t>>2],Y=j2[o+8>>2],F=j2[t+8>>2],T2[(o=(32+c|0)+(f<<4)|0)+12>>2]=0,d=z2(g-d),Q=z2(Q-s),g=z2(F-Y),s=z2(z2(1)/z2(_2(z2(z2(z2(d*d)+z2(Q*Q))+z2(g*g))))),j2[o+8>>2]=g*s,j2[o+4>>2]=Q*s,j2[o>>2]=d*s,f+1|0):2,o=P2(T2[b+4>>2],12)+b|0,(0|h)==(0|(b=P2(T2[o>>2],12)+o|0)))break;}if(2!=(0|f)?(T2[(f=(G<<4)+Z|0)>>2]=0,T2[f+4>>2]=0,T2[(f=f+8|0)>>2]=0,T2[f+4>>2]=0,t=T2[92+c>>2]):(s=j2[36+c>>2],d=j2[52+c>>2],Q=j2[48+c>>2],g=j2[40+c>>2],Y=j2[32+c>>2],F=j2[56+c>>2],T2[(f=(G<<4)+Z|0)+12>>2]=0,W=z2(z2(d*Y)-z2(s*Q)),d=z2(z2(s*F)-z2(g*d)),Q=z2(z2(g*Q)-z2(F*Y)),s=z2(z2(1)/z2(_2(z2(z2(W*W)+z2(z2(d*d)+z2(Q*Q)))))),j2[f+8>>2]=W*s,j2[f+4>>2]=Q*s,s=z2(d*s),j2[f>>2]=s,t=T2[92+c>>2],j2[(o=w+t|0)+20>>2]=s,j2[o+24>>2]=j2[f+4>>2],j2[o+28>>2]=j2[f+8>>2],T2[o+32>>2]=1900671690),(0|(b=T2[(f=t+w|0)+4>>2]))<1)d=z2(1.0000000150474662e30);else if(v=T2[T2[A+60>>2]+16>>2],u=T2[f+12>>2],o=v+(T2[u>>2]<<4)|0,s=j2[(t=(G<<4)+Z|0)>>2],Q=j2[t+4>>2],g=j2[t+8>>2],d=(d=z2(z2(z2(j2[o>>2]*s)+z2(j2[o+4>>2]*Q))+z2(j2[o+8>>2]*g)))<z2(1.0000000150474662e30)?d:z2(1.0000000150474662e30),1!=(0|b))for(o=u+4|0,u=b-1|0;b=v+(T2[o>>2]<<4)|0,d=(Y=z2(z2(z2(j2[b>>2]*s)+z2(j2[b+4>>2]*Q))+z2(j2[b+8>>2]*g)))<d?Y:d,o=o+4|0,u=u-1|0;);if(j2[f+32>>2]=-d,(0|k)==(0|(G=G+1|0)))break;}}else j();if(1<=T2[84+c>>2]){for(b=v=D=0;;){if((0|b)==(0|v))if((b=v?v<<1:1)>>>0<=v>>>0)b=v;else {k=0,T2[5498]=T2[5498]+1,(f=K2(19+(b<<2)|0))&&(T2[(k=f+19&-16)-4>>2]=f);A:{if(v)for(o=k,t=D,u=v;T2[o>>2]=T2[t>>2],o=o+4|0,t=t+4|0,u=u-1|0;);else if(!D){b=1;break A;}T2[5499]=T2[5499]+1,q2(T2[D-4>>2]);}D=k;}if(!((0|(v=(T2[(v<<2)+D>>2]=v)+1|0))<T2[84+c>>2]))break;}for(M=52+c|0;;){f=T2[((b=v-1|0)<<2)+D>>2],T2[5498]=T2[5498]+1,C=0,(o=K2(23))&&(T2[(C=o+19&-16)-4>>2]=o),T2[C>>2]=f;A:{if((0|v)<2)m=1,v=b;else {for(f=(t=T2[92+c>>2])+P2(f,36)|0,s=j2[f+20>>2],d=j2[f+28>>2],Q=j2[f+24>>2],k=v-2|0,f=C,v=b,m=o=1;;){b=T2[(k<<2)+D>>2],t=P2(b,36)+t|0;f:if(z2(z2(z2(s*j2[t+20>>2])+z2(Q*j2[t+24>>2]))+z2(d*j2[t+28>>2]))>z2(.9990000128746033)){r:if((0|o)!=(0|m)||(0|(l=o?o<<1:1))<=(0|o))C=f,l=o;else {if(C=0,l&&(T2[5498]=T2[5498]+1,(t=K2(19+(l<<2)|0))&&(T2[(C=t+19&-16)-4>>2]=t)),1<=(0|o))for(t=C,u=f;T2[t>>2]=T2[u>>2],t=t+4|0,u=u+4|0,o=o-1|0;);else if(!f)break r;T2[5499]=T2[5499]+1,q2(T2[f-4>>2]);}if(T2[(m<<2)+C>>2]=b,m=m+1|0,!((0|v)<1)){for(t=0,o=D;(0|b)!=T2[o>>2];)if(o=o+4|0,(0|v)==(0|(t=t+1|0)))break f;(0|v)<=(0|t)||(T2[o>>2]=T2[(f=((v=v-1|0)<<2)+D|0)>>2],T2[f>>2]=b);}}else C=f,l=o;if(!(1<=(0|k)))break;k=k-1|0,t=T2[92+c>>2],f=C,o=l;}if((0|m)<=1){if(f=1!=(0|m),m=1,f)break A;}else {for(T2[20+c>>2]=k=0,p2[24+c|0]=1,T2[12+c>>2]=0,T2[16+c>>2]=0,d=z2(0),Q=z2(b=0),g=z2(0),u=0;;){if(o=T2[92+c>>2]+P2(T2[(u<<2)+C>>2],36)|0,s=j2[o+20>>2],Y=j2[o+28>>2],F=j2[o+24>>2],1<=(0|(f=T2[o+4>>2])))for(N=o+4|0,T=o+12|0,l=0;;){w=T2[T2[T>>2]+(l<<2)>>2],o=T2[T2[A+60>>2]+16>>2]+(w<<4)|0,h=T2[(G=o+8|0)+4>>2],T2[(t=B=176+c|0)>>2]=T2[G>>2],T2[t+4>>2]=h,t=T2[o+4>>2],T2[168+c>>2]=T2[o>>2],T2[172+c>>2]=t;f:{if(1<=(0|b)){for(t=1<(0|k)?k:1,o=T2[20+c>>2]+20|0;;){if((0|w)==T2[o>>2])break f;if(o=o+24|0,!(t=t-1|0))break;}b=k;}if(o=T2[B+4>>2],T2[(f=h=40+c|0)>>2]=T2[B>>2],T2[f+4>>2]=o,f=T2[172+c>>2],T2[32+c>>2]=T2[168+c>>2],T2[36+c>>2]=f,T2[16+c>>2]==(0|b)){if((0|(G=b?b<<1:1))<=(0|b))k=b;else {if(B=0,G&&(T2[5498]=T2[5498]+1,(f=K2(P2(G,24)+19|0))&&(T2[(B=f+19&-16)-4>>2]=f),b=k),f=T2[20+c>>2],1<=(0|b))for(o=B,t=f;I=T2[t+4>>2],T2[o>>2]=T2[t>>2],T2[o+4>>2]=I,U=T2[(V=t+16|0)+4>>2],T2[(I=o+16|0)>>2]=T2[V>>2],T2[I+4>>2]=U,U=T2[(V=t+8|0)+4>>2],T2[(I=o+8|0)>>2]=T2[V>>2],T2[I+4>>2]=U,o=o+24|0,t=t+24|0,b=b-1|0;);f&&S2[24+c|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]),k=T2[12+c>>2]),T2[20+c>>2]=B,p2[24+c|0]=1,T2[16+c>>2]=G;}}else k=b;b=T2[36+c>>2],o=T2[20+c>>2]+P2(k,24)|0,T2[o>>2]=T2[32+c>>2],T2[o+4>>2]=b,T2[o+20>>2]=w,T2[o+16>>2]=T2[48+c>>2],f=o+8|0,o=T2[h+4>>2],T2[f>>2]=T2[h>>2],T2[f+4>>2]=o,k=T2[12+c>>2]+1|0,T2[12+c>>2]=k,f=T2[N>>2];}if(b=k,!((0|(l=l+1|0))<(0|f)))break;}if(g=z2(s+g),d=z2(Y+d),Q=z2(F+Q),(0|(u=u+1|0))==(0|m))break;}T2[36+c>>2]=0,T2[40+c>>2]=0,f=T2[92+c>>2]+P2(T2[C>>2],36)|0,j2[52+c>>2]=j2[f+20>>2],j2[56+c>>2]=j2[f+24>>2],j2[60+c>>2]=j2[f+28>>2],T2[44+c>>2]=0,j2[64+c>>2]=j2[f+32>>2],s=z2(z2(1)/z2(_2(z2(z2(z2(g*g)+z2(Q*Q))+z2(d*d))))),Y=z2(Q*s),F=z2(g*s),p2[48+c|0]=1,W=z2(d*s),s=z2(O2(W))>z2(.7071067690849304)?(d=z2(z2(W*W)+z2(Y*Y)),s=z2(z2(1)/z2(_2(d))),X=z2(d*s),d=z2(s*z2(-W)),p=z2(F*d),g=z2(0),Q=z2(Y*s),z2(Q*z2(-F))):(d=z2(z2(F*F)+z2(Y*Y)),s=z2(z2(1)/z2(_2(d))),p=z2(d*s),d=z2(F*s),X=z2(d*z2(-W)),Q=z2(0),g=z2(s*z2(-Y)),z2(W*g));f:{r:{e:{i:if(2<=(0|k)){for(u=0,o=b=T2[20+c>>2];f=o+8|0,z2(z2(z2(g*j2[o>>2])+z2(d*j2[o+4>>2]))+z2(Q*j2[f>>2]))<z2(z2(z2(g*j2[b>>2])+z2(d*j2[b+4>>2]))+z2(Q*j2[b+8>>2]))&&(B=T2[b>>2],G=T2[b+4>>2],t=T2[o+4>>2],T2[b>>2]=T2[o>>2],T2[b+4>>2]=t,w=T2[(t=b+16|0)>>2],h=T2[t+4>>2],N=T2[(l=o+16|0)+4>>2],T2[t>>2]=T2[l>>2],T2[t+4>>2]=N,N=T2[(t=b+8|0)>>2],T=T2[t+4>>2],I=T2[f+4>>2],T2[t>>2]=T2[f>>2],T2[t+4>>2]=I,T2[o>>2]=B,T2[o+4>>2]=G,T2[l>>2]=w,T2[l+4>>2]=h,T2[f>>2]=N,T2[f+4>>2]=T),o=o+24|0,(0|(u=u+1|0))<(0|k););if(T2[b+16>>2]=-246811958,2<=(0|k))for(o=b+40|0,u=k-1|0,i=j2[b+8>>2],a=j2[b+4>>2],n=j2[b>>2];E=z2(j2[(f=o)-16>>2]-n),R=z2(j2[o-12>>2]-a),x=z2(j2[o-8>>2]-i),y=z2(z2(z2(X*E)+z2(s*R))+z2(p*x)),E=z2(z2(z2(g*E)+z2(d*R))+z2(Q*x)),E=z2(z2(y*y)+z2(E*E))<z2(1.1920928955078125e-7)?z2(0):(R=z2(O2(y)),E=E>=z2(0)?(x=z2(.7853981852531433),z2(z2(E-R)/z2(E+R))):(x=z2(2.356194496154785),z2(z2(E+R)/z2(R-E))),E=z2(x+z2(E*z2(-.7853981852531433))),y<z2(0)?z2(-E):E),j2[f>>2]=E,o=o+24|0,u=u-1|0;);if(t=T2[(o=b+8|0)+4>>2],T2[(f=176+c|0)>>2]=T2[o>>2],T2[f+4>>2]=t,f=T2[b+4>>2],T2[168+c>>2]=T2[b>>2],T2[172+c>>2]=f,function A(f,r,e,i){var a=z2(0),n=0,o=0,b=0,t=z2(0),c=0,u=0,k=0,l=0,s=0,v=z2(0),d=0,B=z2(0),Q=z2(0),g=z2(0),w=z2(0),G=0,C=0,E=0,D=0,h=z2(0),Z=z2(0),Y=z2(0),R=0;k=L2-32|0;L2=k;c=T2[f+12>>2];o=c+P2((e+i|0)/2|0,24)|0;D=T2[o+20>>2];B=j2[o+16>>2];h=j2[o+8>>2];Z=j2[o+4>>2];Y=j2[o>>2];o=e;u=i;for(;;){for(Q=j2[r>>2],t=z2(Y-Q),a=z2(t*t),g=j2[r+4>>2],t=z2(Z-g),a=z2(a+z2(t*t)),w=j2[r+8>>2],t=z2(h-w),t=z2(a+z2(t*t)),n=20+(P2(o,24)+c|0)|0;;){a:{n:{if((a=j2[n-4>>2])!=B){if(a<B)break n;break a;}if(a=z2(j2[n-20>>2]-Q),v=z2(a*a),a=z2(j2[n-16>>2]-g),v=z2(v+z2(a*a)),a=z2(j2[n-12>>2]-w),1!=(0|((a=z2(v+z2(a*a)))!=t?a<t:T2[n>>2]<(0|D))))break a;}n=n+24|0,o=o+1|0;continue;}break;}for(l=P2(u,24);;){a:{n:{if((a=j2[(G=(b=l+c|0)+16|0)>>2])!=B){if(B<a)break n;break a;}if(a=z2(j2[b>>2]-Q),v=z2(a*a),a=z2(j2[b+4>>2]-g),v=z2(v+z2(a*a)),a=z2(j2[b+8>>2]-w),1!=(0|((a=z2(v+z2(a*a)))!=t?t<a:T2[b+20>>2]>(0|D))))break a;}l=l-24|0,u=u-1|0;continue;}break;}if((0|o)<=(0|u)&&(s=T2[4+(C=(n=n-20|0)+16|0)>>2],T2[(c=24+k|0)>>2]=T2[(d=C)>>2],T2[c+4>>2]=s,R=T2[4+(d=n+8|0)>>2],T2[(s=E=16+k|0)>>2]=T2[d>>2],T2[4+s>>2]=R,s=T2[n+4>>2],T2[8+k>>2]=T2[n>>2],T2[12+k>>2]=s,s=T2[b+4>>2],T2[n>>2]=T2[b>>2],T2[n+4>>2]=s,b=T2[(n=b+8|0)+4>>2],T2[d>>2]=T2[n>>2],T2[4+d>>2]=b,n=T2[G+4>>2],T2[C>>2]=T2[G>>2],T2[4+C>>2]=n,n=T2[f+12>>2]+l|0,l=T2[12+k>>2],T2[n>>2]=T2[8+k>>2],T2[n+4>>2]=l,l=T2[c+4>>2],T2[(b=n+16|0)>>2]=T2[c>>2],T2[b+4>>2]=l,b=T2[4+E>>2],T2[(n=n+8|0)>>2]=T2[E>>2],T2[n+4>>2]=b,u=u-1|0,o=o+1|0),!((0|o)<=(0|u)))break;c=T2[f+12>>2];}(0|e)<(0|u)&&A(f,r,e,u);(0|o)<(0|i)&&A(f,r,o,i);L2=32+k|0;}(8+c|0,168+c|0,1,k-1|0),l=0,T2[5498]=T2[5498]+1,f=T2[20+c>>2],o=0,(b=K2(43))&&(T2[(o=b+19&-16)-4>>2]=b),t=T2[20+c>>2],b=T2[f+4>>2],T2[o>>2]=T2[f>>2],T2[o+4>>2]=b,B=T2[(u=f+16|0)+4>>2],T2[(b=o+16|0)>>2]=T2[u>>2],T2[b+4>>2]=B,B=T2[(f=f+8|0)+4>>2],T2[(u=k=o+8|0)>>2]=T2[f>>2],T2[u+4>>2]=B,T2[5498]=T2[5498]+1,(f=K2(67))&&(T2[(l=f+19&-16)-4>>2]=f),f=T2[o+4>>2],T2[l>>2]=T2[o>>2],T2[l+4>>2]=f,u=T2[b+4>>2],T2[(f=l+16|0)>>2]=T2[b>>2],T2[f+4>>2]=u,b=T2[k+4>>2],T2[(f=l+8|0)>>2]=T2[k>>2],T2[f+4>>2]=b,T2[5499]=T2[5499]+1,q2(T2[o-4>>2]),k=T2[(b=(f=t+24|0)+16|0)+4>>2],T2[(o=l+40|0)>>2]=T2[b>>2],T2[o+4>>2]=k,k=T2[(b=f+8|0)+4>>2],T2[(o=l+32|0)>>2]=T2[b>>2],T2[o+4>>2]=k,o=T2[f+4>>2],T2[l+24>>2]=T2[f>>2],T2[l+28>>2]=o,2!=T2[12+c>>2]){for(G=t=k=b=2;;){a:{n:{o:if(!((0|t)<2)){for(u=t<<1,o=(P2(t,24)+l|0)-48|0,f=T2[20+c>>2]+P2(G,24)|0,s=j2[f+8>>2],d=j2[f+4>>2],Q=j2[f>>2];;){if(g=j2[o>>2],E=z2(g-j2[o+24>>2]),R=j2[o+4>>2],y=z2(R-d),R=z2(R-j2[o+28>>2]),g=z2(g-Q),p=z2(z2(z2(E*y)-z2(R*g))*W),x=R,R=j2[o+8>>2],X=z2(R-s),R=z2(R-j2[o+32>>2]),z2(p+z2(z2(F*z2(z2(x*X)-z2(R*y)))+z2(Y*z2(z2(R*g)-z2(E*X)))))>z2(0)){if(!((0|u)<=(0|t))&&(0|b)==(0|t)){if(w=0,T2[5498]=T2[5498]+1,(o=K2(P2(b,48)+19|0))&&(T2[(w=o+19&-16)-4>>2]=o),1<=(0|k))for(o=w,t=l,b=k;B=T2[t+4>>2],T2[o>>2]=T2[t>>2],T2[o+4>>2]=B,N=T2[(h=t+16|0)+4>>2],T2[(B=o+16|0)>>2]=T2[h>>2],T2[B+4>>2]=N,N=T2[(h=t+8|0)+4>>2],T2[(B=o+8|0)>>2]=T2[h>>2],T2[B+4>>2]=N,o=o+24|0,t=t+24|0,b=b-1|0;);T2[5499]=T2[5499]+1,q2(T2[l-4>>2]),b=u,l=w,t=k;}u=T2[f+4>>2],o=P2(t,24)+l|0,T2[o>>2]=T2[f>>2],T2[o+4>>2]=u,B=T2[(u=f+16|0)+4>>2],T2[(t=o+16|0)>>2]=T2[u>>2],T2[t+4>>2]=B,t=T2[(f=f+8|0)+4>>2],T2[(o=o+8|0)>>2]=T2[f>>2],T2[o+4>>2]=t,t=k=k+1|0;break o;}if(o=o-24|0,u=u-2|0,!(2<((t=k=t-1|0)+1|0)))break;}k=1;break n;}if(1!=(0|t))break a;}if(t=T2[20+c>>2]+P2(G,24)|0,1==(0|b)){f=0,T2[5498]=T2[5498]+1,(o=K2(67))&&(T2[(f=o+19&-16)-4>>2]=o);n:{if(1<=(0|k))for(o=0,b=k;N=T2[(B=h=o+l|0)+4>>2],T2[(u=f+o|0)>>2]=T2[B>>2],T2[u+4>>2]=N,N=T2[(B=B+16|0)+4>>2],T2[(w=u+16|0)>>2]=T2[B>>2],T2[w+4>>2]=N,w=T2[(B=h+8|0)+4>>2],T2[(u=u+8|0)>>2]=T2[B>>2],T2[u+4>>2]=w,o=o+24|0,b=b-1|0;);else if(!l)break n;T2[5499]=T2[5499]+1,q2(T2[l-4>>2]);}b=2,l=f,f=k;}else f=1;u=T2[t+4>>2],f=P2(f,24)+l|0,T2[(o=f)>>2]=T2[t>>2],T2[o+4>>2]=u,B=T2[(u=t+16|0)+4>>2],T2[(o=o+16|0)>>2]=T2[u>>2],T2[o+4>>2]=B,t=T2[(o=t+8|0)+4>>2],T2[(f=f+8|0)>>2]=T2[o>>2],T2[f+4>>2]=t,t=k=k+1|0;}if((0|(G=G+1|0))==T2[12+c>>2])break;}if(0<(0|k))break i;break e;}k=2;}else {if(1!=((l=0)|k))break r;T2[5498]=T2[5498]+1,f=T2[20+c>>2],(o=K2(43))&&(T2[(l=o+19&-16)-4>>2]=o),o=T2[f+4>>2],T2[l>>2]=T2[f>>2],T2[l+4>>2]=o,k=T2[(b=f+16|0)+4>>2],T2[(o=l+16|0)>>2]=T2[b>>2],T2[o+4>>2]=k,b=T2[(f=f+8|0)+4>>2],T2[(o=l+8|0)>>2]=T2[f>>2],T2[o+4>>2]=b,k=1;}for(u=T2[40+c>>2],B=S2[48+c|(w=0)],f=T2[36+c>>2];;){if(h=20+(P2(w,24)+l|0)|0,(0|f)==(0|u))if((0|(b=u?u<<1:1))<=(0|u))f=u;else {G=0,b&&(T2[5498]=T2[5498]+1,(f=K2(19+(b<<2)|0))&&(T2[(G=f+19&-16)-4>>2]=f)),f=T2[44+c>>2];i:{if(1<=(0|u))for(o=G,t=f;T2[o>>2]=T2[t>>2],o=o+4|0,t=t+4|0,u=u-1|0;);else if(!f)break i;B&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),u=T2[36+c>>2];}f=u,T2[40+c>>2]=b,T2[44+c>>2]=G,B=1,u=b;}T2[T2[44+c>>2]+(f<<2)>>2]=T2[h>>2],T2[36+c>>2]=f=f+1|0;i:if(!(b=(0|(G=T2[12+c>>2]))<1)){for(o=T2[20+c>>2]+20|0,h=T2[h>>2],t=G;(0|h)!=T2[o>>2];)if(o=o+24|0,!(t=t-1|0))break i;T2[o>>2]=-1;}if((0|(w=w+1|0))==(0|k))break;}if(p2[48+c|0]=B,b)break r;}if(!((0|(k=T2[84+c>>2]))<1))for(B=T2[92+c>>2],w=T2[20+c>>2],G=1<(0|G)?G:1,f=0;;){if(-1!=(0|(h=T2[20+(w+P2(f,24)|0)>>2])))for(u=0;;){o=C,t=m;e:{for(;;){if(T2[o>>2]==(0|u))break e;if(o=o+4|0,!(t=t-1|0))break;}if(o=B+P2(u,36)|0,!((0|(t=T2[o+4>>2]))<1))for(o=T2[o+12>>2];;){if(b=1,(0|h)==T2[o>>2])break f;if(o=o+4|0,!(t=t-1|0))break;}}if((0|k)==(0|(u=u+1|0)))break;}if((0|G)==(0|(f=f+1|0)))break;}}D2(T2[A+60>>2]+24|0,32+c|0),b=0;}if(l&&(T2[5499]=T2[5499]+1,q2(T2[l-4>>2])),(f=T2[44+c>>2])&&S2[48+c|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),(f=T2[20+c>>2])&&S2[24+c|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),!b)break A;}}for(k=0;;){if(T2[44+c>>2]=0,f=T2[(k<<2)+C>>2],T2[40+c>>2]=0,b=T2[92+c>>2]+P2(f,36)|0,u=T2[b+4>>2],(p2[48+c|0]=1)<=(0|u)){for(o=0,T2[5498]=T2[5498]+1,(f=K2((t=u<<2)+19|0))&&(T2[(o=f+19&-16)-4>>2]=f,(f=T2[44+c>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),T2[44+c>>2]=o,p2[48+c|0]=1,T2[40+c>>2]=u,d2(o,0,t),T2[36+c>>2]=u,t=T2[b+12>>2];T2[o>>2]=T2[t>>2],o=o+4|0,t=t+4|0,u=u-1|0;);t=S2[48+c|0],f=T2[44+c>>2];}else T2[36+c>>2]=u,t=1,f=0;if(o=T2[b+24>>2],T2[M>>2]=T2[b+20>>2],T2[M+4>>2]=o,u=T2[(b=b+28|0)+4>>2],T2[(o=M+8|0)>>2]=T2[b>>2],T2[o+4>>2]=u,D2(T2[A+60>>2]+24|0,32+c|0),f&&255&t&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),(0|m)==(0|(k=k+1|0)))break;}}if(C&&(T2[5499]=T2[5499]+1,q2(T2[C-4>>2])),!v)break;}if(b2(T2[A+60>>2]),D&&(T2[5499]=T2[5499]+1,q2(T2[D-4>>2])),!((0|(t=T2[84+c>>2]))<1))for(o=T2[92+c>>2]+8|0;(f=T2[(A=o+4|0)>>2])&&S2[o+8|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A>>2]=0,p2[o+8|0]=1,T2[(A=o-4|0)>>2]=0,o=o+36|(T2[A+4>>2]=0),t=t-1|0;);}else b2(T2[A+60>>2]);return (A=T2[92+c>>2])&&S2[96+c|0]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),Z&&(T2[5499]=T2[5499]+1,q2(T2[Z-4>>2])),(A=T2[156+c>>2])&&S2[160+c|0]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),T2[156+c>>2]=0,p2[160+c|0]=1,T2[148+c>>2]=0,T2[152+c>>2]=0,(A=T2[136+c>>2])&&S2[140+c|0]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),T2[136+c>>2]=0,p2[140+c|0]=1,T2[128+c>>2]=0,T2[132+c>>2]=0,(A=T2[116+c>>2])&&S2[120+c|0]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),J&&(T2[5499]=T2[5499]+1,q2(T2[J-4>>2])),L2=208+c|0,1;},Y2,R2,V2,function(A,f,r){A|=0,f=z2(f),r|=0,z2(0);var e=j2[A+44>>2],i=j2[A+40>>2],a=j2[A+36>>2],n=z2(n1[T2[T2[A>>2]+48>>2]](A)),o=z2(n1[T2[T2[A>>2]+48>>2]](A)),A=z2(n1[T2[T2[A>>2]+48>>2]](A));T2[r+12>>2]=0,f=z2(f/z2(12)),a=z2(a+n),a=z2(a+a),a=z2(a*a),i=z2(i+o),i=z2(i+i),i=z2(i*i),j2[r+8>>2]=f*z2(a+i),e=z2(e+A),e=z2(e+e),e=z2(e*e),j2[r+4>>2]=f*z2(a+e),j2[r>>2]=f*z2(i+e);},function(A){return 8474;},Z2,function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0),e=(j2[f+40>>2]),i=j2[f+44>>2],a=j2[f+36>>2],n=z2(n1[T2[T2[f>>2]+48>>2]](f)),o=z2(n1[T2[T2[f>>2]+48>>2]](f)),f=z2(n1[T2[T2[f>>2]+48>>2]](f));T2[A+12>>2]=0,i=z2(i+f),j2[A+8>>2]=j2[r+8>>2]>=z2(0)?i:z2(-i),e=z2(e+o),j2[A+4>>2]=j2[r+4>>2]>=z2(0)?e:z2(-e),e=z2(a+n),j2[A>>2]=j2[r>>2]>=z2(0)?e:z2(-e);},function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0);T2[A+12>>2]=0,e=j2[f+36>>2],j2[A>>2]=j2[r>>2]>=z2(0)?e:z2(-e),e=j2[f+44>>2],j2[A+8>>2]=j2[r+8>>2]>=z2(0)?e:z2(-e),e=j2[f+40>>2],j2[A+4>>2]=j2[r+4>>2]>=z2(0)?e:z2(-e);},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c,u=0;if(1<=(0|e))for(;b=j2[4+(i=f+u|0)>>2],t=j2[8+i>>2],c=j2[i>>2],a=j2[A+40>>2],n=j2[A+44>>2],o=j2[A+36>>2],T2[12+(i=r+u|0)>>2]=0,j2[i>>2]=c>=z2(0)?o:z2(-o),j2[8+i>>2]=t>=z2(0)?n:z2(-n),j2[4+i>>2]=b>=z2(0)?a:z2(-a),u=u+16|0,e=e-1|0;);},M2,function(A,f,r){A|=0,r|=0,(f|=0)>>>0<=5&&(T2[r+12>>2]=0,j2[r+8>>2]=j2[(A=f<<2)+8424>>2],j2[r+4>>2]=j2[A+8400>>2],j2[r>>2]=j2[A+8376>>2]);},function(A){return 8;},e2,function(A,f,r,e){e|=0;var i=0;f=(f|=0)>>>0<=11?(i=T2[(f<<=2)+8328>>2],T2[f+8280>>2]):0,n1[T2[T2[(A|=0)>>2]+108>>2]](A,f,r|=0),n1[T2[T2[A>>2]+108>>2]](A,i,e);},function(A,f,r){A|=0,f|=0,r|=0,z2(0);var e=j2[A+44>>2],i=j2[A+40>>2],a=j2[A+36>>2],n=z2(n1[T2[T2[A>>2]+48>>2]](A)),o=z2(n1[T2[T2[A>>2]+48>>2]](A)),b=z2(n1[T2[T2[A>>2]+48>>2]](A));T2[r+12>>2]=0,i=z2(i+o),j2[r+4>>2]=z2(i*z2(0|!(A=f>>>1&1)))-z2(i*z2(0|A)),i=z2(a+n),j2[r>>2]=z2(i*z2(0|!(A=1&f)))-z2(i*z2(0|A)),e=z2(e+b),j2[r+8>>2]=z2(e*z2(0|!(A=f>>>2&1)))-z2(e*z2(0|A));},M2,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o=0;L2=o=L2-48|0,n1[T2[T2[A>>2]+124>>2]](A,32+o|0,e),T2[f+12>>2]=0,i=j2[40+o>>2],j2[f+8>>2]=i,a=j2[36+o>>2],j2[f+4>>2]=a,n=j2[32+o>>2],j2[f>>2]=n,T2[12+o>>2]=0,j2[8+o>>2]=-i,j2[4+o>>2]=-a,j2[o>>2]=-n,n1[T2[T2[A>>2]+64>>2]](16+o|0,A,o),e=T2[(f=24+o|0)+4>>2],T2[(A=r+8|0)>>2]=T2[f>>2],T2[A+4>>2]=e,A=T2[20+o>>2],T2[r>>2]=T2[16+o>>2],T2[r+4>>2]=A,L2=48+o|0;},function(A,f,r){A|=0,f|=0,r=z2(r),z2(0);var e=0,i=j2[f>>2],a=j2[A+36>>2];return i<=z2(a+r)&&i>=z2(z2(-a)-r)&&(i=j2[f+4>>2],a=j2[A+40>>2],i<=z2(a+r)&&i>=z2(z2(-a)-r)&&(i=j2[f+8>>2],a=j2[A+44>>2],i<=z2(a+r)&&(e=i>=z2(z2(-a)-r)))),0|e;},function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0),i=z2(0),a=z2(0),n=(z2(0)),o=j2[A+44>>2],b=j2[A+40>>2],e=j2[A+36>>2],i=z2(1);A:{f:{r:{e:{i:switch(0|r){case 1:i=z2(-1);break f;case 2:a=z2(1);break r;case 3:a=z2(-1);break r;case 4:e=z2(1);break e;case 0:break f;case 5:break i;default:break A;}e=z2(-1);}n=e,i=z2(0),e=o;break f;}i=z2(0),e=b;}j2[f+8>>2]=n,j2[f+4>>2]=a,j2[f>>2]=i,j2[f+12>>2]=-e;}},_,I2,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0,z2(0);var i,a,n,o,b,t,c,u,k,l,s,v,d=0,B=(A+36|0);A=T2[A+60>>2],a=j2[B+((A+2|0)%3<<2)>>2],j2[8+(d=L2-16|0)>>2]=a,j2[4+d>>2]=a,j2[d>>2]=a,j2[(A<<=2)+d>>2]=a+j2[A+B>>2],a=j2[f+56>>2],u=j2[f+40>>2],k=j2[f+36>>2],t=j2[f+52>>2],b=j2[f+24>>2],l=j2[f+20>>2],s=j2[f+32>>2],v=j2[f+16>>2],c=j2[f+48>>2],n=j2[f+8>>2],i=j2[f>>2],o=j2[f+4>>2],T2[r+12>>2]=0,A=z2(O2(i)),i=j2[d>>2],B=z2(O2(o)),o=j2[4+d>>2],f=z2(O2(n)),n=j2[8+d>>2],A=z2(z2(z2(A*i)+z2(B*o))+z2(f*n)),j2[r>>2]=c-A,b=z2(z2(z2(i*z2(O2(v)))+z2(o*z2(O2(l))))+z2(n*z2(O2(b)))),j2[r+4>>2]=t-b,i=z2(z2(z2(i*z2(O2(s)))+z2(o*z2(O2(k))))+z2(n*z2(O2(u)))),j2[r+8>>2]=a-i,j2[e>>2]=c+A,j2[e+4>>2]=t+b,j2[e+8>>2]=a+i,T2[e+12>>2]=0;},function(A,f){A|=0,f|=0,z2(0);var r,e,i,a=j2[f>>2],n=j2[f+4>>2],o=j2[f+8>>2];T2[A+32>>2]=0,r=j2[(i=A+28|0)>>2],j2[i>>2]=O2(o),o=j2[(i=A+24|0)>>2],j2[i>>2]=O2(n),n=j2[A+20>>2],j2[A+20>>2]=O2(a),a=j2[f+8>>2],e=j2[f+4>>2],i=j2[f>>2],T2[A+48>>2]=0,j2[A+36>>2]=i*z2(j2[A+36>>2]/n),j2[(f=A+40|0)>>2]=e*z2(j2[f>>2]/o),j2[(f=A+44|0)>>2]=a*z2(j2[f>>2]/r),j2[A+52>>2]=j2[(A+36|0)+((T2[A+60>>2]+2|0)%3<<2)>>2];},function(A,f,r){A|=0,f=z2(f),r|=0,z2(0);var e,i=0,a=0,i=(T2[A+60>>2]),n=j2[(a=A+36|0)+((i+2|0)%3<<2)>>2];T2[(A=L2-16|0)+12>>2]=0,j2[A+8>>2]=n,j2[A+4>>2]=n,j2[A>>2]=n,j2[(e=(i<<=2)+A|0)>>2]=j2[i+a>>2]+j2[e>>2],f=z2(f*z2(.0833333283662796)),n=j2[A>>2],n=z2(n+n),n=z2(n*n),a=j2[A+4>>2],a=z2(a+a),a=z2(a*a),j2[r+8>>2]=f*z2(n+a),e=n,n=j2[A+8>>2],n=z2(n+n),n=z2(n*n),j2[r+4>>2]=f*z2(e+n),j2[r>>2]=f*z2(a+n);},function(A){return 8623;},x2,y2,U2,function(A,f,r){f|=0;var e=0|n1[T2[T2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|n1[T2[T2[r>>2]+28>>2]](r,e);return (T2[f>>2]=i)&&n1[T2[T2[r>>2]+48>>2]](r,e),r=T2[A+4>>2],T2[f+8>>2]=0,j2[f+28>>2]=j2[A+36>>2],j2[f+32>>2]=j2[A+40>>2],j2[f+36>>2]=j2[A+44>>2],j2[f+40>>2]=j2[A+48>>2],j2[f+12>>2]=j2[A+20>>2],j2[f+16>>2]=j2[A+24>>2],j2[f+20>>2]=j2[A+28>>2],j2[f+24>>2]=j2[A+32>>2],T2[f+4>>2]=r,j2[f+44>>2]=j2[A+52>>2],T2[f+48>>2]=0,A=T2[A+60>>2],T2[f+56>>2]=0,T2[f+52>>2]=A,8604;},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n=z2(0),o=z2(0),b=z2(0),t=z2(0),c=z2(0),u=z2(0),k=z2(0),l=(L2-16|0);T2[A>>2]=0,T2[A+4>>2]=0,T2[(a=A+8|0)>>2]=0,T2[4+a>>2]=0,o=j2[r>>2],b=j2[r+4>>2],n=j2[r+8>>2],o=(t=z2(z2(z2(o*o)+z2(b*b))+z2(n*n)))<z2(9999999747378752e-20)?(t=z2(0),z2(1)):(c=n,n=z2(z2(1)/z2(_2(t))),k=z2(c*n),t=z2(b*n),z2(o*n)),T2[(r=8+l|0)>>2]=0,T2[r+4>>2]=0,T2[l>>2]=0,T2[4+l>>2]=0,a=T2[f+60>>2]<<2,c=j2[36+(f+a|0)>>2],j2[(e=l+a|0)>>2]=c,b=z2(-0xde0b6b000000000),u=j2[l>>2],i=j2[4+l>>2],a=j2[r>>2],(n=z2(z2(z2(o*u)+z2(t*i))+z2(k*a)))>z2(-0xde0b6b000000000)&&(j2[A+12>>2]=j2[12+l>>2],j2[A+8>>2]=a,j2[A+4>>2]=i,j2[A>>2]=u,b=n),T2[(r=f=8+l|0)>>2]=0,T2[r+4>>2]=0,T2[l>>2]=0,T2[4+l>>2]=0,j2[e>>2]=-c,c=b,u=o,o=j2[l>>2],b=j2[4+l>>2],n=j2[r>>2],c<z2(z2(z2(u*o)+z2(t*b))+z2(k*n))&&(j2[A+12>>2]=j2[12+l>>2],j2[A+8>>2]=n,j2[A+4>>2]=b,j2[A>>2]=o);},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c=0,u=z2(0),k=z2(0),l=z2(0),s=z2(0),v=0,d=z2(0),B=z2(0),Q=z2(0),g=(L2-16|0);if(1<=(0|e))for(;T2[(i=8+g|0)>>2]=0,T2[4+i>>2]=0,T2[g>>2]=0,T2[4+g>>2]=0,c=T2[A+60>>2],u=j2[36+((a=c<<2)+A|0)>>2],j2[g+a>>2]=u,k=z2(-0xde0b6b000000000),s=j2[g>>2],d=j2[(a=f+v|0)>>2],n=j2[4+g>>2],B=j2[(o=4+a|0)>>2],b=j2[i>>2],Q=j2[(t=8+a|0)>>2],(l=z2(z2(z2(s*d)+z2(n*B))+z2(b*Q)))>z2(-0xde0b6b000000000)&&(j2[(c=r+v|0)>>2]=s,j2[c+12>>2]=j2[12+g>>2],j2[c+8>>2]=b,j2[c+4>>2]=n,Q=j2[t>>2],B=j2[o>>2],c=T2[A+60>>2],u=j2[36+((c<<2)+A|0)>>2],d=j2[a>>2],k=l),T2[i>>2]=0,T2[4+i>>2]=0,T2[g>>2]=0,T2[4+g>>2]=0,j2[(c<<2)+g>>2]=-u,s=k,k=j2[g>>2],l=j2[4+g>>2],u=j2[i>>2],s<z2(z2(z2(k*d)+z2(l*B))+z2(u*Q))&&(j2[(i=r+v|0)>>2]=k,j2[12+i>>2]=j2[12+g>>2],j2[8+i>>2]=u,j2[4+i>>2]=l),v=v+16|0,e=e-1|0;);},I2,R2,V2,function(A,f,r){A|=0,f=z2(f),r|=0;var e,i,a,n=z2(0),o=z2(0),b=z2(0),b=(j2[A+44>>2]),n=j2[A+40>>2],t=j2[A+36>>2],c=z2(n1[T2[T2[A>>2]+48>>2]](A));n=z2(n+z2(n1[T2[T2[A>>2]+48>>2]](A))),a=z2(n1[T2[T2[A>>2]+48>>2]](A)),o=z2(f*z2(.5)),e=z2(f*z2(.25)),i=z2(f/z2(12)),f=z2(c+t);A:{f:switch(T2[A+60>>2]){case 0:b=o,o=z2(n*n),n=z2(b*o),o=f=z2(z2(e*o)+z2(i*z2(f*z2(f*z2(4)))));break A;case 2:f=z2(f*f),o=z2(o*f),n=z2(e*f),f=z2(a+b),f=n=z2(n+z2(i*z2(f*z2(f*z2(4)))));break A;default:break f;}b=o,o=z2(f*f),f=z2(b*o),o=n=z2(z2(e*o)+z2(i*z2(n*z2(n*z2(4)))));}T2[r+12>>2]=0,j2[r+8>>2]=o,j2[r+4>>2]=f,j2[r>>2]=n;},function(A){return 8792;},x2,Z2,U2,function(A,f,r){f|=0;var e=0|n1[T2[T2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|n1[T2[T2[r>>2]+28>>2]](r,e);return (T2[f>>2]=i)&&n1[T2[T2[r>>2]+48>>2]](r,e),r=T2[A+4>>2],T2[f+8>>2]=0,j2[f+28>>2]=j2[A+36>>2],j2[f+32>>2]=j2[A+40>>2],j2[f+36>>2]=j2[A+44>>2],j2[f+40>>2]=j2[A+48>>2],j2[f+12>>2]=j2[A+20>>2],j2[f+16>>2]=j2[A+24>>2],j2[f+20>>2]=j2[A+28>>2],j2[f+24>>2]=j2[A+32>>2],T2[f+4>>2]=r,j2[f+44>>2]=j2[A+52>>2],T2[f+48>>2]=0,A=T2[A+60>>2],T2[f+56>>2]=0,T2[f+52>>2]=A,8772;},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n=z2(0),o=z2(0),b=z2(0),t=0;L2=t=L2-16|0,n1[T2[T2[f>>2]+68>>2]](t,f,r),a=T2[4+(i=8+t|0)>>2],T2[(e=A+8|0)>>2]=T2[i>>2],T2[4+e>>2]=a,e=T2[4+t>>2],T2[A>>2]=T2[t>>2],T2[A+4>>2]=e,z2(n1[T2[T2[f>>2]+48>>2]](f))!=z2(0)&&(o=j2[r+4>>2],n=j2[r>>2],b=j2[r+8>>2],e=z2(n1[T2[T2[f>>2]+48>>2]](f)),r=n=(f=z2(z2(z2(n*n)+z2(o*o))+z2(b*b))<z2(14210854715202004e-30))?z2(-1):n,b=f?z2(-1):b,o=f?z2(-1):o,n=z2(z2(1)/z2(_2(z2(z2(b*b)+z2(z2(n*n)+z2(o*o)))))),j2[A>>2]=j2[A>>2]+z2(e*z2(r*n)),j2[A+4>>2]=j2[A+4>>2]+z2(e*z2(o*n)),j2[A+8>>2]=j2[A+8>>2]+z2(e*z2(b*n))),L2=16+t|0;},function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0),i=z2(0),a=(z2(0)),n=z2(0),e=j2[f+40>>2],i=j2[f+36>>2],o=j2[r>>2],f=j2[r+8>>2];e=((a=z2(_2(z2(z2(o*o)+z2(f*f)))))==z2(0)||(i=z2(i/a),n=z2(f*i),i=z2(o*i)),j2[r+4>>2]<z2(0)?z2(-e):e),j2[A+8>>2]=n,j2[A+4>>2]=e,j2[A>>2]=i;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n=z2(0),o=z2(0),b=z2(0);if(1<=(0|e))for(;n=j2[A+40>>2],o=j2[A+36>>2],i=j2[f>>2],b=j2[f+8>>2],n=((a=z2(_2(z2(z2(i*i)+z2(b*b)))))==z2(0)?b=z2(0):(o=z2(o/a),b=z2(b*o),o=z2(i*o)),j2[f+4>>2]<z2(0)?z2(-n):n),j2[r>>2]=o,j2[r+8>>2]=b,j2[r+4>>2]=n,f=f+16|0,r=r+16|0,e=e-1|0;);},function(A){A|=0,z2(0);var f=j2[A+36>>2],r=z2(n1[T2[T2[A>>2]+48>>2]](A));return z2(n1[T2[T2[A>>2]+48>>2]](A)),z2(n1[T2[T2[A>>2]+48>>2]](A)),z2(z2(f+r));},I2,function(A,f){A|=0,f|=0;var r=0,e=(T2[A+76>>2]<<2),i=j2[e+f>>2],a=z2(j2[A+68>>2]*z2(i/j2[(r=e)+(e=A+20|0)>>2]));j2[A+68>>2]=a,r=T2[A+72>>2]<<2,i=z2(j2[r+f>>2]/j2[e+r>>2]),r=T2[A+80>>2]<<2,r=z2(j2[A+64>>2]*z2(z2(i+z2(j2[r+f>>2]/j2[e+r>>2]))*z2(.5))),j2[A+64>>2]=r,j2[A+60>>2]=r/z2(_2(z2(z2(a*a)+z2(r*r)))),r=j2[f+8>>2],a=j2[f+4>>2],i=j2[f>>2],T2[A+32>>2]=0,j2[A+20>>2]=O2(i),j2[A+24>>2]=O2(a),j2[A+28>>2]=O2(r);},function(A,f,r){A|=0,f=z2(f),r|=0;var e,i,a,n,o,b,t=0;T2[(b=44+(L2=t=L2-96|0)|0)>>2]=0,T2[4+b>>2]=0,T2[(b=56+t|0)>>2]=0,T2[4+b>>2]=0,T2[52+t>>2]=1065353216,T2[(b=t+64|0)>>2]=0,T2[4+b>>2]=0,T2[(b=76+t|0)>>2]=0,T2[4+b>>2]=0,T2[72+t>>2]=1065353216,T2[(b=84+t|0)>>2]=0,T2[4+b>>2]=0,T2[92+t>>2]=0,T2[36+t>>2]=0,T2[40+t>>2]=0,T2[32+t>>2]=1065353216,n1[T2[T2[A>>2]+8>>2]](A,32+t|0,16+t|0,t),a=j2[24+t>>2],n=j2[8+t>>2],e=j2[16+t>>2],i=j2[t>>2],o=j2[20+t>>2],b=j2[4+t>>2],A=z2(n1[T2[T2[A>>2]+48>>2]](A)),T2[r+12>>2]=0,f=z2(f*z2(.0833333283662796)),e=z2(A+z2(z2(i-e)*z2(.5))),e=z2(e+e),e=z2(e*e),i=z2(A+z2(z2(b-o)*z2(.5))),i=z2(i+i),i=z2(i*i),j2[r+8>>2]=f*z2(e+i),A=z2(A+z2(z2(n-a)*z2(.5))),A=z2(A+A),A=z2(A*A),j2[r+4>>2]=f*z2(e+A),j2[r>>2]=f*z2(i+A),L2=96+t|0;},function(A){return 8948;},function(A,f){T2[(A|=0)+8>>2]=0,T2[A+12>>2]=0,T2[A>>2]=0,T2[A+4>>2]=1065353216;},U2,function(A,f,r){A|=0,f|=0,r|=0,z2(0);var e=0|n1[T2[T2[r>>2]+40>>2]](r,A),i=0|n1[T2[T2[r>>2]+28>>2]](r,e);return (T2[f>>2]=i)&&n1[T2[T2[r>>2]+48>>2]](r,e),r=T2[A+4>>2],T2[f+8>>2]=0,j2[f+28>>2]=j2[A+36>>2],j2[f+32>>2]=j2[A+40>>2],j2[f+36>>2]=j2[A+44>>2],j2[f+40>>2]=j2[A+48>>2],j2[f+12>>2]=j2[A+20>>2],j2[f+16>>2]=j2[A+24>>2],j2[f+20>>2]=j2[A+28>>2],j2[f+24>>2]=j2[A+32>>2],T2[f+4>>2]=r,r=j2[A+52>>2],T2[f+48>>2]=0,j2[f+44>>2]=r,A=T2[A+76>>2],T2[f+56>>2]=0,T2[f+52>>2]=A,8932;},function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0),i=z2(0),a=z2(0),n=z2(0),o=0,b=z2(0),t=0,i=z2(j2[f+68>>2]*z2(.5)),c=T2[f+72>>2],o=(t=T2[f+76>>2])<<2,e=j2[r>>2],n=z2(e*e);e=j2[r+4>>2],n=z2(n+z2(e*e)),e=j2[r+8>>2];A:{if(j2[o+r>>2]>z2(j2[f+60>>2]*z2(_2(z2(n+z2(e*e))))))T2[(c<<2)+A>>2]=0,j2[A+o>>2]=i,o=T2[f+80>>2];else {if(e=j2[(c<<2)+r>>2],o=T2[f+80>>2],a=j2[(o<<2)+r>>2],(b=z2(_2(z2(z2(e*e)+z2(a*a)))))>z2(1.1920928955078125e-7)){n=e,e=z2(j2[f+64>>2]/b),j2[(c<<2)+A>>2]=n*e,j2[(t<<2)+A>>2]=-i,i=z2(a*e);break A;}T2[(c<<2)+A>>2]=0,j2[(t<<2)+A>>2]=-i;}i=z2(0);}j2[(o<<2)+A>>2]=i,z2(n1[T2[T2[f>>2]+48>>2]](f))!=z2(0)&&(i=j2[r+4>>2],e=j2[r>>2],a=j2[r+8>>2],b=z2(n1[T2[T2[f>>2]+48>>2]](f)),n=e=(f=z2(z2(z2(e*e)+z2(i*i))+z2(a*a))<z2(14210854715202004e-30))?z2(-1):e,a=f?z2(-1):a,i=f?z2(-1):i,e=z2(z2(1)/z2(_2(z2(z2(a*a)+z2(z2(e*e)+z2(i*i)))))),j2[A>>2]=j2[A>>2]+z2(b*z2(n*e)),j2[A+4>>2]=j2[A+4>>2]+z2(b*z2(i*e)),j2[A+8>>2]=j2[A+8>>2]+z2(b*z2(a*e)));},function(A,f,r){A|=0,f|=0,r|=0,z2(0);var e,i,a=z2(0),n=z2(0),o=0,b=0,a=(z2(j2[f+68>>2]*z2(.5))),t=T2[f+72>>2],o=(b=T2[f+76>>2])<<2,c=j2[r>>2],n=z2(c*c);c=j2[r+4>>2],n=z2(n+z2(c*c)),c=j2[r+8>>2];A:{if(j2[o+r>>2]>z2(j2[f+60>>2]*z2(_2(z2(n+z2(c*c))))))T2[(t<<2)+A>>2]=0,j2[A+o>>2]=a,r=T2[f+80>>2];else {if(c=j2[(t<<2)+r>>2],o=r,r=T2[f+80>>2],e=j2[o+(r<<2)>>2],(i=z2(_2(z2(z2(c*c)+z2(e*e)))))>z2(1.1920928955078125e-7)){n=c,c=z2(j2[f+64>>2]/i),j2[(t<<2)+A>>2]=n*c,j2[(b<<2)+A>>2]=-a,a=z2(e*c);break A;}T2[(t<<2)+A>>2]=0,j2[(b<<2)+A>>2]=-a;}a=z2(0);}j2[(r<<2)+A>>2]=a;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0,z2(0);var i,a,n,o=0,b=0,t=z2(0),c=z2(0),u=0,k=(L2-16|0);if(1<=(0|e))for(;;){t=z2(j2[A+68>>2]*z2(.5)),o=T2[A+72>>2],b=T2[A+76>>2]<<2,i=j2[f>>2],c=z2(i*i),i=j2[f+4>>2],c=z2(c+z2(i*i)),i=j2[f+8>>2];A:{if(j2[b+f>>2]>z2(j2[A+60>>2]*z2(_2(z2(c+z2(i*i))))))T2[(o<<2)+k>>2]=0,j2[k+b>>2]=t,o=T2[A+80>>2];else {if(i=j2[(u=o<<2)+f>>2],o=T2[A+80>>2],a=j2[(o<<2)+f>>2],(n=z2(_2(z2(z2(i*i)+z2(a*a)))))>z2(1.1920928955078125e-7)){c=i,i=z2(j2[A+64>>2]/n),j2[k+u>>2]=c*i,j2[k+b>>2]=-t,t=z2(a*i);break A;}T2[k+u>>2]=0,j2[k+b>>2]=-t;}t=z2(0);}if(j2[(o<<2)+k>>2]=t,b=T2[4+k>>2],T2[r>>2]=T2[k>>2],T2[r+4>>2]=b,u=T2[(o=8+k|0)+4>>2],T2[(b=r+8|0)>>2]=T2[o>>2],T2[b+4>>2]=u,f=f+16|0,r=r+16|0,!(e=e-1|0))break;}},_,I2,function(A,f,r,e){e|=0,T2[(r|=0)+8>>2]=-581039253,T2[r+12>>2]=0,T2[r>>2]=-581039253,T2[r+4>>2]=-581039253,T2[e+8>>2]=1566444395,T2[e+12>>2]=0,T2[e>>2]=1566444395,T2[e+4>>2]=1566444395;},function(A,f){var r=T2[(f|=0)+4>>2];T2[(A|=0)+76>>2]=T2[f>>2],T2[A+80>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+84|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},function(A){return (A|=0)+76|0;},X2,function(A){return 9111;},function(A,f){A|=0,f=z2(f),j2[A+20>>2]=f;},function(A){return z2(j2[(A|=0)+20>>2]);},J2,function(A,f,r){A|=0,f|=0,r|=0,z2(0);var e=0|n1[T2[T2[r>>2]+40>>2]](r,A),i=0|n1[T2[T2[r>>2]+28>>2]](r,e);return (T2[f>>2]=i)&&n1[T2[T2[r>>2]+48>>2]](r,e),r=T2[A+4>>2],T2[f+8>>2]=0,j2[f+12>>2]=j2[A+76>>2],j2[f+16>>2]=j2[A+80>>2],j2[f+20>>2]=j2[A+84>>2],j2[f+24>>2]=j2[A+88>>2],j2[f+28>>2]=j2[A+56>>2],j2[f+32>>2]=j2[A+60>>2],j2[f+36>>2]=j2[A- -64>>2],j2[f+40>>2]=j2[A+68>>2],T2[f+4>>2]=r,A=j2[A+72>>2],T2[f+48>>2]=0,j2[f+44>>2]=A,9088;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c,u,k,l=z2(0),s=z2(0),v=0,d=(z2(0)),B=(z2(0)),Q=(z2(0)),g=(z2(0)),w=z2(0),G=z2(0),C=(z2(0));L2=v=L2-48|0,B=j2[e>>2],d=j2[r>>2],i=z2(z2(B-d)*z2(.5)),a=z2(i*i),s=j2[e+4>>2],l=j2[r+4>>2],i=z2(z2(s-l)*z2(.5)),o=z2(a+z2(i*i)),a=j2[e+8>>2],n=j2[r+8>>2],i=z2(z2(a-n)*z2(.5)),i=z2(_2(z2(o+z2(i*i)))),a=z2(z2(a+n)*z2(.5)),n=z2(z2(s+l)*z2(.5)),b=z2(z2(B+d)*z2(.5)),B=j2[A- -64>>2],z2(O2(B))>z2(.7071067690849304)?(d=j2[A+60>>2],s=z2(z2(B*B)+z2(d*d)),l=z2(z2(1)/z2(_2(s))),g=z2(s*l),Q=z2(d*l),s=j2[A+56>>2],w=z2(Q*z2(-s)),l=z2(l*z2(-B)),G=z2(s*l)):(s=j2[A+56>>2],d=j2[A+60>>2],g=z2(z2(s*s)+z2(d*d)),l=z2(z2(1)/z2(_2(g))),G=z2(g*l),C=z2(l*z2(-d)),w=z2(B*C),l=z2(s*l),g=z2(l*z2(-B))),k=j2[A+72>>2],T2[(A=44+v|0)>>2]=0,e=40+v|(T2[(r=28+v|0)>>2]=0),a=z2(z2(z2(B*(o=a))+z2(z2(b*s)+z2(n*d)))-k),k=z2(o-z2(B*a)),Q=z2(i*Q),o=z2(k-Q),B=z2(i*G),G=z2(o-B),j2[e>>2]=G,t=36+v|0,n=z2(n-z2(d*a)),l=z2(i*l),c=z2(n-l),d=z2(i*w),w=z2(c-d),j2[t>>2]=w,u=24+v|0,Q=z2(Q+k),j2[u>>2]=Q-B,k=20+v|0,l=z2(l+n),j2[k>>2]=l-d,T2[12+v>>2]=0,s=z2(b-z2(s*a)),a=z2(i*C),n=z2(s-a),i=z2(i*g),b=z2(n-i),j2[32+v>>2]=b,s=z2(a+s),j2[16+v>>2]=s-i,a=z2(B+Q),j2[8+v>>2]=a,l=z2(d+l),j2[4+v>>2]=l,s=z2(i+s),j2[v>>2]=s,n1[T2[T2[f>>2]+8>>2]](f,v,0,0),T2[A>>2]=0,j2[e>>2]=a,j2[t>>2]=l,T2[r>>2]=0,j2[u>>2]=B+o,j2[k>>2]=d+c,j2[32+v>>2]=s,j2[16+v>>2]=i+n,T2[12+v>>2]=0,j2[8+v>>2]=G,j2[4+v>>2]=w,j2[v>>2]=b,n1[T2[T2[f>>2]+8>>2]](f,v,0,1),L2=48+v|0;},o0,function(A){var f=0;T2[(A|=0)>>2]=9180,(f=T2[A+72>>2])&&(A0(f),(f=T2[A+72>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,p2[A+36|0]=1,T2[(f=A+24|0)>>2]=0,T2[f+4>>2]=0,T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i=z2(0),a=z2(0),n=z2(0),o=z2(0),b=z2(0),t=(z2(0)),c=(z2(0)),u=(z2(0)),i=(T2[A+24>>2]?(n=j2[A- -64>>2],i=j2[A+48>>2],o=z2(z2(n+i)*z2(.5)),a=j2[A+60>>2],t=j2[A+44>>2],b=z2(z2(a+t)*z2(.5)),c=z2(z2(n-i)*z2(.5)),u=z2(z2(a-t)*z2(.5)),i=j2[A+56>>2],a=j2[A+40>>2],n=z2(z2(i+a)*z2(.5)),z2(z2(i-a)*z2(.5))):z2(0)),k=z2(n1[T2[T2[A>>2]+48>>2]](A)),l=z2(n1[T2[T2[A>>2]+48>>2]](A)),s=z2(n1[T2[T2[A>>2]+48>>2]](A)),v=j2[f+52>>2],a=j2[f+20>>2],t=j2[f+24>>2],d=j2[f+56>>2],B=j2[f+36>>2],Q=j2[f+40>>2],g=j2[f+48>>2],w=j2[f+8>>2],G=j2[f>>2],C=j2[f+4>>2],A=j2[f+16>>2],f=j2[f+32>>2];T2[r+12>>2]=0,d=z2(d+z2(z2(z2(n*f)+z2(b*B))+z2(o*Q))),i=z2(i+k),k=z2(i*z2(O2(f))),f=z2(u+l),k=z2(k+z2(f*z2(O2(B)))),B=z2(c+s),Q=z2(k+z2(B*z2(O2(Q)))),j2[r+8>>2]=d-Q,c=z2(v+z2(z2(z2(n*A)+z2(b*a))+z2(o*t))),a=z2(z2(z2(i*z2(O2(A)))+z2(f*z2(O2(a))))+z2(B*z2(O2(t)))),j2[r+4>>2]=c-a,o=z2(g+z2(z2(z2(n*G)+z2(b*C))+z2(o*w))),b=z2(z2(z2(i*z2(O2(G)))+z2(f*z2(O2(C))))+z2(B*z2(O2(w)))),j2[r>>2]=o-b,T2[e+12>>2]=0,j2[e+8>>2]=Q+d,j2[e+4>>2]=a+c,j2[e>>2]=b+o;},function(A,f){f|=0;var r,e,i,a,n,o,b,t,c,u,k=0,l=0,s=0,v=0,d=0;if(L2=l=L2-144|0,1<=T2[(A|=0)+24>>2])for(o=96+l|0,b=l+64|0,t=48+l|0,c=32+l|0;;){if(k=(v=P2(d,80))+T2[A+32>>2]|0,a=T2[(s=k+8|0)+4>>2],T2[(r=24+l|0)>>2]=T2[s>>2],T2[4+r>>2]=a,i=T2[k+4>>2],T2[16+l>>2]=T2[k>>2],T2[20+l>>2]=i,e=T2[4+(a=k+24|0)>>2],T2[(s=i=8+c|0)>>2]=T2[a>>2],T2[s+4>>2]=e,s=T2[k+20>>2],T2[c>>2]=T2[k+16>>2],T2[4+c>>2]=s,n=T2[4+(e=k+40|0)>>2],T2[(s=8+t|0)>>2]=T2[e>>2],T2[s+4>>2]=n,a=T2[k+36>>2],T2[t>>2]=T2[k+32>>2],T2[4+t>>2]=a,u=T2[4+(n=k+56|0)>>2],T2[(e=a=8+b|0)>>2]=T2[n>>2],T2[4+e>>2]=u,e=T2[k+52>>2],T2[b>>2]=T2[k+48>>2],T2[4+b>>2]=e,k=T2[k+64>>2],k=0|n1[T2[T2[k>>2]+28>>2]](k),n=T2[4+(u=k+8|0)>>2],T2[(e=8+l|0)>>2]=T2[u>>2],T2[4+e>>2]=n,n=T2[k+4>>2],k=T2[k>>2],j2[e>>2]=z2(j2[e>>2]*j2[f+8>>2])/j2[A+92>>2],T2[l>>2]=k,T2[4+l>>2]=n,T2[12+l>>2]=0,j2[l>>2]=z2(j2[l>>2]*j2[f>>2])/j2[A+84>>2],j2[4+l>>2]=z2(j2[4+l>>2]*j2[f+4>>2])/j2[A+88>>2],k=T2[64+(v+T2[A+32>>2]|0)>>2],n1[T2[T2[k>>2]+24>>2]](k,l),T2[76+l>>2]=0,j2[72+l>>2]=z2(j2[72+l>>2]*j2[f+8>>2])/j2[A+92>>2],j2[68+l>>2]=z2(j2[68+l>>2]*j2[f+4>>2])/j2[A+88>>2],j2[64+l>>2]=z2(j2[64+l>>2]*j2[f>>2])/j2[A+84>>2],n=T2[4+r>>2],k=v+T2[A+32>>2]|0,T2[(e=k+8|0)>>2]=T2[r>>2],T2[4+e>>2]=n,r=T2[20+l>>2],T2[k>>2]=T2[16+l>>2],T2[k+4>>2]=r,e=T2[4+i>>2],T2[(r=k+24|0)>>2]=T2[i>>2],T2[4+r>>2]=e,r=T2[4+c>>2],T2[k+16>>2]=T2[c>>2],T2[k+20>>2]=r,i=T2[s+4>>2],T2[(r=k+40|0)>>2]=T2[s>>2],T2[4+r>>2]=i,r=T2[4+t>>2],T2[k+32>>2]=T2[t>>2],T2[k+36>>2]=r,r=T2[4+b>>2],T2[k+48>>2]=T2[b>>2],T2[k+52>>2]=r,r=T2[4+a>>2],T2[(k=k+56|0)>>2]=T2[a>>2],T2[k+4>>2]=r,T2[A+72>>2]){k=T2[64+(v+T2[A+32>>2]|0)>>2],n1[T2[T2[k>>2]+8>>2]](k,16+l|0,128+l|0,112+l|0),i=T2[4+(r=136+l|0)>>2],T2[(k=a=88+l|0)>>2]=T2[r>>2],T2[k+4>>2]=i,k=T2[116+l>>2],T2[o>>2]=T2[112+l>>2],T2[4+o>>2]=k,i=T2[4+(r=120+l|0)>>2],T2[(k=8+o|0)>>2]=T2[r>>2],T2[k+4>>2]=i,k=T2[132+l>>2],T2[80+l>>2]=T2[128+l>>2],T2[84+l>>2]=k;A:if(k=i0(i=T2[A+72>>2],r=T2[76+(v+T2[A+32>>2]|0)>>2])){if(0<=(0|(s=T2[i+8>>2]))){if(s)for(;;){if(!(v=T2[k+32>>2]))break A;if(k=v,!(s=s-1|0))break;}}else k=T2[i>>2];}else k=0;v=T2[84+l>>2],T2[r>>2]=T2[80+l>>2],T2[r+4>>2]=v,e=T2[(s=104+l|0)+4>>2],T2[(v=r+24|0)>>2]=T2[s>>2],T2[v+4>>2]=e,s=T2[4+o>>2],T2[(v=r+16|0)>>2]=T2[o>>2],T2[v+4>>2]=s,s=T2[4+a>>2],T2[(v=r+8|0)>>2]=T2[a>>2],T2[v+4>>2]=s,a0(i,k,r);}if(!((0|(d=d+1|0))<T2[A+24>>2]))break;}k=T2[f+4>>2],T2[A+84>>2]=T2[f>>2],T2[A+88>>2]=k,v=T2[(f=f+8|0)+4>>2],T2[(k=A+92|0)>>2]=T2[f>>2],T2[k+4>>2]=v,n1[T2[T2[A>>2]+68>>2]](A),L2=144+l|0;},function(A){return (A|=0)+84|0;},function(A,f,r){A|=0,f=z2(f),r|=0;var e,i,a=0;T2[(i=44+(L2=a=L2-96|0)|0)>>2]=0,T2[4+i>>2]=0,T2[(i=56+a|0)>>2]=0,T2[4+i>>2]=0,T2[52+a>>2]=1065353216,T2[(i=a+64|0)>>2]=0,T2[4+i>>2]=0,T2[(i=76+a|0)>>2]=0,T2[4+i>>2]=0,T2[72+a>>2]=1065353216,T2[(i=84+a|0)>>2]=0,T2[4+i>>2]=0,T2[92+a>>2]=0,T2[36+a>>2]=0,T2[40+a>>2]=0,T2[32+a>>2]=1065353216,n1[T2[T2[A>>2]+8>>2]](A,32+a|0,16+a|0,a),f=z2(f/z2(12)),e=z2(z2(j2[a>>2]-j2[16+a>>2])*z2(.5)),e=z2(e+e),e=z2(e*e),i=z2(z2(j2[4+a>>2]-j2[20+a>>2])*z2(.5)),i=z2(i+i),i=z2(i*i),j2[r+8>>2]=f*z2(e+i),A=e,e=z2(z2(j2[8+a>>2]-j2[24+a>>2])*z2(.5)),e=z2(e+e),e=z2(e*e),j2[r+4>>2]=f*z2(A+e),j2[r>>2]=f*z2(i+e),L2=96+a|0;},function(A){return 12148;},function(A,f){A|=0,f=z2(f),j2[A+80>>2]=f;},function(A){return z2(j2[(A|=0)+80>>2]);},function(A){return 24;},function(A,f,r){f|=0;var e,i,a,n,o,b,t=0,c=0,u=0,k=0,l=0,t=0|n1[T2[T2[(r|=0)>>2]+40>>2]](r,A|=0),c=0|n1[T2[T2[r>>2]+28>>2]](r,t);if((T2[f>>2]=c)&&n1[T2[T2[r>>2]+48>>2]](r,t),t=T2[A+4>>2],T2[f+8>>2]=0,T2[f+12>>2]=0,T2[f+4>>2]=t,j2[f+20>>2]=j2[A+80>>2],t=T2[A+24>>2],T2[f+16>>2]=t){if(e=0|n1[T2[T2[r>>2]+16>>2]](r,76,t),t=T2[8+e>>2],i=f,a=0|n1[T2[T2[r>>2]+28>>2]](r,t),T2[i+12>>2]=a,0<T2[f+16>>2])for(t=t+36|0,k=T2[A+32>>2],u=36;j2[t+36>>2]=j2[(c=u+k|0)+36>>2],i=t+28|0,a=0|n1[T2[T2[r>>2]+28>>2]](r,T2[c+28>>2]),T2[i>>2]=a,0|n1[T2[T2[r>>2]+24>>2]](r,T2[28+(T2[A+32>>2]+u|0)>>2])||(c=T2[28+(T2[A+32>>2]+u|0)>>2],a=r,n=0|n1[T2[T2[c>>2]+52>>2]](c),i=T2[T2[r>>2]+16>>2],c=0|n1[i](0|a,0|n,1),k=T2[28+(T2[A+32>>2]+u|0)>>2],a=0|n1[T2[T2[k>>2]+56>>2]](k,T2[(n=c)+8>>2],o=r),b=T2[28+(T2[A+32>>2]+u|0)>>2],i=T2[T2[r>>2]+20>>2],n1[i](0|o,0|n,0|a,1346455635,0|b)),k=T2[A+32>>2],j2[t-36>>2]=j2[(c=k+u|0)-36>>2],j2[t-32>>2]=j2[c-32>>2],j2[t-28>>2]=j2[c-28>>2],j2[t-24>>2]=j2[c-24>>2],j2[t-20>>2]=j2[c-20>>2],j2[t-16>>2]=j2[c-16>>2],j2[t-12>>2]=j2[c-12>>2],j2[t-8>>2]=j2[c-8>>2],j2[t-4>>2]=j2[c-4>>2],j2[t>>2]=j2[c>>2],j2[t+4>>2]=j2[c+4>>2],j2[t+8>>2]=j2[c+8>>2],j2[t+12>>2]=j2[c+12>>2],j2[t+16>>2]=j2[c+16>>2],j2[t+20>>2]=j2[c+20>>2],T2[t+32>>2]=T2[c+32>>2],j2[t+24>>2]=j2[c+24>>2],u=u+80|0,t=t+76|0,(0|(l=l+1|0))<T2[f+16>>2];);n1[T2[T2[r>>2]+20>>2]](r,e,9264,1497453121,T2[8+e>>2]);}return 9289;},function(A,f){f|=0;var r=0,e=0;if(T2[(A|=0)+76>>2]=T2[A+76>>2]+1,1<=(0|(r=T2[A+24>>2])))for(e=r+1|0,r=P2(r,80)-16|0;T2[T2[A+32>>2]+r>>2]==(0|f)&&b0(A,e-2|0),r=r-80|0,1<(0|(e=e-1|0)););n1[T2[T2[A>>2]+68>>2]](A);},function(A){A|=0;var f,r,e=z2(0),i=0,a=0,n=0;if(L2=i=L2-32|0,T2[A+56>>2]=-581039253,T2[A+60>>2]=-581039253,T2[A+40>>2]=1566444395,T2[A+44>>2]=1566444395,T2[(f=A- -64|0)>>2]=-581039253,T2[4+f>>2]=0,T2[(f=A+48|0)>>2]=1566444395,T2[4+f>>2]=0,1<=T2[A+24>>2])for(;f=T2[A+32>>2]+a|0,r=T2[f+64>>2],n1[T2[T2[r>>2]+8>>2]](r,f,16+i|0,i),(e=j2[16+i>>2])<j2[A+40>>2]&&(j2[A+40>>2]=e),(e=j2[i>>2])>j2[A+56>>2]&&(j2[A+56>>2]=e),(e=j2[20+i>>2])<j2[A+44>>2]&&(j2[A+44>>2]=e),(e=j2[4+i>>2])>j2[A+60>>2]&&(j2[A+60>>2]=e),(e=j2[24+i>>2])<j2[A+48>>2]&&(j2[A+48>>2]=e),(e=j2[8+i>>2])>j2[A+64>>2]&&(j2[A+64>>2]=e),a=a+80|0,(0|(n=n+1|0))<T2[A+24>>2];);L2=32+i|0;},function(A){var f=0;return T2[(A|=0)>>2]=9592,(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,p2[A+36|0]=1,T2[(f=A+24|0)>>2]=0,(T2[f+4>>2]=0)|A;},function(A){var f=0;T2[(A|=0)>>2]=9592,(f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,p2[A+36|0]=1,T2[(f=A+24|0)>>2]=0,T2[f+4>>2]=0,T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c,u=0,k=0,l=0,s=0,v=(z2(0)),d=z2(0),B=z2(0),Q=0;if(L2=r=L2-80|0,1<=(0|(o=0|n1[T2[T2[A>>2]+28>>2]](A))))for(i=j2[A+12>>2],a=j2[A+8>>2],n=j2[A+4>>2];;){n1[T2[T2[A>>2]+16>>2]](A,r+76|0,r+52|0,r- -64|0,r+56|0,r+72|0,r+68|0,r+48|0,r+60|0,Q);A:{f:switch(T2[r+64>>2]){case 0:r:switch(T2[r+60>>2]-2|0){case 3:if(T2[r+48>>2]<1)break A;for(e=0;s=T2[r+76>>2],l=T2[r+56>>2],k=T2[r+72>>2]+P2(T2[r+68>>2],e)|0,u=s+P2(l,S2[0|k])|0,v=j2[u>>2],d=j2[u+4>>2],B=j2[u+8>>2],T2[r+12>>2]=0,j2[r+8>>2]=i*B,j2[r+4>>2]=a*d,j2[r>>2]=n*v,u=s+P2(l,S2[k+1|0])|0,v=j2[u>>2],d=j2[u+4>>2],B=j2[u+8>>2],T2[r+28>>2]=0,j2[r+24>>2]=i*B,j2[r+20>>2]=a*d,j2[r+16>>2]=n*v,k=s+P2(l,S2[k+2|0])|0,v=j2[k>>2],d=j2[k+4>>2],B=j2[k+8>>2],T2[r+44>>2]=0,j2[r+40>>2]=i*B,j2[r+36>>2]=a*d,j2[r+32>>2]=n*v,n1[T2[T2[f>>2]+8>>2]](f,r,Q,e),(0|(e=e+1|0))<T2[r+48>>2];);break A;case 1:if(T2[r+48>>2]<1)break A;for(e=0;s=T2[r+76>>2],l=T2[r+56>>2],k=T2[r+72>>2]+P2(T2[r+68>>2],e)|0,u=s+P2(l,A2[k>>1])|0,v=j2[u>>2],d=j2[u+4>>2],B=j2[u+8>>2],T2[r+12>>2]=0,j2[r+8>>2]=i*B,j2[r+4>>2]=a*d,j2[r>>2]=n*v,u=s+P2(l,A2[k+2>>1])|0,v=j2[u>>2],d=j2[u+4>>2],B=j2[u+8>>2],T2[r+28>>2]=0,j2[r+24>>2]=i*B,j2[r+20>>2]=a*d,j2[r+16>>2]=n*v,k=s+P2(l,A2[k+4>>1])|0,v=j2[k+8>>2],d=j2[k+4>>2],B=j2[k>>2],T2[r+44>>2]=0,j2[r+32>>2]=n*B,j2[r+36>>2]=a*d,j2[r+40>>2]=i*v,n1[T2[T2[f>>2]+8>>2]](f,r,Q,e),(0|(e=e+1|0))<T2[r+48>>2];);break A;case 0:break r;default:break A;}if(T2[r+48>>2]<1)break A;for(e=0;s=T2[r+76>>2],l=T2[r+56>>2],k=T2[r+72>>2]+P2(T2[r+68>>2],e)|0,u=s+P2(l,T2[k>>2])|0,v=j2[u>>2],d=j2[u+4>>2],B=j2[u+8>>2],T2[r+12>>2]=0,j2[r+8>>2]=i*B,j2[r+4>>2]=a*d,j2[r>>2]=n*v,u=s+P2(l,T2[k+4>>2])|0,v=j2[u>>2],d=j2[u+4>>2],B=j2[u+8>>2],T2[r+28>>2]=0,j2[r+24>>2]=i*B,j2[r+20>>2]=a*d,j2[r+16>>2]=n*v,k=s+P2(l,T2[k+8>>2])|0,v=j2[k+8>>2],d=j2[k+4>>2],B=j2[k>>2],T2[r+44>>2]=0,j2[r+32>>2]=n*B,j2[r+36>>2]=a*d,j2[r+40>>2]=i*v,n1[T2[T2[f>>2]+8>>2]](f,r,Q,e),(0|(e=e+1|0))<T2[r+48>>2];);break A;case 1:break f;default:break A;}f:switch(T2[r+60>>2]-2|0){case 3:if(T2[r+48>>2]<1)break A;for(e=0;k=T2[r+72>>2]+P2(T2[r+68>>2],e)|0,l=S2[0|k],T2[r+12>>2]=0,s=T2[r+76>>2],u=l,l=T2[r+56>>2],u=s+P2(u,l)|0,j2[r+8>>2]=i*z2(X[u+16>>3]),j2[r+4>>2]=a*z2(X[u+8>>3]),j2[r>>2]=n*z2(X[u>>3]),u=S2[k+1|0],T2[r+28>>2]=0,u=s+P2(u,l)|0,j2[r+24>>2]=i*z2(X[u+16>>3]),j2[r+20>>2]=a*z2(X[u+8>>3]),j2[r+16>>2]=n*z2(X[u>>3]),k=s+P2(l,S2[k+2|0])|0,b=X[k>>3],t=X[k+8>>3],c=X[k+16>>3],T2[r+44>>2]=0,j2[r+40>>2]=i*z2(c),j2[r+36>>2]=a*z2(t),j2[r+32>>2]=n*z2(b),n1[T2[T2[f>>2]+8>>2]](f,r,Q,e),(0|(e=e+1|0))<T2[r+48>>2];);break A;case 1:if(T2[r+48>>2]<1)break A;for(e=0;T2[r+12>>2]=0,T2[r+28>>2]=0,s=T2[r+76>>2],l=T2[r+56>>2],k=T2[r+72>>2]+P2(T2[r+68>>2],e)|0,u=s+P2(l,A2[k>>1])|0,j2[r+8>>2]=i*z2(X[u+16>>3]),j2[r+4>>2]=a*z2(X[u+8>>3]),j2[r>>2]=n*z2(X[u>>3]),u=s+P2(l,A2[k+2>>1])|0,j2[r+24>>2]=i*z2(X[u+16>>3]),j2[r+20>>2]=a*z2(X[u+8>>3]),j2[r+16>>2]=n*z2(X[u>>3]),T2[r+44>>2]=0,k=s+P2(l,A2[k+4>>1])|0,j2[r+32>>2]=n*z2(X[k>>3]),j2[r+36>>2]=a*z2(X[k+8>>3]),j2[r+40>>2]=i*z2(X[k+16>>3]),n1[T2[T2[f>>2]+8>>2]](f,r,Q,e),(0|(e=e+1|0))<T2[r+48>>2];);break A;case 0:break f;default:break A;}if(!(T2[r+48>>2]<1))for(e=0;T2[r+12>>2]=0,T2[r+28>>2]=0,s=T2[r+76>>2],l=T2[r+56>>2],k=T2[r+72>>2]+P2(T2[r+68>>2],e)|0,u=s+P2(l,T2[k>>2])|0,j2[r+8>>2]=i*z2(X[u+16>>3]),j2[r+4>>2]=a*z2(X[u+8>>3]),j2[r>>2]=n*z2(X[u>>3]),u=s+P2(l,T2[k+4>>2])|0,j2[r+24>>2]=i*z2(X[u+16>>3]),j2[r+20>>2]=a*z2(X[u+8>>3]),j2[r+16>>2]=n*z2(X[u>>3]),T2[r+44>>2]=0,k=s+P2(l,T2[k+8>>2])|0,j2[r+32>>2]=n*z2(X[k>>3]),j2[r+36>>2]=a*z2(X[k+8>>3]),j2[r+40>>2]=i*z2(X[k+16>>3]),n1[T2[T2[f>>2]+8>>2]](f,r,Q,e),(0|(e=e+1|0))<T2[r+48>>2];);}if(n1[T2[T2[A>>2]+24>>2]](A,Q),(0|o)==(0|(Q=Q+1|0)))break;}L2=r+80|0;},t0,t0,c0,c0,k0,c0,c0,function(A){return 1==T2[(A|=0)+48>>2]|0;},function(A,f,r){r|=0;var e,i=T2[(f|=0)+4>>2];T2[(A|=0)+52>>2]=T2[f>>2],T2[A+56>>2]=i,e=T2[(f=f+8|0)+4>>2],T2[(i=A+60|0)>>2]=T2[f>>2],T2[4+i>>2]=e,f=T2[r+4>>2],T2[A+68>>2]=T2[r>>2],T2[A+72>>2]=f,i=T2[(r=r+8|0)+4>>2],T2[(f=A+76|0)>>2]=T2[r>>2],T2[f+4>>2]=i,T2[A+48>>2]=1;},function(A,f,r){r|=0;var e,i=T2[(A|=0)+56>>2];T2[(f|=0)>>2]=T2[A+52>>2],T2[f+4>>2]=i,e=T2[4+(i=A+60|0)>>2],T2[(f=f+8|0)>>2]=T2[i>>2],T2[f+4>>2]=e,e=T2[4+(i=A+76|0)>>2],T2[(f=r+8|0)>>2]=T2[i>>2],T2[f+4>>2]=e,f=T2[A+72>>2],T2[r>>2]=T2[A+68>>2],T2[r+4>>2]=f;},function(A){return 28;},function(A,f,r){f|=0,r|=0;var e,i,a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0,l=0,s=0;if(L2=n=L2-32|0,a=0|n1[T2[T2[(A|=0)>>2]+28>>2]](A),T2[f>>2]=0,T2[f+20>>2]=a){if(e=0|n1[T2[T2[r>>2]+16>>2]](r,32,a),c=T2[8+e>>2],l=f,s=0|n1[T2[T2[r>>2]+28>>2]](r,c),T2[l>>2]=s,0<(0|(i=0|n1[T2[T2[A>>2]+28>>2]](A))))for(;;){n1[T2[T2[A>>2]+16>>2]](A,28+n|0,4+n|0,16+n|0,8+n|0,24+n|0,20+n|0,n,12+n|0,k),T2[c>>2]=0,T2[c+4>>2]=0,T2[(a=c+8|0)>>2]=0,T2[a+4>>2]=0,T2[(a=c+16|0)>>2]=0,T2[a+4>>2]=0,a=T2[n>>2],T2[c+24>>2]=a,T2[c+28>>2]=T2[4+n>>2];A:{f:switch(T2[12+n>>2]-2|0){case 0:if(!a)break A;if(b=0|n1[T2[T2[r>>2]+16>>2]](r,4,P2(a,3)),a=T2[b+8>>2],l=c,s=0|n1[T2[T2[r>>2]+28>>2]](r,a),T2[l+8>>2]=s,1<=T2[n>>2])for(o=0,u=T2[24+n>>2];t=u+P2(T2[20+n>>2],o)|0,T2[a>>2]=T2[t>>2],T2[a+4>>2]=T2[t+4>>2],T2[a+8>>2]=T2[t+8>>2],a=a+12|0,(0|(o=o+1|0))<T2[n>>2];);n1[T2[T2[r>>2]+20>>2]](r,b,9400,1497453121,T2[b+8>>2]);break A;case 1:if(!a)break A;if(b=0|n1[T2[T2[r>>2]+16>>2]](r,8,a),a=T2[b+8>>2],l=c,s=0|n1[T2[T2[r>>2]+28>>2]](r,a),T2[l+12>>2]=s,1<=T2[n>>2])for(o=0;t=T2[24+n>>2]+P2(T2[20+n>>2],o)|0,$[a>>1]=A2[t>>1],$[a+2>>1]=A2[t+2>>1],t=A2[t+4>>1],$[a+6>>1]=0,$[a+4>>1]=t,a=a+8|0,(0|(o=o+1|0))<T2[n>>2];);n1[T2[T2[r>>2]+20>>2]](r,b,9415,1497453121,T2[b+8>>2]);break A;case 3:break f;default:break A;}if(a){if(b=0|n1[T2[T2[r>>2]+16>>2]](r,4,a),a=T2[b+8>>2],l=c,s=0|n1[T2[T2[r>>2]+28>>2]](r,a),T2[l+16>>2]=s,1<=T2[n>>2])for(o=0;t=T2[24+n>>2]+P2(T2[20+n>>2],o)|0,p2[0|a]=S2[0|t],p2[a+1|0]=S2[t+1|0],p2[a+2|0]=S2[t+2|0],a=a+4|(p2[a+3|0]=0),(0|(o=o+1|0))<T2[n>>2];);n1[T2[T2[r>>2]+20>>2]](r,b,9442,1497453121,T2[b+8>>2]);}}A:{f:switch(T2[16+n>>2]){case 0:if(!(a=T2[4+n>>2]))break A;if(t=0|n1[T2[T2[r>>2]+16>>2]](r,16,a),a=T2[t+8>>2],l=c,s=0|n1[T2[T2[r>>2]+28>>2]](r,a),T2[l>>2]=s,1<=(0|(b=T2[4+n>>2])))for(u=T2[8+n>>2],o=T2[28+n>>2];j2[a>>2]=j2[o>>2],j2[a+4>>2]=j2[o+4>>2],j2[a+8>>2]=j2[o+8>>2],o=o+u|0,a=a+16|0,b=b-1|0;);n1[T2[T2[r>>2]+20>>2]](r,t,9465,1497453121,T2[t+8>>2]);break A;case 1:break f;default:break A;}if(a=T2[4+n>>2]){if(t=0|n1[T2[T2[r>>2]+16>>2]](r,32,a),a=T2[t+8>>2],l=c,s=0|n1[T2[T2[r>>2]+28>>2]](r,a),T2[l+4>>2]=s,1<=(0|(b=T2[4+n>>2])))for(u=T2[8+n>>2],o=T2[28+n>>2];X[a>>3]=X[o>>3],X[a+8>>3]=X[o+8>>3],X[a+16>>3]=X[o+16>>3],o=o+u|0,a=a+32|0,b=b-1|0;);n1[T2[T2[r>>2]+20>>2]](r,t,9484,1497453121,T2[t+8>>2]);}}if(n1[T2[T2[A>>2]+24>>2]](A,k),c=c+32|0,(0|i)==(0|(k=k+1|0)))break;}n1[T2[T2[r>>2]+20>>2]](r,e,9504,1497453121,T2[8+e>>2]);}return T2[f+24>>2]=0,j2[f+4>>2]=j2[A+4>>2],j2[f+8>>2]=j2[A+8>>2],j2[f+12>>2]=j2[A+12>>2],j2[f+16>>2]=j2[A+16>>2],L2=32+n|0,9519;},u0,function(A){A=u0(A|=0),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f){f|=0;var r,e=0,i=0,a=0,n=0,o=0;A:{if(S2[(A|=0)+165|0]){if(T2[A+92>>2]>=(0|f))break A;if(f&&(T2[5498]=T2[5498]+1,(e=K2(19+(f<<4)|0))&&(T2[(a=e+19&-16)-4>>2]=e)),1<=(0|(n=T2[A+88>>2])))for(;i=T2[A+96>>2]+o|0,e=T2[i+4>>2],T2[(r=o+a|0)>>2]=T2[i>>2],T2[4+r>>2]=e,e=T2[(i=i+8|0)+4>>2],T2[(r=8+r|0)>>2]=T2[i>>2],T2[4+r>>2]=e,o=o+16|0,n=n-1|0;);return (e=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+96>>2]=a,T2[A+92>>2]=f,void(p2[A+100|0]=1);}if(!(T2[A+112>>2]>=(0|f))){f&&(T2[5498]=T2[5498]+1,(i=K2(19+(f<<2)|0))&&(T2[(e=i+19&-16)-4>>2]=i)),i=T2[A+116>>2];f:{if(1<=(0|(a=T2[A+108>>2])))for(o=e,n=i;j2[o>>2]=j2[n>>2],o=o+4|0,n=n+4|0,a=a-1|0;);else if(!i)break f;S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2]));}T2[A+116>>2]=e,T2[A+112>>2]=f,p2[A+120|0]=1;}}},function(A,f){f|=0;var r=0,e=0,i=0,a=0,n=0;A:{if(S2[(A|=0)+164|0]){if(T2[A+132>>2]>=(0|f))break A;f&&(T2[5498]=T2[5498]+1,(r=K2(19+(f<<2)|0))&&(T2[(i=r+19&-16)-4>>2]=r)),a=T2[A+136>>2];f:{if(1<=(0|(e=T2[A+128>>2])))for(n=i,r=a;T2[n>>2]=T2[r>>2],n=n+4|0,r=r+4|0,e=e-1|0;);else if(!a)break f;S2[A+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2]));}return T2[A+136>>2]=i,T2[A+132>>2]=f,void(p2[A+140|0]=1);}if(!(T2[A+152>>2]>=(0|f))){f&&(T2[5498]=T2[5498]+1,(r=K2(19+(f<<1)|0))&&(T2[(i=r+19&-16)-4>>2]=r)),a=T2[A+156>>2];f:{if(1<=(0|(e=T2[A+148>>2])))for(n=i,r=a;$[n>>1]=A2[r>>1],n=n+2|0,r=r+2|0,e=e-1|0;);else if(!a)break f;S2[A+160|0]&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2]));}T2[A+156>>2]=i,T2[A+152>>2]=f,p2[A+160|0]=1;}}},_,I2,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0,z2(0);var i=0,a=0,n=0,o=0,b=(j2[(i=A+32|0)>>2]),t=j2[(a=A+48|0)>>2],c=j2[(n=A+28|0)>>2],u=j2[(o=A+44|0)>>2],k=j2[A+24>>2],l=j2[A+40>>2],s=z2(n1[T2[T2[A>>2]+48>>2]](A)),v=z2(n1[T2[T2[A>>2]+48>>2]](A)),d=z2(n1[T2[T2[A>>2]+48>>2]](A)),B=j2[f+52>>2],Q=j2[f+24>>2],g=j2[f+20>>2],w=j2[f+56>>2],G=j2[n>>2],C=j2[o>>2],E=j2[i>>2],D=j2[a>>2],h=j2[f+40>>2],Z=j2[f+36>>2],Y=j2[f+48>>2],R=j2[f+8>>2],F=j2[f>>2],n=j2[f+4>>2],o=j2[f+16>>2],i=j2[A+24>>2],a=j2[A+40>>2],A=j2[f+32>>2];T2[r+12>>2]=0,f=w,w=z2(z2(a+i)*z2(.5)),G=z2(z2(C+G)*z2(.5)),C=z2(z2(D+E)*z2(.5)),E=z2(f+z2(z2(z2(A*w)+z2(Z*G))+z2(h*C))),k=z2(s+z2(z2(l-k)*z2(.5))),f=z2(k*z2(O2(A))),A=z2(v+z2(z2(u-c)*z2(.5))),f=z2(f+z2(A*z2(O2(Z)))),Z=z2(d+z2(z2(t-b)*z2(.5))),h=z2(f+z2(Z*z2(O2(h)))),j2[r+8>>2]=E-h,b=z2(B+z2(z2(z2(w*o)+z2(G*g))+z2(C*Q))),Q=z2(z2(z2(k*z2(O2(o)))+z2(A*z2(O2(g))))+z2(Z*z2(O2(Q)))),j2[r+4>>2]=b-Q,g=z2(Y+z2(z2(z2(w*F)+z2(G*n))+z2(C*R))),Z=z2(z2(z2(k*z2(O2(F)))+z2(A*z2(O2(n))))+z2(Z*z2(O2(R)))),j2[r>>2]=g-Z,T2[e+12>>2]=0,j2[e+8>>2]=h+E,j2[e+4>>2]=Q+b,j2[e>>2]=Z+g;},v0,function(A){return T2[(A|=0)+56>>2]+4|0;},X2,function(A){return 10082;},e2,function(A,f,r){f|=0;var e=0|n1[T2[T2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|n1[T2[T2[r>>2]+28>>2]](r,e);return (T2[f>>2]=i)&&n1[T2[T2[r>>2]+48>>2]](r,e),A=T2[A+4>>2],T2[f+8>>2]=0,T2[f+4>>2]=A,7747;},function(A,f,r,e){A|=0,f|=0,e|=0;var i,a,n,o=0;L2=o=L2-48|0,n=T2[4+(a=(r|=0)+8|0)>>2],T2[(i=24+o|0)>>2]=T2[a>>2],T2[4+i>>2]=n,n=T2[4+(a=e+8|0)>>2],T2[(i=40+o|0)>>2]=T2[a>>2],T2[4+i>>2]=n,T2[8+o>>2]=9956,i=T2[r+4>>2],T2[16+o>>2]=T2[r>>2],T2[20+o>>2]=i,i=T2[e+4>>2],T2[32+o>>2]=T2[e>>2],T2[36+o>>2]=i,T2[12+o>>2]=f,A=T2[A+56>>2],n1[T2[T2[A>>2]+8>>2]](A,8+o|0,r,e),L2=48+o|0;},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o,b,t=0;T2[(b=i=52+(L2=t=L2-144|0)|0)>>2]=0,T2[4+b>>2]=0,T2[(b=t+64|0)>>2]=0,T2[4+b>>2]=0,T2[(b=72+t|0)>>2]=0,T2[4+b>>2]=0,T2[(b=84+t|0)>>2]=0,T2[4+b>>2]=0,T2[80+t>>2]=1065353216,T2[(b=92+t|0)>>2]=0,T2[4+b>>2]=0,T2[(b=104+t|0)>>2]=0,T2[4+b>>2]=0,T2[100+t>>2]=1065353216,T2[(b=112+t|0)>>2]=0,T2[4+b>>2]=0,T2[(b=120+t|0)>>2]=0,T2[4+b>>2]=-581039253,T2[140+t>>2]=0,e=j2[r+8>>2],a=j2[r>>2],n=z2(a*z2(0)),o=j2[r+4>>2],b=z2(o*z2(0)),j2[136+t>>2]=e+z2(n+b),e=z2(e*z2(0)),j2[132+t>>2]=z2(o+n)+e,T2[44+t>>2]=0,T2[48+t>>2]=0,T2[40+t>>2]=9900,T2[60+t>>2]=1065353216,j2[128+t>>2]=z2(a+b)+e,T2[32+t>>2]=1566444395,T2[36+t>>2]=0,T2[24+t>>2]=1566444395,T2[28+t>>2]=1566444395,T2[16+t>>2]=-581039253,T2[20+t>>2]=0,T2[8+t>>2]=-581039253,T2[12+t>>2]=-581039253,n1[T2[T2[f>>2]+64>>2]](f,40+t|0,8+t|0,24+t|0),r=T2[4+i>>2],T2[(f=A+8|0)>>2]=T2[i>>2],T2[f+4>>2]=r,f=T2[48+t>>2],T2[A>>2]=T2[44+t>>2],T2[A+4>>2]=f,L2=144+t|0;},function(A,f,r){n1[T2[T2[(f|=0)>>2]+68>>2]](A|=0,f,r|=0);},_,I,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o=z2(0),b=z2(0),t=0,c=(0);r=A+4|0,b=j2[A+84>>2],i=j2[A+88>>2],a=j2[A+92>>2],n=j2[A+96>>2],b<(o=z2(z2(z2(i*j2[f>>2])+z2(a*j2[f+4>>2]))+z2(n*j2[f+8>>2])))&&(j2[A+84>>2]=o,e=T2[f+4>>2],T2[r>>2]=T2[f>>2],T2[r+4>>2]=e,c=T2[(t=f+8|0)+4>>2],T2[(e=r+8|0)>>2]=T2[t>>2],T2[e+4>>2]=c,b=o),b<(o=z2(z2(z2(i*j2[f+16>>2])+z2(a*j2[f+20>>2]))+z2(n*j2[f+24>>2])))?(j2[A+84>>2]=o,t=T2[(e=f+16|0)+4>>2],T2[r>>2]=T2[e>>2],T2[r+4>>2]=t,c=T2[(e=e+8|0)+4>>2],T2[(t=r+8|0)>>2]=T2[e>>2],T2[t+4>>2]=c):o=b,o<(b=z2(z2(z2(i*j2[f+32>>2])+z2(a*j2[f+36>>2]))+z2(n*j2[f+40>>2])))&&(j2[A+84>>2]=b,f=T2[(A=f+32|0)+4>>2],T2[r>>2]=T2[A>>2],T2[r+4>>2]=f,f=r+8|0,r=T2[(A=A+8|0)+4>>2],T2[f>>2]=T2[A>>2],T2[f+4>>2]=r);},_,I,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i=0,a=z2(0),n=z2(0),o=z2(0),b=z2(0),t=0,a=j2[f>>2],n=j2[f+16>>2],o=j2[f+32>>2];j2[A+24>>2]<((b=a<n?a:n)<o?b:o)||j2[(o<j2[f+(i=!(n<a)<<4)>>2]?i:32)+f>>2]<j2[A+8>>2]||(a=j2[f+8>>2],n=j2[(i=f+24|0)>>2],o=j2[(t=f+40|0)>>2],j2[A+32>>2]<((b=a<n?a:n)<o?b:o)||j2[(o<j2[(i=n<a?f+8|0:i)>>2]?i:t)>>2]<j2[A+16>>2]||(a=j2[f+4>>2],n=j2[(i=f+20|0)>>2],o=j2[(t=f+36|0)>>2],j2[A+28>>2]<((b=a<n?a:n)<o?b:o)||j2[(o<j2[(i=n<a?f+4|0:i)>>2]?i:t)>>2]<j2[A+12>>2]||(A=T2[A+4>>2],n1[T2[T2[A>>2]+8>>2]](A,f,r,e))));},d0,function(A){A=d0(A|=0),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},B0,w0,function(A,f,r){r|=0;var e,i,a=0,n=0,o=0,b=0,t=0;if(j2[(f|=0)+16>>2]=j2[(A|=0)+20>>2],j2[f+20>>2]=j2[A+24>>2],j2[f+24>>2]=j2[A+28>>2],j2[f+28>>2]=j2[A+32>>2],j2[f>>2]=j2[A+4>>2],j2[f+4>>2]=j2[A+8>>2],j2[f+8>>2]=j2[A+12>>2],j2[f+12>>2]=j2[A+16>>2],j2[f+32>>2]=j2[A+36>>2],j2[f+36>>2]=j2[A+40>>2],j2[f+40>>2]=j2[A+44>>2],j2[f+44>>2]=j2[A+48>>2],T2[f+48>>2]=T2[A+56>>2],T2[f+52>>2]=S2[A+60|0],a=T2[A+88>>2],T2[f+56>>2]=a){if(a=0|n1[T2[T2[r>>2]+28>>2]](r,T2[A+96>>2]),T2[f+64>>2]=a){if(o=T2[A+88>>2],t=0|n1[T2[T2[r>>2]+16>>2]](r,48,o),1<=(0|o))for(a=T2[t+8>>2]+44|0,b=40;n=T2[A+96>>2]+b|0,j2[a-28>>2]=j2[n-24>>2],j2[a-24>>2]=j2[n-20>>2],j2[a-20>>2]=j2[n-16>>2],j2[a-16>>2]=j2[n-12>>2],j2[a-44>>2]=j2[n-40>>2],j2[a-40>>2]=j2[n-36>>2],j2[a-36>>2]=j2[n-32>>2],j2[a-32>>2]=j2[n-28>>2],T2[a-12>>2]=T2[n-8>>2],T2[a-8>>2]=T2[n-4>>2],n=T2[n>>2],T2[a>>2]=0,T2[a-4>>2]=n,b=b- -64|0,a=a+48|0,o=o-1|0;);n1[T2[T2[r>>2]+20>>2]](r,t,10164,1497453121,T2[A+96>>2]);}}else T2[f+64>>2]=0;if(a=T2[A+128>>2],T2[f+60>>2]=a){if(a=0|n1[T2[T2[r>>2]+28>>2]](r,T2[A+136>>2]),T2[f+68>>2]=a){if(o=T2[A+128>>2],e=(b=0)|n1[T2[T2[r>>2]+16>>2]](r,16,o),(0|o)<=0)t=T2[A+136>>2];else for(t=T2[A+136>>2],i=T2[8+e>>2];$[(a=b+i|0)+6>>1]=A2[(n=b+t|0)+6>>1],$[a+8>>1]=A2[n+8>>1],$[a+10>>1]=A2[n+10>>1],$[a>>1]=A2[n>>1],$[a+2>>1]=A2[n+2>>1],T2[a+12>>2]=T2[n+12>>2],$[a+4>>1]=A2[n+4>>1],b=b+16|0,o=o-1|0;);n1[T2[T2[r>>2]+20>>2]](r,e,10187,1497453121,t);}}else T2[f+68>>2]=0;if(T2[f+76>>2]=T2[A+144>>2],a=T2[A+152>>2],!(T2[f+80>>2]=a))return T2[f+72>>2]=0,10231;if(a=f,f=0|n1[T2[T2[r>>2]+28>>2]](r,T2[A+160>>2]),T2[a+72>>2]=f){if(b=T2[A+152>>2],n=0|n1[T2[T2[r>>2]+16>>2]](r,20,b),(0|b)<=0)A=T2[A+160>>2];else for(a=(A=T2[A+160>>2])+16|0,f=T2[n+8>>2];$[f+14>>1]=A2[a-10>>1],$[f+16>>1]=A2[a-8>>1],$[f+18>>1]=A2[a-6>>1],$[f+8>>1]=A2[a-16>>1],$[f+10>>1]=A2[a-14>>1],t=T2[(o=a-4|0)+4>>2],T2[f>>2]=T2[o>>2],T2[f+4>>2]=t,$[f+12>>1]=A2[a-12>>1],a=a+32|0,f=f+20|0,b=b-1|0;);n1[T2[T2[r>>2]+20>>2]](r,n,10210,1497453121,A);}return 10231;},function(A,f){var r=0,e=0,i=0,a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0;if(L2=c=L2+-64|0,j2[(A|=0)+20>>2]=j2[(f|=0)+16>>2],j2[A+24>>2]=j2[f+20>>2],j2[A+28>>2]=j2[f+24>>2],j2[A+32>>2]=j2[f+28>>2],j2[A+4>>2]=j2[f>>2],j2[A+8>>2]=j2[f+4>>2],j2[A+12>>2]=j2[f+8>>2],j2[A+16>>2]=j2[f+12>>2],j2[A+36>>2]=j2[f+32>>2],j2[A+40>>2]=j2[f+36>>2],j2[A+44>>2]=j2[f+40>>2],j2[A+48>>2]=j2[f+44>>2],T2[A+56>>2]=T2[f+48>>2],p2[A+60|0]=0!=T2[f+52>>2],b=T2[f+56>>2],T2[(r=56+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=48+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=40+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=32+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=24+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=16+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=8+c|0)>>2]=0,T2[r+4>>2]=0,T2[c>>2]=0,((T2[4+c>>2]=0)|(i=T2[A+88>>2]))<(0|b)){if(T2[A+92>>2]<(0|b)){if(b&&(T2[5498]=T2[5498]+1,(r=K2(b<<6|19))&&(T2[(a=r+19&-16)-4>>2]=r)),1<=(0|i))for(r=i;o=T2[A+96>>2]+t|0,k=T2[(n=o)+4>>2],T2[(e=a+t|0)>>2]=T2[n>>2],T2[e+4>>2]=k,k=T2[(n=n+56|0)+4>>2],T2[(u=e+56|0)>>2]=T2[n>>2],T2[u+4>>2]=k,k=T2[(u=o+48|0)+4>>2],T2[(n=e+48|0)>>2]=T2[u>>2],T2[n+4>>2]=k,k=T2[(u=o+40|0)+4>>2],T2[(n=e+40|0)>>2]=T2[u>>2],T2[n+4>>2]=k,k=T2[(u=o+32|0)+4>>2],T2[(n=e+32|0)>>2]=T2[u>>2],T2[n+4>>2]=k,k=T2[(u=o+24|0)+4>>2],T2[(n=e+24|0)>>2]=T2[u>>2],T2[n+4>>2]=k,k=T2[(u=o+16|0)+4>>2],T2[(n=e+16|0)>>2]=T2[u>>2],T2[n+4>>2]=k,n=T2[(o=o+8|0)+4>>2],T2[(e=e+8|0)>>2]=T2[o>>2],T2[e+4>>2]=n,t=t- -64|0,r=r-1|0;);(r=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+96>>2]=a,T2[A+92>>2]=b,p2[A+100|0]=1;}for(r=i<<6,t=b-i|0;a=T2[4+c>>2],i=T2[A+96>>2]+r|0,T2[(e=i)>>2]=T2[c>>2],T2[e+4>>2]=a,o=T2[(a=56+c|0)+4>>2],T2[(e=e+56|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=48+c|0)+4>>2],T2[(e=i+48|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=40+c|0)+4>>2],T2[(e=i+40|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=32+c|0)+4>>2],T2[(e=i+32|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=24+c|0)+4>>2],T2[(e=i+24|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=16+c|0)+4>>2],T2[(e=i+16|0)>>2]=T2[a>>2],T2[e+4>>2]=o,a=T2[(e=8+c|0)+4>>2],T2[(i=i+8|0)>>2]=T2[e>>2],T2[i+4>>2]=a,r=r- -64|0,t=t-1|0;);}if(1<=(0|(T2[A+88>>2]=b)))for(e=T2[f+64>>2]+40|0,r=T2[A+96>>2]+40|0;j2[r-24>>2]=j2[e-24>>2],j2[r-20>>2]=j2[e-20>>2],j2[r-16>>2]=j2[e-16>>2],j2[r-12>>2]=j2[e-12>>2],j2[r-40>>2]=j2[e-40>>2],j2[r-36>>2]=j2[e-36>>2],j2[r-32>>2]=j2[e-32>>2],T2[r-8>>2]=T2[e-8>>2],j2[r-28>>2]=j2[e-28>>2],T2[r-4>>2]=T2[e-4>>2],T2[r>>2]=T2[e>>2],r=r- -64|0,e=e+48|0,b=b-1|0;);if(t=T2[f+60>>2],T2[(r=8+c|0)>>2]=0,T2[r+4>>2]=0,T2[c>>2]=0,((T2[4+c>>2]=0)|(i=T2[A+128>>2]))<(0|t)){if(T2[A+132>>2]<(0|t)){if(a=0,t&&(T2[5498]=T2[5498]+1,(r=K2(19+(t<<4)|0))&&(T2[(a=r+19&-16)-4>>2]=r)),1<=(0|i))for(e=0,r=i;b=T2[A+136>>2]+e|0,u=T2[b+4>>2],T2[(n=o=e+a|0)>>2]=T2[b>>2],T2[n+4>>2]=u,n=T2[(b=b+8|0)+4>>2],T2[(o=o+8|0)>>2]=T2[b>>2],T2[o+4>>2]=n,e=e+16|0,r=r-1|0;);(r=T2[A+136>>2])&&S2[A+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+136>>2]=a,T2[A+132>>2]=t,p2[A+140|0]=1;}for(e=i<<4,r=t-i|0;a=T2[4+c>>2],i=T2[A+136>>2]+e|0,T2[i>>2]=T2[c>>2],T2[i+4>>2]=a,a=T2[(b=8+c|0)+4>>2],T2[(i=i+8|0)>>2]=T2[b>>2],T2[i+4>>2]=a,e=e+16|0,r=r-1|0;);}if(1<=(0|(T2[A+128>>2]=t)))for(e=T2[A+136>>2],a=T2[f+68>>2],b=0;$[(r=e+b|0)+6>>1]=A2[(i=a+b|0)+6>>1],$[r+8>>1]=A2[i+8>>1],$[r+10>>1]=A2[i+10>>1],$[r>>1]=A2[i>>1],$[r+2>>1]=A2[i+2>>1],T2[r+12>>2]=T2[i+12>>2],$[r+4>>1]=A2[i+4>>1],b=b+16|0,t=t-1|0;);if(T2[A+144>>2]=T2[f+76>>2],b=T2[f+80>>2],(0|(i=T2[A+152>>2]))<(0|b)){if(T2[A+156>>2]<(0|b)){if(a=0,b&&(T2[5498]=T2[5498]+1,(r=K2(b<<5|19))&&(T2[(a=r+19&-16)-4>>2]=r)),1<=(0|i))for(e=0,r=i;o=T2[A+160>>2]+e|0,k=T2[(n=o)+4>>2],T2[(t=e+a|0)>>2]=T2[n>>2],T2[t+4>>2]=k,k=T2[(n=n+24|0)+4>>2],T2[(u=t+24|0)>>2]=T2[n>>2],T2[u+4>>2]=k,k=T2[(u=o+16|0)+4>>2],T2[(n=t+16|0)>>2]=T2[u>>2],T2[n+4>>2]=k,n=T2[(o=o+8|0)+4>>2],T2[(t=t+8|0)>>2]=T2[o>>2],T2[t+4>>2]=n,e=e+32|0,r=r-1|0;);(r=T2[A+160>>2])&&S2[A+164|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+160>>2]=a,T2[A+156>>2]=b,p2[A+164|0]=1;}for(r=i<<5,t=b-i|0;a=T2[4+c>>2],i=T2[A+160>>2]+r|0,T2[(e=i)>>2]=T2[c>>2],T2[e+4>>2]=a,o=T2[(a=24+c|0)+4>>2],T2[(e=e+24|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=16+c|0)+4>>2],T2[(e=i+16|0)>>2]=T2[a>>2],T2[e+4>>2]=o,a=T2[(e=8+c|0)+4>>2],T2[(i=i+8|0)>>2]=T2[e>>2],T2[i+4>>2]=a,r=r+32|0,t=t-1|0;);}if(1<=(0|(T2[A+152>>2]=b)))for(e=T2[A+160>>2]+16|0,r=T2[f+72>>2];$[e-10>>1]=A2[r+14>>1],$[e-8>>1]=A2[r+16>>1],$[e-6>>1]=A2[r+18>>1],$[e-16>>1]=A2[r+8>>1],$[e-14>>1]=A2[r+10>>1],f=T2[r+4>>2],T2[(A=e-4|0)>>2]=T2[r>>2],T2[A+4>>2]=f,$[e-12>>1]=A2[r+12>>1],e=e+32|0,r=r+20|0,b=b-1|0;);L2=c+64|0;},function(A,f){var r=0,e=0,i=0,a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0;if(L2=c=L2+-64|0,j2[(A|=0)+20>>2]=X[(f|=0)+32>>3],j2[A+4>>2]=X[f>>3],j2[A+8>>2]=X[f+8>>3],j2[A+12>>2]=X[f+16>>3],j2[A+16>>2]=X[f+24>>3],j2[A+36>>2]=X[f+64>>3],j2[A+24>>2]=X[f+40>>3],j2[A+28>>2]=X[f+48>>3],j2[A+32>>2]=X[f+56>>3],j2[A+40>>2]=X[f+72>>3],T2[A+56>>2]=T2[f+96>>2],j2[A+44>>2]=X[f+80>>3],j2[A+48>>2]=X[f+88>>3],p2[A+60|0]=0!=T2[f+100>>2],b=T2[f+104>>2],T2[(r=56+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=48+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=40+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=32+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=24+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=16+c|0)>>2]=0,T2[r+4>>2]=0,T2[(r=8+c|0)>>2]=0,T2[r+4>>2]=0,T2[c>>2]=0,((T2[4+c>>2]=0)|(i=T2[A+88>>2]))<(0|b)){if(T2[A+92>>2]<(0|b)){if(b&&(T2[5498]=T2[5498]+1,(r=K2(b<<6|19))&&(T2[(a=r+19&-16)-4>>2]=r)),1<=(0|i))for(r=i;o=T2[A+96>>2]+t|0,k=T2[(n=o)+4>>2],T2[(e=a+t|0)>>2]=T2[n>>2],T2[e+4>>2]=k,k=T2[(n=n+56|0)+4>>2],T2[(u=e+56|0)>>2]=T2[n>>2],T2[u+4>>2]=k,k=T2[(u=o+48|0)+4>>2],T2[(n=e+48|0)>>2]=T2[u>>2],T2[n+4>>2]=k,k=T2[(u=o+40|0)+4>>2],T2[(n=e+40|0)>>2]=T2[u>>2],T2[n+4>>2]=k,k=T2[(u=o+32|0)+4>>2],T2[(n=e+32|0)>>2]=T2[u>>2],T2[n+4>>2]=k,k=T2[(u=o+24|0)+4>>2],T2[(n=e+24|0)>>2]=T2[u>>2],T2[n+4>>2]=k,k=T2[(u=o+16|0)+4>>2],T2[(n=e+16|0)>>2]=T2[u>>2],T2[n+4>>2]=k,n=T2[(o=o+8|0)+4>>2],T2[(e=e+8|0)>>2]=T2[o>>2],T2[e+4>>2]=n,t=t- -64|0,r=r-1|0;);(r=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+96>>2]=a,T2[A+92>>2]=b,p2[A+100|0]=1;}for(r=i<<6,t=b-i|0;a=T2[4+c>>2],i=T2[A+96>>2]+r|0,T2[(e=i)>>2]=T2[c>>2],T2[e+4>>2]=a,o=T2[(a=56+c|0)+4>>2],T2[(e=e+56|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=48+c|0)+4>>2],T2[(e=i+48|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=40+c|0)+4>>2],T2[(e=i+40|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=32+c|0)+4>>2],T2[(e=i+32|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=24+c|0)+4>>2],T2[(e=i+24|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=16+c|0)+4>>2],T2[(e=i+16|0)>>2]=T2[a>>2],T2[e+4>>2]=o,a=T2[(e=8+c|0)+4>>2],T2[(i=i+8|0)>>2]=T2[e>>2],T2[i+4>>2]=a,r=r- -64|0,t=t-1|0;);}if(1<=(0|(T2[A+88>>2]=b)))for(e=T2[f+112>>2]+72|0,r=T2[A+96>>2]+40|0;T2[r-8>>2]=T2[e-8>>2],j2[r-24>>2]=X[e-40>>3],j2[r-20>>2]=X[e-32>>3],j2[r-16>>2]=X[e-24>>3],j2[r-12>>2]=X[e-16>>3],j2[r-40>>2]=X[e-72>>3],j2[r-36>>2]=X[e+-64>>3],j2[r-32>>2]=X[e-56>>3],j2[r-28>>2]=X[e-48>>3],T2[r-4>>2]=T2[e-4>>2],T2[r>>2]=T2[e>>2],r=r- -64|0,e=e+80|0,b=b-1|0;);if(t=T2[f+108>>2],T2[(r=8+c|0)>>2]=0,T2[r+4>>2]=0,T2[c>>2]=0,((T2[4+c>>2]=0)|(i=T2[A+128>>2]))<(0|t)){if(T2[A+132>>2]<(0|t)){if(a=0,t&&(T2[5498]=T2[5498]+1,(r=K2(19+(t<<4)|0))&&(T2[(a=r+19&-16)-4>>2]=r)),1<=(0|i))for(e=0,r=i;b=T2[A+136>>2]+e|0,u=T2[b+4>>2],T2[(n=o=e+a|0)>>2]=T2[b>>2],T2[n+4>>2]=u,n=T2[(b=b+8|0)+4>>2],T2[(o=o+8|0)>>2]=T2[b>>2],T2[o+4>>2]=n,e=e+16|0,r=r-1|0;);(r=T2[A+136>>2])&&S2[A+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+136>>2]=a,T2[A+132>>2]=t,p2[A+140|0]=1;}for(e=i<<4,r=t-i|0;a=T2[4+c>>2],i=T2[A+136>>2]+e|0,T2[i>>2]=T2[c>>2],T2[i+4>>2]=a,a=T2[(b=8+c|0)+4>>2],T2[(i=i+8|0)>>2]=T2[b>>2],T2[i+4>>2]=a,e=e+16|0,r=r-1|0;);}if(1<=(0|(T2[A+128>>2]=t)))for(e=T2[A+136>>2],a=T2[f+116>>2],b=0;$[(r=e+b|0)+6>>1]=A2[(i=a+b|0)+6>>1],$[r+8>>1]=A2[i+8>>1],$[r+10>>1]=A2[i+10>>1],$[r>>1]=A2[i>>1],$[r+2>>1]=A2[i+2>>1],T2[r+12>>2]=T2[i+12>>2],$[r+4>>1]=A2[i+4>>1],b=b+16|0,t=t-1|0;);if(T2[A+144>>2]=T2[f+120>>2],b=T2[f+124>>2],(0|(i=T2[A+152>>2]))<(0|b)){if(T2[A+156>>2]<(0|b)){if(a=0,b&&(T2[5498]=T2[5498]+1,(r=K2(b<<5|19))&&(T2[(a=r+19&-16)-4>>2]=r)),1<=(0|i))for(e=0,r=i;o=T2[A+160>>2]+e|0,k=T2[(n=o)+4>>2],T2[(t=e+a|0)>>2]=T2[n>>2],T2[t+4>>2]=k,k=T2[(n=n+24|0)+4>>2],T2[(u=t+24|0)>>2]=T2[n>>2],T2[u+4>>2]=k,k=T2[(u=o+16|0)+4>>2],T2[(n=t+16|0)>>2]=T2[u>>2],T2[n+4>>2]=k,n=T2[(o=o+8|0)+4>>2],T2[(t=t+8|0)>>2]=T2[o>>2],T2[t+4>>2]=n,e=e+32|0,r=r-1|0;);(r=T2[A+160>>2])&&S2[A+164|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+160>>2]=a,T2[A+156>>2]=b,p2[A+164|0]=1;}for(r=i<<5,t=b-i|0;a=T2[4+c>>2],i=T2[A+160>>2]+r|0,T2[(e=i)>>2]=T2[c>>2],T2[e+4>>2]=a,o=T2[(a=24+c|0)+4>>2],T2[(e=e+24|0)>>2]=T2[a>>2],T2[e+4>>2]=o,o=T2[(a=16+c|0)+4>>2],T2[(e=i+16|0)>>2]=T2[a>>2],T2[e+4>>2]=o,a=T2[(e=8+c|0)+4>>2],T2[(i=i+8|0)>>2]=T2[e>>2],T2[i+4>>2]=a,r=r+32|0,t=t-1|0;);}if(1<=(0|(T2[A+152>>2]=b)))for(e=T2[A+160>>2]+16|0,r=T2[f+128>>2];$[e-10>>1]=A2[r+14>>1],$[e-8>>1]=A2[r+16>>1],$[e-6>>1]=A2[r+18>>1],$[e-16>>1]=A2[r+8>>1],$[e-14>>1]=A2[r+10>>1],f=T2[r+4>>2],T2[(A=e-4|0)>>2]=T2[r>>2],T2[A+4>>2]=f,$[e-12>>1]=A2[r+12>>1],e=e+32|0,r=r+20|0,b=b-1|0;);L2=c+64|0;},function(A){return d0(A|=0),0|A;},function(A){d0(A|=0),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f,r,e){return B0(A|=0,f|=0,r|=0,e|=0),1;},I,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c,u,k,l,s=z2(0),v=z2(0),d=z2(0),B=z2(0),Q=0,g=z2(0),w=0,G=z2(0),C=z2(0),E=z2(0),D=z2(0),h=(0),d=(j2[f+40>>2]),s=j2[f+24>>2],Z=(B=(B=(v=j2[f+8>>2])>z2(-0xde0b6b000000000)?v:z2(-0xde0b6b000000000))<s?s:B)<d?d:B;if(v=v<z2(0xde0b6b000000000)?v:z2(0xde0b6b000000000),c=z2(Z-(G=d<(s=s<v?s:v)?d:s)),B=(d=j2[f+36>>2])<(B=(s=j2[f+20>>2])<(B=(v=j2[f+4>>2])<z2(0xde0b6b000000000)?v:z2(0xde0b6b000000000))?s:B)?d:B,d=(s=(v=v>z2(-0xde0b6b000000000)?v:z2(-0xde0b6b000000000))<s?s:v)<d?d:s,u=(s=j2[f+32>>2])<(D=(v=j2[f+16>>2])<(E=(g=j2[f>>2])<z2(0xde0b6b000000000)?g:z2(0xde0b6b000000000))?v:E),k=(C=(g=g>z2(-0xde0b6b000000000)?g:z2(-0xde0b6b000000000))<v?v:g)<s,f=T2[A+8>>2],v=j2[f+44>>2],g=j2[f+40>>2],E=j2[f+12>>2],o=j2[f+8>>2],b=j2[f+36>>2],t=j2[f+4>>2],i=T2[A+4>>2],(0|(A=T2[i+4>>2]))==T2[i+8>>2]&&!((0|(w=A?A<<1:1))<=(0|A))){if(w&&(T2[5498]=T2[5498]+1,(f=K2(19+(w<<4)|0))&&(T2[(h=f+19&-16)-4>>2]=f)),1<=(0|A))for(f=0;a=T2[i+12>>2]+f|0,n=T2[4+a>>2],T2[(Q=f+h|0)>>2]=T2[a>>2],T2[Q+4>>2]=n,n=T2[4+(a=8+a|0)>>2],T2[(Q=Q+8|0)>>2]=T2[a>>2],T2[Q+4>>2]=n,f=f+16|0,A=A-1|0;);(A=T2[i+12>>2])&&S2[i+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),T2[i+12>>2]=h,p2[i+16|0]=1,T2[i+8>>2]=w,A=T2[i+4>>2];}l=z2(d-B),A=T2[i+12>>2]+(A<<4)|0,T2[A+12>>2]=r<<21|e,D=z2((C=k?s:C)-(s=u?s:D)),f=A,r=c<z2(.0020000000949949026),e=(G=z2(z2((r?z2(G+z2(-.0010000000474974513)):G)-E)*v))<z2(4294967296)&G>=z2(0)?~~G>>>0:0,$[f+4>>1]=65534&e,f=A,e=l<z2(.0020000000949949026),w=(B=z2(z2((e?z2(B+z2(-.0010000000474974513)):B)-o)*g))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,$[f+2>>1]=65534&w,f=A,w=D<z2(.0020000000949949026),Q=(s=z2(z2((w?z2(s+z2(-.0010000000474974513)):s)-t)*b))<z2(4294967296)&s>=z2(0)?~~s>>>0:0,$[f>>1]=65534&Q,Q=A+10|0,f=(s=z2(z2(z2((r?z2(Z+z2(.0010000000474974513)):Z)-E)*v)+z2(1)))<z2(4294967296)&s>=z2(0)?~~s>>>0:0,$[Q>>1]=1|f,r=A+8|0,f=(d=z2(z2(z2((e?z2(d+z2(.0010000000474974513)):d)-o)*g)+z2(1)))<z2(4294967296)&d>=z2(0)?~~d>>>0:0,$[r>>1]=1|f,f=(d=z2(z2(z2((w?z2(C+z2(.0010000000474974513)):C)-t)*b)+z2(1)))<z2(4294967296)&d>=z2(0)?~~d>>>0:0,$[A+6>>1]=1|f,T2[i+4>>2]=T2[i+4>>2]+1;},I,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c,u,k,l,s,v,d,B=z2(0),Q=z2(0),g=z2(0),w=z2(0),G=0,C=z2(0),E=z2(0),D=z2(0),h=z2(0),Z=(L2-32|0);if(L2=Z,B=j2[f+28>>2],k=(g=(Q=j2[f+12>>2])>z2(0)?Q:z2(0))<B?B:g,g=j2[f+24>>2],l=(w=(C=j2[f+8>>2])>z2(-0xde0b6b000000000)?C:z2(-0xde0b6b000000000))<g?g:w,w=j2[f+20>>2],s=(D=(E=j2[f+4>>2])>z2(-0xde0b6b000000000)?E:z2(-0xde0b6b000000000))<w?w:D,D=j2[f+16>>2],h=(h=(c=j2[f>>2])>z2(-0xde0b6b000000000)?c:z2(-0xde0b6b000000000))<D?D:h,v=B<(Q=Q<z2(0)?Q:z2(0))?B:Q,d=g<(B=C<z2(0xde0b6b000000000)?C:z2(0xde0b6b000000000))?g:B,w=w<(B=E<z2(0xde0b6b000000000)?E:z2(0xde0b6b000000000))?w:B,E=D<(B=c<z2(0xde0b6b000000000)?c:z2(0xde0b6b000000000))?D:B,B=j2[f+44>>2],Q=j2[f+40>>2],g=j2[f+36>>2],C=j2[f+32>>2],o=T2[A+4>>2],(0|(G=T2[o+4>>2]))==T2[o+8>>2]&&!((0|(u=G?G<<1:1))<=(0|G))){if(f=0,u&&(T2[5498]=T2[5498]+1,(A=K2(u<<6|19))&&(T2[(f=A+19&-16)-4>>2]=A)),1<=(0|G))for(A=0;b=T2[o+12>>2]+A|0,n=T2[4+(i=b)>>2],T2[(a=t=A+f|0)>>2]=T2[i>>2],T2[4+a>>2]=n,n=T2[4+(i=56+i|0)>>2],T2[(a=56+a|0)>>2]=T2[i>>2],T2[4+a>>2]=n,n=T2[4+(a=48+b|0)>>2],T2[(i=48+t|0)>>2]=T2[a>>2],T2[4+i>>2]=n,n=T2[4+(a=40+b|0)>>2],T2[(i=40+t|0)>>2]=T2[a>>2],T2[4+i>>2]=n,n=T2[4+(a=32+b|0)>>2],T2[(i=32+t|0)>>2]=T2[a>>2],T2[4+i>>2]=n,n=T2[4+(a=24+b|0)>>2],T2[(i=24+t|0)>>2]=T2[a>>2],T2[4+i>>2]=n,n=T2[4+(a=16+b|0)>>2],T2[(i=16+t|0)>>2]=T2[a>>2],T2[4+i>>2]=n,i=T2[4+(b=8+b|0)>>2],T2[(t=8+t|0)>>2]=T2[b>>2],T2[4+t>>2]=i,A=A- -64|0,G=G-1|0;);(A=T2[o+12>>2])&&S2[o+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2])),T2[o+12>>2]=f,p2[o+16|0]=1,T2[o+8>>2]=u,G=T2[o+4>>2];}A=T2[o+12>>2]+(G<<6)|0,T2[A+40>>2]=e,T2[A+36>>2]=r,T2[A+32>>2]=-1,j2[A+16>>2]=h<C?C:h,j2[A+12>>2]=B<v?B:v,j2[A+8>>2]=Q<d?Q:d,j2[A+4>>2]=g<w?g:w,j2[A>>2]=C<E?C:E,f=T2[16+Z>>2],T2[A+44>>2]=T2[12+Z>>2],T2[A+48>>2]=f,j2[A+28>>2]=k<B?B:k,j2[A+24>>2]=l<Q?Q:l,j2[A+20>>2]=s<g?g:s,e=T2[(r=20+Z|0)+4>>2],T2[(f=A+52|0)>>2]=T2[r>>2],T2[f+4>>2]=e,T2[A+60>>2]=T2[28+Z>>2],T2[o+4>>2]=T2[o+4>>2]+1,L2=32+Z|0;},function(A){var f;return T2[(A|=0)>>2]=10608,S2[A+69|0]&&(f=T2[A+60>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+60>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),0|A;},function(A){var f;T2[(A|=0)>>2]=10608,S2[A+69|0]&&(f=T2[A+60>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+60>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f){A|=0,f|=0,z2(0);var r=0|n1[T2[T2[A>>2]+28>>2]](A),e=z2(j2[r>>2]-j2[f>>2]),i=z2(e*e);e=z2(j2[4+r>>2]-j2[f+4>>2]),i=z2(i+z2(e*e)),e=z2(j2[8+r>>2]-j2[f+8>>2]),z2(i+z2(e*e))>z2(1.1920928955078125e-7)&&(v0(A,f),S2[A+69|0]&&(f=T2[A+60>>2],n1[T2[T2[f>>2]>>2]](f),(f=T2[A+60>>2])&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]))),T2[5498]=T2[5498]+1,f=0,(r=K2(191))&&(T2[(f=r+19&-16)-4>>2]=r),p2[f+80|0]=1,p2[f+60|0]=0,T2[f+52>>2]=287,T2[f+76>>2]=0,p2[f+100|0]=1,T2[f+68>>2]=0,T2[f+72>>2]=0,T2[f+96>>2]=0,p2[f+120|0]=1,T2[f+88>>2]=0,T2[f+92>>2]=0,T2[f+116>>2]=0,p2[f+140|0]=1,T2[f+108>>2]=0,T2[f+112>>2]=0,T2[f+136>>2]=0,p2[f+164|0]=1,T2[f+144>>2]=0,T2[f+128>>2]=0,T2[f+132>>2]=0,T2[f+160>>2]=0,T2[f+152>>2]=0,T2[f+156>>2]=0,T2[f+168>>2]=0,T2[f+28>>2]=2139095039,T2[f+32>>2]=0,T2[f+20>>2]=2139095039,T2[f+24>>2]=2139095039,T2[f+12>>2]=-8388609,T2[f+16>>2]=0,T2[f+4>>2]=-8388609,T2[f+8>>2]=-8388609,T2[f>>2]=10280,G0(T2[A+60>>2]=f,T2[A+56>>2],S2[A+68|0],A+24|0,A+40|0),p2[A+69|0]=1);},function(A){return 10904;},U2,function(A,f,r){f|=0;var e=0,i=0,a=0,n=0,o=0,b=0,t=0,c=0,e=0|n1[T2[T2[(r|=0)>>2]+40>>2]](r,A|=0),i=0|n1[T2[T2[r>>2]+28>>2]](r,e);return (T2[f>>2]=i)&&n1[T2[T2[r>>2]+48>>2]](r,e),e=T2[A+4>>2],T2[f+8>>2]=0,T2[f+4>>2]=e,e=T2[A+56>>2],n1[T2[T2[e>>2]+56>>2]](e,f+12|0,r),j2[f+52>>2]=j2[A+20>>2],!T2[A+60>>2]||1&n1[T2[T2[r>>2]+52>>2]](r)?(T2[f+40>>2]=0,T2[f+44>>2]=0):(e=0|n1[T2[T2[r>>2]+24>>2]](r,T2[A+60>>2]))?(T2[f+44>>2]=0,T2[f+40>>2]=e):(e=0|n1[T2[T2[r>>2]+28>>2]](r,T2[A+60>>2]),T2[f+44>>2]=0,T2[f+40>>2]=e,e=T2[A+60>>2],n=r,o=0|n1[T2[T2[e>>2]+12>>2]](e),a=T2[T2[r>>2]+16>>2],e=0|n1[a](0|n,0|o,0|(b=1)),i=T2[A+60>>2],n=0|n1[T2[T2[i>>2]+16>>2]](i,T2[(o=e)+8>>2],b=r),c=T2[A+60>>2],a=T2[T2[r>>2]+20>>2],n1[a](0|b,0|o,0|n,0|(t=1213612625),0|c)),!T2[A+64>>2]||2&n1[T2[T2[r>>2]+52>>2]](r)?T2[f+48>>2]=0:(e=0|n1[T2[T2[r>>2]+24>>2]](r,T2[A+64>>2]))?T2[f+48>>2]=e:(a=f,c=0|n1[T2[T2[r>>2]+28>>2]](r,T2[A+64>>2]),T2[a+48>>2]=c,e=T2[A+64>>2],c=r,t=0|n1[T2[T2[e>>2]+8>>2]](e),a=T2[T2[r>>2]+16>>2],e=0|n1[a](0|c,0|t,0|(n=1)),i=T2[A+64>>2],c=0|n1[T2[T2[i>>2]+12>>2]](i,T2[(t=e)+8>>2],n=r),b=T2[A+64>>2],a=T2[T2[r>>2]+20>>2],n1[a](0|n,0|t,0|c,0|(o=1346456916),0|b)),T2[f+56>>2]=0,10880;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c,u=0,k=0,l=z2(0),s=z2(0),v=0,d=0,B=z2(0),Q=z2(0),g=0,w=z2(0),G=0,C=0,E=0,D=0,h=0;T2[60+(L2=v=L2-80|0)>>2]=0,T2[8+v>>2]=f,T2[v>>2]=10712,T2[4+v>>2]=T2[A+56>>2],u=T2[A+60>>2];A:if(S2[u+60|0]){k=A=v,w=j2[u+28>>2],l=j2[u+12>>2],s=j2[r+8>>2],n=j2[u+44>>2],f=(s=z2(z2((w<(s=s<l?l:s)?w:s)-l)*n))<z2(4294967296)&s>=z2(0)?~~s>>>0:0,$[k+78>>1]=f&=65534,g=A,i=j2[u+24>>2],s=j2[u+8>>2],B=j2[r+4>>2],o=j2[u+40>>2],k=(B=z2(z2((i<(B=B<s?s:B)?i:B)-s)*o))<z2(4294967296)&B>=z2(0)?~~B>>>0:0,$[g+76>>1]=k&=65534,g=A,a=j2[u+20>>2],B=j2[u+4>>2],Q=j2[r>>2],b=j2[u+36>>2],r=(Q=z2(z2((a<(Q=Q<B?B:Q)?a:Q)-B)*b))<z2(4294967296)&Q>=z2(0)?~~Q>>>0:0,$[g+74>>1]=G=65534&r,Q=j2[e+8>>2],r=(l=z2(z2(n*z2((w<(Q=Q<l?l:Q)?w:Q)-l))+z2(1)))<z2(4294967296)&l>=z2(0)?~~l>>>0:0,l=j2[e>>2],w=j2[e+4>>2],$[A+72>>1]=e=1|r,r=(s=z2(z2(o*z2((i<(w=w<s?s:w)?i:w)-s))+z2(1)))<z2(4294967296)&s>=z2(0)?~~s>>>0:0,$[A+70>>1]=g=1|r,A=v,r=(l=z2(z2(b*z2((a<(l=l<B?B:l)?a:l)-B))+z2(1)))<z2(4294967296)&l>=z2(0)?~~l>>>0:0,$[A+68>>1]=C=1|r;f:switch(T2[u+144>>2]){case 0:if(1<=(0|(E=T2[u+56>>2])))for(A=T2[u+136>>2],r=0;u=G>>>0<=A2[A+6>>1]&C>>>0>=A2[A>>1]&f>>>0<=A2[A+10>>1]&e>>>0>=A2[A+4>>1]&k>>>0<=A2[A+8>>1]&g>>>0>=A2[A+2>>1],(h=(0|(D=T2[A+12>>2]))<0)||u&&n1[T2[T2[v>>2]+8>>2]](v,D>>>21|0,2097151&D),A=h&(-1^u)?(r=r-(u=T2[A+12>>2])|0,A-(u<<4)|0):(r=r+1|0,A+16|0),d=d+1|0,(0|r)<(0|E););if(T2[5592]>=(0|d))break A;T2[5592]=d;break A;case 1:if(T2[u+152>>2]<1)break A;for(;;){if(A=T2[u+160>>2]+(D<<5)|0,!(G>>>0>A2[A+6>>1]||C>>>0<A2[A>>1]||f>>>0>A2[A+10>>1]||e>>>0<A2[A+4>>1]||k>>>0>A2[A+8>>1]||g>>>0<A2[A+2>>1])){if((0|(d=T2[A+16>>2]))<1)d=0;else for(c=d+(r=T2[A+12>>2])|0,A=T2[u+136>>2]+(r<<4)|0,d=0;E=G>>>0<=A2[A+6>>1]&C>>>0>=A2[A>>1]&f>>>0<=A2[A+10>>1]&e>>>0>=A2[A+4>>1]&k>>>0<=A2[A+8>>1]&g>>>0>=A2[A+2>>1],(t=(0|(h=T2[A+12>>2]))<0)||E&&n1[T2[T2[v>>2]+8>>2]](v,h>>>21|0,2097151&h),A=(-1^E)&t?(r=r-(E=T2[A+12>>2])|0,A-(E<<4)|0):(r=r+1|0,A+16|0),d=d+1|0,(0|r)<(0|c););T2[5592]>=(0|d)||(T2[5592]=d);}if(!((0|(D=D+1|0))<T2[u+152>>2]))break;}break A;case 2:break f;default:break A;}!function A(f,r,e,i){for(var a,n=0;;){f:{if(!(A2[e>>1]>A2[f+6>>1]||A2[i>>1]<A2[f>>1]||A2[e+4>>1]>A2[f+10>>1]||A2[i+4>>1]<A2[f+4>>1]||A2[e+2>>1]>A2[f+8>>1]||A2[i+2>>1]<A2[f+2>>1])){if((0|(n=T2[f+12>>2]))<0)break f;n1[T2[T2[r>>2]+8>>2]](r,n>>>21|0,2097151&n);}return;}A(n=f+16|0,r,e,i),a=f+32|0,f=-1<(0|(f=T2[f+28>>2]))?a:n-(f<<4)|0;}}(T2[u+136>>2],v,74+v|0,68+v|0);}else {if(1<=(0|(g=T2[u+56>>2])))for(A=T2[u+96>>2],f=0;;){k=0,j2[r>>2]>j2[A+16>>2]||(k=0,j2[e>>2]<j2[A>>2]||(k=1)),d=0,j2[r+8>>2]>j2[A+24>>2]||j2[e+8>>2]<j2[A+8>>2]||(d=k);f:{r:{if(j2[e+4>>2]<j2[A+4>>2]||j2[r+4>>2]>j2[A+20>>2])C=-1==(0|(k=T2[A+32>>2])),d=0;else if((C=-1==(0|(k=T2[A+32>>2])))&d){n1[T2[T2[v>>2]+8>>2]](v,T2[A+36>>2],T2[A+40>>2]),g=T2[u+56>>2];break r;}if(!C&&!d){f=f+k|0,A=(k<<6)+A|0;break f;}}f=f+1|0,A=A- -64|0;}if(G=G+1|0,!((0|f)<(0|g)))break;}T2[5592]>=(0|G)||(T2[5592]=G);}L2=80+v|0;},function(A,f){f|=0;var r,e,i,a,n=0;(n=T2[(A|=0)+60>>2])&&(i=f,a=0|n1[T2[T2[n>>2]+12>>2]](n),e=T2[T2[f>>2]+16>>2],n=0|n1[e](0|i,0|a,1),r=T2[A+60>>2],i=0|n1[T2[T2[r>>2]+16>>2]](r,T2[8+(a=n)>>2],n=f),A=T2[A+60>>2],e=T2[T2[f>>2]+20>>2],n1[e](0|n,0|a,0|i,1213612625,0|A));},function(A,f){f|=0;var r,e,i,a,n=0;(n=T2[(A|=0)+64>>2])&&(i=f,a=0|n1[T2[T2[n>>2]+8>>2]](n),e=T2[T2[f>>2]+16>>2],n=0|n1[e](0|i,0|a,1),r=T2[A+64>>2],i=0|n1[T2[T2[r>>2]+12>>2]](r,T2[8+(a=n)>>2],n=f),A=T2[A+64>>2],e=T2[T2[f>>2]+20>>2],n1[e](0|n,0|a,0|i,1346456916,0|A));},_,I,function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o,b,t=0,c=0,u=z2(0),k=0,l=z2(0),s=z2(0),v=0,d=z2(0),B=0;L2=k=L2-32|0,T2[A+60>>2]=T2[A+60>>2]+1,v=T2[A+4>>2],n1[T2[T2[v>>2]+16>>2]](v,28+k|0,24+k|0,20+k|0,16+k|0,12+k|0,8+k|0,4+k|0,k,f),v=(e=T2[A+4>>2])+12|0,i=T2[12+k>>2]+P2(T2[8+k>>2],r)|0,a=T2[20+k>>2],o=c=T2[28+k>>2],b=n=T2[16+k>>2];A:{f:{r:{e:{i:{a:{n:{if(3!=(0|(B=T2[k>>2]))){if(2!=(0|B))break n;t=T2[8+i>>2];break a;}if(t=P2(A2[4+i>>1],n)+c|0,t=a?(l=z2(j2[e+8>>2]*z2(X[t+8>>3])),s=z2(j2[e+4>>2]*z2(X[t>>3])),u=z2(X[t+16>>3]),v):(l=z2(j2[t+4>>2]*j2[e+8>>2]),s=z2(j2[t>>2]*j2[e+4>>2]),u=j2[e+12>>2],t+8|0),d=j2[t>>2],T2[A+56>>2]=0,j2[A+48>>2]=l,j2[A+44>>2]=s,j2[A+52>>2]=d*u,t=P2(A2[2+i>>1],n)+c|0,!a)break i;l=z2(j2[e+8>>2]*z2(X[t+8>>3])),s=z2(j2[e+4>>2]*z2(X[t>>3])),u=z2(X[t+16>>3]),t=v;break e;}t=S2[2+i|0];}if(t=P2(t,n)+c|0,t=a?(l=z2(j2[e+8>>2]*z2(X[t+8>>3])),s=z2(j2[e+4>>2]*z2(X[t>>3])),u=z2(X[t+16>>3]),v):(l=z2(j2[t+4>>2]*j2[e+8>>2]),s=z2(j2[t>>2]*j2[e+4>>2]),u=j2[e+12>>2],t+8|0),d=j2[t>>2],T2[A+56>>2]=0,j2[A+48>>2]=l,j2[A+44>>2]=s,j2[A+52>>2]=d*u,2==(0|B))break r;t=S2[1+i|0];break f;}l=z2(j2[t+4>>2]*j2[e+8>>2]),s=z2(j2[t>>2]*j2[e+4>>2]),u=j2[e+12>>2],t=t+8|0;}d=j2[t>>2],T2[A+40>>2]=0,j2[A+32>>2]=l,j2[A+28>>2]=s,j2[A+36>>2]=d*u,c=P2(A2[i>>1],n)+c|0,l=a?(s=z2(j2[e+4>>2]*z2(X[c>>3])),u=z2(X[c+16>>3]),z2(j2[e+8>>2]*z2(X[c+8>>3]))):(v=c+8|0,s=z2(j2[c>>2]*j2[e+4>>2]),u=j2[e+12>>2],z2(j2[c+4>>2]*j2[e+8>>2])),u=z2(j2[v>>2]*u);break A;}t=T2[4+i>>2];}t=o+P2(b,t)|0,t=a?(l=z2(j2[e+8>>2]*z2(X[t+8>>3])),s=z2(j2[e+4>>2]*z2(X[t>>3])),u=z2(X[t+16>>3]),v):(l=z2(j2[t+4>>2]*j2[e+8>>2]),s=z2(j2[t>>2]*j2[e+4>>2]),u=j2[e+12>>2],t+8|0),d=j2[t>>2],T2[A+40>>2]=0,j2[A+32>>2]=l,j2[A+28>>2]=s,j2[A+36>>2]=d*u,t=2!=(0|B)?S2[0|i]:T2[i>>2],c=P2(t,n)+c|0,l=a?(s=z2(j2[e+4>>2]*z2(X[c>>3])),u=z2(X[c+16>>3]),z2(j2[e+8>>2]*z2(X[c+8>>3]))):(v=c+8|0,s=z2(j2[c>>2]*j2[e+4>>2]),u=j2[e+12>>2],z2(j2[c+4>>2]*j2[e+8>>2])),u=z2(j2[v>>2]*u);}j2[A+12>>2]=s,T2[A+24>>2]=0,j2[A+20>>2]=u,j2[A+16>>2]=l,v=T2[A+8>>2],n1[T2[T2[v>>2]+8>>2]](v,A+12|0,f,r),A=T2[A+4>>2],n1[T2[T2[A>>2]+24>>2]](A,f),L2=32+k|0;},I,C0,I,C0,Y2,h2,function(A,f){A|=0,f|=0,z2(0);var r,e,i=0;L2=i=L2-96|0,e=T2[f+4>>2],r=T2[A+100>>2],T2[r+4>>2]=T2[f>>2],T2[r+8>>2]=e,e=T2[(f=f+8|0)+4>>2],T2[(r=r+12|0)>>2]=T2[f>>2],T2[4+r>>2]=e,p2[A+96|0]=1,S2[22256]||(T2[5569]=0,T2[5570]=0,T2[5568]=1065353216,T2[5571]=0,T2[5572]=0,T2[5574]=0,T2[5575]=0,T2[5573]=1065353216,T2[5576]=0,T2[5577]=0,T2[5581]=0,T2[5582]=0,T2[5580]=-1082130432,T2[5578]=1065353216,T2[5579]=0,T2[5583]=0,T2[5584]=0,T2[5586]=0,T2[5587]=0,T2[5585]=-1082130432,T2[5588]=0,T2[5589]=0,T2[5590]=-1082130432,T2[5591]=0,p2[22256]=1),f=d2(i,0,96),n1[T2[T2[A>>2]+76>>2]](A,22272,f,6),i=j2[A+52>>2],j2[A+80>>2]=j2[f>>2]+i,j2[A+64>>2]=j2[f+48>>2]-i,j2[A+84>>2]=i+j2[f+20>>2],j2[A+68>>2]=j2[f+68>>2]-i,j2[A+88>>2]=i+j2[f+40>>2],j2[A+72>>2]=j2[f+88>>2]-i,L2=f+96|0;},function(A){return T2[(A|=0)+100>>2]+4|0;},function(A){return 11437;},i2,function(A,f,r){A|=0,f|=0,r|=0;var e=0,i=z2(0),a=z2(0),n=z2(0),o=z2(0);L2=e=L2-80|0,a=j2[r>>2],n=j2[r+4>>2],o=j2[r+8>>2],i=(i=z2(z2(z2(a*a)+z2(n*n))+z2(o*o)))<z2(9999999747378752e-20)?(n=z2(0),a=z2(1),o=z2(0),z2(0)):(i=z2(z2(1)/z2(_2(i))),o=z2(o*i),n=z2(n*i),a=z2(a*i),j2[r+12>>2]),T2[(r=52+e|0)>>2]=0,T2[r+4>>2]=0,j2[76+e>>2]=i,j2[72+e>>2]=o,j2[68+e>>2]=n,T2[44+e>>2]=0,T2[48+e>>2]=0,T2[40+e>>2]=11384,j2[64+e>>2]=a,T2[60+e>>2]=-581039253,T2[32+e>>2]=1566444395,T2[36+e>>2]=0,T2[24+e>>2]=1566444395,T2[28+e>>2]=1566444395,f=T2[f+100>>2],T2[16+e>>2]=-581039253,T2[20+e>>2]=0,T2[8+e>>2]=-581039253,T2[12+e>>2]=-581039253,n1[T2[T2[f>>2]+8>>2]](f,40+e|0,8+e|0,24+e|0),a=T2[r+4>>2],T2[(f=A+8|0)>>2]=T2[r>>2],T2[f+4>>2]=a,f=T2[48+e>>2],T2[A>>2]=T2[44+e>>2],T2[A+4>>2]=f,L2=80+e|0;},function(A,f,r,e){A|=0,f|=0,r|=0;var i,a,n,o,b=0,t=0,c=0;if(L2=b=L2-80|0,1<=(0|(e|=0))){for(c=r+12|0,t=e;T2[c>>2]=-581039253,c=c+16|0,t=t-1|0;);for(t=40+b|4,c=b+64|0;T2[t>>2]=0,T2[t+4>>2]=0,T2[(i=a=t+8|0)>>2]=0,T2[4+i>>2]=0,i=T2[f+4>>2],T2[c>>2]=T2[f>>2],T2[c+4>>2]=i,o=T2[4+(n=f+8|0)>>2],T2[(i=c+8|0)>>2]=T2[n>>2],T2[4+i>>2]=o,T2[40+b>>2]=11384,T2[60+b>>2]=-581039253,T2[32+b>>2]=1566444395,T2[36+b>>2]=0,T2[24+b>>2]=1566444395,T2[28+b>>2]=1566444395,i=T2[A+100>>2],T2[16+b>>2]=-581039253,T2[20+b>>2]=0,T2[8+b>>2]=-581039253,T2[12+b>>2]=-581039253,n1[T2[T2[i>>2]+8>>2]](i,40+b|0,8+b|0,24+b|0),n=T2[4+a>>2],T2[(i=r+8|0)>>2]=T2[a>>2],T2[4+i>>2]=n,a=T2[t+4>>2],T2[r>>2]=T2[t>>2],T2[r+4>>2]=a,f=f+16|0,r=r+16|0,e=e-1|0;);}L2=80+b|0;},G2,G2,E0,C2,G2,E0,D0,I,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o=z2(0),b=z2(0),t=0,c=(0);r=A+4|0,b=j2[A+20>>2],i=j2[A+24>>2],a=j2[A+28>>2],n=j2[A+32>>2],b<(o=z2(z2(z2(i*j2[f>>2])+z2(a*j2[f+4>>2]))+z2(n*j2[f+8>>2])))&&(j2[A+20>>2]=o,e=T2[f+4>>2],T2[r>>2]=T2[f>>2],T2[r+4>>2]=e,c=T2[(t=f+8|0)+4>>2],T2[(e=r+8|0)>>2]=T2[t>>2],T2[e+4>>2]=c,b=o),b<(o=z2(z2(z2(i*j2[f+16>>2])+z2(a*j2[f+20>>2]))+z2(n*j2[f+24>>2])))?(j2[A+20>>2]=o,t=T2[(e=f+16|0)+4>>2],T2[r>>2]=T2[e>>2],T2[r+4>>2]=t,c=T2[(e=e+8|0)+4>>2],T2[(t=r+8|0)>>2]=T2[e>>2],T2[t+4>>2]=c):o=b,o<(b=z2(z2(z2(i*j2[f+32>>2])+z2(a*j2[f+36>>2]))+z2(n*j2[f+40>>2])))&&(j2[A+20>>2]=b,f=T2[(A=f+32|0)+4>>2],T2[r>>2]=T2[A>>2],T2[r+4>>2]=f,f=r+8|0,r=T2[(A=A+8|0)+4>>2],T2[f>>2]=T2[A>>2],T2[f+4>>2]=r);},_,I2,h0,function(A,f){var r=T2[(f|=0)+4>>2];T2[(A|=0)+24>>2]=T2[f>>2],T2[A+28>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+32|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},function(A){return (A|=0)+24|0;},function(A,f,r){},function(A){return 11568;},E0,Y2,function(A,f,r,e){h2(A|=0,f|=0,r|=0,e|=0);},function(A,f){A|=0,f|=0,z2(0);var r,e,i,a=0;L2=a=L2-96|0,p2[A+96|0]=1,r=j2[f>>2],e=j2[f+4>>2],i=j2[f+8>>2],T2[A+32>>2]=0,j2[A+28>>2]=O2(i),j2[A+24>>2]=O2(e),j2[A+20>>2]=O2(r),S2[22256]||(T2[5569]=0,T2[5570]=0,T2[5568]=1065353216,T2[5571]=0,T2[5572]=0,T2[5574]=0,T2[5575]=0,T2[5573]=1065353216,T2[5576]=0,T2[5577]=0,T2[5581]=0,T2[5582]=0,T2[5580]=-1082130432,T2[5578]=1065353216,T2[5579]=0,T2[5583]=0,T2[5584]=0,T2[5586]=0,T2[5587]=0,T2[5585]=-1082130432,T2[5588]=0,T2[5589]=0,T2[5590]=-1082130432,T2[5591]=0,p2[22256]=1),f=d2(a,0,96),n1[T2[T2[A>>2]+76>>2]](A,22272,f,6),r=j2[A+52>>2],j2[A+80>>2]=r+j2[f>>2],j2[A+64>>2]=j2[f+48>>2]-r,j2[A+84>>2]=r+j2[f+20>>2],j2[A+68>>2]=j2[f+68>>2]-r,j2[A+88>>2]=r+j2[f+40>>2],j2[A+72>>2]=j2[f+88>>2]-r,L2=f+96|0;},function(A){return 11752;},function(A){return T2[(A|=0)+100>>2];},function(A){return (A=T2[(A|=0)+100>>2]-2|0)>>>0<=2?T2[11740+(A<<2)>>2]:0;},function(A,f,r,e){f|=0,r|=0,e|=0;var i=0,a=0;A:{f:{r:{e:{i:{a:switch(T2[(A|=0)+100>>2]-2|0){case 1:n:switch(0|f){case 1:break r;case 0:break e;case 2:break n;default:break i;}break f;case 0:break e;case 2:break a;default:break i;}a:switch(0|f){case 3:f=T2[A+108>>2],T2[r>>2]=T2[A+104>>2],T2[r+4>>2]=f,f=r+8|0,i=T2[(r=A+112|0)+4>>2],T2[f>>2]=T2[r>>2],T2[f+4>>2]=i;break A;case 4:a=T2[(i=A+128|0)+4>>2],T2[(f=r+8|0)>>2]=T2[i>>2],T2[f+4>>2]=a,i=T2[(f=A+120|0)+4>>2],T2[r>>2]=T2[f>>2],T2[r+4>>2]=i;break A;case 2:break f;case 1:break r;case 0:break e;case 5:break a;default:break i;}a=T2[(i=A+144|0)+4>>2],T2[(f=r+8|0)>>2]=T2[i>>2],T2[f+4>>2]=a,i=T2[(f=A+136|0)+4>>2],T2[r>>2]=T2[f>>2],T2[r+4>>2]=i,i=T2[(r=A+160|0)+4>>2],T2[(f=e+8|0)>>2]=T2[r>>2],T2[f+4>>2]=i,f=T2[(A=A+152|0)+4>>2],T2[e>>2]=T2[A>>2],T2[e+4>>2]=f;}return;}return f=T2[A+108>>2],T2[r>>2]=T2[A+104>>2],T2[r+4>>2]=f,f=r+8|0,i=T2[(r=A+112|0)+4>>2],T2[f>>2]=T2[r>>2],T2[f+4>>2]=i,i=T2[(r=A+128|0)+4>>2],T2[(f=e+8|0)>>2]=T2[r>>2],T2[f+4>>2]=i,f=T2[(A=A+120|0)+4>>2],T2[e>>2]=T2[A>>2],void(T2[e+4>>2]=f);}return a=T2[(i=A+128|0)+4>>2],T2[(f=r+8|0)>>2]=T2[i>>2],T2[f+4>>2]=a,i=T2[(f=A+120|0)+4>>2],T2[r>>2]=T2[f>>2],T2[r+4>>2]=i,i=T2[(r=A+144|0)+4>>2],T2[(f=e+8|0)>>2]=T2[r>>2],T2[f+4>>2]=i,f=T2[(A=A+136|0)+4>>2],T2[e>>2]=T2[A>>2],void(T2[e+4>>2]=f);}return a=T2[(i=A+144|0)+4>>2],T2[(f=r+8|0)>>2]=T2[i>>2],T2[f+4>>2]=a,i=T2[(f=A+136|0)+4>>2],T2[r>>2]=T2[f>>2],T2[r+4>>2]=i,i=T2[(r=A+112|0)+4>>2],T2[(f=e+8|0)>>2]=T2[r>>2],T2[f+4>>2]=i,f=T2[A+108>>2],T2[e>>2]=T2[A+104>>2],void(T2[e+4>>2]=f);}i=T2[(r=A+160|0)+4>>2],T2[(f=e+8|0)>>2]=T2[r>>2],T2[f+4>>2]=i,f=T2[(A=A+152|0)+4>>2],T2[e>>2]=T2[A>>2],T2[e+4>>2]=f;},function(A,f,r){var e,i=T2[(f=(A=((f|=0)<<4)+(A|=0)|0)+112|0)+4>>2];T2[(e=(r|=0)+8|0)>>2]=T2[f>>2],T2[4+e>>2]=i,f=T2[(A=A+104|0)+4>>2],T2[r>>2]=T2[A>>2],T2[r+4>>2]=f;},function(A){return 0|(4==(0|(A=T2[(A|=0)+100>>2]))?4:(3==(0|A))<<1);},E0,D0,function(A,f){return 0;},function(A){return T2[(A|=0)>>2]=11796,0|A;},function(A){T2[(A|=0)>>2]=11796,T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0,z2(0);var i=j2[f+56>>2],a=j2[f+36>>2],n=j2[f+40>>2],o=j2[f+52>>2],b=j2[f+20>>2],t=j2[A+120>>2],c=j2[A+28>>2],u=j2[A+44>>2],k=j2[f+24>>2],l=j2[A+124>>2],s=j2[A+32>>2],v=j2[A+48>>2],d=j2[f+32>>2],B=j2[f+48>>2],Q=j2[f>>2],g=j2[f+4>>2],w=j2[f+8>>2],G=j2[f+16>>2],C=j2[A+116>>2],E=j2[A+24>>2],D=j2[A+40>>2],h=z2(n1[T2[T2[A>>2]+48>>2]](A)),f=z2(n1[T2[T2[A>>2]+48>>2]](A)),A=z2(n1[T2[T2[A>>2]+48>>2]](A));T2[r+12>>2]=0,C=z2(z2(C*z2(D-E))*z2(.5)),t=z2(z2(t*z2(u-c))*z2(.5)),c=z2(z2(C*z2(O2(G)))+z2(t*z2(O2(b)))),b=z2(z2(l*z2(v-s))*z2(.5)),c=z2(f+z2(c+z2(b*z2(O2(k))))),j2[r+4>>2]=o-c,u=z2(h+z2(z2(z2(C*z2(O2(Q)))+z2(t*z2(O2(g))))+z2(b*z2(O2(w))))),j2[r>>2]=B-u,C=z2(A+z2(z2(z2(C*z2(O2(d)))+z2(t*z2(O2(a))))+z2(b*z2(O2(n))))),j2[r+8>>2]=i-C,T2[e+12>>2]=0,j2[e+8>>2]=i+C,j2[e+4>>2]=o+c,j2[e>>2]=B+u;},function(A,f){var r=T2[(f|=0)+4>>2];T2[(A|=0)+116>>2]=T2[f>>2],T2[A+120>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+124|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},function(A){return (A|=0)+116|0;},X2,function(A){return 11880;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o=z2(0),b=0,t=z2(0),c=z2(0),u=(0),k=0,l=0,s=0,v=0,d=0,B=0,Q=0;L2=b=L2-48|0,t=j2[A+48>>2],c=j2[A+32>>2],i=z2(z2(1)/j2[A+124>>2]),a=j2[A- -64>>2],l=((o=t<(o=(o=z2(z2(i*j2[e+8>>2])+a))<c?c:o)?t:o)<z2(0)?-.5:.5)+ +o,d=(u=O2(l)<2147483648?~~l:-2147483648)+1|0,l=((o=t<(o=(o=z2(z2(i*j2[r+8>>2])+a))<c?c:o)?t:o)<z2(0)?-.5:.5)+ +o,n=(u=O2(l)<2147483648?~~l:-2147483648)-1|0,t=j2[A+44>>2],c=j2[A+28>>2],i=z2(z2(1)/j2[A+120>>2]),a=j2[A+60>>2],l=((o=t<(o=(o=z2(z2(i*j2[e+4>>2])+a))<c?c:o)?t:o)<z2(0)?-.5:.5)+ +o,B=(u=O2(l)<2147483648?~~l:-2147483648)+1|0,l=((o=t<(o=(o=z2(z2(i*j2[r+4>>2])+a))<c?c:o)?t:o)<z2(0)?-.5:.5)+ +o,u=(u=O2(l)<2147483648?~~l:-2147483648)-1|0,t=j2[A+40>>2],c=j2[A+24>>2],i=z2(z2(1)/j2[A+116>>2]),a=j2[A+56>>2],l=((o=t<(o=(o=z2(z2(i*j2[e>>2])+a))<c?c:o)?t:o)<z2(0)?-.5:.5)+ +o,e=(e=O2(l)<2147483648?~~l:-2147483648)+1|0,l=((o=t<(o=(o=z2(z2(i*j2[r>>2])+a))<c?c:o)?t:o)<z2(0)?-.5:.5)+ +o,r=(r=O2(l)<2147483648?~~l:-2147483648)-1|0,s=T2[A+76>>2]-1|0,v=T2[A+72>>2]-1|0;A:{f:switch(T2[A+112>>2]){case 0:s=(0|d)<(0|s)?d:s,k=0<(0|n)?n:0,v=(0|B)<(0|v)?B:v,Q=0<(0|u)?u:0;break A;case 1:s=(0|d)<(0|s)?d:s,k=0<(0|n)?n:0,v=(0|e)<(0|v)?e:v,Q=0<(0|r)?r:0;break A;case 2:break f;default:break A;}s=(0|B)<(0|s)?B:s,k=0<(0|u)?u:0,v=(0|e)<(0|v)?e:v,Q=0<(0|r)?r:0;}if((0|k)<(0|s))for(;;){if(d=s,(0|v)<=(0|Q))r=k+1|0;else {for(B=1&k,i=z2(0|(u=k+1|0)),a=z2(0|k),r=Q;;){A:{f:{if(!S2[A+108|0]&&(r+k&1||!S2[A+109|0])){if(B)break f;if(!S2[A+110|0])break f;}o=z2(n1[T2[T2[A>>2]+68>>2]](A,r,k));r:{e:switch(T2[A+112>>2]){default:t=j2[4+b>>2],c=j2[b>>2],o=j2[8+b>>2];break r;case 0:T2[12+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break r;case 1:T2[12+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break r;case 2:break e;}T2[12+b>>2]=0,t=z2(a-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}j2[b>>2]=c*j2[A+116>>2],j2[4+b>>2]=t*j2[A+120>>2],j2[8+b>>2]=o*j2[A+124>>2],o=z2(n1[T2[T2[A>>2]+68>>2]](A,r,u));r:{e:switch(T2[A+112>>2]){default:t=j2[20+b>>2],c=j2[16+b>>2],o=j2[24+b>>2];break r;case 0:T2[28+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break r;case 1:T2[28+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break r;case 2:break e;}T2[28+b>>2]=0,t=z2(i-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}j2[16+b>>2]=c*j2[A+116>>2],j2[20+b>>2]=t*j2[A+120>>2],j2[24+b>>2]=o*j2[A+124>>2],o=z2(n1[T2[T2[A>>2]+68>>2]](A,e=r+1|0,u));r:{e:switch(T2[A+112>>2]){default:t=j2[36+b>>2],c=j2[32+b>>2],o=j2[40+b>>2];break r;case 0:T2[44+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break r;case 1:T2[44+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break r;case 2:break e;}T2[44+b>>2]=0,t=z2(i-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}j2[32+b>>2]=c*j2[A+116>>2],j2[36+b>>2]=t*j2[A+120>>2],j2[40+b>>2]=o*j2[A+124>>2],n1[T2[T2[f>>2]+8>>2]](f,b,r,k),o=z2(n1[T2[T2[A>>2]+68>>2]](A,e,u));r:{e:switch(T2[A+112>>2]){default:t=j2[20+b>>2],c=j2[16+b>>2],o=j2[24+b>>2];break r;case 0:T2[28+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break r;case 1:T2[28+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break r;case 2:break e;}T2[28+b>>2]=0,t=z2(i-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}j2[16+b>>2]=c*j2[A+116>>2],j2[20+b>>2]=t*j2[A+120>>2],j2[24+b>>2]=o*j2[A+124>>2],o=z2(n1[T2[T2[A>>2]+68>>2]](A,e,k));r:{e:switch(T2[A+112>>2]){default:t=j2[36+b>>2],c=j2[32+b>>2],o=j2[40+b>>2];break r;case 0:T2[44+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break r;case 1:T2[44+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break r;case 2:break e;}T2[44+b>>2]=0,t=z2(a-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}break A;}o=z2(n1[T2[T2[A>>2]+68>>2]](A,r,k));f:{r:switch(T2[A+112>>2]){default:t=j2[4+b>>2],c=j2[b>>2],o=j2[8+b>>2];break f;case 0:T2[12+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break f;case 1:T2[12+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break f;case 2:break r;}T2[12+b>>2]=0,t=z2(a-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}j2[b>>2]=c*j2[A+116>>2],j2[4+b>>2]=t*j2[A+120>>2],j2[8+b>>2]=o*j2[A+124>>2],o=z2(n1[T2[T2[A>>2]+68>>2]](A,r,u));f:{r:switch(T2[A+112>>2]){default:t=j2[20+b>>2],c=j2[16+b>>2],o=j2[24+b>>2];break f;case 0:T2[28+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break f;case 1:T2[28+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break f;case 2:break r;}T2[28+b>>2]=0,t=z2(i-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|r)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}j2[16+b>>2]=c*j2[A+116>>2],j2[20+b>>2]=t*j2[A+120>>2],j2[24+b>>2]=o*j2[A+124>>2],o=z2(n1[T2[T2[A>>2]+68>>2]](A,e=r+1|0,k));f:{r:switch(T2[A+112>>2]){default:t=j2[36+b>>2],c=j2[32+b>>2],o=j2[40+b>>2];break f;case 0:T2[44+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break f;case 1:T2[44+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break f;case 2:break r;}T2[44+b>>2]=0,t=z2(a-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}j2[32+b>>2]=c*j2[A+116>>2],j2[36+b>>2]=t*j2[A+120>>2],j2[40+b>>2]=o*j2[A+124>>2],n1[T2[T2[f>>2]+8>>2]](f,b,r,k),o=z2(n1[T2[T2[A>>2]+68>>2]](A,e,k));f:{r:switch(T2[A+112>>2]){default:t=j2[4+b>>2],c=j2[b>>2],o=j2[8+b>>2];break f;case 0:T2[12+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break f;case 1:T2[12+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(a-z2(j2[A+92>>2]*z2(.5)));break f;case 2:break r;}T2[12+b>>2]=0,t=z2(a-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}j2[b>>2]=c*j2[A+116>>2],j2[4+b>>2]=t*j2[A+120>>2],j2[8+b>>2]=o*j2[A+124>>2],o=z2(n1[T2[T2[A>>2]+68>>2]](A,e,u));f:{r:switch(T2[A+112>>2]){default:t=j2[36+b>>2],c=j2[32+b>>2],o=j2[40+b>>2];break f;case 0:T2[44+b>>2]=0,c=z2(o-j2[A+56>>2]),t=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break f;case 1:T2[44+b>>2]=0,t=z2(o-j2[A+60>>2]),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(i-z2(j2[A+92>>2]*z2(.5)));break f;case 2:break r;}T2[44+b>>2]=0,t=z2(i-z2(j2[A+92>>2]*z2(.5))),c=z2(z2(0|e)-z2(j2[A+88>>2]*z2(.5))),o=z2(o-j2[A+64>>2]);}}if(j2[32+b>>2]=c*j2[A+116>>2],j2[36+b>>2]=t*j2[A+120>>2],j2[40+b>>2]=o*j2[A+124>>2],n1[T2[T2[f>>2]+8>>2]](f,b,r,k),(0|v)==(0|(r=e)))break;}r=u;}if((0|d)==(0|(k=r)))break;}L2=48+b|0;},function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0);A:switch(T2[A+104>>2]){case 0:return z2(j2[T2[A+100>>2]+(P2(T2[A+72>>2],r)+f<<2)>>2]);case 5:return z2(z2(j2[A+96>>2]*z2(S2[T2[A+100>>2]+(P2(T2[A+72>>2],r)+f|0)|0])));case 3:e=z2(j2[A+96>>2]*z2($[T2[A+100>>2]+(P2(T2[A+72>>2],r)+f<<1)>>1]));break;default:break A;}return z2(e);},I2,h0,function(A,f,r){A|=0,f=z2(f),r|=0,z2(0);var e=z2(n1[T2[T2[A>>2]+48>>2]](A)),A=z2(n1[T2[T2[A>>2]+48>>2]](A));T2[r+12>>2]=0,f=z2(A*z2(e*z2(f*z2(.4000000059604645)))),j2[r+8>>2]=f,j2[r+4>>2]=f,j2[r>>2]=f;},function(A){return 11920;},w2,function(A){return z2(z2(j2[(A|=0)+36>>2]*j2[A+20>>2]));},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n=z2(0),o=z2(0),b=z2(0),t=0;L2=t=L2-16|0,n1[T2[T2[f>>2]+68>>2]](t,f,r),i=T2[4+(a=8+t|0)>>2],T2[(e=A+8|0)>>2]=T2[a>>2],T2[4+e>>2]=i,i=T2[4+t>>2],T2[A>>2]=T2[t>>2],T2[A+4>>2]=i,o=j2[r+4>>2],n=j2[r>>2],b=j2[r+8>>2],i=z2(n1[T2[T2[f>>2]+48>>2]](f)),r=n=(f=z2(z2(z2(n*n)+z2(o*o))+z2(b*b))<z2(14210854715202004e-30))?z2(-1):n,b=f?z2(-1):b,o=f?z2(-1):o,n=z2(z2(1)/z2(_2(z2(z2(b*b)+z2(z2(n*n)+z2(o*o)))))),j2[A>>2]=j2[A>>2]+z2(i*z2(r*n)),j2[A+4>>2]=j2[A+4>>2]+z2(i*z2(o*n)),j2[e>>2]=j2[e>>2]+z2(i*z2(b*n)),L2=16+t|0;},function(A,f,r){T2[(A|=0)>>2]=0,T2[A+4>>2]=0,T2[(A=A+8|0)>>2]=0,T2[A+4>>2]=0;},function(A,f,r,e){r|=0,1<=(0|(e|=0))&&d2(r,0,e<<4);},function(A){o0(A|=0),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},_,I,J0,_,I,x0,_,I,C2,C2,function(A,f,r,e){var i,a;A|=0,f|=0,r|=0,e=z2(e),j2[A+36>>2]>e&&(p2[A+40|0]=1,i=T2[f+4>>2],T2[A+4>>2]=T2[f>>2],T2[A+8>>2]=i,a=T2[(f=f+8|0)+4>>2],T2[(i=A+12|0)>>2]=T2[f>>2],T2[4+i>>2]=a,f=T2[r+4>>2],T2[A+20>>2]=T2[r>>2],T2[A+24>>2]=f,i=T2[(r=r+8|0)+4>>2],T2[(f=A+28|0)>>2]=T2[r>>2],T2[f+4>>2]=i,j2[A+36>>2]=e);},I,function(A,f,r){f|=0,T2[(A|=0)+24>>2]=r|=0,T2[A+16>>2]=f;},function(A,f,r){f|=0,T2[(A|=0)+28>>2]=r|=0,T2[A+20>>2]=f;},function(A,f,r,e){A|=0,f|=0,r|=0,e=z2(e);var i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q=0,g=0,w=0,G=z2(0),C=z2(0),E=z2(0),D=z2(0),h=z2(0),Z=z2(0),Y=z2(0),R=0,F=0,W=0,m=0,N=(z2(0)),V=z2(0);L2=Q=L2-208|0,F=T2[A+4>>2];A:if(!((i=j2[F+848>>2])<e)){if(h=j2[r+8>>2],G=z2(z2(j2[f+8>>2]*e)+h),a=j2[r+4>>2],D=z2(z2(j2[f+4>>2]*e)+a),n=j2[r>>2],Z=z2(z2(j2[f>>2]*e)+n),W=T2[A+8>>2],Y=((m=(0|(g=T2[W+8>>2]))==(0|(w=T2[F+836>>2])))?(Y=z2(Z-j2[w+52>>2]),C=z2(D-j2[w+56>>2]),E=z2(G-j2[w+60>>2]),N=z2(z2(z2(Y*j2[w+12>>2])+z2(C*j2[w+28>>2]))+z2(E*j2[w+44>>2])),V=z2(z2(z2(Y*j2[w+8>>2])+z2(C*j2[w+24>>2]))+z2(E*j2[w+40>>2])),R=T2[A+12>>2],g=T2[R+8>>2]):(R=T2[A+12>>2],w=T2[R+8>>2],Y=z2(Z-j2[w+52>>2]),C=z2(D-j2[w+56>>2]),E=z2(G-j2[w+60>>2]),N=z2(z2(z2(Y*j2[w+12>>2])+z2(C*j2[w+28>>2]))+z2(E*j2[w+44>>2])),V=z2(z2(z2(Y*j2[w+8>>2])+z2(C*j2[w+24>>2]))+z2(E*j2[w+40>>2]))),z2(z2(z2(Y*j2[w+4>>2])+z2(C*j2[w+20>>2]))+z2(E*j2[w+36>>2]))),o=j2[g+20>>2],b=j2[g+36>>2],t=j2[g+40>>2],c=j2[g+8>>2],u=j2[g+24>>2],k=j2[g+44>>2],l=j2[g+60>>2],C=j2[g+12>>2],E=j2[g+52>>2],s=j2[g+28>>2],v=j2[g+56>>2],d=j2[g+4>>2],T2[28+Q>>2]=0,T2[(g=92+Q|0)>>2]=0,T2[g+4>>2]=0,T2[(g=124+Q|0)>>2]=0,T2[g+4>>2]=0,T2[(g=132+Q|0)>>2]=0,T2[g+4>>2]=0,T2[(g=140+Q|0)>>2]=0,T2[g+4>>2]=0,T2[(g=148+Q|0)>>2]=0,T2[g+4>>2]=0,T2[(g=156+Q|0)>>2]=0,T2[g+4>>2]=0,T2[164+Q>>2]=0,B=T2[(w=f+8|0)+4>>2],T2[(g=72+Q|0)>>2]=T2[w>>2],T2[g+4>>2]=B,B=C,C=z2(n-E),E=z2(a-v),h=z2(h-l),j2[24+Q>>2]=z2(z2(B*C)+z2(s*E))+z2(k*h),j2[20+Q>>2]=z2(z2(C*c)+z2(E*u))+z2(h*t),T2[12+Q>>2]=0,j2[8+Q>>2]=N,j2[4+Q>>2]=V,j2[Q>>2]=Y,T2[84+Q>>2]=0,T2[88+Q>>2]=0,j2[80+Q>>2]=e,T2[116+Q>>2]=0,T2[120+Q>>2]=0,g=T2[f+4>>2],T2[64+Q>>2]=T2[f>>2],T2[68+Q>>2]=g,j2[16+Q>>2]=z2(z2(C*d)+z2(E*o))+z2(h*b),T2[60+Q>>2]=0,j2[56+Q>>2]=G,j2[52+Q>>2]=D,w=T2[(g=r+8|0)+4>>2],T2[(f=40+Q|0)>>2]=T2[g>>2],T2[f+4>>2]=w,j2[48+Q>>2]=Z,f=T2[r+4>>2],T2[32+Q>>2]=T2[r>>2],T2[36+Q>>2]=f,A=m?(w=A+28|0,f=A+24|0,r=A+20|0,m=A+16|0,g=(A=T2[W>>2])||W,(A=T2[R>>2])||R):(w=A+24|0,f=A+28|0,r=A+16|0,m=A+20|0,g=(A=T2[R>>2])||R,(A=T2[W>>2])||W),g=T2[g+4>>2],A=T2[A+4>>2],T2[204+Q>>2]=A,w=T2[w>>2],T2[112+Q>>2]=w,f=T2[f>>2],T2[108+Q>>2]=f,T2[104+Q>>2]=T2[r>>2],T2[100+Q>>2]=T2[m>>2],T2[200+Q>>2]=g,31==T2[g+4>>2]&&(g=T2[64+(T2[g+32>>2]+P2(f,80)|0)>>2],T2[200+Q>>2]=g),31==T2[A+4>>2]&&(A=T2[64+(T2[A+32>>2]+P2(w,80)|0)>>2],T2[204+Q>>2]=A),r=Q,e=(f=T2[g+16>>2])&&(A=T2[A+16>>2])?(j2[96+Q>>2]=j2[f>>2]*j2[A>>2],e=j2[f+4>>2],G=j2[A+4>>2],j2[84+Q>>2]=F2(z2(H2(z2(e*G),z2(-10))),z2(10)),j2[88+Q>>2]=F2(z2(H2(z2(z2(G*j2[f+8>>2])+z2(e*j2[A+8>>2])),z2(-10))),z2(10)),z2(F2(z2(H2(z2(z2(G*j2[f+12>>2])+z2(e*j2[A+12>>2])),z2(-10))),z2(10)))):(A=T2[W+8>>2],f=T2[R+8>>2],j2[96+Q>>2]=j2[A+232>>2]*j2[f+232>>2],e=j2[A+228>>2],G=j2[f+228>>2],j2[84+Q>>2]=F2(z2(H2(z2(e*G),z2(-10))),z2(10)),j2[88+Q>>2]=F2(z2(H2(z2(z2(G*j2[A+236>>2])+z2(e*j2[f+236>>2])),z2(-10))),z2(10)),z2(F2(z2(H2(z2(z2(G*j2[A+240>>2])+z2(e*j2[f+240>>2])),z2(-10))),z2(10)))),j2[r+92>>2]=e,e=j2[72+Q>>2],z2(O2(e))>z2(.7071067690849304)?(D=j2[68+Q>>2],Z=z2(z2(e*e)+z2(D*D)),G=z2(z2(1)/z2(_2(Z))),Z=z2(Z*G),h=j2[64+Q>>2],C=z2(G*z2(-e)),E=z2(h*C),e=z2(D*G),D=z2(e*z2(-h)),h=z2(0)):(Z=j2[64+Q>>2],D=j2[68+Q>>2],C=z2(z2(Z*Z)+z2(D*D)),G=z2(z2(1)/z2(_2(C))),E=z2(C*G),h=z2(G*z2(-D)),D=z2(e*h),C=z2(Z*G),Z=z2(C*z2(-e)),e=z2(0)),j2[192+Q>>2]=E,j2[188+Q>>2]=D,j2[176+Q>>2]=e,j2[172+Q>>2]=C,j2[184+Q>>2]=Z,j2[168+Q>>2]=h,!((0|(r=T2[F+844>>2]))<1)){for(g=F+12|0,e=z2(i*i),A=0,w=-1;G=z2(j2[g-8>>2]-Y),C=z2(G*G),G=z2(j2[g-4>>2]-V),C=z2(C+z2(G*G)),G=z2(j2[g>>2]-N),e=(f=(G=z2(C+z2(G*G)))<e)?G:e,w=f?A:w,g=g+208|0,(0|r)!=(0|(A=A+1|0)););if(!((0|w)<0)){A=F+P2(w,208)|0,g=T2[(r=A+120|0)>>2],w=T2[(f=A+136|0)+4>>2],R=T2[f>>2],e=j2[(F=A+144|0)>>2],m=T2[(W=A+168|0)>>2],$2(A+4|0,Q,208),T2[W>>2]=m,j2[F>>2]=e,T2[f>>2]=R,T2[f+4>>2]=w,T2[r>>2]=g;break A;}}W0(F,Q);}L2=208+Q|0;},_,I,function(A,f,r,e){var i;return A|=0,r|=0,e|=0,r=T2[(f|=0)>>2],r=0|n1[T2[T2[r>>2]+56>>2]](r,72),p2[r+60|0]=0,p2[r+52|0]=0,T2[r+36>>2]=0,T2[r+40>>2]=0,e=T2[A+12>>2],i=T2[A+16>>2],T2[r+4>>2]=T2[f>>2],p2[r+28|0]=1,T2[r+8>>2]=T2[A+8>>2],T2[r>>2]=12600,T2[r+24>>2]=0,p2[r+48|0]=1,T2[r+16>>2]=0,T2[r+20>>2]=0,T2[r+44>>2]=0,T2[r+64>>2]=e,T2[r+68>>2]=i,T2[r+56>>2]=T2[f+4>>2],0|r;},function(A){var f,r=0;return T2[(A|=0)>>2]=12600,S2[A+52|0]&&(r=T2[A+56>>2])&&(f=T2[A+4>>2],n1[T2[T2[f>>2]+16>>2]](f,r)),(r=T2[A+44>>2])&&S2[A+48|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+44>>2]=0,p2[A+48|0]=1,T2[(r=A+36|0)>>2]=0,T2[r+4>>2]=0,(r=T2[A+24>>2])&&S2[A+28|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+24>>2]=0,p2[A+28|0]=1,T2[(r=A+16|0)>>2]=0,(T2[r+4>>2]=0)|A;},function(A){var f,r=0;T2[(A|=0)>>2]=12600,S2[A+52|0]&&(r=T2[A+56>>2])&&(f=T2[A+4>>2],n1[T2[T2[f>>2]+16>>2]](f,r)),(r=T2[A+44>>2])&&S2[A+48|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+44>>2]=0,p2[A+48|0]=1,T2[(r=A+36|0)>>2]=0,T2[r+4>>2]=0,(r=T2[A+24>>2])&&S2[A+28|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),u(A);},function(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W=0,m=0,N=z2(0),V=0,J=z2(0),M=z2(0),I=0,x=z2(0),y=0,U=0,X=0,p=0,T=z2(0),S=0,j=z2(0),P=z2(0),z=z2(0),O=z2(0),H=0,_=0,L=0,K=0,q=z2(0),$=z2(0),A2=z2(0),f2=0,r2=z2(0),e2=z2(0),i2=z2(0),a2=z2(0),n2=z2(0),o2=z2(0),b2=z2(0),t2=z2(0),c2=z2(0),u2=0,k2=z2(0),l2=z2(0),s2=z2(0),v2=0,d2=z2(0),B2=z2(0),Q2=z2(0),g2=z2(0),w2=z2(0),G2=z2(0),C2=z2(0),E2=z2(0),D2=z2(0),h2=z2(0),Z2=(z2(0)),Y2=z2(0),R2=(z2(0));L2=W=L2-976|0,(I=T2[A+56>>2])||(m=T2[A+4>>2],I=0|n1[T2[T2[m>>2]+12>>2]](m,T2[f+8>>2],T2[r+8>>2]),p2[A+52|0]=1,T2[A+56>>2]=I),T2[i+4>>2]=I,X=T2[r+4>>2];A:{f:{r:{e:switch(H=T2[f+4>>2],T2[H+4>>2]-8|0){case 0:break r;case 2:break e;default:break f;}e:switch(T2[X+4>>2]-8|0){case 2:if(A=T2[H+60>>2],N=j2[(e=H+36|0)+(A<<2)>>2],M=j2[e+((A+2|0)%3<<2)>>2],e=T2[X+60>>2],J=j2[I+848>>2],(N=y0(400+W|0,8+W|0,N,M,j2[(m=X+36|0)+(e<<2)>>2],j2[m+((e+2|0)%3<<2)>>2],A,e,T2[f+12>>2],T2[r+12>>2],J))<J&&n1[T2[T2[i>>2]+16>>2]](i,400+W|0,8+W|0,N),A=T2[i+4>>2],!T2[A+844>>2])break A;if((0|(f=T2[A+836>>2]))!=(0|(r=T2[T2[i+8>>2]+8>>2]))){m0(A,T2[T2[i+12>>2]+8>>2]+4|0,r+4|0);break A;}m0(A,f+4|0,T2[T2[i+12>>2]+8>>2]+4|0);break A;case 0:break e;default:break f;}if(A=T2[H+60>>2],J=j2[I+848>>2],(N=y0(400+W|0,8+W|0,j2[(e=H+36|0)+(A<<2)>>2],j2[e+((A+2|0)%3<<2)>>2],z2(0),z2(j2[X+36>>2]*j2[X+20>>2]),A,1,T2[f+12>>2],T2[r+12>>2],J))<J&&n1[T2[T2[i>>2]+16>>2]](i,400+W|0,8+W|0,N),A=T2[i+4>>2],!T2[A+844>>2])break A;if((0|(f=T2[A+836>>2]))!=(0|(r=T2[T2[i+8>>2]+8>>2]))){m0(A,T2[T2[i+12>>2]+8>>2]+4|0,r+4|0);break A;}m0(A,f+4|0,T2[T2[i+12>>2]+8>>2]+4|0);break A;}if(10==T2[X+4>>2]){if(e=X+36|0,A=T2[X+60>>2],J=j2[I+848>>2],(N=y0(400+W|0,8+W|0,z2(0),z2(j2[H+36>>2]*j2[H+20>>2]),j2[e+(A<<2)>>2],j2[e+((A+2|0)%3<<2)>>2],1,A,T2[f+12>>2],T2[r+12>>2],J))<J&&n1[T2[T2[i>>2]+16>>2]](i,400+W|0,8+W|0,N),A=T2[i+4>>2],!T2[A+844>>2])break A;if((0|(f=T2[A+836>>2]))!=(0|(r=T2[T2[i+8>>2]+8>>2]))){m0(A,T2[T2[i+12>>2]+8>>2]+4|0,r+4|0);break A;}m0(A,f+4|0,T2[T2[i+12>>2]+8>>2]+4|0);break A;}}T2[888+W>>2]=1566444395,p2[732+W|0]=0,T2[708+W>>2]=953267991,T2[(m=332+W|0)>>2]=0,T2[m+4>>2]=0,T2[320+W>>2]=12272,T2[352+W>>2]=X,T2[348+W>>2]=H,T2[324+W>>2]=0,T2[328+W>>2]=1065353216,T2[340+W>>2]=T2[A+8>>2],T2[356+W>>2]=T2[H+4>>2],T2[360+W>>2]=T2[X+4>>2],T2[344+W>>2]=400+W,R=W,F=z2(n1[T2[T2[H>>2]+48>>2]](H)),j2[364+R>>2]=F,N=z2(n1[T2[T2[X>>2]+48>>2]](X)),T2[392+W>>2]=1,T2[396+W>>2]=1,T2[380+W>>2]=-1,p2[372+W|0]=0,j2[368+W>>2]=N,T2[352+W>>2]=X,T2[348+W>>2]=H,N=z2(z2(z2(z2(n1[T2[T2[H>>2]+48>>2]](H))+z2(n1[T2[T2[X>>2]+48>>2]](X)))+j2[T2[A+56>>2]+848>>2])+j2[i+32>>2]),j2[888+W>>2]=N*N,m=T2[f+12>>2],y=T2[(I=m+8|0)>>2],I=T2[I+4>>2],V=T2[m>>2],U=T2[m+4>>2],L=T2[(_=m+24|0)+4>>2],T2[(S=784+W|0)>>2]=T2[_>>2],T2[S+4>>2]=L,T2[(S=768+W|0)>>2]=y,T2[S+4>>2]=I,I=T2[m+16>>2],y=T2[m+20>>2],L=T2[(_=m+40|0)+4>>2],T2[(S=800+W|0)>>2]=T2[_>>2],T2[S+4>>2]=L,S=T2[m+32>>2],_=T2[m+36>>2],u2=T2[(K=m+56|0)+4>>2],T2[(L=816+W|0)>>2]=T2[K>>2],T2[L+4>>2]=u2,T2[776+W>>2]=I,T2[780+W>>2]=y,T2[760+W>>2]=V,T2[764+W>>2]=U,T2[792+W>>2]=S,T2[796+W>>2]=_,I=T2[m+52>>2],T2[808+W>>2]=T2[m+48>>2],T2[812+W>>2]=I,m=T2[r+12>>2],V=T2[(y=m+8|0)+4>>2],T2[(I=832+W|0)>>2]=T2[y>>2],T2[I+4>>2]=V,I=T2[m+4>>2],T2[824+W>>2]=T2[m>>2],T2[828+W>>2]=I,y=T2[m+20>>2],T2[(I=U=840+W|0)>>2]=T2[m+16>>2],T2[I+4>>2]=y,V=T2[(y=m+24|0)+4>>2],T2[(I=848+W|0)>>2]=T2[y>>2],T2[I+4>>2]=V,y=T2[m+36>>2],T2[(I=S=856+W|0)>>2]=T2[m+32>>2],T2[I+4>>2]=y,V=T2[(y=m+40|0)+4>>2],T2[(I=864+W|0)>>2]=T2[y>>2],T2[I+4>>2]=V,y=T2[m+52>>2],T2[(I=_=872+W|0)>>2]=T2[m+48>>2],T2[I+4>>2]=y,y=T2[(m=m+56|0)+4>>2],T2[(I=880+W|0)>>2]=T2[m>>2],T2[I+4>>2]=y;f:{r:{e:{if(!(6<(0|(I=T2[H+4>>2])))&&!(6<(0|(m=T2[X+4>>2])))&&(T2[312+W>>2]=12708,N=z2(0),I&&(J=z2(n1[T2[T2[H>>2]+48>>2]](H)),m=T2[X+4>>2]),m&&(N=z2(n1[T2[T2[X>>2]+48>>2]](X))),p2[44+W|0]=0,j2[36+W>>2]=N,j2[32+W>>2]=J,T2[12+W>>2]=i,T2[8+W>>2]=12736,L=T2[H+60>>2])){if(K=T2[X+60>>2]){if(R2=j2[T2[A+56>>2]+848>>2],S2[e+24|0]){if(T2[5606]=T2[5606]+1,M=j2[L+64>>2],V=T2[f+12>>2],N=j2[V+32>>2],T=j2[L+68>>2],J=j2[V+36>>2],z=j2[L+72>>2],x=j2[V+40>>2],j=j2[K+64>>2],U=T2[r+12>>2],q=j2[K+68>>2],P=j2[K+72>>2],G2=z2(z2(z2(z2(z2(M*N)+z2(T*J))+z2(z*x))+j2[V+56>>2])-z2(z2(z2(z2(j*j2[U+32>>2])+z2(q*j2[U+36>>2]))+z2(P*j2[U+40>>2]))+j2[U+56>>2])),O=j2[V+16>>2],b2=j2[V+20>>2],t2=j2[V+24>>2],C2=z2(z2(z2(z2(z2(M*O)+z2(T*b2))+z2(z*t2))+j2[V+52>>2])-z2(z2(z2(z2(j*j2[U+16>>2])+z2(q*j2[U+20>>2]))+z2(P*j2[U+24>>2]))+j2[U+52>>2])),c2=j2[V+4>>2],$=j2[V+8>>2],E2=z2(z2(z2(z2(z2(M*j2[V>>2])+z2(T*c2))+z2(z*$))+j2[V+48>>2])-z2(z2(z2(z2(j*j2[U>>2])+z2(q*j2[U+4>>2]))+z2(P*j2[U+8>>2]))+j2[U+48>>2])),(0|(e=T2[L+28>>2]))<1){T=z2(34028234663852886e22);break e;}for(e=e-1|0,T=z2(34028234663852886e22),_=28;;){if(m=T2[L+36>>2]+_|0,M=j2[m>>2],z=j2[m-8>>2],j=j2[m-4>>2],T2[908+W>>2]=0,N=z2(z2(z2(z*N)+z2(j*J))+z2(M*x)),j2[904+W>>2]=N,J=z2(z2(z2(z*O)+z2(j*b2))+z2(M*t2)),j2[900+W>>2]=J,M=z2(z2(z2(z*j2[V>>2])+z2(j*c2))+z2(M*$)),j2[896+W>>2]=M,z2(z2(z2(M*E2)+z2(J*C2))+z2(N*G2))<z2(0)&&(N=z2(-N),j2[904+W>>2]=N,J=z2(-J),j2[900+W>>2]=J,M=z2(-M),j2[896+W>>2]=M),T2[5607]=T2[5607]+1,M0(V,U,E2,C2,G2,M,J,N,L,K,T)){if(S=0,T2[5608]=T2[5608]+1,N2(L,V,896+W|0,972+W|0,968+W|0,248+W|0,944+W|0),N2(K,U,896+W|0,964+W|0,960+W|0,928+W|0,912+W|0),(O=j2[968+W>>2])<(z=j2[964+W>>2])||(x=j2[960+W>>2])<(j=j2[972+W>>2])||(S=1,P=z2(x-j),(O=z2(O-z))<P&&(P=O)),!S)break f;P<T&&(A2=N,r2=J,i2=M,T=P);}if(!e)break e;_=_+36|0,e=e-1|0,c2=j2[V+4>>2],x=j2[V+40>>2],J=j2[V+36>>2],N=j2[V+32>>2],t2=j2[V+24>>2],b2=j2[V+20>>2],O=j2[V+16>>2],$=j2[V+8>>2];}}if(J0(320+W|0,760+W|0,8+W|0,T2[e+20>>2],0),!((J=j2[40+W>>2])<z2(0)))break f;if(!S2[44+W|0])break f;N=j2[28+W>>2],A2=j2[24+W>>2],r2=j2[20+W>>2],i2=j2[16+W>>2];break r;}if(1==T2[X+4>>2]){if(T2[252+W>>2]=0,m=T2[r+12>>2],x=j2[m+52>>2],T=j2[m+20>>2],P=j2[m+24>>2],A2=j2[m+56>>2],N=j2[X- -64>>2],J=j2[X+68>>2],r2=j2[m+36>>2],M=j2[X+72>>2],i2=j2[m+40>>2],a2=j2[m+48>>2],O=j2[m+8>>2],z=j2[m>>2],j=j2[m+4>>2],q=j2[m+16>>2],b2=j2[m+32>>2],T2[5498]=T2[5498]+1,I=0,(m=K2(35))&&(T2[(I=m+19&-16)-4>>2]=m),T2[256+W>>2]=1,T2[260+W>>2]=I,p2[264+W|0]=1,j2[I+4>>2]=x+z2(z2(z2(N*q)+z2(J*T))+z2(M*P)),j2[I>>2]=a2+z2(z2(z2(N*z)+z2(J*j))+z2(M*O)),T2[I+12>>2]=0,j2[I+8>>2]=A2+z2(z2(z2(N*b2)+z2(J*r2))+z2(M*i2)),I=T2[252+W>>2],T2[252+W>>2]=y=I+1|0,N=j2[X+80>>2],m=T2[r+12>>2],J=j2[X+84>>2],M=j2[X+88>>2],x=z2(z2(z2(z2(N*j2[m>>2])+z2(J*j2[m+4>>2]))+z2(M*j2[m+8>>2]))+j2[m+48>>2]),T=z2(z2(z2(z2(N*j2[m+32>>2])+z2(J*j2[m+36>>2]))+z2(M*j2[m+40>>2]))+j2[m+56>>2]),N=z2(z2(z2(z2(N*j2[m+16>>2])+z2(J*j2[m+20>>2]))+z2(M*j2[m+24>>2]))+j2[m+52>>2]),(0|y)==(0|(m=T2[256+W>>2]))&&!((0|(V=(m=y)?m<<1:1))<=(0|m))){if(S=0,V&&(T2[5498]=T2[5498]+1,(m=K2(19+(V<<4)|0))&&(T2[(S=m+19&-16)-4>>2]=m)),0<=(0|I))for(m=I+1|0,I=0;y=T2[260+W>>2]+I|0,L=T2[y+4>>2],T2[(U=I+S|0)>>2]=T2[y>>2],T2[U+4>>2]=L,_=T2[(y=y+8|0)+4>>2],T2[(U=U+8|0)>>2]=T2[y>>2],T2[U+4>>2]=_,I=I+16|0,m=m-1|0;);(m=T2[260+W>>2])&&S2[264+W|0]&&(T2[5499]=T2[5499]+1,q2(T2[m-4>>2])),T2[260+W>>2]=S,p2[264+W|0]=1,T2[256+W>>2]=V,y=T2[252+W>>2],m=V;}if(U=T2[260+W>>2],T2[(I=U+(y<<4)|0)+12>>2]=0,j2[I+8>>2]=T,j2[I+4>>2]=N,j2[I>>2]=x,T2[252+W>>2]=y=y+1|0,N=j2[X+96>>2],r=T2[r+12>>2],J=j2[X+100>>2],M=j2[X+104>>2],x=z2(z2(z2(z2(N*j2[r>>2])+z2(J*j2[r+4>>2]))+z2(M*j2[r+8>>2]))+j2[r+48>>2]),T=z2(z2(z2(z2(N*j2[r+32>>2])+z2(J*j2[r+36>>2]))+z2(M*j2[r+40>>2]))+j2[r+56>>2]),N=z2(z2(z2(z2(N*j2[r+16>>2])+z2(J*j2[r+20>>2]))+z2(M*j2[r+24>>2]))+j2[r+52>>2]),(0|m)==(0|y))if((0|(r=m?m<<1:1))<=(0|m))y=m;else {if(U=0,r&&(T2[5498]=T2[5498]+1,(I=K2(19+(r<<4)|0))&&(T2[(U=I+19&-16)-4>>2]=I)),1<=(0|m))for(I=0;y=T2[260+W>>2]+I|0,_=T2[y+4>>2],T2[(V=I+U|0)>>2]=T2[y>>2],T2[V+4>>2]=_,S=T2[(y=y+8|0)+4>>2],T2[(V=V+8|0)>>2]=T2[y>>2],T2[V+4>>2]=S,I=I+16|0,m=m-1|0;);(m=T2[260+W>>2])&&S2[264+W|0]&&(T2[5499]=T2[5499]+1,q2(T2[m-4>>2])),T2[260+W>>2]=U,p2[264+W|0]=1,T2[256+W>>2]=r,y=T2[252+W>>2];}if(T2[(r=(y<<4)+U|0)+12>>2]=0,j2[r+8>>2]=T,j2[r+4>>2]=N,j2[r>>2]=x,T2[252+W>>2]=T2[252+W>>2]+1,N=j2[T2[A+56>>2]+848>>2],J0(320+W|0,760+W|0,312+W|0,T2[e+20>>2],0),J=j2[324+W>>2],M=j2[328+W>>2],x=j2[332+W>>2],(T=z2(z2(z2(J*J)+z2(M*M))+z2(x*x)))>z2(1.1920928955078125e-7)){if(T2[956+W>>2]=0,P=x,x=z2(z2(1)/T),j2[952+W>>2]=P*x,j2[948+W>>2]=M*x,j2[944+W>>2]=J*x,J=z2(z2(j2[376+W>>2]-z2(n1[T2[T2[H>>2]+48>>2]](H)))-z2(n1[T2[T2[X>>2]+48>>2]](X))),(0|(I=T2[A+36>>2]))<=-1)for(T2[A+40>>2]<=-1&&((r=T2[A+44>>2])&&S2[A+48|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+40>>2]=0,T2[A+44>>2]=0,p2[A+48|0]=1),V=I<<4;m=T2[932+W>>2],r=T2[A+44>>2]+V|0,T2[r>>2]=T2[928+W>>2],T2[r+4>>2]=m,m=T2[(e=936+W|0)+4>>2],T2[(r=r+8|0)>>2]=T2[e>>2],T2[r+4>>2]=m,V=V+16|0,(r=I)>>>0<=(I=I+1|0)>>>0;);I0(944+W|(T2[A+36>>2]=0),T2[H+60>>2],T2[f+12>>2],248+W|0,A+32|0,z2(J-N),N,i);}if(S2[A+52|0]&&(A=T2[i+4>>2],T2[A+844>>2]&&((0|(f=T2[A+836>>2]))==(0|(r=T2[T2[i+8>>2]+8>>2]))?m0(A,f+4|0,T2[T2[i+12>>2]+8>>2]+4|0):m0(A,T2[T2[i+12>>2]+8>>2]+4|0,r+4|0))),!(A=T2[260+W>>2]))break A;if(!S2[264+W|0])break A;T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);break A;}}if(J0(320+W|0,760+W|0,i,T2[e+20>>2],0),T2[A+64>>2]&&!(T2[T2[i+4>>2]+844>>2]>=T2[A+68>>2])&&(N=j2[324+W>>2],J=j2[328+W>>2],M=j2[332+W>>2],(x=z2(z2(z2(N*N)+z2(J*J))+z2(M*M)))>z2(1.1920928955078125e-7)&&(P=J,J=z2(z2(1)/x),P=z2(P*J),a2=z2(N*J),O=z2(M*J),z2(O2(O))>z2(.7071067690849304)?(J=z2(z2(1)/z2(_2(z2(z2(O*O)+z2(P*P))))),N=z2(P*J),J=z2(J*z2(-O)),M=z2(0)):(N=z2(z2(1)/z2(_2(z2(z2(a2*a2)+z2(P*P))))),J=z2(a2*N),M=z2(N*z2(-P)),N=z2(0)),v2=824+W|0,L=808+W|0,K=792+W|0,u2=776+W|0,n=272+W|0,m=(c=(x=z2(n1[T2[T2[H>>2]+16>>2]](H)))<(T=z2(n1[T2[T2[X>>2]+16>>2]](X))))?(y=T2[(I=768+W|0)+4>>2],T2[(m=256+W|0)>>2]=T2[I>>2],T2[m+4>>2]=y,m=T2[764+W>>2],T2[248+W>>2]=T2[760+W>>2],T2[252+W>>2]=m,T=z2(F2(z2(z2(.019999999552965164)/x),z2(.39269909262657166))),y=248+W|0,V=K,I=u2,L):(y=T2[(I=v2+8|0)+4>>2],T2[(m=256+W|0)>>2]=T2[I>>2],T2[m+4>>2]=y,m=T2[v2+4>>2],T2[248+W>>2]=T2[v2>>2],T2[252+W>>2]=m,T=z2(F2(z2(z2(.019999999552965164)/T),z2(.39269909262657166))),y=248+W|0,V=S,I=U,_),H=T2[(X=I+8|0)+4>>2],T2[n>>2]=T2[X>>2],T2[4+n>>2]=H,n=T2[(H=V+8|0)+4>>2],T2[(X=288+W|0)>>2]=T2[H>>2],T2[X+4>>2]=n,n=T2[(H=m+8|0)+4>>2],T2[(X=304+W|0)>>2]=T2[H>>2],T2[X+4>>2]=n,X=T2[I+4>>2],T2[264+W>>2]=T2[I>>2],T2[268+W>>2]=X,I=T2[V+4>>2],T2[280+W>>2]=T2[V>>2],T2[284+W>>2]=I,I=T2[m+4>>2],T2[296+W>>2]=T2[m>>2],T2[300+W>>2]=I,!((0|(V=T2[A+64>>2]))<1))))for(X=296+W|0,H=280+W|0,n=264+W|0,A2=N,x=z2(T*z2(.5)),Z2=z2(z2(z2(M*M)+z2(J*J))+z2(N*N)),N=z2(W2(x)/z2(_2(Z2))),T=z2(A2*N),A2=z2(J*N),r2=z2(M*N),Y2=z2(_2(z2(z2(O*O)+z2(z2(a2*a2)+z2(P*P))))),u=224+W|0,k=208+W|0,l=192+W|0,s=176+W|0,v=160+W|0,d=144+W|0,B=128+W|0,Q=112+W|0,g=96+W|0,w=80+W|0,G=W+64|0,C=48+W|0,i2=m2(x),I=0;Z2>z2(1.1920928955078125e-7)&&(x=z2(z2(z2(z2(6.2831854820251465)/z2(0|V))*z2(0|I))*z2(.5)),M=z2(W2(x)/Y2),N=z2(O*M),J=z2(P*M),M=z2(a2*M),x=m2(x),c?(m=T2[f+12>>2],q=j2[m>>2],b2=j2[m+4>>2],t2=j2[m+8>>2],T2[772+W>>2]=0,c2=j2[m+36>>2],d2=j2[m+20>>2],B2=j2[m+40>>2],Q2=j2[m+24>>2],g2=j2[m+32>>2],w2=j2[m+16>>2],T2[804+W>>2]=0,T2[788+W>>2]=0,n2=z2(z2(T*M)+z2(z2(z2(A2*x)-z2(i2*J))-z2(r2*N))),$=z2(z2(T*N)+z2(z2(A2*J)+z2(z2(i2*x)+z2(r2*M)))),o2=z2(z2(A2*N)+z2(z2(z2(r2*x)-z2(i2*M))-z2(T*J))),e2=z2(z2(r2*J)+z2(z2(z2(T*x)-z2(i2*N))-z2(A2*M))),z=z2(z2(z2(N*n2)+z2(z2(M*$)+z2(x*o2)))-z2(J*e2)),j=z2(z2(z2(z2(x*$)-z2(M*o2))-z2(J*n2))-z2(N*e2)),l2=z2(z2(z2(J*o2)+z2(z2(N*$)+z2(x*e2)))-z2(M*n2)),N=z2(z2(z2(M*e2)+z2(z2(x*n2)+z2(J*$)))-z2(N*o2)),J=z2(z2(2)/z2(z2(j*j)+z2(z2(l2*l2)+z2(z2(z*z)+z2(N*N))))),M=z2(l2*J),$=z2(z*M),x=z2(N*J),o2=z2(j*x),n2=z2($-o2),e2=z2(N*M),k2=z2(z*J),D2=z2(j*k2),J=z2(e2+D2),k2=z2(z*k2),h2=z2(N*x),N=z2(z2(1)-z2(k2+h2)),j2[800+W>>2]=z2(z2(t2*n2)+z2(Q2*J))+z2(B2*N),j2[796+W>>2]=z2(z2(n2*b2)+z2(J*d2))+z2(N*c2),j2[792+W>>2]=z2(z2(n2*q)+z2(J*w2))+z2(N*g2),x=z2(z*x),z=z2(j*M),N=z2(x+z),j=z2(l2*M),J=z2(z2(1)-z2(k2+j)),M=z2(e2-D2),j2[784+W>>2]=z2(z2(t2*N)+z2(Q2*J))+z2(B2*M),j2[780+W>>2]=z2(z2(N*b2)+z2(J*d2))+z2(M*c2),j2[776+W>>2]=z2(z2(N*q)+z2(J*w2))+z2(M*g2),N=z2(z2(1)-z2(h2+j)),J=z2(x-z),M=z2($+o2),j2[768+W>>2]=z2(z2(t2*N)+z2(Q2*J))+z2(B2*M),j2[764+W>>2]=z2(z2(N*b2)+z2(J*d2))+z2(M*c2),j2[760+W>>2]=z2(z2(N*q)+z2(J*w2))+z2(M*g2),m=T2[r+12>>2],p=T2[m+4>>2],T2[v2>>2]=T2[m>>2],T2[v2+4>>2]=p,f2=T2[(V=m+8|0)+4>>2],T2[(p=v2+8|0)>>2]=T2[V>>2],T2[p+4>>2]=f2,f2=T2[(p=m+24|0)+4>>2],T2[(V=U+8|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[m+20>>2],T2[U>>2]=T2[m+16>>2],T2[U+4>>2]=V,f2=T2[(p=m+40|0)+4>>2],T2[(V=S+8|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[m+36>>2],T2[S>>2]=T2[m+32>>2],T2[S+4>>2]=V,f2=T2[(p=m+56|0)+4>>2],T2[(V=_+8|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[m+52>>2],T2[_>>2]=T2[m+48>>2],T2[_+4>>2]=V):(m=T2[f+12>>2],p=T2[(V=m+8|0)>>2],V=T2[V+4>>2],f2=T2[m>>2],D=T2[m+4>>2],a=T2[m+20>>2],T2[u2>>2]=T2[m+16>>2],T2[u2+4>>2]=a,h=T2[4+(E=m+24|0)>>2],T2[(a=u2+8|0)>>2]=T2[E>>2],T2[4+a>>2]=h,T2[(a=768+W|0)>>2]=p,T2[4+a>>2]=V,V=T2[m+36>>2],T2[K>>2]=T2[m+32>>2],T2[K+4>>2]=V,a=T2[(p=m+40|0)+4>>2],T2[(V=K+8|0)>>2]=T2[p>>2],T2[V+4>>2]=a,a=T2[(p=m+56|0)+4>>2],T2[(V=L+8|0)>>2]=T2[p>>2],T2[V+4>>2]=a,V=T2[m+52>>2],T2[L>>2]=T2[m+48>>2],T2[L+4>>2]=V,T2[760+W>>2]=f2,T2[764+W>>2]=D,m=T2[r+12>>2],q=j2[m+36>>2],b2=j2[m+20>>2],t2=j2[m+40>>2],c2=j2[m+24>>2],d2=j2[m+32>>2],B2=j2[m>>2],Q2=j2[m+16>>2],g2=j2[m+4>>2],w2=j2[m+8>>2],T2[868+W>>2]=0,T2[852+W>>2]=0,T2[836+W>>2]=0,n2=z2(z2(T*M)+z2(z2(z2(A2*x)-z2(i2*J))-z2(r2*N))),$=z2(z2(T*N)+z2(z2(A2*J)+z2(z2(i2*x)+z2(r2*M)))),o2=z2(z2(A2*N)+z2(z2(z2(r2*x)-z2(i2*M))-z2(T*J))),e2=z2(z2(r2*J)+z2(z2(z2(T*x)-z2(i2*N))-z2(A2*M))),z=z2(z2(z2(N*n2)+z2(z2(M*$)+z2(x*o2)))-z2(J*e2)),j=z2(z2(z2(z2(x*$)-z2(M*o2))-z2(J*n2))-z2(N*e2)),l2=z2(z2(z2(J*o2)+z2(z2(N*$)+z2(x*e2)))-z2(M*n2)),N=z2(z2(z2(M*e2)+z2(z2(x*n2)+z2(J*$)))-z2(N*o2)),J=z2(z2(2)/z2(z2(j*j)+z2(z2(l2*l2)+z2(z2(z*z)+z2(N*N))))),M=z2(l2*J),$=z2(z*M),x=z2(N*J),o2=z2(j*x),n2=z2($-o2),e2=z2(N*M),k2=z2(z*J),D2=z2(j*k2),J=z2(e2+D2),k2=z2(z*k2),h2=z2(N*x),N=z2(z2(1)-z2(k2+h2)),j2[864+W>>2]=z2(z2(w2*n2)+z2(c2*J))+z2(t2*N),j2[860+W>>2]=z2(z2(n2*g2)+z2(J*b2))+z2(N*q),j2[856+W>>2]=z2(z2(n2*B2)+z2(J*Q2))+z2(N*d2),x=z2(z*x),z=z2(j*M),N=z2(x+z),j=z2(l2*M),J=z2(z2(1)-z2(k2+j)),M=z2(e2-D2),j2[848+W>>2]=z2(z2(w2*N)+z2(c2*J))+z2(t2*M),j2[844+W>>2]=z2(z2(N*g2)+z2(J*b2))+z2(M*q),j2[840+W>>2]=z2(z2(N*B2)+z2(J*Q2))+z2(M*d2),N=z2(z2(1)-z2(h2+j)),J=z2(x-z),M=z2($+o2),j2[832+W>>2]=z2(z2(w2*N)+z2(c2*J))+z2(t2*M),j2[828+W>>2]=z2(z2(N*g2)+z2(J*b2))+z2(M*q),j2[824+W>>2]=z2(z2(N*B2)+z2(J*Q2))+z2(M*d2)),m=T2[764+W>>2],T2[C>>2]=T2[760+W>>2],T2[4+C>>2]=m,m=T2[u2+4>>2],T2[G>>2]=T2[u2>>2],T2[4+G>>2]=m,m=T2[K+4>>2],T2[w>>2]=T2[K>>2],T2[4+w>>2]=m,m=T2[L+4>>2],T2[g>>2]=T2[L>>2],T2[4+g>>2]=m,p=T2[(V=768+W|0)+4>>2],T2[(m=8+C|0)>>2]=T2[V>>2],T2[m+4>>2]=p,p=T2[(V=u2+8|0)+4>>2],T2[(m=8+G|0)>>2]=T2[V>>2],T2[m+4>>2]=p,p=T2[(V=K+8|0)+4>>2],T2[(m=8+w|0)>>2]=T2[V>>2],T2[m+4>>2]=p,p=T2[(V=L+8|0)+4>>2],T2[(m=8+g|0)>>2]=T2[V>>2],T2[m+4>>2]=p,T2[40+W>>2]=0,T2[44+W>>2]=i,T2[8+W>>2]=12764,m=T2[e+20>>2],f2=T2[(p=v2+8|0)+4>>2],T2[(V=8+Q|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[v2+4>>2],T2[Q>>2]=T2[v2>>2],T2[4+Q>>2]=V,f2=T2[(p=U+8|0)+4>>2],T2[(V=8+B|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[U+4>>2],T2[B>>2]=T2[U>>2],T2[4+B>>2]=V,f2=T2[(p=S+8|0)+4>>2],T2[(V=8+d|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[S+4>>2],T2[d>>2]=T2[S>>2],T2[4+d>>2]=V,f2=T2[(p=_+8|0)+4>>2],T2[(V=8+v|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[_+4>>2],T2[v>>2]=T2[_>>2],T2[4+v>>2]=V,f2=T2[(p=y+8|0)+4>>2],T2[(V=8+s|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[y+4>>2],T2[s>>2]=T2[y>>2],T2[4+s>>2]=V,f2=T2[(p=8+n|0)+4>>2],T2[(V=8+l|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[4+n>>2],T2[l>>2]=T2[n>>2],T2[4+l>>2]=V,f2=T2[(p=H+8|0)+4>>2],T2[(V=8+k|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[H+4>>2],T2[k>>2]=T2[H>>2],T2[4+k>>2]=V,f2=T2[(p=X+8|0)+4>>2],T2[(V=8+u|0)>>2]=T2[p>>2],T2[V+4>>2]=f2,V=T2[X+4>>2],T2[u>>2]=T2[X>>2],T2[4+u>>2]=V,T2[244+W>>2]=m,p2[240+W|0]=c,J0(320+W|0,760+W|0,8+W|0,m,0),V=T2[A+64>>2]),(0|(I=I+1|0))<(0|V););if(!S2[A+52|0])break A;if(A=T2[i+4>>2],!T2[A+844>>2])break A;if((0|(f=T2[A+836>>2]))!=(0|(r=T2[T2[i+8>>2]+8>>2]))){m0(A,T2[T2[i+12>>2]+8>>2]+4|0,r+4|0);break A;}m0(A,f+4|0,T2[T2[i+12>>2]+8>>2]+4|0);break A;}if(1<=(0|(e=T2[K+28>>2])))for(S=28;;){if(m=T2[K+36>>2]+S|0,M=j2[m>>2],P=j2[m-8>>2],O=j2[m-4>>2],T2[908+W>>2]=0,N=z2(z2(z2(P*j2[U+32>>2])+z2(O*j2[U+36>>2]))+z2(M*j2[U+40>>2])),j2[904+W>>2]=N,J=z2(z2(z2(P*j2[U+16>>2])+z2(O*j2[U+20>>2]))+z2(M*j2[U+24>>2])),j2[900+W>>2]=J,M=z2(z2(z2(P*j2[U>>2])+z2(O*j2[U+4>>2]))+z2(M*j2[U+8>>2])),j2[896+W>>2]=M,z2(z2(z2(M*E2)+z2(J*C2))+z2(N*G2))<z2(0)&&(N=z2(-N),j2[904+W>>2]=N,J=z2(-J),j2[900+W>>2]=J,M=z2(-M),j2[896+W>>2]=M),T2[5607]=T2[5607]+1,M0(V,U,E2,C2,G2,M,J,N,L,K,T)){if(_=0,T2[5608]=T2[5608]+1,N2(L,V,896+W|0,972+W|0,968+W|0,248+W|0,944+W|0),N2(K,U,896+W|0,964+W|0,960+W|0,928+W|0,912+W|0),(P=j2[968+W>>2])<(O=j2[964+W>>2])||(z=j2[960+W>>2])<(j=j2[972+W>>2])||(_=1,x=z2(z-j),(P=z2(P-O))<x&&(x=P)),!_)break f;x<T&&(A2=N,r2=J,i2=M,T=x);}if(S=S+36|0,!(e=e-1|0))break;}if((0|(S=T2[L+48>>2]))<1)y=-1,x=z2(0),P=z2(0),z=z2(0),j=z2(0),q=z2(0),O=z2(0),m=-1;else for(_=T2[K+48>>2],y=m=-1,O=z2(I=0),q=z2(0),j=z2(0),z=z2(0),P=z2(0),x=z2(0);;){if(1<=(0|_)){for(e=T2[L+56>>2]+(I<<4)|0,N=j2[e>>2],J=j2[e+4>>2],M=j2[e+8>>2],b2=z2(z2(z2(N*j2[V+32>>2])+z2(J*j2[V+36>>2]))+z2(M*j2[V+40>>2])),t2=z2(z2(z2(N*j2[V+16>>2])+z2(J*j2[V+20>>2]))+z2(M*j2[V+24>>2])),c2=z2(z2(z2(N*j2[V>>2])+z2(J*j2[V+4>>2]))+z2(M*j2[V+8>>2])),e=0,S=8;;){if(u2=T2[K+56>>2]+S|0,J=j2[u2>>2],M=j2[u2-8>>2],e2=j2[u2-4>>2],s2=j2[U+40>>2],o=j2[U+32>>2],b=j2[U+36>>2],N=j2[U+24>>2],$=j2[U+16>>2],o2=j2[U+20>>2],t=j2[U+8>>2],Z=j2[U>>2],Y=j2[U+4>>2],T2[908+W>>2]=0,$=z2(z2(z2(M*$)+z2(e2*o2))+z2(J*N)),o2=z2(z2(z2(M*Z)+z2(e2*Y))+z2(J*t)),N=z2(z2(c2*$)-z2(t2*o2)),e2=z2(z2(z2(M*o)+z2(e2*b))+z2(J*s2)),M=z2(z2(b2*o2)-z2(c2*e2)),s2=z2(z2(t2*e2)-z2(b2*$)),(1e-6<+z2(O2(s2))||1e-6<+z2(O2(M))||1e-6<+z2(O2(N)))&&(o=z2(z2(1)/z2(_2(z2(z2(N*N)+z2(z2(s2*s2)+z2(M*M)))))),J=z2(N*o),j2[904+W>>2]=J,N=z2(M*o),j2[900+W>>2]=N,M=z2(s2*o),j2[896+W>>2]=M,z2(z2(z2(M*E2)+z2(N*C2))+z2(G2*J))<z2(0)&&(J=z2(-J),j2[904+W>>2]=J,N=z2(-N),j2[900+W>>2]=N,M=z2(-M),j2[896+W>>2]=M),T2[5607]=T2[5607]+1,M0(V,U,E2,C2,G2,M,N,J,L,K,T))){if(_=0,T2[5608]=T2[5608]+1,N2(L,V,896+W|0,972+W|0,968+W|0,248+W|0,944+W|0),N2(K,U,896+W|0,964+W|0,960+W|0,928+W|0,912+W|0),(s2=j2[968+W>>2])<(o=j2[964+W>>2])||(b=j2[960+W>>2])<(t=j2[972+W>>2])||((a2=z2(s2-o))<(s2=z2(b-t))?(_=1,l2=j2[936+W>>2],Z2=j2[932+W>>2],Y2=j2[928+W>>2],k2=j2[952+W>>2],D2=j2[948+W>>2],h2=j2[944+W>>2]):(_=1,l2=j2[920+W>>2],Z2=j2[916+W>>2],Y2=j2[912+W>>2],k2=j2[256+W>>2],D2=j2[252+W>>2],h2=j2[248+W>>2],a2=s2)),a2<T&&_&&(A2=J,r2=N,i2=M,x=Y2,P=Z2,z=l2,j=h2,q=D2,O=k2,d2=o2,B2=$,Q2=e2,g2=c2,w2=t2,n2=b2,y=I,m=e,T=a2),!_)break f;_=T2[K+48>>2];}if(S=S+16|0,!((0|(e=e+1|0))<(0|_)))break;}S=T2[L+48>>2];}if(!((0|(I=I+1|0))<(0|S)))break;}(m|y)<0||(a2=z2(x-j),j=z2(P-q),O=z2(z-O),q=z2(z2(z2(a2*d2)+z2(j*B2))+z2(O*Q2)),T=z2(z2(z2(a2*g2)+z2(j*w2))+z2(O*n2)),N=z2(0),M=z2(z2(z2(d2*g2)+z2(B2*w2))+z2(Q2*n2)),(J=z2(z2(1)-z2(M*M)))!=z2(0)&&(N=z2(-1.0000000150474662e30),(J=z2(z2(T-z2(q*M))/J))<z2(-1.0000000150474662e30)||(N=J)>z2(1.0000000150474662e30)&&(N=z2(1.0000000150474662e30))),(J=z2(z2(M*N)-q))<z2(-1.0000000150474662e30)?(M=z2(T+z2(M*z2(-1.0000000150474662e30))))<z2(-1.0000000150474662e30)?(J=z2(-1.0000000150474662e30),N=z2(-1.0000000150474662e30)):(N=z2(1.0000000150474662e30),M>z2(1.0000000150474662e30)?J=z2(-1.0000000150474662e30):(J=z2(-1.0000000150474662e30),N=M)):J>z2(1.0000000150474662e30)&&(N=z2(-1.0000000150474662e30),J=z2(1.0000000150474662e30),(M=z2(T+z2(M*z2(1.0000000150474662e30))))<z2(-1.0000000150474662e30)||(N=M)>z2(1.0000000150474662e30)&&(N=z2(1.0000000150474662e30))),T2[260+W>>2]=0,q=z2(Q2*J),M=z2(q+z2(O-z2(n2*N))),O=z2(d2*J),T=z2(O+z2(a2-z2(g2*N))),a2=z2(B2*J),N=z2(a2+z2(j-z2(w2*N))),(J=z2(z2(M*M)+z2(z2(T*T)+z2(N*N))))>z2(1.1920928955078125e-7)&&(j=z2(_2(J)),J=z2(z2(1)/j),M=z2(M*J),j2[256+W>>2]=M,N=z2(N*J),j2[252+W>>2]=N,J=z2(T*J),j2[248+W>>2]=J,z2(z2(z2(J*E2)+z2(N*C2))+z2(M*G2))<z2(0)&&(j2[256+W>>2]=-M,j2[252+W>>2]=-N,j2[248+W>>2]=-J),T2[956+W>>2]=0,j2[952+W>>2]=z+q,j2[948+W>>2]=P+a2,j2[944+W>>2]=x+O,n1[T2[T2[i>>2]+16>>2]](i,248+W|0,944+W|0,z2(-j)))),N=z2(0),J=z2(-1.0000000150474662e30),z2(z2(z2(E2*i2)+z2(C2*r2))+z2(G2*A2))<z2(0)&&(A2=z2(-A2),r2=z2(-r2),i2=z2(-i2));}if((0|(I=T2[A+16>>2]))<=(U=-1))for(T2[A+20>>2]<=-1&&((e=T2[A+24>>2])&&S2[A+28|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[A+20>>2]=0,T2[A+24>>2]=0,p2[A+28|0]=1),m=I<<4;V=T2[252+W>>2],e=T2[A+24>>2]+m|0,T2[(y=e)>>2]=T2[248+W>>2],T2[y+4>>2]=V,V=T2[(y=256+W|0)+4>>2],T2[(e=e+8|0)>>2]=T2[y>>2],T2[e+4>>2]=V,m=m+16|0,(e=I)>>>0<=(I=I+1|0)>>>0;);if(T2[A+16>>2]=0,r=T2[r+12>>2],_=T2[f+12>>2],L=T2[H+60>>2],e=T2[X+60>>2],j2[260+W>>2]=N,N=z2(z2(1)/z2(_2(z2(z2(z2(i2*i2)+z2(r2*r2))+z2(A2*A2))))),P=z2(A2*N),j2[256+W>>2]=P,A2=z2(r2*N),j2[252+W>>2]=A2,r2=z2(i2*N),j2[248+W>>2]=r2,1<=(0|(m=T2[e+28>>2])))for(I=T2[e+36>>2]+28|0,i2=j2[r+40>>2],a2=j2[r+36>>2],O=j2[r+24>>2],z=j2[r+20>>2],j=j2[r+32>>2],q=j2[r+16>>2],b2=j2[r+8>>2],t2=j2[r+4>>2],c2=j2[r>>2],N=z2(-34028234663852886e22),V=0;M=j2[I-8>>2],x=j2[I-4>>2],T=j2[I>>2],N=(f=N<(M=z2(z2(z2(r2*z2(z2(z2(M*c2)+z2(x*t2))+z2(T*b2)))+z2(A2*z2(z2(z2(M*q)+z2(x*z))+z2(T*O))))+z2(P*z2(z2(z2(M*j)+z2(x*a2))+z2(T*i2))))))?M:N,U=f?V:U,I=I+36|0,(0|m)!=(0|(V=V+1|0)););if(T2[A+16>>2]=0,f=T2[e+36>>2]+P2(U,36)|0,1<=(0|(K=T2[f+4>>2])))for(u2=f+12|0,y=V=0;;){if(f=T2[e+16>>2]+(T2[T2[u2>>2]+(y<<2)>>2]<<4)|0,N=j2[f>>2],M=j2[f+4>>2],x=j2[f+8>>2],T=z2(z2(z2(z2(N*j2[r+32>>2])+z2(M*j2[r+36>>2]))+z2(x*j2[r+40>>2]))+j2[r+56>>2]),P=z2(z2(z2(z2(N*j2[r+16>>2])+z2(M*j2[r+20>>2]))+z2(x*j2[r+24>>2]))+j2[r+52>>2]),N=z2(z2(z2(z2(N*j2[r>>2])+z2(M*j2[r+4>>2]))+z2(x*j2[r+8>>2]))+j2[r+48>>2]),T2[A+20>>2]==(0|V)&&!((0|(m=V?V<<1:1))<=(0|V))){if(f=0,m&&(T2[5498]=T2[5498]+1,(I=K2(19+(m<<4)|0))&&(T2[(f=I+19&-16)-4>>2]=I)),1<=(0|V))for(I=0;S=T2[A+24>>2]+I|0,v2=T2[S+4>>2],T2[(X=f+I|0)>>2]=T2[S>>2],T2[X+4>>2]=v2,H=T2[(S=S+8|0)+4>>2],T2[(X=X+8|0)>>2]=T2[S>>2],T2[X+4>>2]=H,I=I+16|0,V=V-1|0;);(I=T2[A+24>>2])&&S2[A+28|0]&&(T2[5499]=T2[5499]+1,q2(T2[I-4>>2])),T2[A+24>>2]=f,p2[A+28|0]=1,T2[A+20>>2]=m,V=T2[A+16>>2];}if(f=T2[A+24>>2]+(V<<4)|0,T2[f+12>>2]=0,j2[f+8>>2]=T,j2[f+4>>2]=P,j2[f>>2]=N,V=T2[A+16>>2]+1|0,T2[A+16>>2]=V,(0|K)==(0|(y=y+1|0)))break;}(0|U)<=-1||I0(248+W|0,L,_,A+12|0,A+32|0,z2(J-R2),R2,i);}S2[A+52|0]&&(A=T2[i+4>>2],T2[A+844>>2]&&((0|(f=T2[A+836>>2]))==(0|(r=T2[T2[i+8>>2]+8>>2]))?m0(A,f+4|0,T2[T2[i+12>>2]+8>>2]+4|0):m0(A,T2[T2[i+12>>2]+8>>2]+4|0,r+4|0)));}L2=976+W|0;},function(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l=z2(0),s=z2(0);return L2=A=L2-624|0,s=z2(j2[f+116>>2]-j2[f+52>>2]),l=z2(s*s),s=z2(j2[f+120>>2]-j2[f+56>>2]),l=z2(l+z2(s*s)),s=z2(j2[f+124>>2]-j2[f+60>>2]),l=z2(l+z2(s*s)),s=j2[f+276>>2],l<z2(s*s)&&(s=z2(1),l=z2(j2[r+116>>2]-j2[r+52>>2]),k=z2(l*l),l=z2(j2[r+120>>2]-j2[r+56>>2]),k=z2(k+z2(l*l)),l=z2(j2[r+124>>2]-j2[r+60>>2]),k=z2(k+z2(l*l)),l=j2[r+276>>2],k<z2(l*l))||(a=T2[f+192>>2],T2[(e=i=A+592|0)>>2]=0,T2[e+4>>2]=0,T2[(o=A+588|0)>>2]=1065353216,T2[(e=n=A+600|0)>>2]=0,T2[e+4>>2]=0,T2[(b=A+608|0)>>2]=0,T2[A+572>>2]=0,T2[A+576>>2]=0,T2[A+580>>2]=1065353216,T2[A+584>>2]=1065353216,T2[A+564>>2]=8,T2[A+568>>2]=0,T2[A+560>>2]=11936,T2[A+616>>2]=0,s=j2[r+272>>2],j2[A+596>>2]=s,j2[A+612>>2]=s,T2[A+556>>2]=0,T2[A+548>>2]=1566444395,T2[A+552>>2]=0,T2[A+384>>2]=12640,p2[0|(t=A+356|0)]=0,T2[A+332>>2]=953267991,T2[A+16>>2]=a,T2[A+8>>2]=12396,T2[A+20>>2]=A+560,T2[A+12>>2]=A+24,c=f+4|0,u=f+68|0,k=r+4|0,a=r+68|0,s=z2(1),x0(A+8|0,c,u,k,a,A+384|0)&&((l=j2[A+548>>2])<j2[f+268>>2]&&(j2[f+268>>2]=l),l<j2[r+268>>2]&&(j2[r+268>>2]=l),s=z2(1),l<z2(1)&&(s=l)),e=T2[r+192>>2],T2[i>>2]=0,T2[i+4>>2]=0,T2[o>>2]=1065353216,T2[n>>2]=0,T2[4+n>>2]=0,T2[b>>2]=0,T2[A+572>>2]=0,T2[A+576>>2]=0,T2[A+580>>2]=1065353216,T2[A+584>>2]=1065353216,T2[A+564>>2]=8,T2[A+568>>2]=0,T2[A+560>>2]=11936,T2[A+616>>2]=0,l=j2[f+272>>2],j2[A+596>>2]=l,j2[A+612>>2]=l,T2[A+556>>2]=0,T2[A+548>>2]=1566444395,T2[A+552>>2]=0,T2[A+384>>2]=12640,p2[0|t]=0,T2[A+332>>2]=953267991,T2[A+20>>2]=e,T2[A+8>>2]=12396,T2[A+16>>2]=A+560,T2[A+12>>2]=A+24,x0(A+8|0,c,u,k,a,A+384|0)&&((l=j2[A+548>>2])<j2[f+268>>2]&&(j2[f+268>>2]=l),l<j2[r+268>>2]&&(j2[r+268>>2]=l),l<s&&(s=l))),L2=A+624|0,z2(s);},function(A,f){A|=0,f|=0;var r,e=0,i=0,a=0,n=0;if((a=T2[A+56>>2])&&S2[A+52|0]){if((0|(i=T2[f+4>>2]))==T2[f+8>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){if(r&&(T2[5498]=T2[5498]+1,(e=K2(19+(r<<2)|0))&&(T2[(n=e+19&-16)-4>>2]=e)),1<=(0|i))for(a=0,e=i;T2[a+n>>2]=T2[T2[f+12>>2]+a>>2],a=a+4|0,e=e-1|0;);(e=T2[f+12>>2])&&S2[f+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]),i=T2[f+4>>2]),T2[f+12>>2]=n,p2[f+16|0]=1,T2[f+8>>2]=r,a=T2[A+56>>2];}T2[f+4>>2]=i+1,T2[T2[f+12>>2]+(i<<2)>>2]=a;}},y2,c0,C2,_,I,I,C2,C2,U0,I,C2,C2,function(A,f,r,e){A|=0,f|=0,r|=0,e=z2(e);var i,a,n,o,b,t,c=0;L2=c=L2-16|0,j2[A+32>>2]=e,t=T2[f+4>>2],T2[A+8>>2]=T2[f>>2],T2[A+12>>2]=t,b=T2[4+(t=f+8|0)>>2],T2[(o=A+16|0)>>2]=T2[t>>2],T2[4+o>>2]=b,i=j2[t>>2],a=j2[r>>2],n=j2[f>>2],o=j2[r+4>>2],b=j2[f+4>>2],t=j2[r+8>>2],r=j2[A+28>>2],e=z2(z2(r+j2[A+24>>2])+e),j2[A+32>>2]=e,T2[12+c>>2]=0,j2[8+c>>2]=t-z2(r*i),j2[4+c>>2]=o-z2(r*b),j2[c>>2]=a-z2(n*r),e<z2(0)&&(p2[A+36|0]=1),A=T2[A+4>>2],n1[T2[T2[A>>2]+16>>2]](A,f,c,e),L2=16+c|0;},I,function(A,f,r,e){A|=0,f|=0,r|=0,e=z2(e);var i,a,n,o,b,t,c,u,k,l,s,v=z2(0),d=z2(0),B=z2(0),Q=z2(0),g=z2(0),w=z2(0),G=z2(0),C=(z2(0)),E=z2(0),D=z2(0),h=0,Z=z2(0),Y=z2(0),R=z2(0),F=z2(0),W=z2(0),m=z2(0),N=z2(0),V=z2(0),J=(z2(0));L2=h=L2-16|0,o=j2[f+8>>2],Z=j2[r+8>>2],J=z2(z2(o*e)+Z),b=j2[f+4>>2],C=j2[r+4>>2],t=z2(z2(b*e)+C),c=j2[f>>2],v=z2(c*e),e=j2[r>>2],u=z2(v+e),S2[A+232|0]?(Y=j2[A+56>>2],g=z2(-j2[A+92>>2]),R=j2[A+40>>2],Q=j2[A+88>>2],F=j2[A+72>>2],w=j2[A+96>>2],d=z2(z2(z2(Y*g)-z2(R*Q))-z2(F*w)),W=j2[A+60>>2],m=j2[A+44>>2],N=j2[A+76>>2],E=z2(z2(z2(W*g)-z2(m*Q))-z2(N*w)),V=j2[A- -64>>2],v=z2(V*g),g=j2[A+48>>2],v=z2(v-z2(g*Q)),Q=j2[A+80>>2],w=z2(v-z2(Q*w)),v=j2[A+168>>2],B=j2[A+172>>2],G=j2[A+176>>2],G=z2(z2(z2(J*z2(z2(z2(F*v)+z2(N*B))+z2(Q*G)))+z2(z2(u*z2(z2(z2(R*v)+z2(m*B))+z2(g*G)))+z2(t*z2(z2(z2(Y*v)+z2(W*B))+z2(V*G)))))+z2(z2(z2(z2(v*d)+z2(E*B))+z2(w*G))+j2[A+216>>2])),D=z2(c*z2(G-e)),e=j2[A+184>>2],v=j2[A+188>>2],B=j2[A+192>>2],v=z2(z2(z2(J*z2(z2(z2(F*e)+z2(N*v))+z2(Q*B)))+z2(z2(u*z2(z2(z2(R*e)+z2(m*v))+z2(g*B)))+z2(t*z2(z2(z2(Y*e)+z2(W*v))+z2(V*B)))))+z2(z2(z2(z2(d*e)+z2(E*v))+z2(w*B))+j2[A+220>>2])),B=z2(D+z2(b*z2(v-C))),e=j2[A+200>>2],C=j2[A+204>>2],E=z2(z2(d*e)+z2(E*C)),d=j2[A+208>>2],J=z2(z2(z2(E+z2(w*d))+j2[A+224>>2])+z2(z2(J*z2(z2(z2(F*e)+z2(N*C))+z2(Q*d)))+z2(z2(u*z2(z2(z2(R*e)+z2(m*C))+z2(g*d)))+z2(t*z2(z2(z2(Y*e)+z2(W*C))+z2(V*d)))))),e=z2(B+z2(o*z2(J-Z))),j2[4+h>>2]=v+z2(b*e),j2[h>>2]=G+z2(c*e),Z=z2(J+z2(o*e))):(l=j2[A+224>>2],Y=j2[A+208>>2],R=j2[A+200>>2],F=j2[A+204>>2],s=j2[A+216>>2],d=j2[A+172>>2],W=j2[A+176>>2],m=j2[A+168>>2],N=j2[A+120>>2],D=z2(-j2[A+156>>2]),E=j2[A+104>>2],a=j2[A+152>>2],V=j2[A+136>>2],n=j2[A+160>>2],g=z2(z2(z2(N*D)-z2(E*a))-z2(V*n)),Q=j2[A+124>>2],w=j2[A+108>>2],v=j2[A+140>>2],B=z2(z2(z2(Q*D)-z2(w*a))-z2(v*n)),G=j2[A+128>>2],i=z2(G*D),D=j2[A+112>>2],i=z2(i-z2(D*a)),a=j2[A+144>>2],n=z2(i-z2(a*n)),i=j2[A+184>>2],k=j2[A+188>>2],r=j2[A+192>>2],i=z2(z2(z2(Z*z2(z2(z2(V*i)+z2(v*k))+z2(a*r)))+z2(z2(e*z2(z2(z2(E*i)+z2(w*k))+z2(D*r)))+z2(C*z2(z2(z2(N*i)+z2(Q*k))+z2(G*r)))))+z2(z2(z2(z2(g*i)+z2(B*k))+z2(n*r))+j2[A+220>>2])),j2[4+h>>2]=i,d=z2(z2(z2(Z*z2(z2(z2(V*m)+z2(v*d))+z2(a*W)))+z2(z2(e*z2(z2(z2(E*m)+z2(w*d))+z2(D*W)))+z2(C*z2(z2(z2(N*m)+z2(Q*d))+z2(G*W)))))+z2(s+z2(z2(z2(m*g)+z2(B*d))+z2(n*W)))),j2[h>>2]=d,Z=z2(z2(l+z2(z2(z2(g*R)+z2(B*F))+z2(n*Y)))+z2(z2(Z*z2(z2(z2(V*R)+z2(v*F))+z2(a*Y)))+z2(z2(e*z2(z2(z2(E*R)+z2(w*F))+z2(D*Y)))+z2(C*z2(z2(z2(N*R)+z2(Q*F))+z2(G*Y)))))),e=z2(z2(z2(c*z2(u-d))+z2(b*z2(t-i)))+z2(o*z2(J-Z)))),T2[12+h>>2]=0,j2[8+h>>2]=Z,A=T2[A+36>>2],n1[T2[T2[A>>2]+16>>2]](A,f,h,e),L2=16+h|0;},I,X0,function(A){var f,r;return T2[(A|=0)+8>>2]=13344,T2[A>>2]=13316,r=T2[(f=A+56|0)>>2],n1[T2[T2[r>>2]+20>>2]](r,T2[(r=A+72|0)>>2]),f=T2[f>>2],n1[T2[T2[f>>2]+16>>2]](f,T2[r>>2]),0|A;},function(A){var f,r;T2[(A|=0)+8>>2]=13344,T2[A>>2]=13316,r=T2[(f=A+56|0)>>2],n1[T2[T2[r>>2]+20>>2]](r,T2[(r=A+72|0)>>2]),f=T2[f>>2],n1[T2[T2[f>>2]+16>>2]](f,T2[r>>2]),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N=0,V=(0);L2=N=L2+-64|0,n=S2[A+76|0],V=T2[(d=n?f:r)+4>>2],8<T2[V+4>>2]-21>>>0||19<T2[T2[(n=n?r:f)+4>>2]+4>>2]||(m=z2(n1[T2[T2[V>>2]+48>>2]](V)),j2[A- -64>>2]=m,T2[A+60>>2]=e,T2[A+48>>2]=d,T2[A+44>>2]=n,T2[A+52>>2]=i,T2[i+4>>2]=T2[(e=A+72|0)>>2],f=T2[d+12>>2],o=j2[f+52>>2],B=j2[f+56>>2],r=T2[n+12>>2],Q=j2[r+52>>2],g=j2[r+56>>2],a=j2[f+20>>2],b=j2[f+36>>2],w=j2[r+20>>2],G=j2[r+36>>2],C=j2[r+24>>2],t=j2[f+24>>2],E=j2[r+40>>2],c=j2[f+40>>2],D=j2[r+32>>2],u=j2[f+32>>2],h=j2[r>>2],k=j2[f>>2],Z=j2[r+16>>2],l=j2[f+16>>2],Y=j2[f+48>>2],R=j2[r+48>>2],s=j2[f+4>>2],F=j2[r+4>>2],W=j2[r+8>>2],v=j2[f+8>>2],T2[60+N>>2]=0,T2[44+N>>2]=0,T2[28+N>>2]=0,j2[40+N>>2]=z2(z2(v*W)+z2(t*C))+z2(c*E),j2[36+N>>2]=z2(z2(v*F)+z2(t*w))+z2(c*G),j2[24+N>>2]=z2(z2(s*W)+z2(a*C))+z2(b*E),j2[20+N>>2]=z2(z2(s*F)+z2(a*w))+z2(b*G),o=z2(-o),j2[56+N>>2]=z2(z2(z2(t*o)-z2(v*Y))-z2(c*B))+z2(z2(z2(v*R)+z2(t*Q))+z2(c*g)),j2[52+N>>2]=z2(z2(z2(a*o)-z2(s*Y))-z2(b*B))+z2(z2(z2(s*R)+z2(a*Q))+z2(b*g)),T2[12+N>>2]=0,j2[N>>2]=z2(z2(k*h)+z2(l*Z))+z2(u*D),j2[32+N>>2]=z2(z2(v*h)+z2(t*Z))+z2(c*D),j2[16+N>>2]=z2(z2(s*h)+z2(a*Z))+z2(b*D),j2[8+N>>2]=z2(z2(k*W)+z2(l*C))+z2(u*E),j2[4+N>>2]=z2(z2(k*F)+z2(l*w))+z2(u*G),j2[48+N>>2]=z2(z2(z2(l*o)-z2(k*Y))-z2(u*B))+z2(z2(z2(k*R)+z2(l*Q))+z2(u*g)),g=T2[n+4>>2],n1[T2[T2[g>>2]+8>>2]](g,N,f=A+12|0,r=A+28|0),a=z2(m+j2[i+32>>2]),j2[r>>2]=a+j2[r>>2],j2[(g=A+32|0)>>2]=a+j2[g>>2],j2[(g=A+36|0)>>2]=a+j2[g>>2],j2[f>>2]=j2[f>>2]-a,j2[(g=A+16|0)>>2]=j2[g>>2]-a,j2[(g=A+20|0)>>2]=j2[g>>2]-a,e=T2[e>>2],T2[e+840>>2]=T2[d+8>>2],T2[e+836>>2]=T2[n+8>>2],n1[T2[T2[V>>2]+64>>2]](V,A+8|0,f,r),f=T2[i+4>>2],T2[f+844>>2]&&(e=T2[f+836>>2],V=T2[T2[i+8>>2]+8>>2],g=f,f=T2[T2[i+12>>2]+8>>2],m0(g,((r=(0|e)==(0|V))?e:f)+4|0,(r?f:V)+4|0)),T2[A+44>>2]=0,T2[A+48>>2]=0),L2=N+64|0;},function(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0,z2(0);var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M,I,x,y,U,X,p,T,S=z2(0);return L2=e=L2-240|0,S=z2(1),i=S2[A+76|0],a=z2(j2[(A=i?r:f)+116>>2]-j2[A+52>>2]),n=z2(a*a),a=z2(j2[A+120>>2]-j2[A+56>>2]),n=z2(n+z2(a*a)),a=z2(j2[A+124>>2]-j2[A+60>>2]),n=z2(n+z2(a*a)),a=j2[A+276>>2],n<z2(a*a)||(r=T2[(f=i?f:r)+192>>2],8<T2[r+4>>2]-21>>>0||(b=j2[f+52>>2],S=j2[f+12>>2],a=j2[f+28>>2],n=j2[f+56>>2],o=j2[f+60>>2],t=j2[f+44>>2],Q=j2[A+120>>2],g=j2[A+116>>2],w=j2[A+124>>2],c=j2[f+8>>2],u=j2[f+24>>2],k=j2[f+40>>2],l=j2[f+36>>2],s=j2[f+20>>2],v=j2[f+4>>2],G=j2[A+56>>2],C=j2[A+52>>2],E=j2[A+60>>2],D=j2[A+108>>2],h=j2[A+92>>2],Z=j2[A+76>>2],Y=j2[A+104>>2],R=j2[A+88>>2],F=j2[A+72>>2],W=j2[A+100>>2],m=j2[A+84>>2],N=j2[A+44>>2],V=j2[A+28>>2],J=j2[A+12>>2],M=j2[A+40>>2],I=j2[A+24>>2],x=j2[A+8>>2],y=j2[A+36>>2],U=j2[A+20>>2],X=j2[A+68>>2],p=j2[A+4>>2],T2[e+236>>2]=0,T2[e+220>>2]=0,T=z2(-n),n=z2(z2(z2(a*T)-z2(S*b))-z2(t*o)),d=z2(n+z2(z2(z2(S*g)+z2(a*Q))+z2(t*w))),B=z2(n+z2(z2(z2(S*C)+z2(a*G))+z2(t*E))),n=j2[A+272>>2],j2[e+232>>2]=(d<B?d:B)-n,i=z2(z2(z2(u*T)-z2(c*b))-z2(k*o)),f=z2(i+z2(z2(z2(c*g)+z2(u*Q))+z2(k*w))),i=z2(i+z2(z2(z2(c*C)+z2(u*G))+z2(k*E))),j2[e+228>>2]=(f<i?f:i)-n,o=z2(z2(z2(s*T)-z2(v*b))-z2(l*o)),b=z2(o+z2(z2(z2(v*g)+z2(s*Q))+z2(l*w))),o=z2(o+z2(z2(z2(v*C)+z2(s*G))+z2(l*E))),j2[e+224>>2]=(b<o?b:o)-n,j2[e+216>>2]=n+(B<d?d:B),j2[e+212>>2]=n+(i<f?f:i),j2[e+208>>2]=n+(o<b?b:o),T2[e+128>>2]=0,j2[e+124>>2]=d,j2[e+120>>2]=f,j2[e+116>>2]=b,T2[e+112>>2]=0,j2[e+108>>2]=z2(z2(S*Z)+z2(a*h))+z2(t*D),j2[e+104>>2]=z2(z2(S*F)+z2(a*R))+z2(t*Y),j2[e+100>>2]=z2(z2(S*X)+z2(a*m))+z2(t*W),T2[e+96>>2]=0,j2[e+92>>2]=z2(z2(c*Z)+z2(u*h))+z2(k*D),j2[e+88>>2]=z2(z2(c*F)+z2(u*R))+z2(k*Y),j2[e+84>>2]=z2(z2(c*X)+z2(u*m))+z2(k*W),T2[e+80>>2]=0,j2[e+76>>2]=z2(z2(v*Z)+z2(s*h))+z2(l*D),j2[e+72>>2]=z2(z2(v*F)+z2(s*R))+z2(l*Y),T2[e- -64>>2]=0,j2[e+60>>2]=B,j2[e+56>>2]=i,j2[e+52>>2]=o,T2[e+48>>2]=0,j2[e+44>>2]=z2(z2(S*J)+z2(a*V))+z2(t*N),j2[e+40>>2]=z2(z2(S*x)+z2(a*I))+z2(t*M),j2[e+36>>2]=z2(z2(S*p)+z2(a*U))+z2(t*y),T2[e+32>>2]=0,j2[e+28>>2]=z2(z2(c*J)+z2(u*V))+z2(k*N),j2[e+24>>2]=z2(z2(c*x)+z2(u*I))+z2(k*M),j2[e+20>>2]=z2(z2(c*p)+z2(u*U))+z2(k*y),T2[e+16>>2]=0,j2[e+12>>2]=z2(z2(v*J)+z2(s*V))+z2(l*N),j2[e+8>>2]=z2(z2(v*x)+z2(s*I))+z2(l*M),j2[e+68>>2]=z2(z2(v*X)+z2(s*m))+z2(l*W),j2[e+4>>2]=z2(z2(v*p)+z2(s*U))+z2(l*y),T2[e>>2]=13592,j2[e+196>>2]=n,j2[e+200>>2]=j2[A+268>>2],n1[T2[T2[r>>2]+64>>2]](r,e,e+224|0,e+208|0),(S=j2[e+200>>2])<j2[A+268>>2]?j2[A+268>>2]=S:S=z2(1))),L2=e+240|0,z2(S);},function(A,f){f|=0;var r,e=0,i=0,a=0,n=0;if(a=T2[(A|=0)+72>>2]){if((0|(i=T2[f+4>>2]))==T2[f+8>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){if(r&&(T2[5498]=T2[5498]+1,(e=K2(19+(r<<2)|0))&&(T2[(n=e+19&-16)-4>>2]=e)),1<=(0|i))for(a=0,e=i;T2[a+n>>2]=T2[T2[f+12>>2]+a>>2],a=a+4|0,e=e-1|0;);(e=T2[f+12>>2])&&S2[f+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]),i=T2[f+4>>2]),T2[f+12>>2]=n,p2[f+16|0]=1,T2[f+8>>2]=r,a=T2[A+72>>2];}T2[f+4>>2]=i+1,T2[T2[f+12>>2]+(i<<2)>>2]=a;}},function(A){var f;return T2[(A|=0)>>2]=13344,f=T2[A+48>>2],n1[T2[T2[f>>2]+20>>2]](f,T2[A+64>>2]),f=T2[A+48>>2],n1[T2[T2[f>>2]+16>>2]](f,T2[A+64>>2]),0|A;},function(A){var f;T2[(A|=0)>>2]=13344,f=T2[A+48>>2],n1[T2[T2[f>>2]+20>>2]](f,T2[A+64>>2]),f=T2[A+48>>2],n1[T2[T2[f>>2]+16>>2]](f,T2[A+64>>2]),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i=0,a=0,n=0,o=z2(0),b=0,t=z2(0),c=z2(0),u=z2(0);L2=i=L2-144|0,o=j2[f>>2],t=j2[f+16>>2],c=j2[f+32>>2],j2[A+20>>2]<((u=o<t?o:t)<c?u:c)||j2[(c<j2[f+(a=!(t<o)<<4)>>2]?a:32)+f>>2]<j2[A+4>>2]||(o=j2[f+8>>2],t=j2[(a=f+24|0)>>2],c=j2[(b=f+40|0)>>2],j2[A+28>>2]<((u=o<t?o:t)<c?u:c)||j2[(c<j2[(a=t<o?f+8|0:a)>>2]?a:b)>>2]<j2[A+12>>2]||(o=j2[f+4>>2],t=j2[(a=f+20|0)>>2],c=j2[(b=f+36|0)>>2],j2[A+24>>2]<((u=o<t?o:t)<c?u:c)||j2[(c<j2[(a=t<o?f+4|0:a)>>2]?a:b)>>2]<j2[A+8>>2]||(a=T2[A+36>>2],19<T2[T2[a+4>>2]+4>>2]||(b=T2[A+48>>2],T2[(n=60+i|0)>>2]=1065353216,T2[n+4>>2]=0,c=T2[f+20>>2],T2[(n=112+i|0)>>2]=T2[f+16>>2],T2[n+4>>2]=c,c=T2[f+36>>2],T2[(n=128+i|0)>>2]=T2[f+32>>2],T2[n+4>>2]=c,t=T2[4+(c=f+8|0)>>2],T2[(n=104+i|0)>>2]=T2[c>>2],T2[n+4>>2]=t,t=T2[4+(c=f+24|0)>>2],T2[(n=120+i|0)>>2]=T2[c>>2],T2[n+4>>2]=t,t=T2[4+(c=f+40|0)>>2],T2[(n=136+i|0)>>2]=T2[c>>2],T2[n+4>>2]=t,T2[92+i>>2]=0,T2[52+i>>2]=1065353216,T2[56+i>>2]=1065353216,T2[44+i>>2]=0,T2[48+i>>2]=0,T2[36+i>>2]=1,T2[40+i>>2]=0,T2[32+i>>2]=13376,n=T2[f+4>>2],T2[96+i>>2]=T2[f>>2],T2[100+i>>2]=n,j2[84+i>>2]=j2[A+56>>2],T2[28+i>>2]=e,T2[24+i>>2]=r,f=T2[A+40>>2],T2[8+i>>2]=f,n=T2[f+8>>2],T2[20+i>>2]=T2[f+12>>2],T2[16+i>>2]=n,o=j2[T2[A+44>>2]+32>>2],T2[12+i>>2]=32+i,f=o>z2(0)?0|n1[T2[T2[b>>2]+8>>2]](b,a,8+i|0,0,2):0|n1[T2[T2[b>>2]+8>>2]](b,a,8+i|0,T2[A+64>>2],1),a=T2[A+44>>2],n=T2[a+8>>2],T2[n+8>>2]!=T2[T2[A+40>>2]+8>>2]?(n=T2[a+12>>2],T2[a+12>>2]=8+i,n1[T2[T2[a>>2]+12>>2]](a,r,e)):(T2[a+8>>2]=8+i,n1[T2[T2[a>>2]+8>>2]](a,r,e)),n1[T2[T2[f>>2]+8>>2]](f,T2[A+36>>2],8+i|0,T2[A+52>>2],T2[A+44>>2]),r=T2[A+44>>2],T2[(T2[T2[r+8>>2]+8>>2]==T2[T2[A+40>>2]+8>>2]?8:12)+r>>2]=n,n1[T2[T2[f>>2]>>2]](f),n1[T2[T2[b>>2]+60>>2]](b,f),T2[32+i>>2]=7916,(A=T2[92+i>>2])&&(n1[T2[T2[A>>2]>>2]](A),(A=T2[92+i>>2])&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2]))))))),L2=144+i|0;},Y2,g2,X2,function(A){return 13516;},function(A,f,r){A|=0,f|=0,r|=0,z2(0);var e=j2[r>>2],i=j2[r+4>>2],a=j2[r+8>>2],n=z2(z2(z2(e*j2[f+80>>2])+z2(i*j2[f+84>>2]))+z2(a*j2[f+88>>2])),o=z2(z2(z2(e*j2[f+96>>2])+z2(i*j2[f+100>>2]))+z2(a*j2[f+104>>2]));e=z2(z2(z2(e*j2[f+64>>2])+z2(i*j2[f+68>>2]))+z2(a*j2[f+72>>2])),r=T2[(f=(f- -64|0)+((e<n?n<o?2:1:(e<o)<<1)<<4)|0)+4>>2],T2[A>>2]=T2[f>>2],T2[A+4>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+8|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},function(A,f,r,e){var i,a,n,o,b,t;if(A|=0,f|=0,r|=0,e|=0,1<=(0|e))for(b=A- -64|0;i=j2[f>>2],a=j2[f+4>>2],n=j2[f+8>>2],o=z2(z2(z2(i*j2[A+80>>2])+z2(a*j2[A+84>>2]))+z2(n*j2[A+88>>2])),t=z2(z2(z2(i*j2[A+96>>2])+z2(a*j2[A+100>>2]))+z2(n*j2[A+104>>2])),i=z2(z2(z2(i*j2[A+64>>2])+z2(a*j2[A+68>>2]))+z2(n*j2[A+72>>2])),i=T2[4+(o=((i<o?o<t?2:1:(i<t)<<1)<<4)+b|0)>>2],T2[r>>2]=T2[o>>2],T2[r+4>>2]=i,t=T2[4+(o=8+o|0)>>2],T2[(i=r+8|0)>>2]=T2[o>>2],T2[4+i>>2]=t,f=f+16|0,r=r+16|0,e=e-1|0;);},p0,function(A,f,r){A|=0,f|=0,r|=0,z2(0);var e,i=j2[A+96>>2],a=j2[A+80>>2],n=j2[A+84>>2],o=j2[A+104>>2],b=j2[A+72>>2],t=j2[A+88>>2],c=j2[A+100>>2],u=j2[A+68>>2],k=j2[A+64>>2];T2[r+12>>2]=0,a=z2(a-k),c=z2(c-u),n=z2(n-u),k=z2(i-k),u=z2(z2(a*c)-z2(n*k)),A=z2((e=u)*u),u=z2(o-b),i=z2(t-b),b=z2(z2(n*u)-z2(i*c)),u=z2(z2(i*k)-z2(a*u)),k=z2(z2(1)/z2(_2(z2(A+z2(z2(b*b)+z2(u*u)))))),i=z2(e*k),j2[r+8>>2]=i,u=z2(u*k),j2[r+4>>2]=u,b=z2(b*k),j2[r>>2]=b,f&&(j2[r+8>>2]=-i,j2[r+4>>2]=-u,j2[r>>2]=-b);},T0,T0,function(A,f,r,e){e|=0,n1[T2[T2[(A|=0)>>2]+108>>2]](A,f|=0,r|=0),n1[T2[T2[A>>2]+108>>2]](A,(f+1|0)%3|0,e);},function(A,f,r){var e,i=T2[(f=(A=((f|=0)<<4)+(A|=0)|0)+72|0)+4>>2];T2[(e=(r|=0)+8|0)>>2]=T2[f>>2],T2[4+e>>2]=i,f=T2[(A=A- -64|0)+4>>2],T2[r>>2]=T2[A>>2],T2[r+4>>2]=f;},S0,function(A,f,r,e){n1[T2[T2[(A|=0)>>2]+124>>2]](A,e|=0,f|=0,r|=0);},function(A,f,r){A|=0,f|=0,r=z2(r),z2(0);var e,i,a,n,o,b,t,c,u,k,l,s=0,v=(0);return L2=s=L2-32|0,c=j2[A+64>>2],o=z2(j2[A+80>>2]-c),e=j2[A+68>>2],n=z2(j2[A+100>>2]-e),i=z2(j2[A+84>>2]-e),b=z2(j2[A+96>>2]-c),a=z2(z2(o*n)-z2(i*b)),l=z2((t=a)*a),k=i,i=j2[A+72>>2],a=z2(j2[A+104>>2]-i),u=z2(j2[A+88>>2]-i),n=z2(z2(k*a)-z2(u*n)),o=z2(z2(u*b)-z2(o*a)),b=z2(z2(1)/z2(_2(z2(l+z2(z2(n*n)+z2(o*o)))))),a=z2(t*b),n=z2(n*b),o=z2(o*b),e=z2(z2(z2(j2[f+8>>2]*a)+z2(z2(j2[f>>2]*n)+z2(j2[f+4>>2]*o)))-z2(z2(i*a)+z2(z2(c*n)+z2(e*o)))),(c=z2(-r))<=e&&e<=r&&(n1[T2[T2[A>>2]+104>>2]](A,0,16+s|0,s),b=j2[16+s>>2],e=z2(j2[s>>2]-b),u=j2[20+s>>2],i=z2(j2[4+s>>2]-u),r=z2(z2(o*e)-z2(n*i)),l=z2((t=r)*r),r=z2(a*i),k=j2[24+s>>2],i=z2(j2[8+s>>2]-k),r=z2(r-z2(o*i)),e=z2(z2(n*i)-z2(a*e)),i=z2(z2(1)/z2(_2(z2(l+z2(z2(r*r)+z2(e*e)))))),t=z2(t*i),r=z2(r*i),e=z2(e*i),c>z2(z2(z2(j2[f+8>>2]*t)+z2(z2(j2[f>>2]*r)+z2(j2[f+4>>2]*e)))-z2(z2(k*t)+z2(z2(b*r)+z2(u*e))))||(n1[T2[T2[A>>2]+104>>2]](A,1,16+s|0,s),b=j2[16+s>>2],e=z2(j2[s>>2]-b),u=j2[20+s>>2],i=z2(j2[4+s>>2]-u),r=z2(z2(o*e)-z2(n*i)),l=z2((t=r)*r),r=z2(a*i),k=j2[24+s>>2],i=z2(j2[8+s>>2]-k),r=z2(r-z2(o*i)),e=z2(z2(n*i)-z2(a*e)),i=z2(z2(1)/z2(_2(z2(l+z2(z2(r*r)+z2(e*e)))))),t=z2(t*i),r=z2(r*i),e=z2(e*i),c>z2(z2(z2(j2[f+8>>2]*t)+z2(z2(j2[f>>2]*r)+z2(j2[f+4>>2]*e)))-z2(z2(k*t)+z2(z2(b*r)+z2(u*e))))||(n1[T2[T2[A>>2]+104>>2]](A,2,16+s|0,s),t=c,c=j2[16+s>>2],e=z2(j2[s>>2]-c),i=j2[20+s>>2],b=z2(j2[4+s>>2]-i),r=z2(z2(o*e)-z2(n*b)),u=z2((k=r)*r),l=z2(a*b),r=o,o=j2[24+s>>2],b=z2(j2[8+s>>2]-o),r=z2(l-z2(r*b)),a=z2(z2(n*b)-z2(a*e)),n=z2(z2(1)/z2(_2(z2(u+z2(z2(r*r)+z2(a*a)))))),e=z2(k*n),r=z2(r*n),a=z2(a*n),t>z2(z2(z2(j2[f+8>>2]*e)+z2(z2(j2[f>>2]*r)+z2(j2[f+4>>2]*a)))-z2(z2(o*e)+z2(z2(c*r)+z2(i*a))))||(v=1)))),L2=32+s|0,0|v;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0,z2(0);var i,a,n=j2[A+96>>2],o=j2[A+80>>2],b=j2[A+84>>2],t=j2[A+104>>2],c=j2[(f=A+72|0)>>2],u=j2[A+88>>2],k=j2[A+100>>2],l=j2[A+68>>2],s=j2[A+64>>2];T2[r+12>>2]=0,o=z2(o-s),k=z2(k-l),b=z2(b-l),s=z2(n-s),l=z2(z2(o*k)-z2(b*s)),a=z2((i=l)*l),l=z2(t-c),n=z2(u-c),c=z2(z2(b*l)-z2(n*k)),l=z2(z2(n*s)-z2(o*l)),s=z2(z2(1)/z2(_2(z2(a+z2(z2(c*c)+z2(l*l)))))),j2[r+8>>2]=i*s,j2[r+4>>2]=l*s,j2[r>>2]=c*s,s=T2[f+4>>2],T2[(r=e+8|0)>>2]=T2[f>>2],T2[r+4>>2]=s,f=T2[A+68>>2],T2[e>>2]=T2[A+64>>2],T2[e+4>>2]=f;},I,function(A,f,r,e){var i,a,n;A|=0,f|=0,r|=0,e|=0,T2[(e=(L2=r=L2-800|0)+748|0)>>2]=0,T2[e+4>>2]=0,T2[(e=r+760|0)>>2]=0,T2[e+4>>2]=0,T2[r+756>>2]=1065353216,T2[(e=r+768|0)>>2]=0,T2[e+4>>2]=0,T2[(e=r+780|0)>>2]=0,T2[e+4>>2]=0,T2[r+776>>2]=1065353216,T2[(e=r+788|0)>>2]=0,T2[e+4>>2]=0,T2[r+796>>2]=0,T2[r+740>>2]=0,T2[r+744>>2]=0,T2[r+736>>2]=1065353216,T2[r+728>>2]=0,T2[r+732>>2]=0,T2[r+560>>2]=12640,j2[r+724>>2]=j2[A+200>>2],T2[(e=r+528|0)>>2]=0,T2[e+4>>2]=0,T2[r+524>>2]=1065353216,T2[(e=r+536|0)>>2]=0,T2[e+4>>2]=0,T2[r+544>>2]=0,T2[r+508>>2]=0,T2[r+512>>2]=0,T2[r+516>>2]=1065353216,T2[r+520>>2]=1065353216,T2[r+500>>2]=8,T2[r+504>>2]=0,T2[r+496>>2]=11936,T2[r+552>>2]=0,a=j2[A+196>>2],j2[r+532>>2]=a,j2[r+548>>2]=a,T2[(e=r+412|0)>>2]=1065353216,T2[e+4>>2]=0,n=T2[4+(i=f+8|0)>>2],T2[(e=r+456|0)>>2]=T2[i>>2],T2[e+4>>2]=n,i=T2[f+20>>2],T2[(e=r+464|0)>>2]=T2[f+16>>2],T2[e+4>>2]=i,n=T2[4+(i=f+24|0)>>2],T2[(e=r+472|0)>>2]=T2[i>>2],T2[e+4>>2]=n,i=T2[f+36>>2],T2[(e=r+480|0)>>2]=T2[f+32>>2],T2[e+4>>2]=i,n=T2[4+(i=f+40|0)>>2],T2[(e=r+488|0)>>2]=T2[i>>2],T2[e+4>>2]=n,T2[r+444>>2]=0,T2[r+436>>2]=1025758986,T2[r+404>>2]=1065353216,T2[r+408>>2]=1065353216,T2[r+396>>2]=0,T2[r+400>>2]=0,T2[r+388>>2]=1,T2[r+392>>2]=0,T2[r+384>>2]=13376,e=T2[f+4>>2],T2[r+448>>2]=T2[f>>2],T2[r+452>>2]=e,p2[r+356|0]=0,T2[r+332>>2]=953267991,T2[r+8>>2]=13256,T2[r+20>>2]=r+384,T2[r+16>>2]=r+496,T2[r+12>>2]=r+24,X0(r+8|0,A+4|0,A+68|0,r+736|0,r+736|0,r+560|0)&&(a=j2[r+724>>2])<j2[A+200>>2]&&(j2[A+200>>2]=a),T2[r+384>>2]=7916,(A=T2[r+444>>2])&&(n1[T2[T2[A>>2]>>2]](A),(A=T2[r+444>>2])&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2]))),L2=r+800|0;},P0,function(A){u(P0(A|=0));},z0,function(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M=0,I=(0),x=z2(0),y=(0);if((0|(I=T2[A+52>>2]))<1)return z2(z2(1));for(F=(M=S2[A+68|0])?f:r,W=j2[(f=M?r:f)- -64>>2],Z=j2[f+60>>2],Y=j2[f+(M=56)>>2],R=j2[f+52>>2],m=j2[f+48>>2],n=j2[f+44>>2],o=j2[f+40>>2],b=j2[f+36>>2],N=j2[f+32>>2],t=j2[f+28>>2],c=j2[f+24>>2],u=j2[f+20>>2],V=j2[f+16>>2],k=j2[f+12>>2],l=j2[f+8>>2],r=T2[f+304>>2],s=j2[f+4>>2],J=T2[f+192>>2],x=z2(1);T2[f+304>>2]=r+1,r=T2[J+32>>2]+M|0,a=j2[r>>2],v=j2[r-8>>2],d=j2[r-4>>2],B=j2[r-24>>2],Q=j2[r-56>>2],g=j2[r-40>>2],w=j2[r-20>>2],G=j2[r-52>>2],C=j2[r-36>>2],E=j2[r-16>>2],D=j2[r-48>>2],h=j2[r-32>>2],T2[f+64>>2]=0,T2[f+48>>2]=0,T2[f+32>>2]=0,T2[f+16>>2]=0,j2[f+44>>2]=z2(z2(b*D)+z2(o*h))+z2(n*E),j2[f+40>>2]=z2(z2(b*G)+z2(o*C))+z2(n*w),j2[f+36>>2]=z2(z2(b*Q)+z2(o*g))+z2(n*B),j2[f+28>>2]=z2(z2(u*D)+z2(c*h))+z2(t*E),j2[f+24>>2]=z2(z2(u*G)+z2(c*C))+z2(t*w),j2[f+20>>2]=z2(z2(u*Q)+z2(c*g))+z2(t*B),j2[f+12>>2]=z2(z2(s*D)+z2(l*h))+z2(k*E),j2[f+8>>2]=z2(z2(s*G)+z2(l*C))+z2(k*w),j2[f+4>>2]=z2(z2(s*Q)+z2(l*g))+z2(k*B),j2[f+60>>2]=Z+z2(z2(z2(b*v)+z2(o*d))+z2(n*a)),j2[f+56>>2]=Y+z2(z2(z2(u*v)+z2(c*d))+z2(t*a)),j2[f+52>>2]=R+z2(z2(z2(s*v)+z2(l*d))+z2(k*a)),r=T2[T2[A+60>>2]+y>>2],a=z2(n1[T2[T2[r>>2]+12>>2]](r,f,F,e,i)),j2[f+64>>2]=W,j2[f+60>>2]=Z,j2[f+56>>2]=Y,j2[f+52>>2]=R,j2[f+48>>2]=m,j2[f+44>>2]=n,j2[f+40>>2]=o,j2[f+36>>2]=b,j2[f+32>>2]=N,j2[f+28>>2]=t,j2[f+24>>2]=c,j2[f+20>>2]=u,j2[f+16>>2]=V,j2[f+12>>2]=k,j2[f+8>>2]=l,j2[f+4>>2]=s,r=T2[f+304>>2]+1|0,T2[f+304>>2]=r,x=a<x?a:x,M=M+80|0,y=y+4|0,I=I-1|0;);return z2(x);},function(A,f){f|=0;var r,e=0,i=0,a=0;if(1<=(0|(e=T2[(A|=0)+52>>2])))for(;(r=T2[T2[A+60>>2]+i>>2])&&(n1[T2[T2[r>>2]+16>>2]](r,f),e=T2[A+52>>2]),i=i+4|0,(0|(a=a+1|0))<(0|e););},_,I,C2,function(A,f){var r=0,r=A|=0,e=T2[T2[T2[A+4>>2]+4>>2]+32>>2];A=T2[(f|=0)+36>>2],O0(r,T2[64+(e+P2(A,80)|0)>>2],A);},function(A,f,r){A|=0,f|=0,n1[T2[T2[A>>2]+12>>2]](A,f);},n0,n0,function(A){var f=0;return T2[(A|=0)>>2]=13964,(f=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+56>>2]=0,p2[A+60|0]=1,T2[(f=A+48|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+36>>2])&&S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+36>>2]=0,p2[A+40|0]=1,T2[(f=A+28|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+16>>2]=0,p2[A+20|0]=1,T2[(f=A+8|0)>>2]=0,(T2[f+4>>2]=0)|A;},function(A){var f=0;T2[(A|=0)>>2]=13964,(f=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+56>>2]=0,p2[A+60|0]=1,T2[(f=A+48|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+36>>2])&&S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+36>>2]=0,p2[A+40|0]=1,T2[(f=A+28|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),u(A);},function(A,f,r){A|=0,f|=0,r|=0;var e=0,i=0,a=0,n=0,o=0,b=0,t=0,c=0,u=0;T2[5610]=T2[5610]+1,o=T2[A+36>>2],e=P2((e=((e=r<<16|f)<<15^-1)+e|0)>>>10^e,9),a=o+((T2[A+12>>2]-1&((e=((e^=e>>>6)<<11^-1)+e|0)>>>16^e))<<2)|0;A:if(-1!=(0|(e=T2[a>>2]))){for(n=T2[A+16>>2],i=e;b=n+P2(i,12)|0,T2[b+4>>2]!=(0|r)||T2[b>>2]!=(0|f);)if(-1==(0|(i=T2[T2[A+56>>2]+(i<<2)>>2])))break A;c=T2[8+(n+P2(i,12)|0)>>2],r=T2[A+56>>2];f:{if((0|e)!=(0|i)){for(;(0|i)!=(0|(e=T2[(t=r+((f=e)<<2)|0)>>2])););if(-1!=(0|f)){T2[t>>2]=T2[r+(i<<2)>>2];break f;}}T2[a>>2]=T2[r+(i<<2)>>2];}if((0|(a=T2[A+8>>2]-1|0))==(0|i))return T2[A+8>>2]=i,0|c;f:{if(n=n+P2(a,12)|0,f=T2[n+4>>2]<<16|T2[n>>2],f=P2((f=(f<<15^-1)+f|0)>>>10^f,9),t=T2[A+12>>2]-1&((f=((f^=f>>>6)<<11^-1)+f|0)>>>16^f),(0|a)!=(0|(e=T2[(o=o+(t<<2)|0)>>2]))){for(;(0|a)!=(0|(e=T2[(u=r+((f=e)<<2)|0)>>2])););if(-1!=(0|f)){T2[u>>2]=T2[r+(a<<2)>>2];break f;}}T2[o>>2]=T2[r+(a<<2)>>2];}f=T2[n+4>>2],T2[b>>2]=T2[n>>2],T2[b+4>>2]=f,T2[b+8>>2]=T2[n+8>>2],f=T2[A+36>>2]+(t<<2)|0,T2[T2[A+56>>2]+(i<<2)>>2]=T2[f>>2],T2[f>>2]=i,T2[A+8>>2]=T2[A+8>>2]-1;}return 0|c;},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a=0,n=0,o=0,b=0,t=0,c=0,u=0;T2[5609]=T2[5609]+1,a=P2((a=((a=r<<16|f)<<15^-1)+a|0)>>>10^a,9),e=(a=((a^=a>>>6)<<11^-1)+a|0)>>>16^a,a=T2[A+12>>2];A:{if(-1!=(0|(o=T2[T2[A+36>>2]+((t=e&a-1)<<2)>>2])))for(n=T2[A+16>>2];;){if(b=n+P2(o,12)|0,T2[b+4>>2]==(0|r)&&T2[b>>2]==(0|f))break A;if(-1==(0|(o=T2[T2[A+56>>2]+(o<<2)>>2])))break;}f:{r:{if((0|(A=u=T2[(n=A)+8>>2]))==(0|a)){if((0|a)<(0|(A=a?a<<1:1)))break r;A=a;}T2[n+8>>2]=A+1,c=T2[n+16>>2];break f;}if(A&&(T2[5498]=T2[5498]+1,(o=K2(P2(A,12)+19|0))&&(T2[(c=o+19&-16)-4>>2]=o)),1<=(0|a))for(o=0;t=T2[n+16>>2]+o|0,i=T2[t+4>>2],T2[(b=o+c|0)>>2]=T2[t>>2],T2[b+4>>2]=i,T2[b+8>>2]=T2[t+8>>2],o=o+12|0,a=a-1|0;);(a=T2[n+16>>2])&&S2[n+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2])),T2[n+16>>2]=c,T2[n+12>>2]=A,p2[n+20|0]=1,T2[n+8>>2]=T2[n+8>>2]+1,H0(n),t=T2[n+12>>2]-1&e;}b=P2(u,12)+c|0,T2[b+8>>2]=0,T2[b+4>>2]=r,T2[b>>2]=f,A=T2[n+36>>2]+(t<<2)|0,T2[T2[n+56>>2]+(u<<2)>>2]=T2[A>>2],T2[A>>2]=u;}return 0|b;},_0,K0,function(A){u(K0(A|=0));},function(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s=0,v=0,d=0,B=0,Q=z2(0),g=z2(0),w=z2(0),G=z2(0),C=z2(0),E=z2(0),D=0,h=z2(0),Z=z2(0),Y=0,R=0,F=0,W=z2(0),m=z2(0),N=z2(0),V=z2(0),J=z2(0),M=z2(0),I=z2(0),x=z2(0),y=z2(0),U=z2(0),X=z2(0),p=z2(0),T=z2(0),S=z2(0),j=0,P=0,z=z2(0),O=z2(0),H=0,_=0,L=0,K=z2(0),q=(0),$=(L2-3584|0);if(L2=$,H=T2[f+4>>2],(j=T2[H+72>>2])&&(_=T2[r+4>>2],Y=T2[_+72>>2])){if(T2[_+76>>2]!=T2[A+112>>2]||T2[H+76>>2]!=T2[A+108>>2]){if(s=T2[A+84>>2],1<=(0|(d=T2[s+(v=8)>>2]))){for(;(D=T2[T2[s+16>>2]+v>>2])&&(n1[T2[T2[D>>2]>>2]](D),B=T2[A+4>>2],n1[T2[T2[B>>2]+60>>2]](B,D)),v=v+12|0,d=d-1|0;);s=T2[A+84>>2];}L0(s),T2[A+108>>2]=T2[H+76>>2],T2[A+112>>2]=T2[_+76>>2];}if(p2[0|(v=88+$|0)]=1,T2[84+$>>2]=0,T2[76+$>>2]=0,T2[80+$>>2]=0,T2[(s=232+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=240+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=248+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=256+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=264+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=272+$|0)>>2]=0,T2[s+4>>2]=0,T2[280+$>>2]=0,T2[(s=440+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=448+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=456+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=464+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=472+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=480+$|0)>>2]=0,T2[s+4>>2]=0,T2[488+$>>2]=0,T2[(s=648+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=656+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=664+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=672+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=680+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=688+$|0)>>2]=0,T2[s+4>>2]=0,T2[696+$>>2]=0,T2[112+$>>2]=1025,T2[904+$>>2]=0,T2[(s=896+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=888+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=880+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=872+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=864+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=856+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1100+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1108+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1116+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1124+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1132+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1140+$|0)>>2]=0,T2[s+4>>2]=0,T2[1148+$>>2]=0,T2[(s=1308+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1316+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1324+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1332+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1340+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1348+$|0)>>2]=0,T2[s+4>>2]=0,T2[1356+$>>2]=0,T2[956+$>>2]=0,T2[948+$>>2]=0,T2[952+$>>2]=0,T2[976+$>>2]=0,T2[980+$>>2]=1025,T2[1564+$>>2]=0,T2[(s=1556+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1548+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1540+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1532+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1524+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1516+$|0)>>2]=0,T2[s+4>>2]=0,T2[1772+$>>2]=0,T2[(s=1764+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1756+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1748+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1740+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1732+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1724+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1844+$|0)>>2]=0,T2[s+4>>2]=1025,T2[(s=1816+$|0)>>2]=0,T2[s+4>>2]=0,T2[1824+$>>2]=0,T2[(s=1968+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1976+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1984+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=1992+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2e3+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2008+$|0)>>2]=0,T2[s+4>>2]=0,T2[2016+$>>2]=0,T2[2224+$>>2]=0,T2[(s=2216+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2208+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2200+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2192+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2184+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2176+$|0)>>2]=0,T2[s+4>>2]=0,T2[2432+$>>2]=0,T2[(s=2424+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2416+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2408+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2400+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2392+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2384+$|0)>>2]=0,T2[s+4>>2]=0,T2[2640+$>>2]=0,T2[(s=2632+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2624+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2616+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2608+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2600+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2592+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2712+$|0)>>2]=0,T2[s+4>>2]=1025,T2[2692+$>>2]=0,T2[(s=2684+$|0)>>2]=0,T2[s+4>>2]=0,T2[2884+$>>2]=0,T2[(s=2876+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2868+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2860+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2852+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2844+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=2836+$|0)>>2]=0,T2[s+4>>2]=0,T2[3092+$>>2]=0,T2[(s=3084+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3076+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3068+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3060+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3052+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3044+$|0)>>2]=0,T2[s+4>>2]=0,T2[3300+$>>2]=0,T2[(s=3292+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3284+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3276+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3268+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3260+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3252+$|0)>>2]=0,T2[s+4>>2]=0,T2[3508+$>>2]=0,T2[(s=3500+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3492+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3484+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3476+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3468+$|0)>>2]=0,T2[s+4>>2]=0,T2[(s=3460+$|0)>>2]=0,T2[s+4>>2]=0,T2[3580+$>>2]=0,T2[3560+$>>2]=0,T2[(s=3552+$|0)>>2]=0,T2[s+4>>2]=0,D=T2[A+84>>2],p2[0|v]=0,T2[84+$>>2]=112+$,T2[76+$>>2]=0,T2[80+$>>2]=4,!((0|(B=T2[D+8>>2]))<=0)){for(d=0;;){if(v=T2[8+(T2[D+16>>2]+P2(d,12)|0)>>2]){if(n1[T2[T2[v>>2]+16>>2]](v,72+$|0),1<=(0|(v=T2[76+$>>2])))for(R=B=0;s=T2[T2[84+$>>2]+B>>2],T2[s+844>>2]&&(T2[i+4>>2]=s,F=T2[s+836>>2],P=T2[T2[i+8>>2]+8>>2],L=s,s=T2[T2[i+12>>2]+8>>2],m0(L,((v=(0|F)==(0|P))?F:s)+4|0,(v?s:P)+4|0),T2[i+4>>2]=0,v=T2[76+$>>2]),B=B+4|0,(0|(R=R+1|0))<(0|v););if((0|v)<=-1)for(T2[80+$>>2]<=-1&&((s=T2[84+$>>2])&&S2[88+$|0]&&(T2[5499]=T2[5499]+1,q2(T2[s-4>>2])),p2[88+$|0]=1,T2[80+$>>2]=0,T2[84+$>>2]=0),B=v<<2;B=B+4|(T2[T2[84+$>>2]+B>>2]=0),(s=v)>>>0<=(v=s+1|0)>>>0;);T2[76+$>>2]=0,B=T2[D+8>>2];}if(!((0|(d=d+1|0))<(0|B)))break;}(v=T2[84+$>>2])&&S2[88+$|0]&&(T2[5499]=T2[5499]+1,q2(T2[v-4>>2]));}if(T2[92+$>>2]=e,T2[76+$>>2]=0,T2[72+$>>2]=14068,T2[88+$>>2]=T2[A+4>>2],T2[104+$>>2]=T2[A+72>>2],T2[100+$>>2]=T2[A+84>>2],T2[84+$>>2]=r,e=T2[r+12>>2],Q=j2[e+56>>2],T2[80+$>>2]=f,v=T2[f+12>>2],g=j2[v+40>>2],U=j2[e+52>>2],w=j2[v+24>>2],V=j2[e+48>>2],h=j2[v+8>>2],X=j2[v+56>>2],S=j2[v+52>>2],J=j2[v+48>>2],G=j2[v+36>>2],C=j2[v+20>>2],Z=j2[v+4>>2],M=j2[e+40>>2],p=j2[e+24>>2],I=j2[e+8>>2],T=j2[e+36>>2],m=j2[e+20>>2],x=j2[e+4>>2],W=j2[v>>2],N=j2[v+16>>2],E=j2[v+32>>2],y=j2[e+16>>2],z=j2[e>>2],O=j2[e+32>>2],T2[96+$>>2]=i,(e=T2[j>>2])&&(v=T2[Y>>2])){for(S=z2(-S),K=z2(z2(z2(z2(w*S)-z2(h*J))-z2(g*X))+z2(z2(z2(h*V)+z2(w*U))+z2(g*Q))),t=z2(z2(z2(z2(C*S)-z2(Z*J))-z2(G*X))+z2(z2(z2(Z*V)+z2(C*U))+z2(G*Q))),U=z2(z2(z2(z2(N*S)-z2(W*J))-z2(E*X))+z2(z2(z2(W*V)+z2(N*U))+z2(E*Q))),Q=j2[i+32>>2],T2[116+$>>2]=v,T2[112+$>>2]=e,V=z2(z2(z2(h*I)+z2(w*p))+z2(g*M)),X=z2(O2(V)),J=z2(z2(z2(h*x)+z2(w*m))+z2(g*T)),S=z2(O2(J)),a=z2(z2(z2(h*z)+z2(w*y))+z2(g*O)),c=z2(O2(a)),n=z2(z2(z2(Z*I)+z2(C*p))+z2(G*M)),u=z2(O2(n)),o=z2(z2(z2(Z*x)+z2(C*m))+z2(G*T)),k=z2(O2(o)),b=z2(z2(z2(Z*z)+z2(C*y))+z2(G*O)),l=z2(O2(b)),M=z2(z2(z2(W*I)+z2(N*p))+z2(E*M)),p=z2(O2(M)),I=z2(z2(z2(W*x)+z2(N*m))+z2(E*T)),T=z2(O2(I)),W=z2(z2(z2(W*z)+z2(N*y))+z2(E*O)),N=z2(O2(W)),R=124,s=112+$|0,e=d=128,B=1;;){A:{f:{r:{if(F=T2[(v=(P=(j=B-1|0)<<3)+s|0)>>2],Y=T2[v+4>>2],G=j2[Y+16>>2],C=j2[Y>>2],g=z2(z2(z2(G-C)*z2(.5))+z2(0)),Z=j2[Y+20>>2],E=j2[Y+4>>2],w=z2(z2(z2(Z-E)*z2(.5))+z2(0)),m=j2[Y+24>>2],x=j2[Y+8>>2],h=z2(z2(z2(m-x)*z2(.5))+z2(0)),y=z2(z2(z2(N*g)+z2(T*w))+z2(p*h)),G=z2(z2(G+C)*z2(.5)),C=z2(z2(Z+E)*z2(.5)),Z=z2(z2(m+x)*z2(.5)),E=z2(U+z2(z2(z2(W*G)+z2(I*C))+z2(M*Z))),j2[F>>2]<=z2(Q+z2(y+E))&&j2[F+16>>2]>=z2(z2(E-y)-Q)&&(E=z2(z2(z2(l*g)+z2(k*w))+z2(u*h)),m=z2(t+z2(z2(z2(b*G)+z2(o*C))+z2(n*Z))),j2[F+4>>2]<=z2(Q+z2(E+m))&&j2[F+20>>2]>=z2(z2(m-E)-Q)&&(g=z2(z2(z2(c*g)+z2(S*w))+z2(X*h)),w=z2(K+z2(z2(z2(a*G)+z2(J*C))+z2(V*Z))),j2[F+8>>2]<=z2(Q+z2(g+w))&&j2[F+24>>2]>=z2(z2(w-g)-Q)))){if((0|j)<=(0|R))D=d,v=s;else {if((0|(D=d<<1))<=(0|d))v=s;else if((0|D)<=(0|e))v=s;else {if(v=0,d&&(T2[5498]=T2[5498]+1,(e=K2(19+(d<<4)|0))&&(T2[(v=e+19&-16)-4>>2]=e),!((0|d)<1)))for(R=v,e=s;L=T2[e+4>>2],T2[R>>2]=T2[e>>2],T2[R+4>>2]=L,R=R+8|0,e=e+8|0,d=d-1|0;);q&&(T2[5499]=T2[5499]+1,q2(T2[s-4>>2])),q=1,e=D;}R=D-4|0;}if(s=T2[Y+40>>2],T2[F+40>>2]){if(d=T2[F+36>>2],s){T2[(s=v+P|0)+4>>2]=T2[Y+36>>2],T2[s>>2]=d,d=T2[F+40>>2],T2[(s=(B<<3)+v|0)+4>>2]=T2[Y+36>>2],T2[s>>2]=d,d=T2[F+36>>2],T2[s+12>>2]=T2[Y+40>>2],T2[s+8>>2]=d,d=T2[F+40>>2],T2[s+20>>2]=T2[Y+40>>2],T2[s+16>>2]=d,B=B+3|0;break f;}T2[(s=v+P|0)+4>>2]=Y,T2[s>>2]=d,s=T2[F+40>>2],T2[(d=(B<<3)+v|0)+4>>2]=Y,T2[d>>2]=s;break r;}if(s){T2[(s=v+P|0)+4>>2]=T2[Y+36>>2],T2[s>>2]=F,T2[(s=(B<<3)+v|0)+4>>2]=T2[Y+40>>2],T2[s>>2]=F;break r;}n1[T2[T2[72+$>>2]+8>>2]](72+$|0,F,Y),d=D,s=v;}B=j;break A;}B=B+1|0;}d=D,s=v;}if(!B)break;}s&&q&&(T2[5499]=T2[5499]+1,q2(T2[s-4>>2]));}if(D=T2[A+84>>2],1<=T2[D+8>>2])for(s=0;;){if(e=(B=P2(s,12))+T2[D+16>>2]|0,(d=T2[e+8>>2])&&(e=T2[H+32>>2]+P2(T2[e>>2],80)|0,R=T2[e+64>>2],v=T2[f+12>>2],z=j2[v+52>>2],O=j2[v+56>>2],E=j2[e+48>>2],U=j2[e+52>>2],V=j2[e+56>>2],X=j2[e+4>>2],J=j2[e+20>>2],M=j2[e+36>>2],p=j2[e+8>>2],I=j2[e+24>>2],T=j2[e+40>>2],Q=j2[v+20>>2],g=j2[v+24>>2],m=j2[e>>2],w=j2[v+36>>2],x=j2[e+16>>2],h=j2[v+40>>2],y=j2[e+32>>2],S=j2[v+48>>2],G=j2[v+8>>2],C=j2[v>>2],Z=j2[v+4>>2],W=j2[v+16>>2],N=j2[v+32>>2],T2[172+$>>2]=0,T2[156+$>>2]=0,T2[140+$>>2]=0,T2[124+$>>2]=0,j2[144+$>>2]=z2(z2(N*m)+z2(w*x))+z2(h*y),j2[128+$>>2]=z2(z2(W*m)+z2(Q*x))+z2(g*y),j2[112+$>>2]=z2(z2(C*m)+z2(Z*x))+z2(G*y),j2[152+$>>2]=z2(z2(N*p)+z2(w*I))+z2(h*T),j2[148+$>>2]=z2(z2(N*X)+z2(w*J))+z2(h*M),j2[136+$>>2]=z2(z2(W*p)+z2(Q*I))+z2(g*T),j2[132+$>>2]=z2(z2(W*X)+z2(Q*J))+z2(g*M),j2[120+$>>2]=z2(z2(C*p)+z2(Z*I))+z2(G*T),j2[116+$>>2]=z2(z2(C*X)+z2(Z*J))+z2(G*M),j2[168+$>>2]=O+z2(z2(z2(N*E)+z2(w*U))+z2(h*V)),j2[164+$>>2]=z+z2(z2(z2(W*E)+z2(Q*U))+z2(g*V)),j2[160+$>>2]=S+z2(z2(z2(C*E)+z2(Z*U))+z2(G*V)),n1[T2[T2[R>>2]+8>>2]](R,112+$|0,56+$|0,40+$|0),Q=j2[i+32>>2],j2[56+$>>2]=j2[56+$>>2]-Q,j2[60+$>>2]=j2[60+$>>2]-Q,j2[64+$>>2]=j2[64+$>>2]-Q,j2[40+$>>2]=Q+j2[40+$>>2],j2[44+$>>2]=Q+j2[44+$>>2],j2[48+$>>2]=Q+j2[48+$>>2],e=T2[_+32>>2]+P2(T2[4+(B+T2[D+16>>2]|0)>>2],80)|0,R=T2[e+64>>2],v=T2[r+12>>2],O=j2[v+52>>2],S=j2[v+56>>2],U=j2[e+48>>2],V=j2[e+52>>2],X=j2[e+56>>2],J=j2[e+4>>2],M=j2[e+20>>2],p=j2[e+36>>2],I=j2[e+8>>2],T=j2[e+24>>2],m=j2[e+40>>2],g=j2[v+20>>2],w=j2[v+24>>2],x=j2[e>>2],h=j2[v+36>>2],y=j2[e+16>>2],G=j2[v+40>>2],z=j2[e+32>>2],K=j2[v+48>>2],C=j2[v+8>>2],Z=j2[v>>2],W=j2[v+4>>2],N=j2[v+16>>2],E=j2[v+32>>2],T2[172+$>>2]=0,T2[156+$>>2]=0,T2[140+$>>2]=0,T2[124+$>>2]=0,j2[144+$>>2]=z2(z2(E*x)+z2(h*y))+z2(G*z),j2[128+$>>2]=z2(z2(N*x)+z2(g*y))+z2(w*z),j2[112+$>>2]=z2(z2(Z*x)+z2(W*y))+z2(C*z),j2[152+$>>2]=z2(z2(E*I)+z2(h*T))+z2(G*m),j2[148+$>>2]=z2(z2(E*J)+z2(h*M))+z2(G*p),j2[136+$>>2]=z2(z2(N*I)+z2(g*T))+z2(w*m),j2[132+$>>2]=z2(z2(N*J)+z2(g*M))+z2(w*p),j2[120+$>>2]=z2(z2(Z*I)+z2(W*T))+z2(C*m),j2[116+$>>2]=z2(z2(Z*J)+z2(W*M))+z2(C*p),j2[168+$>>2]=S+z2(z2(z2(E*U)+z2(h*V))+z2(G*X)),j2[164+$>>2]=O+z2(z2(z2(N*U)+z2(g*V))+z2(w*X)),j2[160+$>>2]=K+z2(z2(z2(Z*U)+z2(W*V))+z2(C*X)),n1[T2[T2[R>>2]+8>>2]](R,112+$|0,24+$|0,8+$|0),g=z2(j2[24+$>>2]-Q),j2[24+$>>2]=g,w=z2(j2[28+$>>2]-Q),j2[28+$>>2]=w,h=z2(j2[32+$>>2]-Q),j2[32+$>>2]=h,G=z2(Q+j2[8+$>>2]),j2[8+$>>2]=G,C=z2(Q+j2[16+$>>2]),j2[16+$>>2]=C,Q=z2(Q+j2[12+$>>2]),(j2[12+$>>2]=Q)<j2[60+$>>2]||w>j2[44+$>>2]||G<j2[56+$>>2]||g>j2[40+$>>2]||C<j2[64+$>>2]||h>j2[48+$>>2])){if(n1[T2[T2[d>>2]>>2]](d),e=T2[A+4>>2],n1[T2[T2[e>>2]+60>>2]](e,d),e=B+T2[D+16>>2]|0,Y=T2[e+4>>2],F=T2[e>>2],(0|(B=T2[A+92>>2]))==T2[A+96>>2]&&!((0|(e=B?B<<1:1))<=(0|B))){if(e?(d=0,T2[5498]=T2[5498]+1,(v=K2(P2(e,12)+19|0))&&(T2[(d=v+19&-16)-4>>2]=v)):d=0,1<=(0|B))for(v=0;j=T2[A+100>>2]+v|0,P=T2[j+4>>2],T2[(R=v+d|0)>>2]=T2[j>>2],T2[R+4>>2]=P,T2[R+8>>2]=T2[j+8>>2],v=v+12|0,B=B-1|0;);(v=T2[A+100>>2])&&S2[A+104|0]&&(T2[5499]=T2[5499]+1,q2(T2[v-4>>2])),T2[A+100>>2]=d,p2[A+104|0]=1,T2[A+96>>2]=e,B=T2[A+92>>2];}e=T2[A+100>>2]+P2(B,12)|0,T2[e+8>>2]=0,T2[e+4>>2]=Y,T2[e>>2]=F,T2[A+92>>2]=T2[A+92>>2]+1;}if(!((0|(s=s+1|0))<T2[D+8>>2]))break;}if(1<=T2[A+92>>2])for(B=0,v=4;f=T2[A+84>>2],r=T2[A+100>>2]+v|0,n1[T2[T2[f>>2]+8>>2]](f,T2[r-4>>2],T2[r>>2]),v=v+12|0,(0|(B=B+1|0))<T2[A+92>>2];);(f=T2[A+100>>2])&&S2[A+104|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+100>>2]=0,T2[A+92>>2]=0,T2[A+96>>2]=0,p2[A+104|0]=1;}else z0(A,f,r,e,i);L2=3584+$|0;},function(A,f,r,e,i){return z2(z2(0));},function(A,f){f|=0;var r,e=0,i=0,a=0,e=8;if(A=T2[(A|=0)+84>>2],1<=(0|(i=T2[A+8>>2])))for(;(r=T2[T2[A+16>>2]+e>>2])&&(n1[T2[T2[r>>2]+16>>2]](r,f),i=T2[A+8>>2]),e=e+12|0,(0|(a=a+1|0))<(0|i););},I,function(A,f,r){A|=0,f|=0,r|=0,z2(0);var e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W=0,m=(0),N=(L2-240|0);if(L2=N,T2[A+4>>2]=T2[A+4>>2]+1,C=T2[r+36>>2],Y=P2(C,80),D=T2[A+12>>2],R=T2[D+4>>2]+32|0,W=T2[64+(Y+T2[R>>2]|0)>>2],r=T2[A+8>>2],E=T2[f+36>>2],f=T2[T2[r+4>>2]+32>>2]+P2(E,80)|0,m=T2[f+64>>2],r=T2[r+12>>2],k=j2[r+52>>2],c=j2[r+56>>2],F=j2[r+24>>2],n=j2[r+20>>2],e=j2[r+40>>2],i=j2[r+36>>2],h=j2[r+48>>2],o=j2[r+8>>2],b=j2[r>>2],t=j2[r+4>>2],u=j2[r+16>>2],a=j2[r+32>>2],T2[236+N>>2]=r=0,T2[220+N>>2]=0,T2[204+N>>2]=0,l=j2[f+8>>2],s=j2[f+24>>2],v=j2[f+40>>2],j2[216+N>>2]=z2(z2(a*l)+z2(i*s))+z2(e*v),d=j2[f+4>>2],B=j2[f+20>>2],Q=j2[f+36>>2],j2[212+N>>2]=z2(z2(a*d)+z2(i*B))+z2(e*Q),j2[200+N>>2]=z2(z2(u*l)+z2(n*s))+z2(F*v),j2[196+N>>2]=z2(z2(u*d)+z2(n*B))+z2(F*Q),g=c,c=j2[f+48>>2],w=j2[f+52>>2],G=j2[f+56>>2],j2[232+N>>2]=g+z2(z2(z2(a*c)+z2(i*w))+z2(e*G)),j2[228+N>>2]=k+z2(z2(z2(u*c)+z2(n*w))+z2(F*G)),T2[188+N>>2]=0,g=a,a=j2[f>>2],k=i,i=j2[f+16>>2],Z=e,e=j2[f+32>>2],j2[208+N>>2]=z2(z2(g*a)+z2(k*i))+z2(Z*e),j2[192+N>>2]=z2(z2(u*a)+z2(n*i))+z2(F*e),j2[184+N>>2]=z2(z2(b*l)+z2(t*s))+z2(o*v),j2[180+N>>2]=z2(z2(b*d)+z2(t*B))+z2(o*Q),j2[176+N>>2]=z2(z2(b*a)+z2(t*i))+z2(o*e),j2[224+N>>2]=h+z2(z2(z2(b*c)+z2(t*w))+z2(o*G)),f=T2[D+12>>2],k=j2[f+52>>2],c=j2[f+56>>2],F=j2[f+24>>2],n=j2[f+20>>2],e=j2[f+40>>2],i=j2[f+36>>2],D=T2[R>>2],h=j2[f+48>>2],o=j2[f+8>>2],b=j2[f>>2],t=j2[f+4>>2],u=j2[f+16>>2],a=j2[f+32>>2],T2[172+N>>2]=0,T2[156+N>>2]=0,T2[140+N>>2]=0,l=j2[(f=D+Y|0)+8>>2],s=j2[f+24>>2],v=j2[f+40>>2],j2[152+N>>2]=z2(z2(a*l)+z2(i*s))+z2(e*v),d=j2[f+4>>2],B=j2[f+20>>2],Q=j2[f+36>>2],j2[148+N>>2]=z2(z2(a*d)+z2(i*B))+z2(e*Q),j2[136+N>>2]=z2(z2(u*l)+z2(n*s))+z2(F*v),j2[132+N>>2]=z2(z2(u*d)+z2(n*B))+z2(F*Q),g=c,c=j2[f+48>>2],w=j2[f+52>>2],G=j2[f+56>>2],j2[168+N>>2]=g+z2(z2(z2(a*c)+z2(i*w))+z2(e*G)),j2[164+N>>2]=k+z2(z2(z2(u*c)+z2(n*w))+z2(F*G)),T2[124+N>>2]=0,g=a,a=j2[f>>2],k=i,i=j2[f+16>>2],Z=e,e=j2[f+32>>2],j2[144+N>>2]=z2(z2(g*a)+z2(k*i))+z2(Z*e),j2[128+N>>2]=z2(z2(u*a)+z2(n*i))+z2(F*e),j2[120+N>>2]=z2(z2(b*l)+z2(t*s))+z2(o*v),j2[116+N>>2]=z2(z2(b*d)+z2(t*B))+z2(o*Q),j2[112+N>>2]=z2(z2(b*a)+z2(t*i))+z2(o*e),j2[160+N>>2]=h+z2(z2(z2(b*c)+z2(t*w))+z2(o*G)),n1[T2[T2[m>>2]+8>>2]](m,176+N|0,96+N|0,80+N|0),n1[T2[T2[W>>2]+8>>2]](W,112+N|0,N+64|0,48+N|0),F=j2[T2[A+24>>2]+32>>2],n=z2(j2[100+N>>2]-F),j2[100+N>>2]=n,e=z2(j2[104+N>>2]-F),j2[104+N>>2]=e,i=z2(F+j2[80+N>>2]),j2[80+N>>2]=i,o=z2(F+j2[84+N>>2]),j2[84+N>>2]=o,b=z2(F+j2[88+N>>2]),j2[88+N>>2]=b,t=z2(j2[96+N>>2]-F),f=0,(j2[96+N>>2]=t)>j2[48+N>>2]||(f=0,i<j2[64+N>>2]||(f=1)),e>j2[56+N>>2]||b<j2[72+N>>2]||(r=f),!(n>j2[52+N>>2]||1^r|o<j2[68+N>>2])){T2[40+N>>2]=-1,T2[28+N>>2]=m,f=T2[A+8>>2],T2[24+N>>2]=f,T2[32+N>>2]=T2[f+8>>2],T2[36+N>>2]=176+N,T2[44+N>>2]=E,T2[5611]=T2[5611]+1,T2[16+N>>2]=-1,T2[4+N>>2]=W,f=T2[A+12>>2],T2[N>>2]=f,T2[8+N>>2]=T2[f+8>>2],T2[20+N>>2]=C,W=T2[A+28>>2],f=T2[W+12>>2],r=T2[W+28>>2],T2[12+N>>2]=112+N,m=f-1|0,f=P2((f=((f=C<<16|E)<<15^-1)+f|0)>>>10^f,9),f=m&((f=((f^=f>>>6)<<11^-1)+f|0)>>>16^f);A:{if(!((0|r)<=(0|f))&&-1!=(0|(f=T2[T2[W+36>>2]+(f<<2)>>2])))for(m=T2[W+16>>2];;){if(r=m+P2(f,12)|0,T2[r+4>>2]==(0|C)&&T2[r>>2]==(0|E))break A;if(-1==(0|(f=T2[T2[W+56>>2]+(f<<2)>>2])))break;}r=0;}F>z2(0)?(f=T2[A+16>>2],r=0|n1[T2[T2[f>>2]+8>>2]](f,24+N|0,N,0,2)):r?r=T2[r+8>>2]:(f=T2[A+16>>2],r=0|n1[T2[T2[f>>2]+8>>2]](f,24+N|0,N,T2[A+32>>2],1),f=T2[A+28>>2],F=0|n1[T2[T2[f>>2]+12>>2]](f,E,C),T2[8+F>>2]=r),f=T2[A+24>>2],W=T2[f+12>>2],m=T2[f+8>>2],T2[f+12>>2]=N,T2[f+8>>2]=24+N,n1[T2[T2[f>>2]+8>>2]](f,-1,E),f=T2[A+24>>2],n1[T2[T2[f>>2]+12>>2]](f,-1,C),n1[T2[T2[r>>2]+8>>2]](r,24+N|0,N,T2[A+20>>2],T2[A+24>>2]),A=T2[A+24>>2],T2[A+8>>2]=m,T2[A+12>>2]=W;}L2=240+N|0;},c0,_,I,function(A,f,r,e,i){},q0,c0,function(A){var f,r;return T2[(A|=0)>>2]=14248,S2[A+8|0]&&(f=T2[A+12>>2])&&(r=T2[A+4>>2],n1[T2[T2[r>>2]+16>>2]](r,f)),0|A;},function(A){var f,r;T2[(A|=0)>>2]=14248,S2[A+8|0]&&(f=T2[A+12>>2])&&(r=T2[A+4>>2],n1[T2[T2[r>>2]+16>>2]](r,f)),u(A);},function(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t=z2(0),c=z2(0),u=z2(0);L2=e=L2-32|0,(A=T2[A+12>>2])&&(T2[i+4>>2]=A,T2[A+844>>2]=0,A=T2[f+4>>2],t=z2(j2[A+36>>2]*j2[A+20>>2]),A=T2[r+4>>2],a=z2(j2[A+36>>2]*j2[A+20>>2]),n=z2(t+a),A=T2[f+12>>2],f=T2[r+12>>2],b=j2[f+48>>2],o=z2(j2[A+48>>2]-b),r=j2[f+52>>2],c=z2(j2[A+52>>2]-r),f=j2[f+56>>2],u=z2(j2[A+56>>2]-f),t=z2(_2(z2(z2(z2(o*o)+z2(c*c))+z2(u*u)))),z2(n+j2[i+32>>2])<t||(T2[e+24>>2]=0,T2[e+28>>2]=0,T2[e+16>>2]=1065353216,T2[e+20>>2]=0,n=z2(t-n),t>z2(1.1920928955078125e-7)?(T2[e+28>>2]=0,t=z2(z2(1)/t),u=z2(u*t),j2[e+24>>2]=u,c=z2(c*t),j2[e+20>>2]=c,t=z2(o*t),j2[e+16>>2]=t):(t=z2(1),u=z2(0),c=z2(0)),T2[e+12>>2]=0,j2[e+8>>2]=z2(a*u)+f,j2[e+4>>2]=z2(a*c)+r,j2[e>>2]=z2(a*t)+b,n1[T2[T2[i>>2]+16>>2]](i,e+16|0,e,n))),L2=e+32|0;},q0,$0,I,A4,function(A){var f,r;return T2[(A|=0)>>2]=14384,S2[A+8|0]&&(f=T2[A+12>>2])&&(r=T2[A+4>>2],n1[T2[T2[r>>2]+16>>2]](r,f)),0|A;},function(A){var f,r;T2[(A|=0)>>2]=14384,S2[A+8|0]&&(f=T2[A+12>>2])&&(r=T2[A+4>>2],n1[T2[T2[r>>2]+16>>2]](r,f)),u(A);},function(A,f,r,e,i){f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s,v=0;L2=v=L2-160|0,(a=T2[(A|=0)+12>>2])&&(T2[i+4>>2]=a,k=S2[A+16|0],o=T2[(n=k?r:f)+4>>2],T2[152+v>>2]=T2[(r=k?f:r)+4>>2],T2[148+v>>2]=o,T2[144+v>>2]=14324,j2[156+v>>2]=j2[a+848>>2]+j2[i+32>>2],T2[136+v>>2]=1566444395,f=T2[n+12>>2],o=T2[4+(n=f+8|0)>>2],T2[(a=16+v|0)>>2]=T2[n>>2],T2[4+a>>2]=o,a=T2[f>>2],n=T2[f+4>>2],b=T2[4+(t=f+24|0)>>2],T2[(o=32+v|0)>>2]=T2[t>>2],T2[4+o>>2]=b,o=T2[f+16>>2],t=T2[f+20>>2],u=T2[4+(c=f+40|0)>>2],T2[(b=48+v|0)>>2]=T2[c>>2],T2[4+b>>2]=u,b=T2[f+32>>2],c=T2[f+36>>2],s=T2[4+(l=f+56|0)>>2],T2[(u=v+64|0)>>2]=T2[l>>2],T2[4+u>>2]=s,T2[8+v>>2]=a,T2[12+v>>2]=n,T2[24+v>>2]=o,T2[28+v>>2]=t,T2[40+v>>2]=b,T2[44+v>>2]=c,a=T2[f+52>>2],T2[56+v>>2]=T2[f+48>>2],T2[60+v>>2]=a,f=T2[r+12>>2],n=T2[(r=f+8|0)+4>>2],T2[(a=80+v|0)>>2]=T2[r>>2],T2[4+a>>2]=n,r=T2[f+4>>2],T2[72+v>>2]=T2[f>>2],T2[76+v>>2]=r,a=T2[f+20>>2],T2[(r=88+v|0)>>2]=T2[f+16>>2],T2[r+4>>2]=a,n=T2[4+(a=f+24|0)>>2],T2[(r=96+v|0)>>2]=T2[a>>2],T2[r+4>>2]=n,n=T2[4+(a=f+40|0)>>2],T2[(r=112+v|0)>>2]=T2[a>>2],T2[r+4>>2]=n,a=T2[f+36>>2],T2[(r=104+v|0)>>2]=T2[f+32>>2],T2[r+4>>2]=a,a=T2[f+52>>2],T2[(r=120+v|0)>>2]=T2[f+48>>2],T2[r+4>>2]=a,a=T2[(f=f+56|0)+4>>2],T2[(r=128+v|0)>>2]=T2[f>>2],T2[r+4>>2]=a,A4(144+v|0,8+v|0,i,T2[e+20>>2],k),S2[A+8|0]&&(A=T2[i+4>>2],T2[A+844>>2]&&((0|(f=T2[A+836>>2]))==(0|(r=T2[T2[i+8>>2]+8>>2]))?m0(A,f+4|0,T2[T2[i+12>>2]+8>>2]+4|0):m0(A,T2[T2[i+12>>2]+8>>2]+4|0,r+4|0)))),L2=160+v|0;},q0,$0,I,f4,function(A){var f,r;return T2[(A|=0)>>2]=14516,S2[A+8|0]&&(f=T2[A+12>>2])&&(r=T2[A+4>>2],n1[T2[T2[r>>2]+16>>2]](r,f)),0|A;},function(A){var f,r;T2[(A|=0)>>2]=14516,S2[A+8|0]&&(f=T2[A+12>>2])&&(r=T2[A+4>>2],n1[T2[T2[r>>2]+16>>2]](r,f)),u(A);},function(A,f,r,e,i){f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c=0;L2=c=L2-160|0,(b=T2[(A|=0)+12>>2])&&(T2[i+4>>2]=b,b=T2[f+4>>2],t=T2[r+4>>2],f=T2[f+12>>2],o=T2[4+(n=f+8|0)>>2],T2[(a=32+c|0)>>2]=T2[n>>2],T2[4+a>>2]=o,o=T2[4+(n=f+24|0)>>2],T2[(a=48+c|0)>>2]=T2[n>>2],T2[4+a>>2]=o,o=T2[4+(n=f+40|0)>>2],T2[(a=c+64|0)>>2]=T2[n>>2],T2[4+a>>2]=o,o=T2[4+(n=f+56|0)>>2],T2[(a=80+c|0)>>2]=T2[n>>2],T2[4+a>>2]=o,T2[152+c>>2]=1566444395,a=T2[f+4>>2],T2[24+c>>2]=T2[f>>2],T2[28+c>>2]=a,a=T2[f+20>>2],T2[40+c>>2]=T2[f+16>>2],T2[44+c>>2]=a,a=T2[f+36>>2],T2[56+c>>2]=T2[f+32>>2],T2[60+c>>2]=a,a=T2[f+52>>2],T2[72+c>>2]=T2[f+48>>2],T2[76+c>>2]=a,f=T2[r+12>>2],n=T2[(r=f+8|0)+4>>2],T2[(a=96+c|0)>>2]=T2[r>>2],T2[4+a>>2]=n,a=T2[f+20>>2],T2[(r=104+c|0)>>2]=T2[f+16>>2],T2[r+4>>2]=a,n=T2[4+(a=f+24|0)>>2],T2[(r=112+c|0)>>2]=T2[a>>2],T2[r+4>>2]=n,a=T2[f+36>>2],T2[(r=120+c|0)>>2]=T2[f+32>>2],T2[r+4>>2]=a,n=T2[4+(a=f+40|0)>>2],T2[(r=128+c|0)>>2]=T2[a>>2],T2[r+4>>2]=n,a=T2[f+52>>2],T2[(r=136+c|0)>>2]=T2[f+48>>2],T2[r+4>>2]=a,n=T2[4+(a=f+56|0)>>2],T2[(r=144+c|0)>>2]=T2[a>>2],T2[r+4>>2]=n,r=T2[f+4>>2],T2[88+c>>2]=T2[f>>2],T2[92+c>>2]=r,T2[16+c>>2]=t,T2[12+c>>2]=b,T2[8+c>>2]=14464,f4(8+c|0,24+c|0,i,T2[e+20>>2],0),S2[A+8|0]&&(A=T2[i+4>>2],T2[A+844>>2]&&((0|(f=T2[A+836>>2]))==(0|(r=T2[T2[i+8>>2]+8>>2]))?m0(A,f+4|0,T2[T2[i+12>>2]+8>>2]+4|0):m0(A,T2[T2[i+12>>2]+8>>2]+4|0,r+4|0)))),L2=160+c|0;},q0,$0,function(A){var f,r;return T2[(A|=0)>>2]=14588,S2[A+8|0]&&(f=T2[A+12>>2])&&(r=T2[A+4>>2],n1[T2[T2[r>>2]+16>>2]](r,f)),0|A;},function(A){var f,r;T2[(A|=0)>>2]=14588,S2[A+8|0]&&(f=T2[A+12>>2])&&(r=T2[A+4>>2],n1[T2[T2[r>>2]+16>>2]](r,f)),u(A);},function(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M,I,x=z2(0),y=z2(0),U=z2(0),X=z2(0),p=z2(0),T=z2(0),S=(z2(0)),j=z2(0),P=(z2(0)),z=(z2(0)),O=(0),H=(z2(0)),_=(0),L=z2(0),K=z2(0),q=(z2(0)),$=(0),A2=z2(0),f2=z2(0),r2=z2(0),e2=z2(0),i2=z2(0),a2=(z2(0));if(L2=e=L2+-64|0,T2[A+12>>2]){if(t=S2[A+16|0],a=T2[(_=t?f:r)+12>>2],o=j2[a+56>>2],q=j2[a+52>>2],C=j2[a+48>>2],n=T2[(t=t?r:f)+12>>2],E=j2[n+56>>2],D=j2[n+52>>2],h=j2[n+48>>2],O=T2[t+4>>2],x=j2[n+32>>2],y=j2[n>>2],X=j2[n+16>>2],l=j2[n+36>>2],s=j2[n+20>>2],v=j2[n+4>>2],U=j2[a+40>>2],T=j2[a+24>>2],p=j2[a+8>>2],S=j2[a+36>>2],k=j2[a+20>>2],d=j2[a+4>>2],t=T2[_+4>>2],B=j2[a+32>>2],z=j2[n+40>>2],Q=j2[a+16>>2],H=j2[n+24>>2],g=j2[a>>2],j=j2[n+8>>2],T2[e+60>>2]=0,F=z2(z2(z2(j*d)+z2(H*k))+z2(z*S)),L=z2(-j2[(n=t+60|0)>>2]),W=z2(z2(z2(j*g)+z2(H*Q))+z2(z*B)),K=j2[t+56>>2],m=z2(z2(z2(j*p)+z2(H*T))+z2(z*U)),z=j2[($=t- -64|0)>>2],j2[e+56>>2]=z2(z2(F*L)-z2(W*K))-z2(m*z),c=z2(z2(z2(v*d)+z2(s*k))+z2(l*S)),b=z2(z2(z2(v*g)+z2(s*Q))+z2(l*B)),u=z2(z2(z2(v*p)+z2(s*T))+z2(l*U)),j2[e+52>>2]=z2(z2(c*L)-z2(K*b))-z2(z*u),w=z2(z2(z2(y*d)+z2(X*k))+z2(x*S)),G=z2(z2(z2(y*g)+z2(X*Q))+z2(x*B)),Z=z2(z2(z2(y*p)+z2(X*T))+z2(x*U)),j2[e+48>>2]=z2(z2(w*L)-z2(K*G))-z2(z*Z),n1[T2[T2[O>>2]+64>>2]](e,O,e+48|0),a=T2[_+12>>2],A2=j2[a+48>>2],z=j2[a+32>>2],H=j2[a+16>>2],j=j2[a+8>>2],L=j2[a+4>>2],K=j2[a>>2],f2=j2[a+56>>2],r2=j2[a+52>>2],e2=j2[a+40>>2],i2=j2[a+36>>2],P=j2[a+24>>2],a2=j2[a+20>>2],R=j2[t+72>>2],x=j2[$>>2],y=j2[t+56>>2],X=j2[n>>2],a=T2[A+12>>2],N=j2[a+848>>2],l=j2[e+8>>2],s=j2[e>>2],v=j2[e+4>>2],T2[i+4>>2]=a,J=z2(z2(z2(h*p)+z2(D*T))+z2(E*U)),Y=T,T=z2(-q),q=z2(z2(J+z2(z2(z2(Y*T)-z2(p*C))-z2(U*o)))+z2(z2(z2(Z*s)+z2(u*v))+z2(m*l))),p=z2(z2(z2(z2(z2(h*g)+z2(D*Q))+z2(E*B))+z2(z2(z2(Q*T)-z2(g*C))-z2(B*o)))+z2(z2(z2(G*s)+z2(b*v))+z2(W*l))),S=z2(z2(z2(z2(z2(h*d)+z2(D*k))+z2(E*S))+z2(z2(z2(k*T)-z2(d*C))-z2(S*o)))+z2(z2(z2(w*s)+z2(c*v))+z2(F*l))),(U=z2(z2(z2(x*q)+z2(z2(y*p)+z2(X*S)))-R))<N&&(T2[e+60>>2]=0,j2[e+56>>2]=z2(z2(y*z)+z2(X*i2))+z2(x*e2),j2[e+52>>2]=z2(z2(y*H)+z2(X*a2))+z2(x*P),j2[e+48>>2]=z2(z2(K*y)+z2(L*X))+z2(j*x),T2[e+44>>2]=0,T=z2(p-z2(y*U)),p=z2(S-z2(X*U)),S=z2(q-z2(x*U)),j2[e+40>>2]=z2(z2(z2(T*z)+z2(p*i2))+z2(S*e2))+f2,j2[e+36>>2]=z2(z2(z2(T*H)+z2(p*a2))+z2(S*P))+r2,j2[e+32>>2]=z2(z2(j*S)+z2(z2(K*T)+z2(L*p)))+A2,n1[T2[T2[i>>2]+16>>2]](i,e+48|0,e+32|0,U)),!(6<T2[O+4>>2]||T2[T2[i+4>>2]+844>>2]>=T2[A+24>>2]||(T=j2[t+64>>2],p=z2(O2(T))>z2(.7071067690849304)?(U=j2[t+60>>2],p=z2(z2(1)/z2(_2(z2(z2(T*T)+z2(U*U))))),U=z2(U*p),T=z2(p*z2(-T)),z2(0)):(U=j2[t+56>>2],p=j2[t+60>>2],S=z2(z2(1)/z2(_2(z2(z2(U*U)+z2(p*p))))),T=z2(U*S),U=z2(0),z2(S*z2(-p))),k=W2(S=z2(z2(F2(z2(z2(.019999999552965164)/z2(n1[T2[T2[O>>2]+16>>2]](O))),z2(.39269909262657166)))*z2(.5))),_=T2[A+20>>2],L=m2(S),(0|_)<1)))for(Y=U,U=z2(k/z2(_2(z2(z2(z2(p*p)+z2(T*T))+z2(U*U))))),K=z2(Y*U),e2=z2(T*U),i2=z2(p*U),$=0;n=S2[A+16|0],a=T2[(I=n?f:r)+12>>2],a2=j2[a+56>>2],R=j2[a+52>>2],q=j2[a+48>>2],n=T2[(O=n?r:f)+12>>2],F=j2[n+56>>2],W=j2[n+52>>2],m=j2[n+48>>2],M=T2[O+4>>2],U=j2[a+40>>2],T=j2[a+8>>2],p=j2[a+24>>2],S=j2[a+36>>2],k=j2[a+4>>2],d=j2[a+20>>2],O=T2[I+4>>2],B=j2[a+32>>2],C=j2[n+40>>2],E=j2[n+32>>2],D=j2[n+36>>2],Q=j2[a>>2],h=j2[n+8>>2],l=j2[n>>2],s=j2[n+4>>2],g=j2[a+16>>2],v=j2[n+24>>2],z=j2[n+16>>2],H=j2[n+20>>2],x=j2[t+64>>2],y=j2[t+56>>2],o=j2[t+60>>2],T2[e+44>>2]=0,X=z2(z2(z2(z2(6.2831854820251465)/z2(0|_))*z2(0|$))*z2(.5)),j=z2(W2(X)/z2(_2(z2(z2(z2(y*y)+z2(o*o))+z2(x*x))))),x=z2(x*j),y=z2(y*j),X=m2(X),o=z2(o*j),c=z2(z2(K*y)+z2(z2(z2(e2*X)-z2(L*o))-z2(i2*x))),b=z2(z2(K*x)+z2(z2(e2*o)+z2(z2(L*X)+z2(i2*y)))),u=z2(z2(e2*x)+z2(z2(z2(i2*X)-z2(L*y))-z2(K*o))),w=z2(z2(i2*o)+z2(z2(z2(K*X)-z2(L*x))-z2(e2*y))),j=z2(z2(z2(x*c)+z2(z2(y*b)+z2(X*u)))-z2(o*w)),P=z2(z2(z2(y*w)+z2(z2(X*c)+z2(o*b)))-z2(x*u)),G=z2(z2(z2(o*u)+z2(z2(x*b)+z2(X*w)))-z2(y*c)),x=z2(z2(z2(z2(X*b)-z2(y*u))-z2(o*c))-z2(x*w)),y=z2(z2(2)/z2(z2(z2(z2(j*j)+z2(P*P))+z2(G*G))+z2(x*x))),X=z2(G*y),Z=z2(j*X),o=z2(P*y),A2=z2(x*o),c=z2(Z+A2),f2=z2(P*X),b=z2(j*y),r2=z2(x*b),y=z2(f2-r2),N=z2(j*b),V=z2(P*o),P=z2(z2(1)-z2(N+V)),b=z2(z2(z2(E*c)+z2(D*y))+z2(C*P)),u=z2(z2(z2(l*c)+z2(s*y))+z2(h*P)),y=z2(z2(z2(z*c)+z2(H*y))+z2(v*P)),P=z2(-j2[(n=O+60|0)>>2]),c=j2[O+56>>2],w=j2[(_=O- -64|0)>>2],j2[e+40>>2]=z2(z2(z2(z2(S*b)+z2(z2(k*u)+z2(d*y)))*P)-z2(c*z2(z2(B*b)+z2(z2(Q*u)+z2(g*y)))))-z2(w*z2(z2(U*b)+z2(z2(T*u)+z2(p*y)))),y=z2(f2+r2),b=z2(j*o),u=z2(x*X),x=z2(b-u),G=z2(G*X),X=z2(z2(1)-z2(N+G)),o=z2(z2(C*y)+z2(z2(E*x)+z2(D*X))),j=z2(z2(h*y)+z2(z2(l*x)+z2(s*X))),x=z2(z2(v*y)+z2(z2(z*x)+z2(H*X))),j2[e+36>>2]=z2(z2(z2(z2(S*o)+z2(z2(k*j)+z2(d*x)))*P)-z2(c*z2(z2(B*o)+z2(z2(Q*j)+z2(g*x)))))-z2(w*z2(z2(U*o)+z2(z2(T*j)+z2(p*x)))),x=z2(Z-A2),y=z2(b+u),X=z2(z2(1)-z2(V+G)),o=z2(z2(C*x)+z2(z2(D*y)+z2(E*X))),j=z2(z2(h*x)+z2(z2(s*y)+z2(l*X))),x=z2(z2(v*x)+z2(z2(H*y)+z2(z*X))),j2[e+32>>2]=z2(z2(z2(z2(S*o)+z2(z2(k*j)+z2(d*x)))*P)-z2(c*z2(z2(B*o)+z2(z2(Q*j)+z2(g*x)))))-z2(w*z2(z2(U*o)+z2(z2(T*j)+z2(p*x)))),n1[T2[T2[M>>2]+64>>2]](e+48|0,M,e+32|0),a=T2[I+12>>2],N=j2[a+48>>2],c=j2[a+32>>2],b=j2[a+16>>2],u=j2[a+8>>2],w=j2[a+4>>2],G=j2[a>>2],V=j2[a+56>>2],M=j2[a+52>>2],Z=j2[a+40>>2],A2=j2[a+36>>2],f2=j2[a+24>>2],r2=j2[a+20>>2],I=j2[O+72>>2],x=j2[_>>2],y=j2[O+56>>2],X=j2[n>>2],a=T2[A+12>>2],Y=j2[a+848>>2],o=j2[e+56>>2],j=j2[e+48>>2],P=j2[e+52>>2],T2[i+4>>2]=a,J=Y,R=z2(-R),Y=z2(z2(z2(z2(z2(m*T)+z2(W*p))+z2(F*U))+z2(z2(z2(p*R)-z2(T*q))-z2(U*a2)))+z2(z2(z2(j*z2(z2(z2(l*T)+z2(z*p))+z2(E*U)))+z2(P*z2(z2(z2(s*T)+z2(H*p))+z2(D*U))))+z2(o*z2(z2(z2(h*T)+z2(v*p))+z2(C*U))))),T=z2(z2(z2(z2(z2(m*Q)+z2(W*g))+z2(F*B))+z2(z2(z2(g*R)-z2(Q*q))-z2(B*a2)))+z2(z2(z2(j*z2(z2(z2(l*Q)+z2(z*g))+z2(E*B)))+z2(P*z2(z2(z2(s*Q)+z2(H*g))+z2(D*B))))+z2(o*z2(z2(z2(h*Q)+z2(v*g))+z2(C*B))))),p=z2(z2(z2(z2(z2(m*k)+z2(W*d))+z2(F*S))+z2(z2(z2(d*R)-z2(k*q))-z2(S*a2)))+z2(z2(z2(j*z2(z2(z2(l*k)+z2(z*d))+z2(E*S)))+z2(P*z2(z2(z2(s*k)+z2(H*d))+z2(D*S))))+z2(o*z2(z2(z2(h*k)+z2(v*d))+z2(C*S))))),(U=z2(z2(z2(x*Y)+z2(z2(y*T)+z2(X*p)))-I))<J&&(T2[e+44>>2]=0,j2[e+40>>2]=z2(z2(y*c)+z2(X*A2))+z2(x*Z),j2[e+36>>2]=z2(z2(y*b)+z2(X*r2))+z2(x*f2),j2[e+32>>2]=z2(z2(G*y)+z2(w*X))+z2(u*x),T2[e+28>>2]=0,T=z2(T-z2(y*U)),p=z2(p-z2(X*U)),S=z2(Y-z2(x*U)),j2[e+24>>2]=z2(z2(z2(T*c)+z2(p*A2))+z2(S*Z))+V,j2[e+20>>2]=z2(z2(z2(T*b)+z2(p*r2))+z2(S*f2))+M,j2[e+16>>2]=z2(z2(u*S)+z2(z2(G*T)+z2(w*p)))+N,n1[T2[T2[i>>2]+16>>2]](i,e+32|0,e+16|0,U)),(0|($=$+1|0))<(0|(_=T2[A+20>>2])););S2[A+8|0]&&T2[T2[A+12>>2]+844>>2]&&(A=T2[i+4>>2],T2[A+844>>2]&&((0|(f=T2[A+836>>2]))==(0|(r=T2[T2[i+8>>2]+8>>2]))?m0(A,f+4|0,T2[T2[i+12>>2]+8>>2]+4|0):m0(A,T2[T2[i+12>>2]+8>>2]+4|0,r+4|0)));}L2=e- -64|0;},q0,$0,_,I,function(A,f,r,e,i,a,n,o,b,t){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0,n|=0,o|=0,b|=0,t|=0;var c,u,k,l,s=0,v=z2(0),d=z2(0),B=z2(0),Q=z2(0),g=z2(0),w=z2(0),G=z2(0),C=z2(0),E=0,D=z2(0),h=0,Z=z2(0),Y=z2(0),R=0,F=z2(0),W=z2(0),m=z2(0),N=z2(0),V=z2(0),J=z2(0),M=z2(0),I=0,x=z2(0),y=z2(0),U=z2(0),X=0,p=0;T2[12+(L2=s=L2-19056|0)>>2]=0,j2[s>>2]=j2[a+48>>2]-j2[i+48>>2],j2[8+s>>2]=j2[(A=a+56|0)>>2]-j2[(f=i+56|0)>>2],j2[4+s>>2]=j2[(t=a+52|0)>>2]-j2[(E=i+52|0)>>2],T2[18916+s>>2]=e,T2[18912+s>>2]=r,d=j2[a+20>>2],Q=j2[a+36>>2],g=j2[(h=i+20|0)>>2],B=j2[(R=i+36|0)>>2],G=j2[(I=i+24|0)>>2],w=j2[a+24>>2],v=j2[i+40>>2],C=j2[a+40>>2],D=j2[a+32>>2],Y=j2[a>>2],m=j2[a+16>>2],N=j2[a+4>>2],F=j2[i+32>>2],W=j2[i>>2],V=j2[i+16>>2],J=j2[i+4>>2],M=j2[i+8>>2],Z=j2[a+8>>2],T2[18964+s>>2]=0,T2[18948+s>>2]=0,T2[18932+s>>2]=0,x=z2(z2(z2(M*Z)+z2(G*w))+z2(v*C)),j2[18960+s>>2]=x,y=z2(z2(z2(J*Z)+z2(g*w))+z2(B*C)),j2[18956+s>>2]=y,w=z2(z2(z2(W*Z)+z2(V*w))+z2(F*C)),j2[18952+s>>2]=w,C=z2(z2(z2(M*N)+z2(G*d))+z2(v*Q)),j2[18944+s>>2]=C,Z=z2(z2(z2(J*N)+z2(g*d))+z2(B*Q)),j2[18940+s>>2]=Z,d=z2(z2(z2(W*N)+z2(V*d))+z2(F*Q)),j2[18936+s>>2]=d,Q=z2(z2(z2(Y*M)+z2(m*G))+z2(D*v)),j2[18928+s>>2]=Q,g=z2(z2(z2(Y*J)+z2(m*g))+z2(D*B)),j2[18924+s>>2]=g,B=z2(z2(z2(Y*W)+z2(m*V))+z2(D*F)),j2[18920+s>>2]=B,G=j2[h>>2],D=j2[R>>2],Y=j2[I>>2],m=j2[t>>2],N=j2[E>>2],F=j2[A>>2],W=j2[f>>2],V=j2[i>>2],J=j2[i+16>>2],M=j2[i+32>>2],U=j2[i+4>>2],c=j2[i+8>>2],u=j2[a+48>>2],k=j2[i+48>>2],T2[19036+s>>2]=0,T2[19028+s>>2]=0,T2[19012+s>>2]=0,j2[19008+s>>2]=x,j2[19004+s>>2]=C,j2[19e3+s>>2]=Q,T2[18996+s>>2]=0,j2[18992+s>>2]=y,j2[18988+s>>2]=Z,j2[18984+s>>2]=g,T2[18980+s>>2]=0,j2[18976+s>>2]=w,j2[18972+s>>2]=d,d=z2(u-k),Q=z2(m-N),w=v,v=z2(F-W),j2[19024+s>>2]=z2(z2(c*d)+z2(Y*Q))+z2(w*v),j2[19020+s>>2]=z2(z2(d*U)+z2(Q*G))+z2(v*D),j2[19016+s>>2]=z2(z2(d*V)+z2(Q*J))+z2(v*M),T2[19032+s>>2]=24,j2[18968+s>>2]=B,T2[(A=18664+s|0)>>2]=0,T2[A+4>>2]=0,T2[18656+s>>2]=0,T2[18660+s>>2]=0,T2[18892+s>>2]=0,T2[18896+s>>2]=0,T2[18904+s>>2]=2,T2[18672+s>>2]=0,T2[28+s>>2]=0,v=j2[8+s>>2],j2[24+s>>2]=-v,g=j2[4+s>>2],j2[20+s>>2]=-g,B=j2[s>>2],j2[16+s>>2]=-B;A:{f:{r:{e:{i:{if(1==(0|r4(18528+s|0,18912+s|0,16+s|0))){for(T2[(A=s+64|0)>>2]=0,T2[A+4>>2]=0,T2[72+s>>2]=0,T2[18508+s>>2]=0,T2[16+s>>2]=9,T2[18512+s>>2]=0,T2[18516+s>>2]=0,T2[56+s>>2]=0,t=14336,f=A=T2[60+s>>2]=0;T2[(E=(16+s|0)+t|0)+4148>>2]=A,E=E+4100|(T2[E+4144>>2]=0),A&&(T2[A+44>>2]=E),A=18452+(P2(0-f|0,56)+s|0)|0,T2[18520+s>>2]=E,f=f+1|0,t=t-56|0;);if(T2[18524+s>>2]=256,E=T2[18900+s>>2],T[E+32>>2]<2)break i;if(!function A(f){var r=0,e=0,i=0,a=0,n=z2(0),o=z2(0),b=z2(0),t=z2(0),c=z2(0),u=0,k=z2(0),l=z2(0),s=z2(0),v=z2(0);a:{n:{o:{b:{t:{c:switch(r=T2[f+372>>2],T2[r+32>>2]-1|0){case 3:break o;case 2:break b;case 1:break t;case 0:break c;default:break n;}if(T2[r+32>>2]=2,T2[r+20>>2]=0,i=T2[f+364>>2]-1|0,T2[f+364>>2]=i,u=r,r=T2[348+((i<<2)+f|0)>>2],T2[u+4>>2]=r,e4(f,z2(1),z2(0),z2(0),r),i=1,A(f))break a;if(r=T2[f+372>>2],i=T2[r+32>>2]-1|0,e=T2[(i<<2)+r>>2],T2[348+((T2[f+364>>2]<<2)+f|0)>>2]=e,T2[r+32>>2]=i,r=T2[f+372>>2],a=T2[r+32>>2],T2[r+32>>2]=a+(i=1),T2[(r=r+(a<<2)|0)>>2]=e,T2[r+16>>2]=0,e4(f,z2(-1),z2(-0),z2(-0),e),A(f))break a;if(r=T2[f+372>>2],i=T2[r+32>>2]-1|0,e=T2[(i<<2)+r>>2],T2[348+((T2[f+364>>2]<<2)+f|0)>>2]=e,T2[r+32>>2]=i,r=T2[f+372>>2],a=T2[r+32>>2],T2[r+32>>2]=a+(i=1),T2[(r=r+(a<<2)|0)>>2]=e,T2[r+16>>2]=0,e4(f,z2(0),z2(1),z2(0),e),A(f))break a;if(r=T2[f+372>>2],i=T2[r+32>>2]-1|0,e=T2[(i<<2)+r>>2],T2[348+((T2[f+364>>2]<<2)+f|0)>>2]=e,T2[r+32>>2]=i,r=T2[f+372>>2],a=T2[r+32>>2],T2[r+32>>2]=a+(i=1),T2[(r=r+(a<<2)|0)>>2]=e,T2[r+16>>2]=0,e4(f,z2(-0),z2(-1),z2(-0),e),A(f))break a;if(r=T2[f+372>>2],i=T2[r+32>>2]-1|0,e=T2[(i<<2)+r>>2],T2[348+((T2[f+364>>2]<<2)+f|0)>>2]=e,T2[r+32>>2]=i,r=T2[f+372>>2],a=T2[r+32>>2],T2[r+32>>2]=a+(i=1),T2[(r=r+(a<<2)|0)>>2]=e,T2[r+16>>2]=0,e4(f,z2(0),z2(0),z2(1),e),A(f))break a;if(r=T2[f+372>>2],i=T2[r+32>>2]-1|0,e=T2[(i<<2)+r>>2],T2[348+((T2[f+364>>2]<<2)+f|0)>>2]=e,T2[r+32>>2]=i,r=T2[f+372>>2],a=T2[r+32>>2],T2[r+32>>2]=a+(i=1),T2[(r=r+(a<<2)|0)>>2]=e,T2[r+16>>2]=0,e4(f,z2(-0),z2(-0),z2(-1),e),A(f))break a;e=T2[f+364>>2],T2[f+364>>2]=e+1,r=T2[f+372>>2],i=T2[r+32>>2]-1|0,T2[r+32>>2]=i,T2[348+((e<<2)+f|0)>>2]=T2[r+(i<<2)>>2];break n;}if(i=1,e=T2[r+4>>2],a=T2[r>>2],l=z2(j2[e+16>>2]-j2[a+16>>2]),o=z2(l*z2(0)),s=z2(j2[e+20>>2]-j2[a+20>>2]),n=z2(o-s),b=z2(s*z2(0)),v=z2(j2[e+24>>2]-j2[a+24>>2]),k=z2(v*z2(0)),t=z2(b-k),c=z2(v-o),z2(z2(n*n)+z2(z2(t*t)+z2(c*c)))>z2(0)){if(T2[r+32>>2]=3,T2[r+24>>2]=0,e=T2[f+364>>2]-1|0,T2[f+364>>2]=e,u=r,r=T2[348+((e<<2)+f|0)>>2],e4(f,t,c,n,T2[u+8>>2]=r),A(f))break a;if(r=T2[f+372>>2],i=T2[r+32>>2]-1|0,e=T2[(i<<2)+r>>2],T2[348+((T2[f+364>>2]<<2)+f|0)>>2]=e,T2[r+32>>2]=i,r=T2[f+372>>2],a=T2[r+32>>2],T2[r+32>>2]=a+(i=1),T2[(r=r+(a<<2)|0)>>2]=e,T2[r+16>>2]=0,e4(f,z2(-t),z2(-c),z2(-n),e),A(f))break a;e=T2[f+364>>2],T2[f+364>>2]=e+1,r=T2[f+372>>2],i=T2[r+32>>2]-1|0,T2[r+32>>2]=i,T2[348+((e<<2)+f|0)>>2]=T2[r+(i<<2)>>2];}if(n=z2(l-b),t=z2(b-v),c=z2(k-o),z2(z2(n*n)+z2(z2(t*t)+z2(c*c)))>z2(0)){if(a=T2[f+364>>2]-1|0,T2[f+364>>2]=a,r=T2[f+372>>2],e=T2[r+32>>2],T2[r+32>>2]=e+(i=1),T2[16+(r=r+(e<<2)|0)>>2]=0,u=r,r=T2[348+((a<<2)+f|0)>>2],e4(f,t,c,n,T2[u>>2]=r),A(f))break a;if(r=T2[f+372>>2],i=T2[r+32>>2]-1|0,e=T2[(i<<2)+r>>2],T2[348+((T2[f+364>>2]<<2)+f|0)>>2]=e,T2[r+32>>2]=i,r=T2[f+372>>2],a=T2[r+32>>2],T2[r+32>>2]=a+(i=1),T2[(r=r+(a<<2)|0)>>2]=e,T2[r+16>>2]=0,e4(f,z2(-t),z2(-c),z2(-n),e),A(f))break a;e=T2[f+364>>2],T2[f+364>>2]=e+1,r=T2[f+372>>2],i=T2[r+32>>2]-1|0,T2[r+32>>2]=i,T2[348+((e<<2)+f|0)>>2]=T2[r+(i<<2)>>2];}if(i=1,o=z2(o-b),n=z2(s-k),b=z2(k-l),!(z2(z2(o*o)+z2(z2(n*n)+z2(b*b)))>z2(0)))break n;if(a=T2[f+364>>2]-1|0,T2[f+364>>2]=a,r=T2[f+372>>2],e=T2[r+32>>2],T2[r+32>>2]=e+1,T2[16+(r=r+(e<<2)|0)>>2]=0,u=r,r=T2[348+((a<<2)+f|0)>>2],e4(f,n,b,o,T2[u>>2]=r),A(f))break a;if(r=T2[f+372>>2],i=T2[r+32>>2]-1|0,e=T2[(i<<2)+r>>2],T2[348+((T2[f+364>>2]<<2)+f|0)>>2]=e,T2[r+32>>2]=i,r=T2[f+372>>2],a=T2[r+32>>2],T2[r+32>>2]=a+(i=1),T2[(r=r+(a<<2)|0)>>2]=e,T2[r+16>>2]=0,e4(f,z2(-n),z2(-b),z2(-o),e),A(f))break a;e=T2[f+364>>2],T2[f+364>>2]=e+1,r=T2[f+372>>2],i=T2[r+32>>2]-1|0,T2[r+32>>2]=i,T2[348+((e<<2)+f|0)>>2]=T2[r+(i<<2)>>2];break n;}if(i=1,e=T2[r+4>>2],a=T2[r>>2],o=j2[a+16>>2],b=z2(j2[e+16>>2]-o),u=T2[r+8>>2],n=j2[a+20>>2],k=z2(j2[u+20>>2]-n),n=z2(j2[e+20>>2]-n),t=z2(j2[u+16>>2]-o),o=z2(z2(b*k)-z2(n*t)),s=n,n=j2[a+24>>2],c=z2(j2[u+24>>2]-n),l=z2(j2[e+24>>2]-n),n=z2(z2(s*c)-z2(l*k)),b=z2(z2(l*t)-z2(b*c)),!(z2(z2(o*o)+z2(z2(n*n)+z2(b*b)))>z2(0)))break n;if(T2[(e=r+28|0)>>2]=0,T2[e+4>>2]=4,e=T2[f+364>>2]-1|0,T2[f+364>>2]=e,u=r,r=T2[348+((e<<2)+f|0)>>2],e4(f,n,b,o,T2[u+12>>2]=r),A(f))break a;if(r=T2[f+372>>2],i=T2[r+32>>2]-1|0,e=T2[(i<<2)+r>>2],T2[348+((T2[f+364>>2]<<2)+f|0)>>2]=e,T2[r+32>>2]=i,r=T2[f+372>>2],a=T2[r+32>>2],T2[r+32>>2]=a+(i=1),T2[(r=r+(a<<2)|0)>>2]=e,T2[r+16>>2]=0,e4(f,z2(-n),z2(-b),z2(-o),e),A(f))break a;e=T2[f+364>>2],T2[f+364>>2]=e+1,r=T2[f+372>>2],i=T2[r+32>>2]-1|0,T2[r+32>>2]=i,T2[348+((e<<2)+f|0)>>2]=T2[r+(i<<2)>>2];break n;}if(i=1,f=T2[r>>2],e=T2[r+12>>2],o=j2[e+16>>2],k=z2(j2[f+16>>2]-o),a=T2[r+4>>2],n=j2[e+20>>2],t=z2(j2[a+20>>2]-n),r=T2[r+8>>2],b=j2[e+24>>2],c=z2(j2[r+24>>2]-b),l=z2(j2[f+20>>2]-n),s=z2(j2[a+24>>2]-b),v=z2(j2[r+16>>2]-o),b=z2(j2[f+24>>2]-b),o=z2(j2[a+16>>2]-o),n=z2(j2[r+20>>2]-n),(o=z2(z2(z2(z2(k*t)*c)+z2(z2(z2(z2(z2(l*s)*v)+z2(z2(b*o)*n))-z2(z2(k*s)*n))-z2(z2(l*o)*c)))-z2(z2(b*t)*v)))>z2(0)|o<z2(0))break a;}i=0;}return i;}(18528+s|0))break i;if(A=T2[18512+s>>2]){for(t=T2[18516+s>>2],f=T2[18524+s>>2];(h=T2[A+48>>2])&&(T2[h+44>>2]=T2[A+44>>2]),(h=T2[A+44>>2])&&(T2[h+48>>2]=T2[A+48>>2]),T2[18512+s>>2]==(0|A)&&(T2[18512+s>>2]=T2[A+48>>2]),T2[A+44>>2]=0,T2[A+48>>2]=T2[18520+s>>2],(h=T2[18520+s>>2])&&(T2[h+44>>2]=A),t=t-1|0,T2[18520+s>>2]=A,f=f+1|0,A=T2[18512+s>>2];);T2[18524+s>>2]=f,T2[18516+s>>2]=t;}if(T2[18508+s>>2]=0,T2[16+s>>2]=0,t=T2[E>>2],f=T2[E+12>>2],d=j2[f+16>>2],w=z2(j2[t+16>>2]-d),A=T2[E+4>>2],Q=j2[f+20>>2],C=z2(j2[A+20>>2]-Q),h=T2[E+8>>2],G=j2[f+24>>2],D=z2(j2[h+24>>2]-G),Y=z2(j2[t+20>>2]-Q),m=z2(j2[A+24>>2]-G),N=z2(j2[h+16>>2]-d),G=z2(j2[t+24>>2]-G),d=z2(j2[A+16>>2]-d),Q=z2(j2[h+20>>2]-Q),z2(z2(z2(z2(w*C)*D)+z2(z2(z2(z2(z2(Y*m)*N)+z2(z2(G*d)*Q))-z2(z2(w*m)*Q))-z2(z2(Y*d)*D)))-z2(z2(G*C)*N))<z2(0)?(T2[E+4>>2]=t,T2[E>>2]=A,z=T2[E+16>>2],T2[E+16>>2]=T2[E+20>>2],T2[E+20>>2]=z,f=t):(f=A,A=t),f=a4(16+s|0,A,f,h,1),h=a4(16+s|0,T2[E+4>>2],T2[E>>2],T2[E+12>>2],1),I=a4(16+s|0,T2[E+8>>2],T2[E+4>>2],T2[E+12>>2],1),R=a4(16+s|0,T2[E>>2],T2[E+8>>2],T2[E+12>>2],1),4!=T2[18516+s>>2])break i;if(A=T2[18512+s>>2],v=j2[A+16>>2],t=T2[A+48>>2]){for(v=z2(v*v);d=j2[t+16>>2],A=(E=(d=z2(d*d))<v)?t:A,v=E?d:v,t=T2[t+48>>2];);v=j2[A+16>>2];}for(E=T2[A+28>>2],X=T2[A+24>>2],p=T2[A+20>>2],Q=j2[A+12>>2],g=j2[A+8>>2],B=j2[A+4>>2],d=j2[A>>2],T2[f+32>>2]=h,p2[f+52|0]=0,T2[h+32>>2]=f,p2[h+52|0]=0,T2[f+36>>2]=I,p2[f+53|0]=0,T2[I+32>>2]=f,p2[I+52|0]=1,T2[f+40>>2]=R,p2[f+54|0]=0,T2[R+32>>2]=f,p2[R+52|0]=2,T2[h+36>>2]=R,p2[h+53|0]=2,T2[R+40>>2]=h,p2[R+54|0]=1,T2[h+40>>2]=I,p2[h+54|0]=1,T2[I+36>>2]=h,p2[0|(f=I+53|0)]=2,p2[f+1|0]=1,T2[I+40>>2]=R,T2[R+36>>2]=I,p2[R+53|0]=2,h=T2[16+s>>2]=0;;){a:{n:{if(!((f=T2[18508+s>>2])>>>0<=127)){T2[16+s>>2]=6;break a;}if(p2[A+55|0]=h=h+1|0,T2[19048+s>>2]=0,T2[19040+s>>2]=0,T2[19044+s>>2]=0,T2[18508+s>>2]=f+1,e4(18528+s|0,j2[A>>2],j2[(t=A+4|0)>>2],j2[(R=A+8|0)>>2],I=(f=(16+s|0)+(f<<5)|0)+60|0),!(z2(z2(z2(z2(j2[A>>2]*j2[f+76>>2])+z2(j2[t>>2]*j2[f+80>>2]))+z2(j2[R>>2]*j2[f+84>>2]))-j2[A+16>>2])>z2(9999999747378752e-20))){T2[16+s>>2]=7;break a;}for(t=0,f=32;;){if(!(R=function A(f,r,e,i,a,n){var o,b,t=0;o:if(S2[i+55|0]!=(0|r)){if(b=T2[14656+(o=a<<2)>>2],z2(z2(z2(z2(j2[i>>2]*j2[e+16>>2])+z2(j2[i+4>>2]*j2[e+20>>2]))+z2(j2[i+8>>2]*j2[e+24>>2]))-j2[i+16>>2])<z2(-9999999747378752e-21)){if(!(f=a4(r=f,T2[(f=i+20|0)+(b<<2)>>2],T2[f+o>>2],e,0)))break o;return T2[f+32>>2]=i,p2[f+52|0]=a,p2[52+(i+a|0)|0]=0,T2[32+((a<<2)+i|0)>>2]=f,(r=T2[n>>2])?(T2[r+36>>2]=f,p2[r+53|0]=2,T2[f+40>>2]=r,p2[f+54|0]=1):T2[n+4>>2]=f,T2[n>>2]=f,T2[n+8>>2]=T2[n+8>>2]+1,1;}A(f,p2[i+55|0]=r,e,T2[32+((b<<2)+i|0)>>2],S2[52+(i+b|0)|0],n)&&(a=r,r=T2[14668+o>>2],A(f,a,e,T2[32+((r<<2)+i|0)>>2],S2[52+(r+i|0)|0],n)&&((r=T2[i+48>>2])&&(T2[r+44>>2]=T2[i+44>>2]),(r=T2[i+44>>2])&&(T2[r+48>>2]=T2[i+48>>2]),T2[f+18496>>2]==(0|i)&&(T2[f+18496>>2]=T2[i+48>>2]),T2[i+44>>2]=0,T2[i+48>>2]=T2[f+18504>>2],T2[(r=f+18500|0)>>2]=T2[r>>2]-1,(r=T2[f+18504>>2])&&(T2[r+44>>2]=i),T2[f+18504>>2]=i,T2[(f=f+18508|0)>>2]=T2[f>>2]+(t=1)));}return t;}(16+s|0,h,I,T2[A+f>>2],S2[52+(A+t|0)|0],19040+s|0)))break n;if(f=f+4|0,l=t>>>0<2,t=t+1|0,!l)break;}}if(R&2<T[19048+s>>2]){if(f=T2[19040+s>>2],p2[f+53|0]=2,t=T2[19044+s>>2],T2[f+36>>2]=t,T2[t+40>>2]=f,p2[t+54|0]=1,(f=T2[A+48>>2])&&(T2[f+44>>2]=T2[A+44>>2]),(f=T2[A+44>>2])&&(T2[f+48>>2]=T2[A+48>>2]),T2[18512+s>>2]==(0|A)&&(T2[18512+s>>2]=T2[A+48>>2]),T2[A+44>>2]=0,T2[A+48>>2]=T2[18520+s>>2],T2[18516+s>>2]=T2[18516+s>>2]-1,(f=T2[18520+s>>2])&&(T2[f+44>>2]=A),T2[18520+s>>2]=A,T2[18524+s>>2]=T2[18524+s>>2]+1,A=T2[18512+s>>2],v=j2[A+16>>2],t=T2[A+48>>2]){for(v=z2(v*v);d=j2[t+16>>2],A=(f=(d=z2(d*d))<v)?t:A,v=f?d:v,t=T2[t+48>>2];);v=j2[A+16>>2];}if(E=T2[A+28>>2],X=T2[A+24>>2],p=T2[A+20>>2],Q=j2[A+12>>2],g=j2[A+8>>2],B=j2[A+4>>2],d=j2[A>>2],255!=(0|h))continue;}else T2[16+s>>2]=4;}break;}if(j2[68+s>>2]=Q,j2[s+64>>2]=g,j2[60+s>>2]=B,j2[72+s>>2]=v,j2[56+s>>2]=d,A=36+s|0,d=z2(d*v),G=z2(j2[X+16>>2]-d),f=E+20|0,Q=z2(B*v),B=z2(j2[f>>2]-Q),w=z2(j2[(t=X+20|0)>>2]-Q),C=z2(j2[E+16>>2]-d),D=z2(z2(G*B)-z2(w*C)),v=z2(g*v),g=z2(j2[E+24>>2]-v),Z=z2(w*g),w=z2(j2[(h=X+24|0)>>2]-v),B=z2(Z-z2(w*B)),Z=z2(B*B),B=z2(z2(w*C)-z2(G*g)),B=z2(_2(z2(z2(D*D)+z2(Z+z2(B*B))))),j2[A>>2]=B,T2[20+s>>2]=p,R=40+s|0,G=z2(j2[E+16>>2]-d),w=z2(j2[(I=p+20|0)>>2]-Q),C=z2(j2[f>>2]-Q),D=z2(j2[p+16>>2]-d),Y=z2(z2(G*w)-z2(C*D)),Z=C,C=z2(j2[(f=p+24|0)>>2]-v),w=z2(z2(Z*C)-z2(g*w)),g=z2(z2(g*D)-z2(G*C)),g=z2(_2(z2(z2(Y*Y)+z2(z2(w*w)+z2(g*g))))),j2[R>>2]=g,T2[52+s>>2]=3,T2[28+s>>2]=E,T2[24+s>>2]=X,Z=z2((C=B)+g),B=z2(j2[p+16>>2]-d),G=z2(j2[t>>2]-Q),Q=z2(j2[I>>2]-Q),d=z2(j2[X+16>>2]-d),w=z2(z2(B*G)-z2(Q*d)),D=Q,Q=z2(j2[h>>2]-v),v=z2(j2[f>>2]-v),G=z2(z2(D*Q)-z2(v*G)),v=z2(z2(v*d)-z2(B*Q)),d=z2(_2(z2(z2(w*w)+z2(z2(G*G)+z2(v*v))))),v=z2(Z+d),j2[A>>2]=C/v,j2[44+s>>2]=d/v,j2[R>>2]=g/v,9!=T2[16+s>>2]){if(T2[52+s>>2])break e;d=z2(0),B=z2(0),g=z2(0);break r;}}if(T2[18532+s>>2]=e,T2[18528+s>>2]=r,Y=j2[a+32>>2],m=j2[a>>2],N=j2[a+16>>2],F=j2[a+36>>2],W=j2[a+4>>2],V=j2[a+20>>2],v=j2[i+32>>2],d=j2[i>>2],Q=j2[i+16>>2],g=j2[i+36>>2],B=j2[i+4>>2],G=j2[i+20>>2],w=j2[i+40>>2],J=j2[a+40>>2],C=j2[i+8>>2],M=j2[a+8>>2],D=j2[i+24>>2],Z=j2[a+24>>2],T2[18580+s>>2]=0,T2[18564+s>>2]=0,T2[18548+s>>2]=0,T2[18652+s>>2]=0,T2[18644+s>>2]=0,T2[18628+s>>2]=0,T2[18612+s>>2]=0,T2[18596+s>>2]=0,x=z2(z2(z2(C*M)+z2(D*Z))+z2(w*J)),j2[18576+s>>2]=x,y=z2(z2(z2(B*M)+z2(G*Z))+z2(g*J)),j2[18572+s>>2]=y,J=z2(z2(z2(d*M)+z2(Q*Z))+z2(v*J)),j2[18568+s>>2]=J,M=z2(z2(z2(C*W)+z2(D*V))+z2(w*F)),j2[18560+s>>2]=M,Z=z2(z2(z2(B*W)+z2(G*V))+z2(g*F)),j2[18556+s>>2]=Z,F=z2(z2(z2(d*W)+z2(Q*V))+z2(v*F)),j2[18552+s>>2]=F,W=z2(z2(z2(m*C)+z2(N*D))+z2(Y*w)),j2[18544+s>>2]=W,V=z2(z2(z2(m*B)+z2(N*G))+z2(Y*g)),j2[18540+s>>2]=V,j2[18624+s>>2]=x,j2[18620+s>>2]=M,j2[18616+s>>2]=W,j2[18608+s>>2]=y,j2[18604+s>>2]=Z,j2[18600+s>>2]=V,j2[18592+s>>2]=J,j2[18588+s>>2]=F,Z=C,C=z2(j2[a+48>>2]-j2[i+48>>2]),F=D,D=z2(j2[a+52>>2]-j2[i+52>>2]),W=w,w=z2(j2[a+56>>2]-j2[i+56>>2]),j2[18640+s>>2]=z2(z2(Z*C)+z2(F*D))+z2(W*w),j2[18636+s>>2]=z2(z2(C*B)+z2(D*G))+z2(w*g),j2[18632+s>>2]=z2(z2(C*d)+z2(D*Q))+z2(w*v),T2[18648+s>>2]=25,v=z2(z2(z2(m*d)+z2(N*Q))+z2(Y*v)),j2[18536+s>>2]=v,j2[18584+s>>2]=v,T2[(A=152+s|0)>>2]=0,T2[A+4>>2]=0,T2[144+s>>2]=0,T2[148+s>>2]=0,T2[380+s>>2]=0,T2[384+s>>2]=0,T2[392+s>>2]=2,!r4(16+s|(T2[160+s>>2]=0),18528+s|0,s)){if(t=T2[388+s>>2],T2[t+32>>2])for(Y=z2(0),D=z2(f=A=0),C=z2(0),w=z2(0),G=z2(0),Q=z2(0);v=j2[(e=A+t|0)+16>>2],r=T2[18648+s>>2],a=T2[18652+s>>2],t=T2[18528+s>>2]+(a>>1)|0,n1[0|(1&a?T2[r+T2[t>>2]>>2]:r)](18912+s|0,t,T2[e>>2]),r=T2[T2[388+s>>2]+A>>2],d=j2[r+8>>2],g=j2[r>>2],B=z2(-j2[r+4>>2]),r=T2[18648+s>>2],e=T2[18652+s>>2],a=T2[18532+s>>2]+(e>>1)|0,r=1&e?T2[r+T2[a>>2]>>2]:r,Y=z2(Y+z2(v*j2[18920+s>>2])),D=z2(D+z2(v*j2[18916+s>>2])),C=z2(C+z2(v*j2[18912+s>>2])),T2[19052+s>>2]=0,j2[19048+s>>2]=z2(z2(j2[18572+s>>2]*B)-z2(g*j2[18568+s>>2]))-z2(d*j2[18576+s>>2]),j2[19044+s>>2]=z2(z2(j2[18556+s>>2]*B)-z2(g*j2[18552+s>>2]))-z2(d*j2[18560+s>>2]),j2[19040+s>>2]=z2(z2(j2[18540+s>>2]*B)-z2(g*j2[18536+s>>2]))-z2(d*j2[18544+s>>2]),n1[0|r](18912+s|0,a,19040+s|0),d=j2[18912+s>>2],g=j2[18916+s>>2],B=j2[18920+s>>2],w=z2(w+z2(v*z2(z2(z2(z2(d*j2[18616+s>>2])+z2(g*j2[18620+s>>2]))+z2(B*j2[18624+s>>2]))+j2[18640+s>>2]))),G=z2(G+z2(v*z2(z2(z2(z2(d*j2[18600+s>>2])+z2(g*j2[18604+s>>2]))+z2(B*j2[18608+s>>2]))+j2[18636+s>>2]))),Q=z2(Q+z2(v*z2(z2(z2(z2(d*j2[18584+s>>2])+z2(g*j2[18588+s>>2]))+z2(B*j2[18592+s>>2]))+j2[18632+s>>2]))),A=A+4|0,t=T2[388+s>>2],(f=f+1|0)>>>0<T[t+32>>2];);else Q=z2(0),G=z2(0),w=z2(0),C=z2(0),D=z2(0),Y=z2(0);g=z2(C-Q),B=z2(D-G),d=z2(Y-w),v=(v=z2(_2(z2(z2(z2(g*g)+z2(B*B))+z2(d*d)))))>z2(9999999747378752e-20)?z2(z2(1)/v):z2(1),d=z2(d*v),m=z2(B*v),B=z2(g*v),F=j2[i+32>>2],W=j2[i+36>>2],V=j2[i+40>>2],J=j2[i+56>>2],g=z2(z2(z2(z2(Q*F)+z2(G*W))+z2(w*V))+J),M=j2[i+16>>2],Z=j2[i+20>>2],x=j2[i+24>>2],y=j2[i+52>>2],N=z2(z2(z2(z2(Q*M)+z2(G*Z))+z2(w*x))+y),U=j2[i>>2],c=j2[i+4>>2],v=w,w=j2[i+8>>2],u=j2[i+48>>2],v=z2(z2(z2(z2(Q*U)+z2(G*c))+z2(v*w))+u),Q=z2(z2(z2(z2(C*F)+z2(D*W))+z2(Y*V))+J),G=z2(z2(z2(z2(C*M)+z2(D*Z))+z2(Y*x))+y),w=z2(z2(z2(z2(C*U)+z2(D*c))+z2(Y*w))+u),A=0;break f;}A=0;break A;}T2[16+s>>2]=8,d=z2(0),Q=z2(1),G=z2(0),(w=z2(_2(z2(z2(z2(B*B)+z2(g*g))+z2(v*v)))))>z2(0)&&(Q=z2(z2(1)/w),G=z2(Q*v),d=z2(Q*g),Q=z2(Q*B)),T2[52+s>>2]=1,T2[36+s>>2]=1065353216,T2[68+s>>2]=0,T2[72+s>>2]=0,j2[64+s>>2]=G,j2[60+s>>2]=d,j2[56+s>>2]=Q,T2[20+s>>2]=T2[E>>2];}for(A=36+s|0,g=z2(0),B=z2(f=0),d=z2(0);r=T2[19032+s>>2],e=T2[19036+s>>2],a=T2[18912+s>>2]+(e>>1)|0,n1[0|(1&e?T2[r+T2[a>>2]>>2]:r)](19040+s|0,a,T2[A-16>>2]),v=j2[A>>2],g=z2(g+z2(v*j2[19048+s>>2])),B=z2(B+z2(v*j2[19044+s>>2])),d=z2(d+z2(j2[19040+s>>2]*v)),A=A+4|0,(f=f+1|0)>>>0<T[52+s>>2];);}C=j2[i+32>>2],D=j2[i+36>>2],Y=j2[i+40>>2],m=j2[i+56>>2],Q=z2(z2(z2(z2(d*C)+z2(B*D))+z2(g*Y))+m),N=j2[i+16>>2],F=j2[i+20>>2],W=j2[i+24>>2],V=j2[i+52>>2],G=z2(z2(z2(z2(d*N)+z2(B*F))+z2(g*W))+V),J=j2[i>>2],M=j2[i+4>>2],Z=j2[i+8>>2],x=j2[i+48>>2],w=z2(z2(z2(z2(d*J)+z2(B*M))+z2(g*Z))+x),y=j2[56+s>>2],v=j2[72+s>>2],d=z2(d-z2(y*v)),U=z2(d*C),C=j2[60+s>>2],B=z2(B-z2(v*C)),U=z2(U+z2(B*D)),D=j2[s+64>>2],v=z2(g-z2(v*D)),g=z2(z2(U+z2(v*Y))+m),N=z2(z2(z2(z2(d*N)+z2(B*F))+z2(v*W))+V),v=z2(z2(z2(z2(d*J)+z2(B*M))+z2(v*Z))+x),B=z2(-y),d=z2(-D),m=z2(-C),A=1;}T2[o+12>>2]=0,j2[o+8>>2]=Q,j2[o+4>>2]=G,j2[o>>2]=w,T2[b+12>>2]=0,j2[b+8>>2]=g,j2[b+4>>2]=N,j2[b>>2]=v,T2[n+12>>2]=0,j2[n+8>>2]=d,j2[n+4>>2]=m,j2[n>>2]=B;}return L2=19056+s|0,0|A;},I,C2,C2,function(A,f,r,e){A|=0,f|=0,r|=0,e=z2(e);var i,a=T2[f+4>>2];T2[A+4>>2]=T2[f>>2],T2[A+8>>2]=a,i=T2[(f=f+8|0)+4>>2],T2[(a=A+12|0)>>2]=T2[f>>2],T2[4+a>>2]=i,f=T2[r+4>>2],T2[A+20>>2]=T2[r>>2],T2[A+24>>2]=f,a=T2[(r=r+8|0)+4>>2],T2[(f=A+28|0)>>2]=T2[r>>2],T2[f+4>>2]=a,p2[A+40|0]=1,j2[A+36>>2]=e;},I,function(A,f,r,e,i,a,n,o,b,t){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0,n|=0,o|=0,b|=0,t|=0;var c,u,k,l,s,v,d,B=0,Q=z2(0),g=0,w=z2(0),G=z2(0),C=0,E=z2(0),D=z2(0),h=z2(0),Z=0,Y=z2(0),R=z2(0),F=z2(0),W=z2(0),m=z2(0),N=0,V=z2(0),J=0,M=0,I=0,x=0,y=(z2(0));for(L2=A=L2-4240|0,l=T2[r+4>>2]-17>>>0<=1?T2[e+4>>2]-17>>>0<2:0;o4(),T2[(B=(A+1264|0)+g|0)+12>>2]=0,Y=j2[g+22452>>2],Q=z2(-Y),D=j2[g+22448>>2],h=j2[g+22456>>2],j2[B+8>>2]=z2(z2(j2[i+24>>2]*Q)-z2(D*j2[i+8>>2]))-z2(h*j2[i+40>>2]),j2[B+4>>2]=z2(z2(j2[i+20>>2]*Q)-z2(D*j2[i+4>>2]))-z2(h*j2[i+36>>2]),j2[B>>2]=z2(z2(j2[i+16>>2]*Q)-z2(D*j2[i>>2]))-z2(h*j2[i+32>>2]),V=j2[a+32>>2],R=j2[a>>2],F=j2[a+16>>2],W=j2[a+36>>2],m=j2[a+4>>2],E=j2[a+20>>2],w=j2[a+40>>2],G=j2[a+8>>2],Q=j2[a+24>>2],T2[(B=(A+272|0)+g|0)+12>>2]=0,j2[B+8>>2]=z2(z2(D*G)+z2(Y*Q))+z2(h*w),j2[B+4>>2]=z2(z2(D*m)+z2(Y*E))+z2(h*W),j2[B>>2]=z2(z2(D*R)+z2(Y*F))+z2(h*V),672!=(0|(g=g+16|0)););if(B=42,!((0|(J=0|n1[T2[T2[r>>2]+84>>2]](r)))<1)){for(Z=A+3256|0,g=0;n1[T2[T2[r>>2]+88>>2]](r,N,A+3248|0),w=j2[A+3248>>2],G=j2[A+3252>>2],Q=j2[Z>>2],j2[Z>>2]=z2(z2(w*j2[i+32>>2])+z2(G*j2[i+36>>2]))+z2(Q*j2[i+40>>2]),T2[A+3260>>2]=0,j2[A+3252>>2]=z2(z2(w*j2[i+16>>2])+z2(G*j2[i+20>>2]))+z2(Q*j2[i+24>>2]),j2[A+3248>>2]=z2(z2(w*j2[i>>2])+z2(G*j2[i+4>>2]))+z2(Q*j2[i+8>>2]),o4(),B=T2[Z+4>>2],T2[(C=g+23128|0)>>2]=T2[Z>>2],T2[C+4>>2]=B,B=T2[A+3252>>2],T2[(C=g+23120|0)>>2]=T2[A+3248>>2],T2[C+4>>2]=B,T2[(B=(A+1264|0)+g|0)+684>>2]=0,G=j2[A+3252>>2],Q=z2(-G),E=j2[A+3248>>2],w=j2[Z>>2],j2[B+680>>2]=z2(z2(j2[i+24>>2]*Q)-z2(E*j2[i+8>>2]))-z2(w*j2[i+40>>2]),j2[B+676>>2]=z2(z2(j2[i+20>>2]*Q)-z2(E*j2[i+4>>2]))-z2(w*j2[i+36>>2]),j2[B+672>>2]=z2(z2(j2[i+16>>2]*Q)-z2(E*j2[i>>2]))-z2(w*j2[i+32>>2]),T2[(B=(A+272|0)+g|0)+684>>2]=0,j2[B+672>>2]=z2(z2(E*j2[a>>2])+z2(G*j2[a+16>>2]))+z2(w*j2[a+32>>2]),j2[B+676>>2]=z2(z2(E*j2[a+4>>2])+z2(G*j2[a+20>>2]))+z2(w*j2[a+36>>2]),j2[B+680>>2]=z2(z2(E*j2[a+8>>2])+z2(G*j2[a+24>>2]))+z2(w*j2[a+40>>2]),g=g+16|0,(0|J)!=(0|(N=N+1|0)););B=N+42|0;}if(s=r,v=A+1264|0,d=A+3248|0,1<=(0|(N=0|n1[T2[T2[e>>2]+84>>2]](e)))){for(u=B<<4,M=A+272|0,I=A+1264|0,x=22448,g=0;n1[T2[T2[e>>2]+88>>2]](e,g,A+3248|0),w=j2[(c=A+3256|0)>>2],G=j2[A+3248>>2],Q=j2[A+3252>>2],j2[c>>2]=z2(z2(G*j2[a+32>>2])+z2(Q*j2[a+36>>2]))+z2(w*j2[a+40>>2]),T2[A+3260>>2]=0,j2[A+3252>>2]=z2(z2(G*j2[a+16>>2])+z2(Q*j2[a+20>>2]))+z2(w*j2[a+24>>2]),j2[A+3248>>2]=z2(z2(G*j2[a>>2])+z2(Q*j2[a+4>>2]))+z2(w*j2[a+8>>2]),o4(),C=T2[4+c>>2],T2[(J=(Z=u+x|0)+8|0)>>2]=T2[c>>2],T2[J+4>>2]=C,C=T2[A+3252>>2],T2[Z>>2]=T2[A+3248>>2],T2[Z+4>>2]=C,T2[(C=u+I|0)+12>>2]=0,G=j2[A+3252>>2],Q=z2(-G),E=j2[A+3248>>2],w=j2[c>>2],j2[C+8>>2]=z2(z2(j2[i+24>>2]*Q)-z2(E*j2[i+8>>2]))-z2(w*j2[i+40>>2]),j2[C+4>>2]=z2(z2(j2[i+20>>2]*Q)-z2(E*j2[i+4>>2]))-z2(w*j2[i+36>>2]),j2[C>>2]=z2(z2(j2[i+16>>2]*Q)-z2(E*j2[i>>2]))-z2(w*j2[i+32>>2]),T2[(C=u+M|0)+12>>2]=0,j2[C>>2]=z2(z2(E*j2[a>>2])+z2(G*j2[a+16>>2]))+z2(w*j2[a+32>>2]),j2[C+4>>2]=z2(z2(E*j2[a+4>>2])+z2(G*j2[a+20>>2]))+z2(w*j2[a+36>>2]),j2[C+8>>2]=z2(z2(E*j2[a+8>>2])+z2(G*j2[a+24>>2]))+z2(w*j2[a+40>>2]),x=x+16|0,I=I+16|0,M=M+16|0,(0|N)!=(0|(g=g+1|0)););B=g+B|0;}if(n1[T2[T2[r>>2]+76>>2]](s,v,d,B),n1[T2[T2[e>>2]+76>>2]](e,A+272|0,A+2256|0,B),(0|B)<1)m=z2(0xde0b6b000000000),R=z2(0),F=z2(0),W=z2(0);else for(m=z2(0xde0b6b000000000),W=z2(g=0),F=z2(0),R=z2(0);o4(),E=j2[g+22448>>2],w=j2[g+22452>>2],G=l?z2(0):j2[g+22456>>2],.01<+z2(z2(z2(E*E)+z2(w*w))+z2(G*G))&&(k=j2[(C=(A+2256|0)+g|0)>>2],D=j2[C+4>>2],h=j2[C+8>>2],Y=j2[(C=(A+3248|0)+g|0)>>2],V=j2[C+4>>2],Q=j2[C+8>>2],(Q=z2(z2(z2(E*z2(z2(z2(z2(z2(k*j2[a>>2])+z2(D*j2[a+4>>2]))+z2(h*j2[a+8>>2]))+j2[a+48>>2])-z2(z2(z2(z2(Y*j2[i>>2])+z2(V*j2[i+4>>2]))+z2(Q*j2[i+8>>2]))+j2[i+48>>2])))+z2(w*z2(z2(z2(z2(z2(k*j2[a+16>>2])+z2(D*j2[a+20>>2]))+z2(h*j2[a+24>>2]))+j2[a+52>>2])-z2(z2(z2(z2(Y*j2[i+16>>2])+z2(V*j2[i+20>>2]))+z2(Q*j2[i+24>>2]))+j2[i+52>>2]))))+z2(G*z2(l?0:z2(z2(z2(z2(k*j2[a+32>>2])+z2(D*j2[a+36>>2]))+z2(h*j2[a+40>>2]))+j2[a+56>>2])-z2(z2(z2(z2(Y*j2[i+32>>2])+z2(V*j2[i+36>>2]))+z2(Q*j2[i+40>>2]))+j2[i+56>>2])))))<m&&(y=j2[g+22460>>2],R=E,F=w,W=G,m=Q)),g=g+16|0,B=B-1|0;);if(1<<(B=T2[r+4>>2])&11571&&B>>>0<=13||z2(n1[T2[T2[r>>2]+48>>2]](r)),1<<(B=T2[e+4>>2])&11571&&B>>>0<=13||z2(n1[T2[T2[e>>2]+48>>2]](e)),!(m<z2(g=0))){A:{f:switch(T2[r+4>>2]){case 8:Q=z2(j2[r+36>>2]*j2[r+20>>2]);break A;case 0:case 1:case 13:case 11:case 10:Q=j2[r+52>>2];break A;case 4:case 5:Q=j2[r+52>>2];break A;default:break f;}Q=z2(n1[T2[T2[r>>2]+48>>2]](r));}A:{f:{r:{e:{i:{a:{n:{o:{b:switch(0|(g=T2[e+4>>2])){case 4:case 5:break r;case 10:break e;case 11:break i;case 13:break a;case 1:break n;case 0:break o;case 8:break b;default:break f;}w=z2(j2[e+36>>2]*j2[e+20>>2]),g=8;break A;}w=j2[e+52>>2],g=0;break A;}w=j2[e+52>>2],g=1;break A;}w=j2[e+52>>2],g=13;break A;}w=j2[e+52>>2],g=11;break A;}w=j2[e+52>>2],g=10;break A;}w=j2[e+52>>2];break A;}w=z2(n1[T2[T2[e>>2]+48>>2]](e)),g=T2[e+4>>2];}T2[(B=C=A+204|0)>>2]=0,T2[B+4>>2]=0,T2[A+224>>2]=e,T2[A+220>>2]=r,T2[A+216>>2]=f,T2[A+212>>2]=0,T2[A+196>>2]=0,T2[A+200>>2]=1065353216,T2[A+192>>2]=12272,T2[A+232>>2]=g,T2[A+228>>2]=T2[r+4>>2],v=A,d=z2(n1[T2[T2[r>>2]+48>>2]](r)),j2[v+236>>2]=d,G=z2(n1[T2[T2[e>>2]+48>>2]](e)),T2[A+264>>2]=1,T2[A+268>>2]=1,T2[A+252>>2]=-1,p2[A+244|0]=0,j2[A+240>>2]=G,T2[A+116>>2]=0,f=T2[(r=i+8|0)+4>>2],T2[(e=A- -64|0)>>2]=T2[r>>2],T2[e+4>>2]=f,f=T2[(r=i+24|0)+4>>2],T2[(e=A+80|0)>>2]=T2[r>>2],T2[e+4>>2]=f,f=T2[(r=i+40|0)+4>>2],T2[(e=A+96|0)>>2]=T2[r>>2],T2[e+4>>2]=f,G=z2(m+z2(z2(Q+w)+z2(.5))),j2[A+112>>2]=z2(W*G)+j2[i+56>>2],j2[A+108>>2]=z2(F*G)+j2[i+52>>2],f=T2[i+4>>2],T2[A+56>>2]=T2[i>>2],T2[A+60>>2]=f,f=T2[i+20>>2],T2[A+72>>2]=T2[i+16>>2],T2[A+76>>2]=f,f=T2[i+36>>2],T2[A+88>>2]=T2[i+32>>2],T2[A+92>>2]=f,j2[A+104>>2]=z2(R*G)+j2[i+48>>2],f=T2[(r=a+8|0)+4>>2],T2[(e=A+128|0)>>2]=T2[r>>2],T2[e+4>>2]=f,f=T2[a+20>>2],T2[(r=A+136|0)>>2]=T2[a+16>>2],T2[r+4>>2]=f,f=T2[(r=a+24|0)+4>>2],T2[(e=A+144|0)>>2]=T2[r>>2],T2[e+4>>2]=f,f=T2[a+36>>2],T2[(r=A+152|0)>>2]=T2[a+32>>2],T2[r+4>>2]=f,f=T2[(r=a+40|0)+4>>2],T2[(e=A+160|0)>>2]=T2[r>>2],T2[e+4>>2]=f,f=T2[a+52>>2],T2[(r=A+168|0)>>2]=T2[a+48>>2],T2[r+4>>2]=f,f=T2[(r=a+56|0)+4>>2],T2[(e=A+176|0)>>2]=T2[r>>2],T2[e+4>>2]=f,T2[A+184>>2]=1566444395,f=T2[a+4>>2],T2[A+120>>2]=T2[a>>2],T2[A+124>>2]=f,j2[A+200>>2]=-F,j2[B>>2]=-W,T2[A+208>>2]=0,j2[A+196>>2]=-R,p2[A+48|0]=0,T2[A+8>>2]=14800,J0(A+192|0,A+56|0,A+8|0,t,0),(e=S2[A+48|0])&&(Q=j2[A+44>>2],T2[o+12>>2]=0,Q=z2(G-Q),j2[o>>2]=j2[A+28>>2]-z2(R*Q),j2[o+8>>2]=j2[(i=A+36|0)>>2]-z2(W*Q),j2[o+4>>2]=j2[A+32>>2]-z2(F*Q),f=T2[A+32>>2],T2[b>>2]=T2[A+28>>2],T2[b+4>>2]=f,f=T2[i+4>>2],T2[(r=b+8|0)>>2]=T2[i>>2],T2[r+4>>2]=f,j2[n>>2]=R,j2[n+4>>2]=F,j2[n+8>>2]=W,j2[n+12>>2]=y),g=0!=(0|e);}return L2=A+4240|0,0|g;},t4,function(A){u(t4(A|=0));},Y0,Z0,function(A,f,r){A|=0,f|=0,r|=0;var e=0;if(!(e=8!=(0|f))&&8==(0|r))return T2[A+56>>2];if(!e&&1==(0|r))return T2[A+72>>2];if(1==(0|f)&&8==(0|r))return T2[A+76>>2];if(!(f|r))return T2[A+68>>2];if(!(19<(0|f))&&28==(0|r))return T2[A+84>>2];if(28==(0|f)&&!(19<(0|r)))return T2[A+80>>2];A:{if((0|f)<=19){if((0|r)<=19)return T2[A+28>>2];if(8<r-21>>>0)break A;return T2[A+32>>2];}if(!(19<(0|r)||8<f-21>>>0))return T2[A+36>>2];if(31==(0|f))return 31==(0|r)?T2[A+44>>2]:T2[A+40>>2];}return 31==(0|r)?T2[A+48>>2]:T2[A+52>>2];},function(A,f,r){A|=0,f|=0,r|=0;var e=0;if(!(e=8!=(0|f))&&8==(0|r))return T2[A+56>>2];if(!e&&1==(0|r))return T2[A+72>>2];if(1==(0|f)&&8==(0|r))return T2[A+76>>2];if(!(19<(0|f))&&28==(0|r))return T2[A+84>>2];if(28==(0|f)&&!(19<(0|r)))return T2[A+80>>2];A:{if((0|f)<=19){if((0|r)<=19)return T2[A+28>>2];if(8<r-21>>>0)break A;return T2[A+32>>2];}if(!(19<(0|r)||8<f-21>>>0))return T2[A+36>>2];if(31==(0|f))return 31==(0|r)?T2[A+44>>2]:T2[A+40>>2];}return 31==(0|r)?T2[A+48>>2]:T2[A+52>>2];},_,I,function(A,f,r,e){return A|=0,r|=0,e|=0,A=T2[(f|=0)>>2],A=0|n1[T2[T2[A>>2]+56>>2]](A,80),T2[A+8>>2]=13344,T2[A>>2]=13316,T2[A+60>>2]=0,T2[A+48>>2]=e,T2[A+44>>2]=r,f=T2[f>>2],T2[A+4>>2]=f,T2[A+56>>2]=f,f=0|n1[T2[T2[f>>2]+12>>2]](f,T2[r+8>>2],T2[e+8>>2]),T2[A+72>>2]=f,r=T2[A+56>>2],n1[T2[T2[r>>2]+20>>2]](r,f),(p2[A+76|0]=0)|A;},I,function(A,f,r,e){return A|=0,r|=0,e|=0,A=T2[(f|=0)>>2],A=0|n1[T2[T2[A>>2]+56>>2]](A,80),T2[A+8>>2]=13344,T2[A>>2]=13316,T2[A+60>>2]=0,T2[A+48>>2]=r,T2[A+44>>2]=e,f=T2[f>>2],T2[A+4>>2]=f,T2[A+56>>2]=f,f=0|n1[T2[T2[f>>2]+12>>2]](f,T2[e+8>>2],T2[r+8>>2]),T2[A+72>>2]=f,r=T2[A+56>>2],n1[T2[T2[r>>2]+20>>2]](r,f),p2[A+76|0]=1,0|A;},I,function(A,f,r,e){return A|=0,r|=0,e|=0,A=T2[(f|=0)>>2],A=0|n1[T2[T2[A>>2]+56>>2]](A,84),T2[A+52>>2]=0,T2[A+56>>2]=0,p2[A+24|0]=1,T2[A>>2]=13820,T2[A+20>>2]=0,p2[A+44|0]=1,T2[A+12>>2]=0,T2[A+16>>2]=0,T2[A+40>>2]=0,p2[A+64|0]=1,T2[A+32>>2]=0,T2[A+36>>2]=0,T2[A+60>>2]=0,p2[A+68|0]=0,p2[A+76|0]=0,T2[A+4>>2]=T2[f>>2],T2[A+72>>2]=T2[f+4>>2],T2[A+80>>2]=T2[T2[r+4>>2]+76>>2],j0(A,r,e),0|A;},I,function(A,f,r,e){A|=0,r|=0,e|=0;var i,a=0,n=0;return A=T2[(f|=0)>>2],A=0|n1[T2[T2[A>>2]+56>>2]](A,116),T2[A+52>>2]=0,T2[A+56>>2]=0,p2[A+24|0]=1,T2[A>>2]=13820,T2[A+20>>2]=0,p2[A+44|0]=1,T2[A+12>>2]=0,T2[A+16>>2]=0,T2[A+40>>2]=0,p2[A+64|0]=1,T2[A+32>>2]=0,T2[A+36>>2]=0,T2[A+60>>2]=0,p2[A+68|0]=0,p2[A+76|0]=0,T2[A+4>>2]=T2[f>>2],T2[A+72>>2]=T2[f+4>>2],T2[A+80>>2]=T2[T2[r+4>>2]+76>>2],j0(A,r,e),p2[A+104|0]=1,T2[A>>2]=14028,T2[A+100>>2]=0,T2[A+92>>2]=0,T2[A+96>>2]=0,i=T2[5498],f=0,(a=K2(83))&&(T2[(f=a+19&-16)-4>>2]=a),p2[f+20|0]=1,T2[f>>2]=13964,T2[f+16>>2]=0,p2[f+40|0]=1,T2[f+8>>2]=0,T2[f+12>>2]=0,T2[f+36>>2]=0,p2[f+60|0]=1,T2[f+28>>2]=0,T2[f+32>>2]=0,T2[f+56>>2]=0,T2[f+48>>2]=0,T2[f+52>>2]=0,T2[5498]=i+2,(a=K2(43))&&(T2[(n=a+19&-16)-4>>2]=a),(a=T2[f+16>>2])&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2])),T2[f+16>>2]=n,p2[f+20|0]=1,T2[f+12>>2]=2,H0(f),T2[A+84>>2]=f,T2[A+108>>2]=T2[T2[r+4>>2]+76>>2],T2[A+112>>2]=T2[T2[e+4>>2]+76>>2],0|A;},I,function(A,f,r,e){return A|=0,r|=0,e|=0,A=T2[(f|=0)>>2],A=0|n1[T2[T2[A>>2]+56>>2]](A,84),T2[A+52>>2]=0,T2[A+56>>2]=0,p2[A+24|0]=1,T2[A>>2]=13820,T2[A+20>>2]=0,p2[A+44|0]=1,T2[A+12>>2]=0,T2[A+16>>2]=0,T2[A+40>>2]=0,p2[A+64|0]=1,T2[A+32>>2]=0,T2[A+36>>2]=0,T2[A+60>>2]=0,p2[A+68|0]=1,p2[A+76|0]=0,T2[A+4>>2]=T2[f>>2],T2[A+72>>2]=T2[f+4>>2],T2[A+80>>2]=T2[T2[e+4>>2]+76>>2],j0(A,r,e),0|A;},I,function(A,f,r,e){return A|=0,A=T2[(f|=0)>>2],A=0|n1[T2[T2[A>>2]+56>>2]](A,8),T2[A>>2]=14188,T2[A+4>>2]=T2[f>>2],0|A;},I,function(A,f,r,e){return A|=0,r|=0,e|=0,A=T2[(f|=0)>>2],A=0|n1[T2[T2[A>>2]+56>>2]](A,16),T2[A>>2]=14248,p2[A+8|0]=0,f=T2[f>>2],T2[A+4>>2]=f,f=(T2[A+12>>2]=0)|n1[T2[T2[f>>2]+12>>2]](f,T2[r+8>>2],T2[e+8>>2]),p2[A+8|0]=1,T2[A+12>>2]=f,0|A;},I,function(A,f,r,e){A|=0,r|=0,e|=0;var i,a=T2[(f|=0)>>2];return a=0|n1[T2[T2[a>>2]+56>>2]](a,20),p2[8+a|0]=0,T2[a>>2]=14384,i=T2[f>>2],T2[4+a>>2]=i,p2[16+a|0]=S2[A+4|0],A=T2[f+4>>2],(T2[12+a>>2]=A)||(A=0|n1[T2[T2[i>>2]+12>>2]](i,T2[r+8>>2],T2[e+8>>2]),p2[8+a|0]=1,T2[12+a>>2]=A),0|a;},I,function(A,f,r,e){return A|=0,r|=0,e|=0,A=T2[(f|=0)>>2],A=0|n1[T2[T2[A>>2]+56>>2]](A,16),T2[A>>2]=14516,p2[A+8|0]=0,f=T2[f>>2],T2[A+4>>2]=f,(T2[A+12>>2]=0)|n1[T2[T2[f>>2]+24>>2]](f,T2[r+8>>2],T2[e+8>>2])&&(f=T2[A+4>>2],f=0|n1[T2[T2[f>>2]+12>>2]](f,T2[r+8>>2],T2[e+8>>2]),p2[A+8|0]=1,T2[A+12>>2]=f),0|A;},I,function(A,f,r,e){A|=0,r|=0,e|=0;var i,a,n=T2[(f|=0)>>2];return n=0|n1[T2[T2[n>>2]+56>>2]](n,28),i=T2[A+12>>2],a=T2[A+8>>2],T2[n>>2]=14588,p2[8+n|0]=0,T2[20+n>>2]=a,T2[24+n>>2]=i,i=S2[A+4|0],p2[16+n|0]=i,A=T2[f>>2],T2[12+n>>2]=0,T2[4+n>>2]=A,0|n1[T2[T2[A>>2]+24>>2]](A,T2[(f=i?e:r)+8>>2],T2[(r=i?r:e)+8>>2])&&(A=T2[4+n>>2],A=0|n1[T2[T2[A>>2]+12>>2]](A,T2[f+8>>2],T2[r+8>>2]),p2[8+n|0]=1,T2[12+n>>2]=A),0|n;},function(A){var f=0;return T2[(A|=0)>>2]=16084,(f=T2[A+20>>2])&&S2[A+24|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+20>>2]=0,p2[A+24|0]=1,T2[(f=A+12|0)>>2]=0,(T2[f+4>>2]=0)|A;},function(A){var f;T2[(A|=0)>>2]=16084,(f=T2[A+20>>2])&&S2[A+24|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),u(A);},function(A,f,r,e,i){A|=0,f|=0,r|=0,i|=0;var a,n=0;return T2[12+(L2=n=L2-16|0)>>2]=e|=0,T2[8+n>>2]=A,e=T2[T2[r+4>>2]+4>>2],a=T2[T2[f+4>>2]+4>>2],A=(A=1!=(0|i)?T2[5260+((P2(a,144)+A|0)+(e<<2)|0)>>2]:T2[76+((P2(a,144)+A|0)+(e<<2)|0)>>2],0|n1[T2[T2[A>>2]+8>>2]](A,8+n|0,f,r)),L2=16+n|0,0|A;},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a=0,n=0,o=0,b=z2(0),t=z2(0),c=0;L2=o=L2-16|0,T2[5861]=T2[5861]+1,a=2&T2[A+4>>2]?(a=T2[f+192>>2],b=z2(n1[T2[T2[a>>2]+20>>2]](a,z2(.019999999552965164))),j2[12+o>>2]=b,a=T2[r+192>>2],t=z2(n1[T2[T2[a>>2]+20>>2]](a,z2(.019999999552965164))),b<(j2[8+o>>2]=t)?12+o|0:8+o|0):12260,i=j2[a>>2],b=j2[r+184>>2],t=j2[f+184>>2],a=T2[A+72>>2];A:{if(n=T2[a+12>>2])T2[a+12>>2]=T2[n>>2],T2[a+8>>2]=T2[a+8>>2]-1;else {if(4&S2[A+4|(n=0)])break A;T2[5498]=T2[5498]+1,(a=K2(887))&&(T2[(n=a+19&-16)-4>>2]=a);}if(T2[n+120>>2]=0,T2[n+124>>2]=0,T2[n>>2]=1025,T2[n+328>>2]=0,T2[n+332>>2]=0,T2[n+536>>2]=0,T2[n+540>>2]=0,T2[(a=n+128|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+136|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+144|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+152|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+160|0)>>2]=0,T2[a+4>>2]=0,T2[n+168>>2]=0,T2[(a=n+336|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+344|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+352|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+360|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+368|0)>>2]=0,T2[a+4>>2]=0,T2[n+376>>2]=0,T2[(a=n+544|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+552|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+560|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+568|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+576|0)>>2]=0,T2[a+4>>2]=0,T2[n+584>>2]=0,T2[n+792>>2]=0,T2[(a=n+784|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+776|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+768|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+760|0)>>2]=0,T2[a+4>>2]=0,T2[(a=n+752|0)>>2]=0,T2[a+4>>2]=0,T2[n+744>>2]=0,T2[n+748>>2]=0,T2[n+836>>2]=f,T2[n+840>>2]=r,T2[n+844>>2]=0,j2[n+848>>2]=i,j2[n+852>>2]=t<b?t:b,a=T2[A+12>>2],T2[n+864>>2]=a,T2[A+16>>2]==(0|a)&&!((0|(e=a?a<<1:1))<=(0|a))){if(e&&(T2[5498]=T2[5498]+1,(f=K2(19+(e<<2)|0))&&(T2[(c=f+19&-16)-4>>2]=f)),1<=(0|a))for(f=0,r=a;T2[f+c>>2]=T2[T2[A+20>>2]+f>>2],f=f+4|0,r=r-1|0;);(f=T2[A+20>>2])&&S2[A+24|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2]),a=T2[A+12>>2]),T2[A+20>>2]=c,T2[A+16>>2]=e,p2[A+24|0]=1;}T2[A+12>>2]=a+1,T2[T2[A+20>>2]+(a<<2)>>2]=n;}return L2=16+o|0,0|n;},function(A,f){var r,e,i,a,n,o,b,t;if(A|=0,f|=0,T2[5861]=T2[5861]-1,n1[T2[T2[A>>2]+20>>2]](A,f),e=T2[(r=A+20|0)>>2],a=T2[f+864>>2],o=T2[(i=e+(n=a<<2)|0)>>2],b=i,t=e,i=T2[(e=A+12|0)>>2]-1|0,T2[b>>2]=T2[t+(t=i<<2)>>2],T2[T2[r>>2]+t>>2]=o,T2[e>>2]=i,T2[T2[T2[r>>2]+n>>2]+864>>2]=a,A=T2[A+72>>2],!(f>>>0<(r=T2[A+16>>2])>>>0||r+P2(T2[A>>2],T2[A+4>>2])>>>0<=f>>>0))return T2[f>>2]=T2[A+12>>2],T2[A+12>>2]=f,void(T2[A+8>>2]=T2[A+8>>2]+1);T2[5499]=T2[5499]+1,q2(T2[f-4>>2]);},function(A,f){T2[(f|=0)+844>>2]=0;},function(A,f,r){A|=0,r|=0;A:{f:{r:switch(T2[(f|=0)+220>>2]-2|0){case 0:case 3:break r;default:break f;}switch(T2[r+220>>2]-2|(A=0)){case 0:case 3:break A;default:break f;}}if(!T2[f+280>>2]||0|n1[T2[T2[f>>2]+12>>2]](f,r)){if(A=1,!T2[r+280>>2])break A;if(0|n1[T2[T2[r>>2]+12>>2]](r,f))break A;}A=0;}return 0|A;},function(A,f,r){if(A|=0,r|=0,!(4&(f=T2[(f|=A=0)+204>>2])||4&(r=T2[r+204>>2]))){if(!(3&f))return 1;A=!(3&r);}return 0|A;},function(A,f,r,e){f|=0,r|=0,e|=0;var i=0;T2[8+(L2=i=L2-16|0)>>2]=A|=0,T2[4+i>>2]=r,T2[i>>2]=16168,n1[T2[T2[f>>2]+48>>2]](f,i,e),L2=16+i|0;},function(A){return T2[(A|=0)+12>>2];},function(A,f){return T2[T2[(A|=0)+20>>2]+((f|=0)<<2)>>2];},function(A){return T2[(A|=0)+12>>2]?T2[A+20>>2]:0;},c4,c4,function(A,f){var r;return f|=0,A=T2[(A|=0)+68>>2],(r=T2[A+12>>2])?(T2[A+12>>2]=T2[r>>2],T2[A+8>>2]=T2[A+8>>2]-1,0|r):(A=0,T2[5498]=T2[5498]+1,(f=K2(f+19|0))&&(T2[(A=f+19&-16)-4>>2]=f),0|A);},function(A,f){var r;if(A|=0,f|=0){if(A=T2[A+68>>2],!(f>>>0<(r=T2[A+16>>2])>>>0||P2(T2[A>>2],T2[A+4>>2])+r>>>0<=f>>>0))return T2[f>>2]=T2[A+12>>2],T2[A+12>>2]=f,void(T2[A+8>>2]=T2[A+8>>2]+1);T2[5499]=T2[5499]+1,q2(T2[f-4>>2]);}},_,I,function(A,f){var r=0,r=f|=0;return f=T2[(A|=0)+8>>2],n1[T2[f+64>>2]](r,f,T2[A+4>>2]),0;},function(A){var f=0;return T2[(A|=0)>>2]=16280,(f=T2[A+60>>2])&&S2[A- -64|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+60>>2]=0,p2[A- -64|0]=1,T2[(f=A+52|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+40>>2]=0,p2[A+44|0]=1,T2[(f=A+32|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+16>>2]=0,p2[A+20|0]=1,T2[(f=A+8|0)>>2]=0,(T2[f+4>>2]=0)|A;},function(A){var f=0;T2[(A|=0)>>2]=16280,(f=T2[A+60>>2])&&S2[A- -64|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+60>>2]=0,p2[A- -64|0]=1,T2[(f=A+52|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+40>>2]=0,p2[A+44|0]=1,T2[(f=A+32|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+16>>2]=0,p2[A+20|0]=1,T2[(f=A+8|0)>>2]=0,T2[f+4>>2]=0,T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o,b,t,c=0,u=0,k=0,l=0,s=0,v=0;T2[5865]=T2[5865]+1;A:{f:{if(c=T2[A+24>>2]){if(0|n1[T2[T2[c>>2]+8>>2]](c,f,r))break f;break A;}if(!(T2[r+8>>2]&T2[f+4>>2]))break A;if(!(T2[f+8>>2]&T2[r+4>>2]))break A;}if(c=T2[f+12>>2]>T2[r+12>>2],k=T2[(e=c?f:r)+12>>2],l=T2[(i=c?r:f)+12>>2],f=P2((f=((f=k<<16|l)<<15^-1)+f|0)>>>10^f,9),c=T2[A+12>>2],-1!=(0|(f=T2[T2[A+40>>2]+((v=(n=(f=((f^=f>>>6)<<11^-1)+f|0)>>>16^f)&c-1)<<2)>>2])))for(r=T2[A+16>>2];;){if(u=(s=f<<4)+r|0,(0|k)==T2[T2[4+(r+s|0)>>2]+12>>2]&&(0|l)==T2[T2[u>>2]+12>>2])break A;if(-1==(0|(f=T2[T2[A+60>>2]+(f<<2)>>2])))break;}if((0|(f=c))==(0|(r=l=T2[A+8>>2]))&&(r=c,!((0|(k=f?f<<1:1))<=(0|f)))){if(r=0,k&&(T2[5498]=T2[5498]+1,(f=K2(19+(k<<4)|0))&&(T2[(r=f+19&-16)-4>>2]=f)),1<=(0|c))for(f=12,u=c;a=T2[A+16>>2]+f|0,T2[(s=f+r|0)-12>>2]=T2[a-12>>2],t=T2[4+(o=a-8|0)>>2],T2[(b=s-8|0)>>2]=T2[o>>2],T2[4+b>>2]=t,T2[s>>2]=T2[a>>2],f=f+16|0,u=u-1|0;);(f=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+16>>2]=r,T2[A+12>>2]=k,p2[A+20|0]=1,r=T2[A+8>>2],f=k;}T2[A+8>>2]=r+1,r=T2[A+16>>2],(u=T2[A+68>>2])&&(n1[T2[T2[u>>2]+8>>2]](u,i,e),f=T2[A+12>>2]),u=r+(l<<4)|0,(0|c)<(0|f)&&(u4(A),v=T2[A+12>>2]-1&n),c=T2[e+12>>2],k=T2[i+12>>2],T2[(f=r+(l<<4)|0)+8>>2]=0,T2[f+12>>2]=0,T2[(r=f)+4>>2]=(f=(0|k)<(0|c))?e:i,T2[u>>2]=f?i:e,f=T2[A+60>>2]+(l<<2)|0,A=T2[A+40>>2]+(v<<2)|0,T2[f>>2]=T2[A>>2],T2[A>>2]=l;}return 0|u;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i=0,a=0,n=0,o=0,b=0,t=0,c=0,u=0;T2[5864]=T2[5864]+1,i=T2[f+12>>2]>T2[r+12>>2],a=T2[(b=i?f:r)+12>>2],n=T2[(t=i?r:f)+12>>2],f=P2((f=((f=a<<16|n)<<15^-1)+f|0)>>>10^f,9),o=T2[A+12>>2]-1&((f=((f^=f>>>6)<<11^-1)+f|0)>>>16^f);A:if(-1!=(0|(f=T2[T2[A+40>>2]+(o<<2)>>2]))){for(i=T2[A+16>>2];(0|a)!=T2[T2[(r=i+(f<<4)|0)+4>>2]+12>>2]||(0|n)!=T2[T2[r>>2]+12>>2];)if(-1==(0|(f=T2[T2[A+60>>2]+(f<<2)>>2])))break A;n1[T2[T2[A>>2]+32>>2]](A,r,e),c=T2[12+(i+(f<<4)|0)>>2],a=T2[A+60>>2];f:{if(n=T2[A+40>>2]+(o<<2)|0,(0|(f=T2[n>>2]))!=(0|(i=r-T2[A+16>>2]>>4))){for(;(0|i)!=(0|(f=T2[(o=a+((r=f)<<2)|0)>>2])););if(-1!=(0|r)){T2[o>>2]=T2[a+(i<<2)>>2];break f;}}T2[n>>2]=T2[a+(i<<2)>>2];}if(a=T2[A+8>>2]-1|0,(f=T2[A+68>>2])&&n1[T2[T2[f>>2]+12>>2]](f,t,b,e),(0|i)==(0|a))return T2[A+8>>2]=T2[A+8>>2]-1,0|c;b=T2[A+60>>2];f:{if(t=T2[A+16>>2],f=T2[T2[(e=t+(a<<4)|0)+4>>2]+12>>2]<<16|T2[T2[e>>2]+12>>2],f=P2((f=(f<<15^-1)+f|0)>>>10^f,9),n=T2[A+12>>2]-1&((f=((f^=f>>>6)<<11^-1)+f|0)>>>16^f),o=T2[A+40>>2]+(n<<2)|0,(0|a)!=(0|(f=T2[o>>2]))){for(;(0|a)!=(0|(f=T2[(u=b+((r=f)<<2)|0)>>2])););if(-1!=(0|r)){T2[u>>2]=T2[b+(a<<2)>>2];break f;}}T2[o>>2]=T2[b+(a<<2)>>2];}r=T2[e+4>>2],T2[(f=t+(i<<4)|0)>>2]=T2[e>>2],T2[f+4>>2]=r,e=T2[(r=e+8|0)+4>>2],T2[(f=f+8|0)>>2]=T2[r>>2],T2[f+4>>2]=e,f=T2[A+40>>2]+(n<<2)|0,T2[T2[A+60>>2]+(i<<2)>>2]=T2[f>>2],T2[f>>2]=i,T2[A+8>>2]=T2[A+8>>2]-1;}return 0|c;},function(A,f,r){A|=0,r|=0;var e=0;T2[12+(L2=e=L2-16|0)>>2]=f|=0,T2[8+e>>2]=16512,n1[T2[T2[A>>2]+48>>2]](A,8+e|0,r),L2=16+e|0;},_0,_0,f2,function(A,f,r){A|=0,f|=0,(r|=0)&&(A=T2[f+8>>2])&&(n1[T2[T2[A>>2]>>2]](A),n1[T2[T2[r>>2]+60>>2]](r,T2[f+8>>2]),T2[f+8>>2]=0);},function(A){return T2[(A|=0)+8>>2];},function(A,f,r){A|=0,f|=0;var e=0;T2[12+(L2=e=L2-16|0)>>2]=r|=0,T2[8+e>>2]=A,T2[4+e>>2]=f,T2[e>>2]=16368,n1[T2[T2[A>>2]+48>>2]](A,e,r),L2=16+e|0;},function(A,f){T2[(A|=0)+24>>2]=f|=0;},function(A,f,r){f|=0,r|=0;var e,i=0;if(1<=T2[(A|=0)+8>>2])for(;e=T2[A+16>>2]+(i<<4)|0,0|n1[T2[T2[f>>2]+8>>2]](f,e)?(n1[T2[T2[A>>2]+12>>2]](A,T2[e>>2],T2[4+e>>2],r),T2[5863]=T2[5863]-1):i=i+1|0,T2[A+8>>2]>(0|i););},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a=0;T2[5862]=T2[5862]+1,a=T2[f+12>>2]>T2[r+12>>2],e=T2[(a?f:r)+12>>2],i=T2[(a?r:f)+12>>2],f=P2((f=((f=i|e<<16)<<15^-1)+f|0)>>>10^f,9),f=T2[A+12>>2]-1&((f=((f^=f>>>6)<<11^-1)+f|0)>>>16^f);A:{if(!((0|f)>=T2[A+32>>2])&&-1!=(0|(f=T2[T2[A+40>>2]+(f<<2)>>2])))for(r=T2[A+16>>2];;){if(T2[T2[4+(a=r+(f<<4)|0)>>2]+12>>2]==(0|e)&&T2[T2[a>>2]+12>>2]==(0|i))break A;if(-1==(0|(f=T2[T2[A+60>>2]+(f<<2)>>2])))break;}a=0;}return 0|a;},G2,function(A,f){T2[(A|=0)+68>>2]=f|=0;},function(A,f){A|=0,f|=0;var r,e,i,a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0,l=0;if(T2[20+(L2=b=L2-32|0)>>2]=0,T2[12+b>>2]=0,((T2[16+b>>2]=0)|(n=T2[A+8>>2]))<(p2[24+b|0]=1))n=0;else {for(n=0;;){if(e=T2[A+16>>2],(0|o)==(0|a))if((0|(k=a?a<<1:1))<=(0|a))o=a;else {if(c=0,k&&(T2[5498]=T2[5498]+1,(n=K2(19+(k<<4)|0))&&(T2[(c=n+19&-16)-4>>2]=n)),1<=(0|a))for(o=12;t=T2[20+b>>2]+o|0,T2[(n=o+c|0)-12>>2]=T2[t-12>>2],i=T2[4+(r=t-8|0)>>2],T2[(u=n-8|0)>>2]=T2[r>>2],T2[u+4>>2]=i,T2[n>>2]=T2[t>>2],o=o+16|0,a=a-1|0;);(n=T2[20+b>>2])&&S2[24+b|0]&&(T2[5499]=T2[5499]+1,q2(T2[n-4>>2])),T2[20+b>>2]=c,p2[24+b|0]=1,T2[16+b>>2]=k,o=T2[12+b>>2],t=u=n=c;}if(k=T2[(a=(l<<4)+e|0)+4>>2],T2[(o=(o<<4)+t|0)>>2]=T2[a>>2],T2[o+4>>2]=k,T2[o+8>>2]=T2[a+8>>2],T2[o+12>>2]=T2[a+12>>2],a=T2[12+b>>2],T2[12+b>>2]=o=a+1|0,!((0|(l=l+1|0))<T2[A+8>>2]))break;a=T2[16+b>>2];}if(!((0|a)<0))for(t=a+1|0;n1[T2[T2[A>>2]+12>>2]](A,T2[u>>2],T2[u+4>>2],f),u=u+16|0,t=t-1|0;);}if(1<=T2[A+52>>2])for(t=T2[A+60>>2],a=0;T2[t>>2]=-1,t=t+4|0,(0|(a=a+1|0))<T2[A+52>>2];);A:{if(2<=(0|o))k4(8+b|0,0,o-1|0);else if((0|o)<1)break A;for(;n1[T2[T2[A>>2]+8>>2]](A,T2[n>>2],T2[n+4>>2]),n=n+16|0,o=o-1|0;);}c&&(T2[5499]=T2[5499]+1,q2(T2[c-4>>2])),L2=32+b|0;},I,function(A,f){var r=0;return (0|(r=T2[(A|=0)+4>>2]))!=T2[(f|=0)+4>>2]&&(0|r)!=T2[f>>2]||(r=T2[A+8>>2],n1[T2[T2[r>>2]+32>>2]](r,f,T2[A+12>>2])),0;},I,function(A,f){return (0|(A=T2[(A|=0)+4>>2]))==T2[(f|=0)>>2]|(0|A)==T2[f+4>>2];},l4,function(A){u(l4(A|=0));},function(A,f,r,e,i,a,n,o){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0,n|=0,o|=0;var b,t=0;return L2=o=L2-48|0,e=0,b=T2[5498],T2[5498]=b+1,(t=K2(83))&&(T2[(e=t+19&-16)-4>>2]=t),T2[e+8>>2]=n,T2[e+4>>2]=a,T2[e>>2]=i,i=T2[f+4>>2],T2[e+16>>2]=T2[f>>2],T2[e+20>>2]=i,t=T2[(n=i=f+8|0)+4>>2],T2[(a=e+24|0)>>2]=T2[n>>2],T2[a+4>>2]=t,a=T2[r+4>>2],T2[e+32>>2]=T2[r>>2],T2[e+36>>2]=a,t=T2[(a=r+8|0)+4>>2],T2[(n=e+40|0)>>2]=T2[a>>2],T2[n+4>>2]=t,T2[e+52>>2]=0,T2[e+56>>2]=0,t=T2[i+4>>2],T2[(n=o+24|0)>>2]=T2[i>>2],T2[n+4>>2]=t,n=T2[a+4>>2],T2[(i=o+40|0)>>2]=T2[a>>2],T2[i+4>>2]=n,i=T2[f>>2],f=T2[f+4>>2],a=T2[r+4>>2],r=T2[r>>2],T2[e+60>>2]=T2[A+104>>2],T2[o+32>>2]=r,T2[o+36>>2]=a,r=T2[A+148>>2]+1|0,T2[e+12>>2]=r,T2[A+148>>2]=r,T2[o+16>>2]=i,T2[o+20>>2]=f,i=A+4|0,(f=T2[A+8>>2])?T2[A+8>>2]=0:(T2[5498]=b+2,f=0,(r=K2(63))&&(T2[(f=r+19&-16)-4>>2]=r),T2[f>>2]=0,T2[f+4>>2]=0,T2[f+40>>2]=0,T2[(r=f+32|0)>>2]=0,T2[r+4>>2]=0,T2[(r=f+24|0)>>2]=0,T2[r+4>>2]=0,T2[(r=f+16|0)>>2]=0,T2[r+4>>2]=0,T2[(r=f+8|0)>>2]=0,T2[r+4>>2]=0),T2[f+36>>2]=e,r=T2[o+20>>2],T2[f>>2]=T2[o+16>>2],T2[f+4>>2]=r,T2[f+40>>2]=0,n=T2[(a=o+24|0)+4>>2],T2[(r=f+8|0)>>2]=T2[a>>2],T2[r+4>>2]=n,n=T2[(a=o+32|0)+4>>2],T2[(r=f+16|0)>>2]=T2[a>>2],T2[r+4>>2]=n,n=T2[(a=o+40|0)+4>>2],T2[(r=f+24|0)>>2]=T2[a>>2],T2[r+4>>2]=n,T2[f+32>>2]=0,a0(i,T2[A+4>>2],f),T2[e+52>>2]=0,T2[e+48>>2]=f,f=84+((T2[A+104>>2]<<2)+A|0)|0,T2[e+56>>2]=T2[f>>2],T2[(r=A+16|0)>>2]=T2[r>>2]+1,(r=T2[f>>2])&&(T2[r+52>>2]=e),T2[f>>2]=e,S2[A+153|0]||(T2[o+8>>2]=e,T2[o>>2]=16856,T2[o+4>>2]=A,s4(T2[A+4>>2],o+16|0,o),s4(T2[A+44>>2],o+16|0,o)),L2=o+48|0,0|e;},function(A,f,r){A|=0,r|=0;var e,i=0,a=0;i0(i=2==T2[(f|=0)+60>>2]?A+44|0:A+4|0,a=T2[f+48>>2]),(e=T2[i+4>>2])&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),T2[i+4>>2]=a,T2[i+12>>2]=T2[i+12>>2]-1,(i=T2[f+52>>2])?T2[(a=i+56|0)>>2]=T2[(i=f+56|0)>>2]:T2[84+((T2[f+60>>2]<<2)+A|0)>>2]=T2[(i=f+56|0)>>2],(i=T2[i>>2])&&(T2[i+52>>2]=T2[f+52>>2]),i=T2[A+96>>2],n1[T2[T2[i>>2]+16>>2]](i,f,r),T2[5499]=T2[5499]+1,q2(T2[f-4>>2]),p2[A+154|0]=1;},function(A,f,r,e,i){A|=0,f|=0,r|=0,e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C=0,E=0,D=0,h=z2(0),Z=0,Y=z2(0),R=z2(0),F=0,W=z2(0);if(L2=C=L2-48|0,W=j2[r>>2],j2[44+C>>2]=W,a=j2[r+4>>2],j2[40+C>>2]=a,n=j2[r+8>>2],j2[36+C>>2]=n,o=j2[e>>2],j2[32+C>>2]=o,b=j2[e+4>>2],j2[28+C>>2]=b,t=j2[e+8>>2],j2[24+C>>2]=t,c=j2[e+12>>2],u=j2[r+12>>2],2!=T2[f+60>>2]){if(T2[A+128>>2]=T2[A+128>>2]+1,D=T2[f+48>>2],(l=j2[D>>2])<=o&&W<=(s=j2[D+16>>2])&&(v=j2[D+4>>2])<=b&&a<=(d=j2[D+20>>2])&&(Y=j2[D+8>>2])<=t&&n<=(R=j2[D+24>>2])){if(B=j2[f+16>>2],w=j2[f+32>>2],k=j2[A+100>>2],Q=j2[f+24>>2],G=j2[f+40>>2],g=j2[f+20>>2],h=j2[f+36>>2],!(l<=W&&v<=a&&Y<=n&&o<=s&&b<=d&&(E=0,t<=R))){Y=z2(b+z2(.05000000074505806)),j2[28+C>>2]=Y,R=z2(a+z2(-.05000000074505806)),j2[40+C>>2]=R,h=z2(z2(z2(h-g)*z2(.5))*k),i=(h=z2(a-g)<z2(0)?z2(-h):h)>z2(0),j2[(i?28+C|0:40+C|0)>>2]=(i?Y:R)+h,Y=z2(n+z2(-.05000000074505806)),j2[36+C>>2]=Y,R=z2(t+z2(.05000000074505806)),j2[24+C>>2]=R,h=z2(k*z2(z2(G-Q)*z2(.5))),i=(h=z2(n-Q)<z2(0)?z2(-h):h)>z2(0),j2[(i?24+C|0:36+C|0)>>2]=(i?R:Y)+h,Y=z2(o+z2(.05000000074505806)),j2[32+C>>2]=Y,R=z2(W+z2(-.05000000074505806)),j2[44+C>>2]=R,h=z2(z2(z2(w-B)*z2(.5))*k),i=(h=z2(W-B)<z2(0)?z2(-h):h)>z2(0),j2[(i?32+C|0:44+C|0)>>2]=(i?Y:R)+h;A:if(i=i0(Z=A+4|0,D)){if(0<=(0|(F=T2[A+12>>2]))){if(F)for(;;){if(!(E=T2[i+32>>2]))break A;if(i=E,!(F=F-1|0))break;}}else i=T2[Z>>2];}else i=0;j2[D>>2]=j2[44+C>>2],j2[D+4>>2]=j2[40+C>>2],j2[D+12>>2]=u,j2[D+8>>2]=j2[36+C>>2],j2[D+16>>2]=j2[32+C>>2],j2[D+20>>2]=j2[28+C>>2],j2[D+24>>2]=j2[24+C>>2],j2[D+28>>2]=c,a0(Z,i,D),T2[A+132>>2]=T2[A+132>>2]+1,E=1;}}else {A:if(i=i0(Z=A+4|0,D)){if(0<=(0|(F=T2[A+12>>2]))){if(F)for(;;){if(!(E=T2[i+32>>2]))break A;if(i=E,!(F=F-1|0))break;}}else i=T2[Z>>2];}else i=0;j2[D+16>>2]=o,j2[D+12>>2]=u,j2[D+8>>2]=n,j2[D+4>>2]=a,j2[D>>2]=W,j2[D+28>>2]=c,j2[D+24>>2]=t,j2[D+20>>2]=b,a0(Z,i,D),T2[A+132>>2]=T2[A+132>>2]+1,E=1;}}else i0(A+44|0,E=T2[f+48>>2]),(i=T2[A+48>>2])&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2])),T2[A+48>>2]=E,T2[(i=A+56|0)>>2]=T2[i>>2]-1,Z=A+4|0,(i=T2[A+8>>2])?T2[A+8>>2]=0:(T2[5498]=T2[5498]+1,i=0,(E=K2(63))&&(T2[(i=E+19&-16)-4>>2]=E,W=j2[44+C>>2]),T2[i>>2]=0,T2[i+4>>2]=0,T2[i+40>>2]=0,T2[(E=i+32|0)>>2]=0,T2[E+4>>2]=0,T2[(E=i+24|0)>>2]=0,T2[E+4>>2]=0,T2[(E=i+16|0)>>2]=0,T2[E+4>>2]=0,T2[(E=i+8|0)>>2]=0,T2[E+4>>2]=0),j2[i>>2]=W,T2[i+36>>2]=f,j2[i+12>>2]=u,T2[i+40>>2]=0,j2[i+28>>2]=c,j2[i+4>>2]=j2[40+C>>2],j2[i+8>>2]=j2[36+C>>2],j2[i+16>>2]=j2[32+C>>2],j2[i+20>>2]=j2[28+C>>2],j2[i+24>>2]=j2[24+C>>2],T2[i+32>>2]=0,a0(Z,T2[A+4>>2],i),T2[f+48>>2]=i,T2[(i=A+16|0)>>2]=T2[i>>2]+1,E=1;(i=T2[f+52>>2])?T2[(D=i+56|0)>>2]=T2[(i=f+56|0)>>2]:T2[84+((T2[f+60>>2]<<2)+A|0)>>2]=T2[(i=f+56|0)>>2],(i=T2[i>>2])&&(T2[i+52>>2]=T2[f+52>>2]),i=T2[r+4>>2],T2[f+16>>2]=T2[r>>2],T2[f+20>>2]=i,r=T2[(i=r+8|0)+4>>2],T2[(Z=f+24|0)>>2]=T2[i>>2],T2[Z+4>>2]=r,r=T2[(i=e+8|0)+4>>2],T2[(Z=f+40|0)>>2]=T2[i>>2],T2[Z+4>>2]=r,r=T2[e+4>>2],T2[f+32>>2]=T2[e>>2],T2[f+36>>2]=r,T2[f+52>>2]=0,r=T2[A+104>>2],T2[f+56>>2]=T2[(e=84+((r<<2)+A|0)|0)>>2],T2[f+60>>2]=r,(r=T2[e>>2])&&(T2[r+52>>2]=f),T2[e>>2]=f,E&&(p2[A+154|0]=1,S2[A+153|0]||(T2[8+C>>2]=16856,v4(r=(T2[12+C>>2]=A)+44|0,T2[r>>2],T2[f+48>>2],8+C|0),v4(A+4|0,T2[A+4>>2],T2[f+48>>2],8+C|0))),L2=48+C|0;},function(A,f,r,e){var i;A|=0,e|=0,A=T2[(f|=0)+20>>2],T2[(r|=0)>>2]=T2[f+16>>2],T2[r+4>>2]=A,A=r+8|0,i=T2[(r=f+24|0)+4>>2],T2[A>>2]=T2[r>>2],T2[A+4>>2]=i,i=T2[(r=f+40|0)+4>>2],T2[(A=e+8|0)>>2]=T2[r>>2],T2[A+4>>2]=i,A=T2[f+36>>2],T2[e>>2]=T2[f+32>>2],T2[e+4>>2]=A;},function(A,f,r,e,i,a){var n,o,b;A|=0,f|=0,r|=0,e|=0,i|=0,a|=0,T2[(L2=r=L2-16|0)+8>>2]=17e3,T2[r+12>>2]=e,b=T2[A+168>>2],d4(T2[A+4>>2],f,n=e+4|0,o=e+20|0,j2[e+32>>2],i,a,b,r+8|0),d4(T2[A+44>>2],f,n,o,j2[e+32>>2],i,a,b,r+8|0),L2=r+16|0;},function(A,f,r,e){A|=0,f|=0,r|=0;var i,a,n=0;T2[44+(L2=n=L2-48|0)>>2]=e|=0,T2[40+n>>2]=16928,a=T2[4+(i=f+8|0)>>2],T2[(e=16+n|0)>>2]=T2[i>>2],T2[e+4>>2]=a,a=T2[4+(i=r+8|0)>>2],T2[(e=32+n|0)>>2]=T2[i>>2],T2[e+4>>2]=a,e=T2[f+4>>2],T2[8+n>>2]=T2[f>>2],T2[12+n>>2]=e,f=T2[r+4>>2],T2[24+n>>2]=T2[r>>2],T2[28+n>>2]=f,s4(T2[A+4>>2],8+n|0,40+n|0),s4(T2[A+44>>2],8+n|0,40+n|0),L2=48+n|0;},function(A,f){A|=0,f|=0;var r=0,e=0,i=0,a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0,l=z2(0),s=0;if(L2=u=L2-32|0,e0(n=A+4|0,1+((0|P2(T2[A+112>>2],T2[A+16>>2]))/100|0)|0),T2[A+124>>2]&&(e0(A+44|0,r=1+((0|P2(T2[A+108>>2],T2[A+56>>2]))/100|0)|0),r=T2[A+124>>2]-r|0,T2[A+124>>2]=0<(0|r)?r:0),r=(T2[A+104>>2]+1|0)%2|0,T2[A+104>>2]=r,r=T2[84+((r<<2)+A|0)>>2]){for(t=A+44|0,o=16+u|0;b=T2[r+56>>2],a=(e=T2[r+52>>2])?e+56|0:84+((T2[r+60>>2]<<2)+A|0)|0,T2[a>>2]=b,(e=T2[r+56>>2])&&(T2[e+52>>2]=T2[r+52>>2]),T2[r+52>>2]=0,T2[r+56>>2]=T2[A+92>>2],(e=T2[A+92>>2])&&(T2[e+52>>2]=r),T2[A+92>>2]=r,i0(n,e=T2[r+48>>2]),(a=T2[A+8>>2])&&(T2[5499]=T2[5499]+1,q2(T2[a-4>>2])),T2[A+8>>2]=e,T2[A+16>>2]=T2[A+16>>2]-1,c=T2[(i=r+24|0)+4>>2],T2[(e=a=8+u|0)>>2]=T2[i>>2],T2[e+4>>2]=c,e=T2[r+36>>2],T2[o>>2]=T2[r+32>>2],T2[o+4>>2]=e,c=T2[(i=r+40|0)+4>>2],T2[(e=o+8|0)>>2]=T2[i>>2],T2[e+4>>2]=c,e=T2[r+20>>2],T2[u>>2]=T2[r+16>>2],T2[4+u>>2]=e,(e=T2[A+48>>2])?T2[A+48>>2]=0:(e=0,T2[5498]=T2[5498]+1,(i=K2(63))&&(T2[(e=i+19&-16)-4>>2]=i),T2[e>>2]=0,T2[e+4>>2]=0,T2[e+40>>2]=0,T2[(i=e+32|0)>>2]=0,T2[i+4>>2]=0,T2[(i=e+24|0)>>2]=0,T2[i+4>>2]=0,T2[(i=e+16|0)>>2]=0,T2[i+4>>2]=0,T2[(i=e+8|0)>>2]=0,T2[i+4>>2]=0),T2[e+36>>2]=r,i=T2[4+u>>2],T2[e>>2]=T2[u>>2],T2[e+4>>2]=i,T2[e+40>>2]=0,c=T2[a+4>>2],T2[(i=e+8|0)>>2]=T2[a>>2],T2[i+4>>2]=c,i=T2[o+4>>2],T2[(a=e+16|0)>>2]=T2[o>>2],T2[a+4>>2]=i,c=T2[(i=24+u|0)+4>>2],T2[(a=e+24|0)>>2]=T2[i>>2],T2[a+4>>2]=c,T2[e+32>>2]=0,a0(t,T2[A+44>>2],e),T2[r+60>>2]=2,T2[r+48>>2]=e,e=T2[A+56>>2]+1|0,T2[A+56>>2]=e,r=b;);p2[A+154|0]=1,T2[A+124>>2]=e;}T2[u>>2]=16856,T2[4+u>>2]=A,S2[A+153|0]&&(v4(n,T2[A+4>>2],T2[A+44>>2],u),S2[A+153|0]&&v4(n,r=T2[n>>2],r,u));A:if(S2[A+154|0]&&(r=T2[A+96>>2],a=0|n1[T2[T2[r>>2]+28>>2]](r),!((0|(b=T2[a+4>>2]))<1))){f:{if(r=T2[A+120>>2],1<=(0|(e=(0|b)<(0|(r=(0|(e=(0|P2(T2[A+116>>2],b))/100|0))<(0|r)?r:e))?b:r))){for(r=0;n=T2[a+12>>2]+((T2[A+144>>2]+r|0)%(0|b)<<4)|0,i=T2[n>>2],o=T2[i+48>>2],t=T2[n+4>>2],n=T2[t+48>>2],j2[o>>2]<=j2[n+16>>2]&&j2[o+16>>2]>=j2[n>>2]&&j2[o+4>>2]<=j2[n+20>>2]&&j2[o+20>>2]>=j2[n+4>>2]&&j2[o+8>>2]<=j2[n+24>>2]&&j2[o+24>>2]>=j2[n+8>>2]||(b=T2[A+96>>2],n1[T2[T2[b>>2]+12>>2]](b,i,t,f),r=r-1|0,e=e-1|0,b=T2[a+4>>2]),(0|(r=r+1|0))<(0|e););if((0|b)<=0)break f;}T2[A+144>>2]=(T2[A+144>>2]+e|0)%(0|b);break A;}T2[A+144>>2]=0;}if(p2[A+154|0]=0,T2[A+120>>2]=1,T2[A+140>>2]=T2[A+140>>2]+1,r=T2[A+132>>2],A=T2[(a=A)+128>>2],l=z2(0),A&&(l=z2(z2(r>>>0)/z2(A>>>0))),j2[a+136>>2]=l,T2[a+132>>2]=r>>>1,T2[a+128>>2]=A>>>1,A=T2[a+96>>2],0|n1[T2[T2[A>>2]+56>>2]](A)){if(A=T2[a+96>>2],i=0|n1[T2[T2[A>>2]+28>>2]](A),2<=(0|(A=T2[i+4>>2]))&&(k4(i,0,A-1|0),A=T2[i+4>>2]),1<=(0|A)){for(n=o=b=e=0;c=T2[i+12>>2]+e|0,r=T2[(k=c+4|0)>>2],t=o,o=T2[c>>2],((0|r)!=(0|n)||(0|t)!=(0|o))&&(n=T2[o+48>>2],t=T2[r+48>>2],j2[n>>2]<=j2[t+16>>2]&&j2[n+16>>2]>=j2[t>>2]&&j2[n+4>>2]<=j2[t+20>>2]&&j2[n+20>>2]>=j2[t+4>>2]&&j2[n+8>>2]<=j2[t+24>>2]&&j2[n+24>>2]>=j2[t+8>>2])||(A=T2[a+96>>2],n1[T2[T2[A>>2]+32>>2]](A,c,f),T2[k>>2]=0,b=b+1|(T2[c>>2]=0),A=T2[i+4>>2]),e=e+16|0,n=r,(0|(s=s+1|0))<(0|A););if(2<=(0|A)&&(k4(i,0,A-1|0),A=T2[i+4>>2]),o=A-b|0,(0|b)<=-1){if((0|o)>T2[i+8>>2]){if(f=0,o&&(T2[5498]=T2[5498]+1,(r=K2(19+(o<<4)|0))&&(T2[(f=r+19&-16)-4>>2]=r)),1<=(0|A))for(r=12,e=A;a=T2[i+12>>2]+r|0,T2[(n=f+r|0)-12>>2]=T2[a-12>>2],k=T2[(c=a-8|0)+4>>2],T2[(t=n-8|0)>>2]=T2[c>>2],T2[t+4>>2]=k,T2[n>>2]=T2[a>>2],r=r+16|0,e=e-1|0;);(r=T2[i+12>>2])&&S2[i+16|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[i+12>>2]=f,p2[i+16|0]=1,T2[i+8>>2]=o;}for(r=A<<4;A=T2[i+12>>2]+r|0,T2[A>>2]=0,T2[A+4>>2]=0,T2[(A=A+8|0)>>2]=0,r=r+16|(T2[A+4>>2]=0),(A=b)>>>0<=(b=A+1|0)>>>0;);}A=o;}T2[i+4>>2]=A;}L2=32+u|0;},B4,B4,function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0),i=z2(0),a=z2(0),n=z2(0),o=z2(0),b=z2(0),t=z2(0),c=z2(0),u=T2[A+44>>2];(A=T2[A+4>>2])?(t=j2[A>>2],u?(e=j2[A+24>>2],i=(i=j2[u+24>>2])<e?e:i,e=j2[A+20>>2],a=(a=j2[u+20>>2])<e?e:a,n=(e=j2[A+8>>2])<(n=j2[u+8>>2])?e:n,o=(e=j2[A+4>>2])<(o=j2[u+4>>2])?e:o,e=j2[A+16>>2],b=(b=j2[u+16>>2])<e?e:b,t=t<(e=j2[u>>2])?t:e):(c=j2[A+28>>2],i=j2[A+24>>2],a=j2[A+20>>2],b=j2[A+16>>2],e=j2[A+12>>2],n=j2[A+8>>2],o=j2[A+4>>2])):u&&(c=j2[u+28>>2],i=j2[u+24>>2],a=j2[u+20>>2],b=j2[u+16>>2],e=j2[u+12>>2],n=j2[u+8>>2],o=j2[u+4>>2],t=j2[u>>2]),j2[f+12>>2]=e,j2[f+8>>2]=n,j2[f+4>>2]=o,j2[f>>2]=t,j2[r+12>>2]=c,j2[r+8>>2]=i,j2[r+4>>2]=a,j2[r>>2]=b;},function(A,f){f|=0,T2[(A|=0)+16>>2]==(0-T2[A+56>>2]|0)&&(r0(A+4|0),r0(A+44|0),p2[A+153|0]=0,p2[A+154|0]=1,T2[A+124>>2]=0,T2[A+104>>2]=0,T2[A+116>>2]=10,T2[A+120>>2]=1,T2[A+108>>2]=1,T2[A+112>>2]=0,T2[(f=A+84|0)>>2]=0,T2[f+4>>2]=0,T2[A+92>>2]=0,T2[A+128>>2]=0,T2[A+132>>2]=0,T2[(f=A+136|0)>>2]=0,T2[f+4>>2]=0,T2[(A=A+144|0)>>2]=0,T2[A+4>>2]=0);},Q4,I,function(A,f,r){var e;A|=0,(0|(f|=0))!=(0|(r|=0))&&(e=T2[T2[A+4>>2]+96>>2],n1[T2[T2[e>>2]+8>>2]](e,T2[f+36>>2],T2[r+36>>2]),A=T2[A+4>>2],T2[A+120>>2]=T2[A+120>>2]+1);},function(A,f){n1[T2[T2[(A|=0)>>2]+8>>2]](A,f|=0,T2[T2[A+8>>2]+48>>2]);},I,g4,I,g4,function(A){var f=0;return T2[(A|=0)>>2]=17124,(f=T2[A+556>>2])&&S2[A+560|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+556>>2]=0,T2[A>>2]=7664,p2[A+560|0]=1,T2[(f=A+548|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+296>>2])&&S2[A+300|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+296>>2]=0,p2[A+300|0]=1,T2[(f=A+288|0)>>2]=0,(T2[f+4>>2]=0)|A;},function(A){var f=0;T2[(A|=0)>>2]=17124,(f=T2[A+556>>2])&&S2[A+560|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+556>>2]=0,T2[A>>2]=7664,p2[A+560|0]=1,T2[(f=A+548|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+296>>2])&&S2[A+300|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+296>>2]=0,p2[A+300|0]=1,T2[(f=A+288|0)>>2]=0,T2[f+4>>2]=0,T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A){return 496;},function(A,f,r){return K(A|=0,f|=0,r|=0),j2[f+264>>2]=j2[A+324>>2],j2[f+268>>2]=j2[A+328>>2],j2[f+272>>2]=j2[A+332>>2],j2[f+276>>2]=j2[A+336>>2],j2[f+280>>2]=j2[A+340>>2],j2[f+284>>2]=j2[A+344>>2],j2[f+288>>2]=j2[A+348>>2],j2[f+292>>2]=j2[A+352>>2],j2[f+296>>2]=j2[A+356>>2],j2[f+300>>2]=j2[A+360>>2],j2[f+304>>2]=j2[A+364>>2],j2[f+308>>2]=j2[A+368>>2],j2[f+312>>2]=j2[A+372>>2],j2[f+316>>2]=j2[A+376>>2],j2[f+320>>2]=j2[A+380>>2],j2[f+324>>2]=j2[A+384>>2],j2[f+328>>2]=j2[A+388>>2],j2[f+332>>2]=j2[A+392>>2],j2[f+336>>2]=j2[A+396>>2],j2[f+340>>2]=j2[A+400>>2],j2[f+456>>2]=j2[A+404>>2],j2[f+344>>2]=j2[A+604>>2],j2[f+348>>2]=j2[A+608>>2],j2[f+352>>2]=j2[A+612>>2],j2[f+356>>2]=j2[A+616>>2],j2[f+360>>2]=j2[A+408>>2],j2[f+364>>2]=j2[A+412>>2],j2[f+368>>2]=j2[A+416>>2],j2[f+372>>2]=j2[A+420>>2],j2[f+376>>2]=j2[A+424>>2],j2[f+380>>2]=j2[A+428>>2],j2[f+384>>2]=j2[A+432>>2],j2[f+388>>2]=j2[A+436>>2],j2[f+392>>2]=j2[A+440>>2],j2[f+396>>2]=j2[A+444>>2],j2[f+400>>2]=j2[A+448>>2],j2[f+404>>2]=j2[A+452>>2],j2[f+408>>2]=j2[A+456>>2],j2[f+412>>2]=j2[A+460>>2],j2[f+416>>2]=j2[A+464>>2],j2[f+420>>2]=j2[A+468>>2],j2[f+424>>2]=j2[A+472>>2],j2[f+428>>2]=j2[A+476>>2],j2[f+432>>2]=j2[A+480>>2],j2[f+436>>2]=j2[A+484>>2],j2[f+440>>2]=j2[A+488>>2],j2[f+444>>2]=j2[A+492>>2],j2[f+448>>2]=j2[A+496>>2],j2[f+452>>2]=j2[A+500>>2],r=T2[A+508>>2],T2[f+460>>2]=T2[A+504>>2],T2[f+464>>2]=r,r=T2[A+520>>2],T2[f+468>>2]=T2[A+516>>2],T2[f+472>>2]=r,r=T2[A+528>>2],T2[f+476>>2]=T2[A+524>>2],T2[f+480>>2]=r,r=T2[A+536>>2],T2[f+484>>2]=T2[A+532>>2],T2[f+488>>2]=r,T2[f+492>>2]=S2[A+512|0],17164;},function(A,f){var r=0,e=0,e=f|=0,i=0|n1[T2[T2[(A|=0)>>2]+16>>2]](A),a=T2[T2[f>>2]+16>>2],r=0|n1[a](0|e,0|i,1);e=0|n1[T2[T2[A>>2]+20>>2]](A,T2[8+(i=r)>>2],r=f),a=T2[T2[f>>2]+20>>2],n1[a](0|r,0|i,0|e,1497645650,0|A);},Z4,function(A){A=Z4(A|=0),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},C2,function(A,f,r,e,i,a,n,o,b,t){return z2(n1[T2[T2[(A|=0)>>2]+44>>2]](A,f|=0,r|=0,e|=0,i|=0,a|=0,n|=0,o|=0,b|=0)),z2(n1[T2[T2[A>>2]+48>>2]](A,f,r,e,i,a,n,o,b)),z2(n1[T2[T2[A>>2]+36>>2]](A,f,r,o)),z2(z2(0));},C2,function(A){T2[(A|=0)+232>>2]=0;},S0,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M,I,x,y,U,X,p,T,S,j,P,z,O,H,_,L,K,q,$=z2(0),A2=0,f2=z2(0),r2=z2(0),e2=z2(0),i2=z2(0),a2=z2(0),n2=0,o2=z2(0),b2=z2(0),t2=0,c2=z2(0),u2=z2(0),k2=z2(0),l2=z2(0),s2=z2(0),v2=0,d2=0,B2=z2(0),Q2=z2(0),g2=z2(0),w2=0,G2=0,C2=z2(0),E2=z2(0),D2=0,h2=z2(0),Z2=0,Y2=0,R2=z2(0),F2=z2(0),W2=z2(0),m2=(z2(0)),N2=z2(0),V2=z2(0),J2=z2(0),M2=0,I2=0,x2=(z2(0)),y2=z2(0),U2=z2(0),X2=z2(0);if(L2=v2=L2+-64|0,1<=(0|r))for(;;){if(g=T2[(I2<<2)+f>>2],i=T2[g+840>>2],l=Y4(A,a=T2[g+836>>2],j2[e+12>>2]),k=Y4(A,i,j2[e+12>>2]),C=P2(l,244),G2=T2[A+16>>2],$=j2[(t2=C+G2|0)+128>>2],r2=z2($*$),$=j2[t2+132>>2],r2=z2(r2+z2($*$)),$=j2[t2+136>>2],!(z2(r2+z2($*$))<z2(14210854715202004e-30)&&(A2=G2+P2(k,244)|0,$=j2[A2+128>>2],r2=z2($*$),$=j2[A2+132>>2],r2=z2(r2+z2($*$)),$=j2[A2+136>>2],z2(r2+z2($*$))<z2(14210854715202004e-30))||(0|(n2=T2[g+844>>2]))<1))for(Y=(A2=G2+(E=P2(k,244))|0)+232|0,R=A2+200|0,F=A2+228|0,W=A2+196|0,m=A2+224|0,N=A2+192|0,V=A2+216|0,J=A2+184|0,M=A2+212|0,I=A2+180|0,x=A2+208|0,y=A2+176|0,U=A2+240|0,X=t2+232|0,p=t2+200|0,T=t2+228|0,S=t2+196|0,j=t2+224|0,P=t2+192|0,z=t2+216|0,O=t2+184|0,H=t2+212|0,_=t2+180|0,L=t2+208|0,K=t2+176|0,q=t2+240|0,M2=0;;){if(n=P2(M2,208)+g|0,j2[(w=84+n|0)>>2]<=j2[g+852>>2]){if(Q=4+n|0,(0|(n2=G2=T2[A+28>>2]))==T2[A+32>>2]&&!((0|(D2=(n2=G2)?n2<<1:1))<=(0|n2))){if(t2=0,D2&&(T2[5498]=T2[5498]+1,(A2=K2(P2(D2,152)+19|0))&&(T2[(t2=A2+19&-16)-4>>2]=A2)),1<=(0|G2))for(n2=0,A2=G2;$2(n2+t2|0,T2[A+36>>2]+n2|0,152),n2=n2+152|0,A2=A2-1|0;);(A2=T2[A+36>>2])&&S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[A2-4>>2])),T2[A+36>>2]=t2,p2[A+40|0]=1,T2[A+32>>2]=D2,n2=T2[A+28>>2];}T2[A+28>>2]=n2+1,A2=T2[A+36>>2]+P2(G2,152)|0,T2[A2+132>>2]=Q,T2[A2+148>>2]=k,T2[A2+144>>2]=l,T2[60+v2>>2]=0,v=z2(j2[60+n>>2]-j2[a+60>>2]),j2[56+v2>>2]=v,d=z2(j2[56+n>>2]-j2[a+56>>2]),j2[52+v2>>2]=d,o2=z2(j2[52+n>>2]-j2[a+52>>2]),j2[48+v2>>2]=o2,i2=j2[36+n>>2],r2=j2[40+n>>2],e2=j2[44+n>>2],f2=j2[i+52>>2],h2=j2[i+56>>2],$=j2[i+60>>2],T2[44+v2>>2]=0,C2=z2(e2-$),j2[40+v2>>2]=C2,l2=z2(r2-h2),j2[36+v2>>2]=l2,E2=z2(i2-f2),j2[32+v2>>2]=E2,y2=z2(0),U2=z2(0),X2=z2(0),m2=z2(0),T2[q>>2]&&(f2=z2(j2[P>>2]+j2[j>>2]),h2=z2(j2[S>>2]+j2[T>>2]),m2=z2(z2(j2[O>>2]+j2[z>>2])+z2(z2(d*f2)-z2(o2*h2))),$=z2(j2[p>>2]+j2[X>>2]),X2=z2(z2(j2[_>>2]+j2[H>>2])+z2(z2(o2*$)-z2(v*f2))),U2=z2(z2(j2[K>>2]+j2[L>>2])+z2(z2(v*h2)-z2(d*$)))),N2=z2(0),V2=z2(0),T2[U>>2]&&(f2=z2(j2[N>>2]+j2[m>>2]),h2=z2(j2[W>>2]+j2[F>>2]),V2=z2(z2(j2[J>>2]+j2[V>>2])+z2(z2(l2*f2)-z2(E2*h2))),$=z2(j2[R>>2]+j2[Y>>2]),N2=z2(z2(j2[I>>2]+j2[M>>2])+z2(z2(E2*$)-z2(C2*f2))),y2=z2(z2(j2[y>>2]+j2[x>>2])+z2(z2(C2*h2)-z2(l2*$)))),D=j2[(s=72+n|0)>>2],h=j2[(u=68+n|0)>>2],Z=j2[(B=76+n|0)>>2],e2=j2[e+12>>2],n2=T2[A+16>>2],t=T2[240+(o=n2+E|0)>>2],c=T2[240+(b=n2+C|0)>>2],x2=j2[e+36>>2],J2=j2[e+40>>2],h2=j2[e+28>>2],6&(n2=T2[(G=132+n|0)>>2])?(J2=2&n2?j2[156+n>>2]:J2,4&n2&&(x2=j2[160+n>>2])):8&n2&&($=z2(e2*j2[156+n>>2]),f2=z2(H2(z2($+j2[160+n>>2]),z2(1.1920928955078125e-7))),x2=z2($/f2),J2=z2(z2(1)/f2)),s2=z2(z2(D*o2)-z2(d*h)),g2=z2(z2(v*h)-z2(Z*o2)),u2=z2(z2(d*Z)-z2(v*D)),b2=z2(0),k2=z2(0),R2=z2(0),F2=z2(0),c&&(F2=z2(z2(z2(z2(u2*j2[c+356>>2])+z2(g2*j2[c+360>>2]))+z2(s2*j2[c+364>>2]))*j2[c+612>>2]),R2=z2(z2(z2(z2(u2*j2[c+340>>2])+z2(g2*j2[c+344>>2]))+z2(s2*j2[c+348>>2]))*j2[c+608>>2]),k2=z2(z2(z2(z2(u2*j2[c+324>>2])+z2(g2*j2[c+328>>2]))+z2(s2*j2[c+332>>2]))*j2[c+604>>2])),j2[A2+64>>2]=k2,T2[A2+76>>2]=0,j2[(d2=A2+72|0)>>2]=F2,j2[(w2=A2+68|0)>>2]=R2,f2=j2[s>>2],$=j2[u>>2],c2=z2(z2(f2*E2)-z2(l2*$)),r2=z2(C2*$),$=j2[B>>2],r2=z2(r2-z2($*E2)),i2=z2(z2(l2*$)-z2(C2*f2)),W2=z2(0),a2=z2(0),t&&($=z2(-r2),a2=z2(z2(z2(z2(j2[t+360>>2]*$)-z2(i2*j2[t+356>>2]))-z2(c2*j2[t+364>>2]))*j2[t+612>>2]),b2=z2(z2(z2(z2(j2[t+328>>2]*$)-z2(i2*j2[t+324>>2]))-z2(c2*j2[t+332>>2]))*j2[t+604>>2]),W2=z2(z2(z2(z2(j2[t+344>>2]*$)-z2(i2*j2[t+340>>2]))-z2(c2*j2[t+348>>2]))*j2[t+608>>2])),j2[A2+80>>2]=b2,T2[A2+92>>2]=0,j2[(Z2=A2+88|0)>>2]=a2,j2[(Y2=A2+84|0)>>2]=W2,n2=A2,f2=h2,Q2=z2(z2(1)/e2),e2=B2=z2(Q2*J2),$=z2(c?j2[c+404>>2]+z2(z2(z2(z2(z2(R2*v)-z2(F2*d))*j2[u>>2])+z2(z2(z2(F2*o2)-z2(v*k2))*j2[s>>2]))+z2(z2(z2(d*k2)-z2(R2*o2))*j2[B>>2])):0),a2=z2(t?j2[t+404>>2]+z2(z2(z2(z2(z2(a2*l2)-z2(W2*C2))*j2[u>>2])+z2(z2(z2(b2*C2)-z2(a2*E2))*j2[s>>2]))+z2(z2(z2(W2*E2)-z2(b2*l2))*j2[B>>2])):0),j2[n2+108>>2]=f2/z2(e2+z2($+a2)),c?(n2=T2[4+u>>2],T2[A2+16>>2]=T2[u>>2],T2[A2+20>>2]=n2,D2=T2[(n2=8+u|0)+4>>2],t2=T2[n2>>2],j2[A2>>2]=u2,T2[A2+12>>2]=0,j2[A2+8>>2]=s2,j2[A2+4>>2]=g2,T2[(n2=A2+24|0)>>2]=t2,T2[n2+4>>2]=D2):(T2[A2>>2]=0,T2[A2+4>>2]=0,T2[(n2=A2+24|0)>>2]=0,T2[n2+4>>2]=0,T2[(n2=A2+16|0)>>2]=0,T2[n2+4>>2]=0,T2[(n2=A2+8|0)>>2]=0,T2[n2+4>>2]=0),t?(f2=j2[s>>2],$=j2[B>>2],j2[A2+48>>2]=-j2[u>>2],j2[A2+32>>2]=-i2,T2[A2+60>>2]=0,j2[A2+56>>2]=-$,j2[A2+52>>2]=-f2,T2[A2+44>>2]=0,j2[A2+40>>2]=-c2,j2[A2+36>>2]=-r2):(T2[A2+32>>2]=0,T2[A2+36>>2]=0,T2[(n2=A2+56|0)>>2]=0,T2[n2+4>>2]=0,T2[(n2=A2+48|0)>>2]=0,T2[n2+4>>2]=0,T2[(n2=A2+40|0)>>2]=0,T2[n2+4>>2]=0),g2=j2[e+64>>2],u2=j2[w>>2],b2=z2(0),R2=z2(0),F2=z2(0),W2=z2(0),c&&(e2=j2[c+388>>2],f2=j2[c+392>>2],W2=z2(z2(z2(d*e2)-z2(f2*o2))+j2[c+380>>2]),$=j2[c+396>>2],F2=z2(z2(z2($*o2)-z2(v*e2))+j2[c+376>>2]),R2=z2(z2(z2(f2*v)-z2($*d))+j2[c+372>>2])),a2=z2(0),o2=z2(0),t&&(e2=j2[t+388>>2],f2=j2[t+392>>2],o2=z2(z2(z2(l2*e2)-z2(f2*E2))+j2[t+380>>2]),$=j2[t+396>>2],a2=z2(z2(z2($*E2)-z2(C2*e2))+j2[t+376>>2]),b2=z2(z2(z2(f2*C2)-z2($*l2))+j2[t+372>>2])),w=240+o|0,D2=240+b|0,e2=j2[B>>2],f2=j2[u>>2],$=j2[s>>2],j2[A2+104>>2]=j2[88+n>>2],$=z2(z2(z2(f2*z2(R2-b2))+z2($*z2(F2-a2)))+z2(e2*z2(W2-o2))),s2=j2[e+96>>2]>z2(O2($))?z2(0):z2(j2[100+n>>2]*z2(-$)),4&(n2=T2[e+72>>2])?(i2=z2(j2[136+n>>2]*j2[e+68>>2]),j2[A2+100>>2]=i2,c&&T2[D2>>2]&&(r2=j2[c+416>>2],e2=j2[A2+24>>2],f2=j2[c+412>>2],$=j2[A2+20>>2],j2[64+b>>2]=z2(j2[112+b>>2]*z2(i2*z2(z2(j2[A2+16>>2]*j2[128+b>>2])*j2[c+408>>2])))+j2[64+b>>2],j2[(t2=68+b|0)>>2]=z2(z2(i2*z2(f2*z2($*j2[132+b>>2])))*j2[116+b>>2])+j2[t2>>2],j2[(t2=72+b|0)>>2]=z2(z2(i2*z2(r2*z2(e2*j2[136+b>>2])))*j2[120+b>>2])+j2[t2>>2],e2=j2[d2>>2],f2=j2[w2>>2],j2[80+b>>2]=z2(z2(i2*j2[96+b>>2])*j2[A2- -64>>2])+j2[80+b>>2],$=j2[104+b>>2],j2[(t2=84+b|0)>>2]=z2(f2*z2(i2*j2[100+b>>2]))+j2[t2>>2],j2[(t2=88+b|0)>>2]=z2(e2*z2(i2*$))+j2[t2>>2]),!t||T2[w>>2]&&(k2=j2[t+416>>2],c2=j2[A2+56>>2],i2=j2[t+412>>2],r2=j2[A2+52>>2],e2=j2[Z2>>2],f2=j2[Y2>>2],$=j2[A2+80>>2],a2=z2(-j2[A2+100>>2]),j2[64+o>>2]=j2[64+o>>2]-z2(j2[112+o>>2]*z2(z2(z2(j2[128+o>>2]*j2[A2+48>>2])*j2[t+408>>2])*a2)),j2[(t2=68+o|0)>>2]=j2[t2>>2]-z2(z2(z2(i2*z2(r2*j2[132+o>>2]))*a2)*j2[116+o>>2]),j2[(t2=72+o|0)>>2]=j2[t2>>2]-z2(z2(z2(k2*z2(c2*j2[136+o>>2]))*a2)*j2[120+o>>2]),j2[80+o>>2]=j2[80+o>>2]-z2($*z2(j2[96+o>>2]*a2)),$=j2[104+o>>2],j2[(t2=84+o|0)>>2]=j2[t2>>2]-z2(f2*z2(j2[100+o>>2]*a2)),j2[(t2=88+o|0)>>2]=j2[t2>>2]-z2(e2*z2($*a2)))):T2[A2+100>>2]=0,T2[A2+96>>2]=0,C2=z2(0),l2=z2(0),b2=z2(0),R2=z2(0),F2=z2(0),o2=z2(0),W2=z2(0),a2=z2(0),J2=z2(0),r2=z2(0),t2=A2+108|0,e2=s2<=z2(0)?z2(0):s2,$=T2[D2>>2]?(F2=j2[224+b>>2],R2=j2[228+b>>2],C2=j2[216+b>>2],l2=j2[212+b>>2],b2=j2[232+b>>2],j2[208+b>>2]):z2(0),l2=z2(z2(z2(z2(z2($+j2[176+b>>2])*j2[A2+16>>2])+z2(z2(l2+j2[180+b>>2])*j2[A2+20>>2]))+z2(z2(C2+j2[184+b>>2])*j2[A2+24>>2]))+z2(z2(z2(z2(F2+j2[192+b>>2])*j2[A2>>2])+z2(z2(R2+j2[196+b>>2])*j2[A2+4>>2]))+z2(z2(b2+j2[200+b>>2])*j2[A2+8>>2]))),$=T2[w>>2]?(r2=j2[224+o>>2],a2=j2[232+o>>2],J2=j2[228+o>>2],W2=j2[216+o>>2],o2=j2[212+o>>2],j2[208+o>>2]):z2(0),b2=z2(e2-z2(l2+z2(z2(z2(z2(z2($+j2[176+o>>2])*j2[A2+48>>2])+z2(z2(o2+j2[180+o>>2])*j2[A2+52>>2]))+z2(z2(W2+j2[184+o>>2])*j2[A2+56>>2]))+z2(z2(z2(z2(r2+j2[192+o>>2])*j2[A2+32>>2])+z2(z2(J2+j2[196+o>>2])*j2[A2+36>>2]))+z2(z2(a2+j2[200+o>>2])*j2[A2+40>>2]))))),f2=j2[e+56>>2],T2[A2+120>>2]=0,T2[A2+124>>2]=1343554297,e2=j2[t2>>2],j2[A2+116>>2]=B2*e2,T2[A2+140>>2]=T2[A+68>>2],d2=A2,$=(r2=z2(u2+g2))>z2(0)?(b2=z2(b2-z2(Q2*r2)),z2(0)):z2(Q2*z2(x2*z2(-r2))),$=z2($*e2),t2=!T2[e+52>>2]|f2<r2,j2[d2+128>>2]=t2?z2(0):$,r2=$,$=z2(b2*e2),j2[A2+112>>2]=t2?z2(r2+$):$,t2=A2+140|0,j2[(D2=92+n|0)>>2]>z2(0)&&(R4(A,u,l,k,G2,j2[96+n>>2]),i2=j2[B>>2],l2=z2(O2(i2))>z2(.7071067690849304)?(f2=j2[s>>2],$=z2(z2(i2*i2)+z2(f2*f2)),e2=z2(z2(1)/z2(_2($))),E2=z2($*e2),$=j2[u>>2],o2=z2(e2*z2(-i2)),C2=z2($*o2),b2=z2(0),a2=z2(f2*e2),z2(a2*z2(-$))):(e2=j2[u>>2],f2=j2[s>>2],$=z2(z2(e2*e2)+z2(f2*f2)),r2=z2(z2(1)/z2(_2($))),C2=z2($*r2),o2=z2(e2*r2),E2=z2(o2*z2(-i2)),a2=z2(0),b2=z2(r2*z2(-f2)),z2(i2*b2)),$=z2(z2(1)/z2(_2(z2(z2(z2(b2*b2)+z2(o2*o2))+z2(a2*a2))))),a2=z2(a2*$),j2[24+v2>>2]=a2,o2=z2(o2*$),j2[20+v2>>2]=o2,b2=z2(b2*$),j2[16+v2>>2]=b2,$=z2(z2(1)/z2(_2(z2(z2(C2*C2)+z2(z2(E2*E2)+z2(l2*l2)))))),C2=z2(C2*$),j2[8+v2>>2]=C2,l2=z2(l2*$),j2[4+v2>>2]=l2,E2=z2(E2*$),j2[v2>>2]=E2,(n2=2&T2[a+180>>2])&&(T2[28+v2>>2]=0,g2=j2[a+4>>2],u2=j2[a+20>>2],k2=j2[a+36>>2],Q2=z2(z2(z2(z2(b2*g2)+z2(o2*u2))+z2(a2*k2))*j2[a+164>>2]),c2=j2[a+8>>2],i2=j2[a+24>>2],r2=j2[a+40>>2],s2=z2(z2(z2(z2(b2*c2)+z2(o2*i2))+z2(a2*r2))*j2[a+168>>2]),e2=j2[a+12>>2],f2=j2[a+28>>2],$=j2[a+44>>2],B2=z2(z2(z2(z2(b2*e2)+z2(o2*f2))+z2(a2*$))*j2[a+172>>2]),a2=z2(z2(z2(k2*Q2)+z2(r2*s2))+z2($*B2)),j2[24+v2>>2]=a2,o2=z2(z2(z2(u2*Q2)+z2(i2*s2))+z2(f2*B2)),j2[20+v2>>2]=o2,b2=z2(z2(z2(g2*Q2)+z2(c2*s2))+z2(e2*B2)),j2[16+v2>>2]=b2),(A2=2&T2[i+180>>2])&&(T2[28+v2>>2]=0,g2=j2[i+4>>2],u2=j2[i+20>>2],k2=j2[i+36>>2],Q2=z2(z2(z2(z2(g2*b2)+z2(u2*o2))+z2(k2*a2))*j2[i+164>>2]),c2=j2[i+8>>2],i2=j2[i+24>>2],r2=j2[i+40>>2],s2=z2(z2(z2(z2(b2*c2)+z2(o2*i2))+z2(a2*r2))*j2[i+168>>2]),e2=j2[i+12>>2],f2=j2[i+28>>2],$=j2[i+44>>2],B2=z2(z2(z2(z2(b2*e2)+z2(o2*f2))+z2(a2*$))*j2[i+172>>2]),a2=z2(z2(z2(k2*Q2)+z2(r2*s2))+z2($*B2)),j2[24+v2>>2]=a2,o2=z2(z2(z2(u2*Q2)+z2(i2*s2))+z2(f2*B2)),j2[20+v2>>2]=o2,b2=z2(z2(z2(g2*Q2)+z2(c2*s2))+z2(e2*B2)),j2[16+v2>>2]=b2),n2&&(T2[12+v2>>2]=0,g2=j2[a+4>>2],u2=j2[a+20>>2],k2=j2[a+36>>2],Q2=z2(z2(z2(z2(E2*g2)+z2(l2*u2))+z2(C2*k2))*j2[a+164>>2]),c2=j2[a+8>>2],i2=j2[a+24>>2],r2=j2[a+40>>2],s2=z2(z2(z2(z2(E2*c2)+z2(l2*i2))+z2(C2*r2))*j2[a+168>>2]),e2=j2[a+12>>2],f2=j2[a+28>>2],$=j2[a+44>>2],B2=z2(z2(z2(z2(E2*e2)+z2(l2*f2))+z2(C2*$))*j2[a+172>>2]),C2=z2(z2(z2(k2*Q2)+z2(r2*s2))+z2($*B2)),j2[8+v2>>2]=C2,l2=z2(z2(z2(u2*Q2)+z2(i2*s2))+z2(f2*B2)),j2[4+v2>>2]=l2,E2=z2(z2(z2(g2*Q2)+z2(c2*s2))+z2(e2*B2)),j2[v2>>2]=E2),A2&&(T2[12+v2>>2]=0,g2=j2[i+4>>2],u2=j2[i+20>>2],k2=j2[i+36>>2],Q2=z2(z2(z2(z2(g2*E2)+z2(u2*l2))+z2(k2*C2))*j2[i+164>>2]),c2=j2[i+8>>2],i2=j2[i+24>>2],r2=j2[i+40>>2],s2=z2(z2(z2(z2(E2*c2)+z2(l2*i2))+z2(C2*r2))*j2[i+168>>2]),e2=j2[i+12>>2],f2=j2[i+28>>2],$=j2[i+44>>2],B2=z2(z2(z2(z2(E2*e2)+z2(l2*f2))+z2(C2*$))*j2[i+172>>2]),C2=z2(z2(z2(k2*Q2)+z2(r2*s2))+z2($*B2)),j2[8+v2>>2]=C2,l2=z2(z2(z2(u2*Q2)+z2(i2*s2))+z2(f2*B2)),j2[4+v2>>2]=l2,E2=z2(z2(z2(g2*Q2)+z2(c2*s2))+z2(e2*B2)),j2[v2>>2]=E2),.001<+z2(_2(z2(z2(z2(b2*b2)+z2(o2*o2))+z2(a2*a2))))&&R4(A,16+v2|0,l,k,G2,j2[D2>>2]),.001<+z2(_2(z2(z2(z2(E2*E2)+z2(l2*l2))+z2(C2*C2))))&&R4(A,v2,l,k,G2,j2[D2>>2]),n2=T2[e+72>>2]),1&p2[0|G]&&32&n2?(F4(A,172+n|0,l,k,G2,Q,48+v2|0,32+v2|0,h2,e,j2[148+n>>2],j2[(A2=164+n|0)>>2]),16&S2[e+72|0]&&F4(A,188+n|0,l,k,G2,Q,48+v2|0,32+v2|0,h2,e,j2[152+n>>2],j2[A2>>2])):(T2[(A2=184+n|0)>>2]=0,e2=z2(U2-y2),f2=z2(X2-N2),$=z2(m2-V2),c2=z2(z2(z2(e2*h)+z2(f2*D))+z2($*Z)),w2=180+n|0,u2=j2[B>>2],i2=z2($-z2(c2*u2)),j2[w2>>2]=i2,Z2=176+n|0,k2=j2[s>>2],r2=z2(f2-z2(c2*k2)),j2[Z2>>2]=r2,d2=172+n|0,$=e2,e2=j2[u>>2],f2=z2($-z2(c2*e2)),j2[d2>>2]=f2,64&S2[e+72|0]||!(($=z2(z2(z2(f2*f2)+z2(r2*r2))+z2(i2*i2)))>z2(1.1920928955078125e-7))?(Y2=188+n|0,E2=z2(O2(u2))>z2(.7071067690849304)?(T2[d2>>2]=0,$=z2(z2(k2*k2)+z2(u2*u2)),f2=z2(z2(1)/z2(_2($))),a2=z2(f2*z2(-u2)),j2[Z2>>2]=a2,o2=z2(k2*f2),j2[w2>>2]=o2,C2=z2($*f2),l2=z2(e2*a2),b2=z2(0),z2(o2*z2(-e2))):(T2[w2>>2]=0,$=z2(z2(e2*e2)+z2(k2*k2)),f2=z2(z2(1)/z2(_2($))),a2=z2(e2*f2),j2[Z2>>2]=a2,b2=z2(f2*z2(-k2)),j2[d2>>2]=b2,l2=z2($*f2),C2=z2(a2*z2(-u2)),o2=z2(0),z2(u2*b2)),j2[Y2>>2]=C2,j2[(D2=196+n|0)>>2]=l2,j2[(n2=192+n|0)>>2]=E2,1&p2[a+180|0]&&(e2=j2[a+172>>2],Q2=j2[a+44>>2],s2=j2[a+12>>2],B2=j2[a+28>>2],f2=j2[a+164>>2],g2=j2[a+36>>2],u2=j2[a+4>>2],r2=j2[a+20>>2],$=j2[a+168>>2],k2=j2[a+40>>2],c2=j2[a+8>>2],i2=j2[a+24>>2],T2[A2>>2]=0,l2=r2,r2=z2(f2*z2(z2(z2(u2*b2)+z2(r2*a2))+z2(g2*o2))),f2=z2($*z2(z2(z2(b2*c2)+z2(a2*i2))+z2(o2*k2))),$=z2(e2*z2(z2(z2(b2*s2)+z2(a2*B2))+z2(o2*Q2))),a2=z2(z2(z2(l2*r2)+z2(i2*f2))+z2(B2*$)),j2[Z2>>2]=a2,b2=z2(z2(z2(u2*r2)+z2(c2*f2))+z2(s2*$)),j2[d2>>2]=b2,o2=z2(z2(z2(g2*r2)+z2(k2*f2))+z2(Q2*$)),j2[w2>>2]=o2),1&p2[i+180|0]&&(e2=j2[i+172>>2],Q2=j2[i+44>>2],s2=j2[i+12>>2],B2=j2[i+28>>2],f2=j2[i+164>>2],g2=j2[i+36>>2],u2=j2[i+4>>2],r2=j2[i+20>>2],$=j2[i+168>>2],k2=j2[i+40>>2],c2=j2[i+8>>2],i2=j2[i+24>>2],T2[A2>>2]=0,l2=r2,r2=z2(f2*z2(z2(z2(u2*b2)+z2(r2*a2))+z2(g2*o2))),f2=z2($*z2(z2(z2(b2*c2)+z2(a2*i2))+z2(o2*k2))),$=z2(e2*z2(z2(z2(b2*s2)+z2(a2*B2))+z2(o2*Q2))),j2[Z2>>2]=z2(z2(l2*r2)+z2(i2*f2))+z2(B2*$),j2[d2>>2]=z2(z2(u2*r2)+z2(c2*f2))+z2(s2*$),j2[w2>>2]=z2(z2(g2*r2)+z2(k2*f2))+z2(Q2*$)),F4(A,d2,l,k,G2,Q,48+v2|0,32+v2|0,h2,e,z2(0),z2(0)),16&(A2=T2[e+72>>2])&&(1&p2[a+180|0]&&(e2=j2[a+172>>2],m2=j2[a+44>>2],N2=j2[a+12>>2],V2=j2[a+28>>2],f2=j2[a+164>>2],Q2=j2[a+36>>2],r2=j2[a+4>>2],s2=j2[a+20>>2],$=j2[a+168>>2],B2=j2[a+40>>2],g2=j2[a+8>>2],u2=j2[a+24>>2],T2[200+n>>2]=0,k2=j2[Y2>>2],c2=j2[n2>>2],i2=j2[D2>>2],r2=z2(f2*z2(z2(z2((l2=r2)*k2)+z2(s2*c2))+z2(Q2*i2))),f2=z2($*z2(z2(z2(k2*g2)+z2(c2*u2))+z2(i2*B2))),$=z2(e2*z2(z2(z2(k2*N2)+z2(c2*V2))+z2(i2*m2))),j2[Y2>>2]=z2(z2(l2*r2)+z2(g2*f2))+z2(N2*$),j2[n2>>2]=z2(z2(s2*r2)+z2(u2*f2))+z2(V2*$),j2[D2>>2]=z2(z2(Q2*r2)+z2(B2*f2))+z2(m2*$)),1&p2[i+180|0]&&(e2=j2[i+172>>2],m2=j2[i+44>>2],N2=j2[i+12>>2],V2=j2[i+28>>2],f2=j2[i+164>>2],Q2=j2[i+36>>2],r2=j2[i+4>>2],s2=j2[i+20>>2],$=j2[i+168>>2],B2=j2[i+40>>2],g2=j2[i+8>>2],u2=j2[i+24>>2],T2[200+n>>2]=0,k2=j2[Y2>>2],c2=j2[n2>>2],i2=j2[D2>>2],r2=z2(f2*z2(z2(z2((l2=r2)*k2)+z2(s2*c2))+z2(Q2*i2))),f2=z2($*z2(z2(z2(k2*g2)+z2(c2*u2))+z2(i2*B2))),$=z2(e2*z2(z2(z2(k2*N2)+z2(c2*V2))+z2(i2*m2))),j2[Y2>>2]=z2(z2(l2*r2)+z2(g2*f2))+z2(N2*$),j2[n2>>2]=z2(z2(s2*r2)+z2(u2*f2))+z2(V2*$),j2[D2>>2]=z2(z2(Q2*r2)+z2(B2*f2))+z2(m2*$)),F4(A,Y2,l,k,G2,Q,48+v2|0,32+v2|0,h2,e,z2(0),z2(0)),A2=T2[e+72>>2]),80==(80&A2)&&(T2[G>>2]=1|T2[G>>2])):($=z2(z2(1)/z2(_2($))),b2=z2(r2*$),j2[Z2>>2]=b2,a2=z2(f2*$),j2[d2>>2]=a2,o2=z2(i2*$),j2[w2>>2]=o2,1&p2[a+180|0]&&(e2=j2[a+172>>2],Q2=j2[a+44>>2],s2=j2[a+12>>2],B2=j2[a+28>>2],f2=j2[a+164>>2],g2=j2[a+36>>2],u2=j2[a+4>>2],r2=j2[a+20>>2],$=j2[a+168>>2],k2=j2[a+40>>2],c2=j2[a+8>>2],i2=j2[a+24>>2],T2[A2>>2]=0,l2=r2,r2=z2(f2*z2(z2(z2(a2*u2)+z2(b2*r2))+z2(o2*g2))),f2=z2($*z2(z2(z2(a2*c2)+z2(b2*i2))+z2(o2*k2))),$=z2(e2*z2(z2(z2(a2*s2)+z2(b2*B2))+z2(o2*Q2))),b2=z2(z2(z2(l2*r2)+z2(i2*f2))+z2(B2*$)),j2[Z2>>2]=b2,a2=z2(z2(z2(u2*r2)+z2(c2*f2))+z2(s2*$)),j2[d2>>2]=a2,o2=z2(z2(z2(g2*r2)+z2(k2*f2))+z2(Q2*$)),j2[w2>>2]=o2),1&p2[i+180|0]&&(e2=j2[i+172>>2],Q2=j2[i+44>>2],s2=j2[i+12>>2],B2=j2[i+28>>2],f2=j2[i+164>>2],g2=j2[i+36>>2],u2=j2[i+4>>2],r2=j2[i+20>>2],$=j2[i+168>>2],k2=j2[i+40>>2],c2=j2[i+8>>2],i2=j2[i+24>>2],T2[A2>>2]=0,l2=r2,r2=z2(f2*z2(z2(z2(u2*a2)+z2(r2*b2))+z2(g2*o2))),f2=z2($*z2(z2(z2(a2*c2)+z2(b2*i2))+z2(o2*k2))),$=z2(e2*z2(z2(z2(a2*s2)+z2(b2*B2))+z2(o2*Q2))),j2[Z2>>2]=z2(z2(l2*r2)+z2(i2*f2))+z2(B2*$),j2[d2>>2]=z2(z2(u2*r2)+z2(c2*f2))+z2(s2*$),j2[w2>>2]=z2(z2(g2*r2)+z2(k2*f2))+z2(Q2*$)),F4(A,d2,l,k,G2,Q,48+v2|0,32+v2|0,h2,e,z2(0),z2(0)),16&S2[e+72|0]&&(n2=196+n|(T2[(D2=200+n|0)>>2]=0),i2=j2[s>>2],r2=j2[d2>>2],$=j2[Z2>>2],e2=j2[u>>2],c2=z2(z2(i2*r2)-z2($*e2)),f2=j2[B>>2],B2=z2($*f2),$=j2[w2>>2],i2=z2(B2-z2($*i2)),f2=z2(z2($*e2)-z2(f2*r2)),$=z2(z2(1)/z2(_2(z2(z2(z2(i2*i2)+z2(f2*f2))+z2(c2*c2))))),a2=z2(c2*$),j2[n2>>2]=a2,A2=192+n|0,o2=z2(f2*$),j2[A2>>2]=o2,Y2=188+n|0,b2=z2(i2*$),j2[Y2>>2]=b2,1&p2[a+180|0]&&(e2=j2[a+172>>2],Q2=j2[a+44>>2],s2=j2[a+12>>2],B2=j2[a+28>>2],f2=j2[a+164>>2],g2=j2[a+36>>2],u2=j2[a+4>>2],r2=j2[a+20>>2],$=j2[a+168>>2],k2=j2[a+40>>2],c2=j2[a+8>>2],i2=j2[a+24>>2],T2[D2>>2]=0,l2=r2,r2=z2(f2*z2(z2(z2(b2*u2)+z2(o2*r2))+z2(a2*g2))),f2=z2($*z2(z2(z2(b2*c2)+z2(o2*i2))+z2(a2*k2))),$=z2(e2*z2(z2(z2(b2*s2)+z2(o2*B2))+z2(a2*Q2))),o2=z2(z2(z2(l2*r2)+z2(i2*f2))+z2(B2*$)),j2[A2>>2]=o2,b2=z2(z2(z2(u2*r2)+z2(c2*f2))+z2(s2*$)),j2[Y2>>2]=b2,a2=z2(z2(z2(g2*r2)+z2(k2*f2))+z2(Q2*$)),j2[n2>>2]=a2),1&p2[i+180|0]&&(e2=j2[i+172>>2],Q2=j2[i+44>>2],s2=j2[i+12>>2],B2=j2[i+28>>2],f2=j2[i+164>>2],g2=j2[i+36>>2],u2=j2[i+4>>2],r2=j2[i+20>>2],$=j2[i+168>>2],k2=j2[i+40>>2],c2=j2[i+8>>2],i2=j2[i+24>>2],T2[D2>>2]=0,l2=r2,r2=z2(f2*z2(z2(z2(u2*b2)+z2(r2*o2))+z2(g2*a2))),f2=z2($*z2(z2(z2(b2*c2)+z2(o2*i2))+z2(a2*k2))),$=z2(e2*z2(z2(z2(b2*s2)+z2(o2*B2))+z2(a2*Q2))),j2[A2>>2]=z2(z2(l2*r2)+z2(i2*f2))+z2(B2*$),j2[Y2>>2]=z2(z2(u2*r2)+z2(c2*f2))+z2(s2*$),j2[n2>>2]=z2(z2(g2*r2)+z2(k2*f2))+z2(Q2*$)),F4(A,Y2,l,k,G2,Q,48+v2|0,32+v2|0,h2,e,z2(0),z2(0))))),D2=T2[A+76>>2],n2=T2[t2>>2],4&(G2=T2[e+72>>2])?(A2=T2[A+16>>2],Y2=T2[(d2=A2+E|0)+240>>2],t2=T2[(w2=A2+C|0)+240>>2],Z2=D2+P2(n2,152)|0,i2=z2(j2[140+n>>2]*j2[e+68>>2]),j2[Z2+100>>2]=i2,t2&&(e2=j2[t2+416>>2],f2=j2[Z2+24>>2],h2=j2[t2+412>>2],$=j2[Z2+20>>2],r2=j2[t2+404>>2],j2[w2+64>>2]=z2(z2(i2*z2(z2(r2*j2[Z2+16>>2])*j2[t2+408>>2]))*j2[w2+112>>2])+j2[w2+64>>2],j2[(A2=w2+68|0)>>2]=z2(z2(i2*z2(h2*z2(r2*$)))*j2[w2+116>>2])+j2[A2>>2],j2[(A2=w2+72|0)>>2]=z2(z2(i2*z2(e2*z2(r2*f2)))*j2[w2+120>>2])+j2[A2>>2],f2=j2[Z2+72>>2],h2=j2[Z2+68>>2],j2[w2+80>>2]=z2(z2(i2*j2[w2+96>>2])*j2[Z2+64>>2])+j2[w2+80>>2],$=j2[w2+104>>2],j2[(A2=w2+84|0)>>2]=z2(h2*z2(i2*j2[w2+100>>2]))+j2[A2>>2],j2[(A2=w2+88|0)>>2]=z2(f2*z2(i2*$))+j2[A2>>2]),Y2&&(c2=j2[Z2+88>>2],i2=j2[Z2+84>>2],r2=j2[Z2+80>>2],e2=j2[Y2+416>>2],f2=j2[Z2+56>>2],h2=j2[Y2+412>>2],$=j2[Z2+52>>2],k2=j2[Y2+404>>2],u2=j2[Z2+100>>2],j2[d2+64>>2]=j2[d2+64>>2]+z2(z2(z2(z2(k2*j2[Z2+48>>2])*j2[Y2+408>>2])*u2)*j2[d2+112>>2]),j2[(A2=d2+68|0)>>2]=j2[A2>>2]+z2(z2(u2*z2(h2*z2(k2*$)))*j2[d2+116>>2]),j2[(A2=d2+72|0)>>2]=j2[A2>>2]+z2(z2(u2*z2(e2*z2(k2*f2)))*j2[d2+120>>2]),j2[d2+80>>2]=j2[d2+80>>2]+z2(r2*z2(u2*j2[d2+96>>2])),$=j2[d2+104>>2],j2[(A2=d2+84|0)>>2]=j2[A2>>2]+z2(i2*z2(u2*j2[d2+100>>2])),j2[(A2=d2+88|0)>>2]=j2[A2>>2]+z2(c2*z2($*u2))),16&G2&&(G2=D2+P2(n2+1|0,152)|0,e2=z2(j2[144+n>>2]*j2[e+68>>2]),j2[G2+100>>2]=e2,t2&&(h2=j2[G2+24>>2],$=j2[G2+20>>2],f2=j2[t2+404>>2],j2[w2+64>>2]=z2(z2(e2*z2(f2*j2[G2+16>>2]))*j2[w2+112>>2])+j2[w2+64>>2],j2[(A2=w2+68|0)>>2]=z2(z2(e2*z2(f2*$))*j2[w2+116>>2])+j2[A2>>2],j2[(A2=w2+72|0)>>2]=z2(z2(e2*z2(f2*h2))*j2[w2+120>>2])+j2[A2>>2],f2=j2[G2+72>>2],h2=j2[G2+68>>2],j2[w2+80>>2]=z2(z2(e2*j2[w2+96>>2])*j2[G2+64>>2])+j2[w2+80>>2],$=j2[w2+104>>2],j2[(A2=w2+84|0)>>2]=z2(h2*z2(e2*j2[w2+100>>2]))+j2[A2>>2],j2[(A2=w2+88|0)>>2]=z2(f2*z2(e2*$))+j2[A2>>2]),Y2&&(r2=j2[G2+88>>2],e2=j2[G2+84>>2],f2=j2[G2+56>>2],h2=j2[G2+52>>2],$=j2[G2+48>>2],i2=j2[Y2+404>>2],c2=j2[G2+100>>2],j2[d2+80>>2]=j2[d2+80>>2]+z2(j2[G2+80>>2]*z2(j2[d2+96>>2]*c2)),j2[d2+64>>2]=j2[d2+64>>2]+z2(z2(c2*z2(i2*$))*j2[d2+112>>2]),j2[(A2=d2+68|0)>>2]=j2[A2>>2]+z2(z2(c2*z2(i2*h2))*j2[d2+116>>2]),j2[(A2=d2+72|0)>>2]=j2[A2>>2]+z2(z2(c2*z2(i2*f2))*j2[d2+120>>2]),$=j2[d2+104>>2],j2[(A2=d2+84|0)>>2]=j2[A2>>2]+z2(e2*z2(c2*j2[d2+100>>2])),j2[(A2=d2+88|0)>>2]=j2[A2>>2]+z2(r2*z2($*c2))))):(A2=D2+P2(n2,152)|0,T2[A2+100>>2]=0,16&G2&&(T2[A2+252>>2]=0)),n2=T2[g+844>>2];}if(!((0|(M2=M2+1|0))<(0|n2)))break;}if((0|(I2=I2+1|0))==(0|r))break;}L2=v2+64|0;},function(A,f,r,e,i,a,n,o,b){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0,o|=0;var t,c=z2(0);A:if(T2[o+52>>2]&&!(T2[o+20>>2]<1||(0|(f=T2[A+28>>2]))<1))for(r=0;;){if(c=z2(0),1<=(0|f))for(e=0;t=c,a=T2[A+16>>2],i=T2[A+36>>2]+P2(T2[T2[A+116>>2]+e>>2],152)|0,c=z2(n1[T2[A+220>>2]](a+P2(T2[i+144>>2],244)|0,P2(T2[i+148>>2],244)+a|0,i)),c=z2(t+z2(c*c)),e=e+4|0,f=f-1|0;);if(j2[o+92>>2]>=c)break A;if(((f=T2[o+20>>2])-1|0)<=(0|r))break A;if((0|f)<=(0|(r=r+1|0)))break A;f=T2[A+28>>2];}},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n=0,o=0,b=0,t=z2(0),c=z2(0),u=0,k=z2(0),l=z2(0),s=z2(0),v=z2(0),d=0,B=0,Q=0,g=L2-80|0;if(L2=g,4&(n=T2[e+72>>2])&&!((0|(r=T2[A+28>>2]))<1))if(o=T2[A+76>>2],f=T2[A+36>>2],16&n)for(f=f+140|0;n=T2[f-8>>2],j2[n+132>>2]=j2[f-40>>2],b=o+P2(T2[f>>2],152)|0,j2[n+136>>2]=j2[b+100>>2],j2[n+140>>2]=j2[b+252>>2],f=f+152|0,r=r-1|0;);else for(f=f+140|0;n=T2[f-8>>2],j2[n+132>>2]=j2[f-40>>2],j2[n+136>>2]=j2[100+(o+P2(T2[f>>2],152)|0)>>2],f=f+152|0,r=r-1|0;);if(1<=(0|(n=T2[A+48>>2])))for(f=T2[A+56>>2]+100|0;o=T2[f+32>>2],(r=T2[o+44>>2])&&(b=T2[o+28>>2],k=j2[b+416>>2],l=j2[f-76>>2],s=j2[b+412>>2],v=j2[f-80>>2],t=j2[f>>2],c=z2(z2(1)/j2[e+12>>2]),j2[r>>2]=j2[r>>2]+z2(z2(z2(j2[f-84>>2]*t)*j2[b+408>>2])*c),j2[r+4>>2]=z2(z2(s*z2(t*v))*c)+j2[r+4>>2],j2[r+8>>2]=z2(z2(k*z2(t*l))*c)+j2[r+8>>2],d=T2[o+32>>2],k=j2[d+416>>2],l=j2[f-44>>2],s=j2[d+412>>2],v=j2[f-48>>2],t=j2[f>>2],c=z2(z2(1)/j2[e+12>>2]),j2[r+32>>2]=j2[r+32>>2]+z2(z2(z2(j2[f-52>>2]*t)*j2[d+408>>2])*c),j2[(B=r+36|0)>>2]=z2(z2(s*z2(t*v))*c)+j2[B>>2],j2[(B=r+40|0)>>2]=z2(z2(k*z2(t*l))*c)+j2[B>>2],k=j2[b+612>>2],l=j2[f-92>>2],s=j2[b+608>>2],v=j2[f-96>>2],t=j2[f>>2],c=z2(z2(1)/j2[e+12>>2]),j2[r+16>>2]=j2[r+16>>2]+z2(z2(z2(j2[f-100>>2]*j2[b+604>>2])*t)*c),j2[(b=r+20|0)>>2]=z2(z2(t*z2(v*s))*c)+j2[b>>2],j2[(b=r+24|0)>>2]=z2(z2(t*z2(l*k))*c)+j2[b>>2],k=j2[d+612>>2],l=j2[f-60>>2],s=j2[d+608>>2],v=j2[f+-64>>2],t=j2[f>>2],c=z2(z2(1)/j2[e+12>>2]),j2[r+48>>2]=j2[r+48>>2]+z2(z2(z2(j2[f-68>>2]*j2[d+604>>2])*t)*c),j2[(b=r+52|0)>>2]=z2(z2(t*z2(v*s))*c)+j2[b>>2],j2[(r=r+56|0)>>2]=z2(z2(t*z2(l*k))*c)+j2[r>>2]),t=j2[f>>2],j2[o+36>>2]=t,j2[o+16>>2]<=z2(O2(t))&&(p2[o+20|0]=0),f=f+152|0,n=n-1|0;);if(1<=(0|(n=T2[A+8>>2])))for(b=T2[A+16>>2],d=g+64|0,B=48+g|0,i=32+g|0,r=144;(o=T2[(f=r+b|0)+96>>2])&&(T2[e+52>>2]?(t=j2[e+60>>2],c=j2[e+12>>2],j2[(o=f+32|0)>>2]=j2[f-80>>2]+j2[o>>2],j2[(o=f+36|0)>>2]=j2[f-76>>2]+j2[o>>2],j2[(o=f+40|0)>>2]=j2[f-72>>2]+j2[o>>2],j2[(o=f+48|0)>>2]=j2[f+-64>>2]+j2[o>>2],j2[(o=f+52|0)>>2]=j2[f-60>>2]+j2[o>>2],j2[(o=f+56|0)>>2]=j2[f-56>>2]+j2[o>>2],j2[f>>2]==z2(0)&&j2[f+4>>2]==z2(0)&&j2[f+8>>2]==z2(0)&&j2[f+16>>2]==z2(0)&&j2[f+20>>2]==z2(0)&&j2[f+24>>2]==z2(0)||(T2[12+g>>2]=0,j2[8+g>>2]=j2[f+24>>2]*t,j2[4+g>>2]=j2[f+20>>2]*t,j2[g>>2]=j2[f+16>>2]*t,W4(o=f-144|0,j2[f>>2],j2[f+4>>2],j2[f+8>>2],g,c,16+g|0),u=T2[(b=24+g|0)+4>>2],T2[(n=o+8|0)>>2]=T2[b>>2],T2[n+4>>2]=u,n=T2[20+g>>2],T2[o>>2]=T2[16+g>>2],T2[o+4>>2]=n,u=T2[(b=8+i|0)+4>>2],T2[(n=(o=f-128|0)+8|0)>>2]=T2[b>>2],T2[n+4>>2]=u,n=T2[4+i>>2],T2[o>>2]=T2[i>>2],T2[o+4>>2]=n,u=T2[(b=B+8|0)+4>>2],T2[(n=(o=f-112|0)+8|0)>>2]=T2[b>>2],T2[n+4>>2]=u,n=T2[B+4>>2],T2[o>>2]=T2[B>>2],T2[o+4>>2]=n,b=T2[(n=d+8|0)+4>>2],T2[(o=(f=f-96|0)+8|0)>>2]=T2[n>>2],T2[o+4>>2]=b,o=T2[d+4>>2],T2[f>>2]=T2[d>>2],T2[f+4>>2]=o,b=T2[A+16>>2]),t=j2[(f=r+b|0)+40>>2],c=j2[f+36>>2],k=j2[f+32>>2],o=T2[f+96>>2]):(k=z2(j2[f-80>>2]+j2[(n=f+32|0)>>2]),j2[n>>2]=k,c=z2(j2[f-76>>2]+j2[(n=f+36|0)>>2]),j2[n>>2]=c,t=z2(j2[f-72>>2]+j2[(n=f+40|0)>>2]),j2[n>>2]=t,j2[(n=f+48|0)>>2]=j2[f+-64>>2]+j2[n>>2],j2[(n=f+52|0)>>2]=j2[f-60>>2]+j2[n>>2],j2[(n=f+56|0)>>2]=j2[f-56>>2]+j2[n>>2]),l=j2[(f=r+b|0)- -64>>2],s=j2[f+68>>2],v=j2[f+72>>2],T2[o+384>>2]=0,j2[o+380>>2]=t+v,j2[o+376>>2]=c+s,j2[o+372>>2]=k+l,T2[o+304>>2]=T2[o+304>>2]+1,f=T2[A+16>>2]+r|0,t=j2[f+48>>2],c=j2[f+80>>2],k=j2[f+52>>2],l=j2[f+84>>2],s=j2[f+56>>2],v=j2[f+88>>2],f=T2[f+96>>2],T2[f+400>>2]=0,j2[f+396>>2]=s+v,j2[f+392>>2]=k+l,j2[f+388>>2]=t+c,T2[f+304>>2]=T2[f+304>>2]+1,T2[e+52>>2]&&(o=T2[A+16>>2]+r|0,f=T2[o+96>>2],T2[f+304>>2]=T2[f+304>>2]+1,a=T2[(u=(n=o-144|0)+8|0)+4>>2],T2[(b=f+12|0)>>2]=T2[u>>2],T2[b+4>>2]=a,b=T2[n+4>>2],T2[f+4>>2]=T2[n>>2],T2[f+8>>2]=b,a=T2[(u=(n=o-128|0)+8|0)+4>>2],T2[(b=f+28|0)>>2]=T2[u>>2],T2[b+4>>2]=a,u=T2[n+4>>2],T2[(b=f+20|0)>>2]=T2[n>>2],T2[b+4>>2]=u,u=T2[(n=o-112|0)+4>>2],T2[(b=f+36|0)>>2]=T2[n>>2],T2[b+4>>2]=u,u=T2[(n=n+8|0)+4>>2],T2[(b=f+44|0)>>2]=T2[n>>2],T2[b+4>>2]=u,u=T2[(b=(o=o-96|0)+8|0)+4>>2],T2[(n=f+60|0)>>2]=T2[b>>2],T2[n+4>>2]=u,n=T2[o+4>>2],T2[(f=f+52|0)>>2]=T2[o>>2],T2[f+4>>2]=n),b=T2[A+16>>2],T2[T2[96+(b+r|0)>>2]+212>>2]=-1,n=T2[A+8>>2]),r=r+244|0,(0|(Q=Q+1|0))<(0|n););return -1<T2[A+28>>2]||-1<T2[A+32>>2]||((f=T2[A+36>>2])&&S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+32>>2]=0,T2[A+36>>2]=0,p2[A+40|0]=1),T2[A+28>>2]=0,-1<T2[A+48>>2]||-1<T2[A+52>>2]||((f=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+52>>2]=0,T2[A+56>>2]=0,p2[A+60|0]=1),T2[A+48>>2]=0,-1<T2[A+68>>2]||-1<T2[A+72>>2]||((f=T2[A+76>>2])&&S2[A+80|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+72>>2]=0,T2[A+76>>2]=0,p2[A+80|0]=1),T2[A+68>>2]=0,-1<T2[A+88>>2]||-1<T2[A+92>>2]||((f=T2[A+96>>2])&&S2[A+100|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+92>>2]=0,T2[A+96>>2]=0,p2[A+100|0]=1),T2[A+88>>2]=0,-1<T2[A+8>>2]||-1<T2[A+12>>2]||((f=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+12>>2]=0,T2[A+16>>2]=0,p2[A+20|0]=1),T2[A+8>>2]=0,L2=80+g|0,z2(z2(0));},function(A,f,r,e,i,a,n,o,b,t){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0,n|=0,o|=0,b|=0,t|=0;var c,u,k,l=z2(0),s=z2(0),v=0,d=0,B=z2(0),Q=0,g=0;if(1&p2[b+72|0]){if(c=T2[A+68>>2],u=T2[A+28>>2],1<=(0|(d=T2[A+48>>2]))){if(i=P2(T2[A+232>>2],1664525)+1013904223|0,1!=(0|d)&&(e=T2[A+136>>2],r=T2[e+4>>2],a=(i=P2(i,1664525)+1013904223|0)^i>>>16,a^=a>>>8,a^=a>>>4,T2[e+4>>2]=T2[(a=e+((1&((a^=a>>>2)>>>1^a))<<2)|0)>>2],T2[a>>2]=r,2!=(0|d)&&(r=T2[e+8>>2],a=(i=P2(i,1664525)+1013904223|0)^i>>>16,a^=a>>>8,T2[e+8>>2]=T2[(a=e+((((a^=a>>>4)>>>2^a)>>>0)%3<<2)|0)>>2],T2[a>>2]=r,3!=(0|d)&&(r=T2[e+12>>2],a=(i=P2(i,1664525)+1013904223|0)^i>>>16,a^=a>>>8,T2[e+12>>2]=T2[(a=e+((3&((a^=a>>>4)>>>2^a))<<2)|0)>>2],T2[a>>2]=r,4!=(0|d)))))for(t=e+16|0,r=4;r=(a=r)+1|0,Q=T2[t>>2],k=t,v=i=P2(i,1664525)+1013904223|0,65535<a>>>0||(v=g=i>>>16^i,255<a>>>0||(v=g^=g>>>8,15<a>>>0||(v=g^g>>>4))),T2[k>>2]=T2[(a=((v>>>0)%(r>>>0)<<2)+e|0)>>2],T2[a>>2]=Q,t=t+4|0,(0|r)!=(0|d););T2[A+232>>2]=i;}if(!(T2[b+20>>2]<=(0|f))){if(1<=(0|u)){if(i=P2(T2[A+232>>2],1664525)+1013904223|0,1!=(0|u)&&(e=T2[A+116>>2],r=T2[e+4>>2],a=(i=P2(i,1664525)+1013904223|0)^i>>>16,a^=a>>>8,a^=a>>>4,T2[e+4>>2]=T2[(a=e+((1&((a^=a>>>2)>>>1^a))<<2)|0)>>2],T2[a>>2]=r,2!=(0|u)&&(r=T2[e+8>>2],a=(i=P2(i,1664525)+1013904223|0)^i>>>16,a^=a>>>8,T2[e+8>>2]=T2[(a=e+((((a^=a>>>4)>>>2^a)>>>0)%3<<2)|0)>>2],T2[a>>2]=r,3!=(0|u)&&(r=T2[e+12>>2],a=(i=P2(i,1664525)+1013904223|0)^i>>>16,a^=a>>>8,T2[e+12>>2]=T2[(a=e+((3&((a^=a>>>4)>>>2^a))<<2)|0)>>2],T2[a>>2]=r,4!=(0|u)))))for(t=e+16|0,r=4;r=(a=r)+1|0,g=T2[t>>2],d=t,v=i=P2(i,1664525)+1013904223|0,65535<a>>>0||(v=Q=i>>>16^i,255<a>>>0||(v=Q^=Q>>>8,15<a>>>0||(v=Q^Q>>>4))),T2[d>>2]=T2[(a=((v>>>0)%(r>>>0)<<2)+e|0)>>2],T2[a>>2]=g,t=t+4|0,(0|r)!=(0|u););T2[A+232>>2]=i;}if(!((0|c)<1)){if(i=P2(T2[A+232>>2],1664525)+1013904223|0,1!=(0|c)&&(e=T2[A+156>>2],r=T2[e+4>>2],a=(i=P2(i,1664525)+1013904223|0)^i>>>16,a^=a>>>8,a^=a>>>4,T2[e+4>>2]=T2[(a=e+((1&((a^=a>>>2)>>>1^a))<<2)|0)>>2],T2[a>>2]=r,2!=(0|c)&&(r=T2[e+8>>2],a=(i=P2(i,1664525)+1013904223|0)^i>>>16,a^=a>>>8,T2[e+8>>2]=T2[(a=e+((((a^=a>>>4)>>>2^a)>>>0)%3<<2)|0)>>2],T2[a>>2]=r,3!=(0|c)&&(r=T2[e+12>>2],a=(i=P2(i,1664525)+1013904223|0)^i>>>16,a^=a>>>8,T2[e+12>>2]=T2[(a=e+((3&((a^=a>>>4)>>>2^a))<<2)|0)>>2],T2[a>>2]=r,4!=(0|c)))))for(t=e+16|0,r=4;r=(a=r)+1|0,Q=T2[t>>2],g=t,v=i=P2(i,1664525)+1013904223|0,65535<a>>>0||(v=d=i>>>16^i,255<a>>>0||(v=d^=d>>>8,15<a>>>0||(v=d^d>>>4))),T2[g>>2]=T2[(a=((v>>>0)%(r>>>0)<<2)+e|0)>>2],T2[a>>2]=Q,t=t+4|0,(0|r)!=(0|c););T2[A+232>>2]=i;}}}if(1<=(0|(a=T2[A+48>>2])))for(r=i=0;e=T2[A+56>>2]+P2(T2[T2[A+136>>2]+i>>2],152)|0,T2[e+136>>2]>(0|f)&&(s=l,a=T2[A+16>>2],l=z2(n1[T2[A+212>>2]](a+P2(T2[e+144>>2],244)|0,a+P2(T2[e+148>>2],244)|0,e)),l=z2(s+z2(l*l)),a=T2[A+48>>2]),i=i+4|0,(0|(r=r+1|0))<(0|a););if(!(T2[b+20>>2]<=(0|f))){if(1<=(0|o))for(;f=T2[n>>2],S2[f+20|0]&&(f=Y4(A,T2[f+28>>2],j2[b+12>>2]),r=Y4(A,T2[T2[n>>2]+32>>2],j2[b+12>>2]),e=T2[n>>2],i=P2(f,244),f=T2[A+16>>2],n1[T2[T2[e>>2]+24>>2]](e,i+f|0,f+P2(r,244)|0,j2[b+12>>2])),n=n+4|0,o=o-1|0;);if(i=T2[A+28>>2],512&(f=T2[b+72>>2])){if(!((0|i)<1))for(e=(16&f?2:1)<<2,n=0,r=4;s=l,a=T2[A+16>>2],f=T2[A+36>>2]+P2(T2[T2[A+116>>2]+n>>2],152)|0,l=z2(n1[T2[A+216>>2]](a+P2(T2[f+144>>2],244)|0,a+P2(T2[f+148>>2],244)|0,f)),l=z2(s+z2(l*l)),(a=!((s=j2[f+100>>2])>z2(0)))||(f=T2[A+76>>2]+P2(T2[(T2[A+156>>2]+r|0)-4>>2],152)|0,B=j2[f+104>>2],j2[f+124>>2]=s*B,j2[f+120>>2]=s*z2(-B),B=l,o=T2[A+16>>2],l=z2(n1[T2[A+212>>2]](o+P2(T2[f+144>>2],244)|0,o+P2(T2[f+148>>2],244)|0,f)),l=z2(B+z2(l*l))),16&S2[b+72|0]&&(a||(f=T2[A+76>>2]+P2(T2[T2[A+156>>2]+r>>2],152)|0,B=j2[f+104>>2],j2[f+124>>2]=s*B,j2[f+120>>2]=s*z2(-B),s=l,a=T2[A+16>>2],l=z2(n1[T2[A+212>>2]](a+P2(T2[f+144>>2],244)|0,a+P2(T2[f+148>>2],244)|0,f)),l=z2(s+z2(l*l)))),n=n+4|0,r=r+e|0,i=i-1|0;);}else {if(1<=(0|i))for(t=0;s=l,r=T2[A+16>>2],f=T2[A+36>>2]+P2(T2[T2[A+116>>2]+t>>2],152)|0,l=z2(n1[T2[A+216>>2]](r+P2(T2[f+144>>2],244)|0,r+P2(T2[f+148>>2],244)|0,f)),l=z2(s+z2(l*l)),t=t+4|0,i=i-1|0;);if(!((0|(n=T2[A+68>>2]))<1))for(t=0;f=T2[A+76>>2]+P2(T2[T2[A+156>>2]+t>>2],152)|0,(s=j2[100+(T2[A+36>>2]+P2(T2[f+140>>2],152)|0)>>2])>z2(0)&&(B=j2[f+104>>2],j2[f+124>>2]=s*B,j2[f+120>>2]=s*z2(-B),s=l,r=T2[A+16>>2],l=z2(n1[T2[A+212>>2]](r+P2(T2[f+144>>2],244)|0,r+P2(T2[f+148>>2],244)|0,f)),l=z2(s+z2(l*l))),t=t+4|0,n=n-1|0;);}if(!((0|(n=T2[A+88>>2]))<1))for(t=148;f=T2[A+96>>2]+t|0,(s=j2[100+(T2[A+36>>2]+P2(T2[f-8>>2],152)|0)>>2])>z2(0)&&(B=s,s=j2[f-44>>2],B=z2(B*s),j2[f-24>>2]=s=s<B?s:B,j2[f-28>>2]=-s,s=l,r=T2[A+16>>2],l=z2(n1[T2[A+212>>2]](r+P2(T2[f-4>>2],244)|0,r+P2(T2[f>>2],244)|0,f-148|0)),l=z2(s+z2(l*l))),t=t+152|0,n=n-1|0;);}return z2(l);},function(A,f,r,e,i,a,n,o,b){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0,n|=0,o|=0,b|=0;var t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R=0,F=z2(0),W=0,m=z2(0),N=z2(0),V=0,J=z2(0),M=z2(0),I=z2(0),x=0,y=z2(0),U=z2(0),X=0,p=z2(0),T=z2(0),S=0,j=0,P=z2(0),z=z2(0),O=z2(0),H=z2(0),_=z2(0),L=z2(0),K=z2(0),q=z2(0),$=z2(0),A2=z2(0),f2=z2(0),r2=z2(0),e2=z2(0),i2=0,a2=z2(0),n2=z2(0),o2=z2(0),b2=z2(0),t2=z2(0),c2=z2(0),u2=z2(0),k2=z2(0),l2=0,s2=0,v2=0;if(L2=X=L2-256|0,T2[A+188>>2]=-1,(0|(b=T2[o+72>>2]))!=T2[A+224>>2]&&(T2[A+224>>2]=b,T2[A+220>>2]=26,T2[A+216>>2]=27,T2[A+212>>2]=28),1<=((T2[A+184>>2]=0)|r))for(b=f,W=r;T2[T2[b>>2]+212>>2]=-1,b=b+4|0,W=W-1|0;);if((0|(b=T2[A+12>>2]))<=(0|r)){if((b=r+1|0)&&(T2[5498]=T2[5498]+1,(W=K2(P2(b,244)+19|0))&&(T2[(v2=W+19&-16)-4>>2]=W)),1<=(0|(V=T2[A+8>>2])))for(S=64;l2=T2[A+16>>2]+S|0,W=T2[(j=l2+-64|0)+4>>2],T2[(R=(i2=S+v2|0)+-64|0)>>2]=T2[j>>2],T2[R+4>>2]=W,W=T2[(x=j+8|0)+4>>2],T2[(R=R+8|0)>>2]=T2[x>>2],T2[R+4>>2]=W,W=T2[(x=(j=l2-48|0)+8|0)+4>>2],T2[(R=(s2=i2-48|0)+8|0)>>2]=T2[x>>2],T2[R+4>>2]=W,W=T2[j+4>>2],T2[s2>>2]=T2[j>>2],T2[s2+4>>2]=W,W=T2[(x=(j=l2-32|0)+8|0)+4>>2],T2[(R=(s2=i2-32|0)+8|0)>>2]=T2[x>>2],T2[R+4>>2]=W,W=T2[j+4>>2],T2[s2>>2]=T2[j>>2],T2[s2+4>>2]=W,W=T2[(j=l2-16|0)+4>>2],T2[(R=i2-16|0)>>2]=T2[j>>2],T2[R+4>>2]=W,W=T2[(x=j+8|0)+4>>2],T2[(R=R+8|0)>>2]=T2[x>>2],T2[R+4>>2]=W,$2(i2,l2,180),S=S+244|0,V=V-1|0;);(W=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[W-4>>2])),T2[A+16>>2]=v2,T2[A+12>>2]=b,p2[A+20|0]=1;}if(d2(8+X|0,0,244),(0|(W=T2[A+8>>2]))<=-1)for((0|b)<=-1&&((b=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2])),T2[A+12>>2]=0,T2[A+16>>2]=0,p2[A+20|0]=1),S=P2(W,244),s2=72+X|0,l2=56+X|0,x=40+X|0,V=24+X|0;b=T2[12+X>>2],i2=T2[A+16>>2]+S|0,T2[i2>>2]=T2[8+X>>2],T2[i2+4>>2]=b,b=T2[(R=16+X|0)+4>>2],T2[(j=i2+8|0)>>2]=T2[R>>2],T2[j+4>>2]=b,b=T2[V+4>>2],T2[(R=i2+16|0)>>2]=T2[V>>2],T2[R+4>>2]=b,b=T2[(R=V+8|0)+4>>2],T2[(j=i2+24|0)>>2]=T2[R>>2],T2[j+4>>2]=b,b=T2[x+4>>2],T2[(R=i2+32|0)>>2]=T2[x>>2],T2[R+4>>2]=b,b=T2[(R=x+8|0)+4>>2],T2[(j=i2+40|0)>>2]=T2[R>>2],T2[j+4>>2]=b,b=T2[l2+4>>2],T2[(R=i2+48|0)>>2]=T2[l2>>2],T2[R+4>>2]=b,b=T2[(R=l2+8|0)+4>>2],T2[(j=i2+56|0)>>2]=T2[R>>2],T2[j+4>>2]=b,$2(i2- -64|0,s2,180),S=S+244|0,(b=W)>>>0<=(W=b+1|0)>>>0;);if(1<=((T2[A+8>>2]=0)|r))for(;x=Y4(A,T2[f>>2],j2[o+12>>2]),(R=T2[f>>2])&&2&T2[R+252>>2]&&j2[R+404>>2]!=z2(0)&&(V=T2[A+16>>2],2&(S=T2[R+564>>2])&&(a2=j2[R+388>>2],t2=j2[R+4>>2],J=(F=j2[R+456>>2])!=z2(0)?z2(z2(1)/F):z2(0),n2=j2[R+20>>2],m=z2(J*n2),c2=j2[R+8>>2],I=(F=j2[R+460>>2])!=z2(0)?z2(z2(1)/F):z2(0),P=j2[R+24>>2],N=z2(I*P),f2=j2[R+12>>2],y=(F=j2[R+464>>2])!=z2(0)?z2(z2(1)/F):z2(0),U=j2[R+28>>2],F=z2(y*U),L=j2[R+392>>2],q=j2[R+36>>2],p=j2[R+40>>2],M=j2[R+44>>2],e2=j2[R+396>>2],z=z2(z2(z2(a2*z2(z2(z2(t2*m)+z2(c2*N))+z2(f2*F)))+z2(z2(z2(z2(n2*m)+z2(P*N))+z2(U*F))*L))+z2(z2(z2(z2(m*q)+z2(N*p))+z2(F*M))*e2)),m=z2(J*t2),N=z2(I*c2),F=z2(y*f2),N=z2(z2(z2(z2(z2(z2(t2*m)+z2(c2*N))+z2(f2*F))*a2)+z2(L*z2(z2(z2(m*n2)+z2(N*P))+z2(F*U))))+z2(z2(z2(z2(m*q)+z2(N*p))+z2(F*M))*e2)),K=z2(z2(a2*z)-z2(L*N)),J=z2(J*q),m=z2(I*p),F=z2(y*M),F=z2(z2(e2*z2(z2(z2(q*J)+z2(p*m))+z2(M*F)))+z2(z2(a2*z2(z2(z2(t2*J)+z2(c2*m))+z2(f2*F)))+z2(L*z2(z2(z2(n2*J)+z2(P*m))+z2(U*F))))),M=z2(z2(L*F)-z2(e2*z)),I=z2(z2(e2*N)-z2(a2*F)),F=z2(z2(K*K)+z2(z2(M*M)+z2(I*I))),T=j2[o+84>>2],F>z2(T*T)&&(F=z2(z2(z2(1)/z2(_2(F)))*T),K=z2(K*F),M=z2(M*F),I=z2(I*F)),z=j2[R+364>>2],T=j2[R+332>>2],J=j2[R+348>>2],m=j2[R+360>>2],N=j2[R+328>>2],F=j2[R+344>>2],W=V+P2(x,244)|0,y=j2[o+12>>2],j2[W+224>>2]=j2[W+224>>2]-z2(z2(z2(z2(M*j2[R+324>>2])+z2(I*j2[R+340>>2]))+z2(K*j2[R+356>>2]))*y),j2[(b=W+228|0)>>2]=j2[b>>2]-z2(y*z2(z2(z2(M*N)+z2(I*F))+z2(K*m))),j2[(b=W+232|0)>>2]=j2[b>>2]-z2(y*z2(z2(z2(M*T)+z2(I*J))+z2(K*z))),S=T2[R+564>>2]),4&S&&(u2=j2[R+36>>2],I=(F=j2[R+456>>2])!=z2(0)?z2(z2(1)/F):z2(0),m=z2(u2*I),r2=j2[R+40>>2],y=(F=j2[R+460>>2])!=z2(0)?z2(z2(1)/F):z2(0),N=z2(r2*y),K=j2[R+44>>2],M=(F=j2[R+464>>2])!=z2(0)?z2(z2(1)/F):z2(0),F=z2(K*M),k2=j2[o+12>>2],a2=z2(k2*z2(0)),O=j2[R+396>>2],o2=z2(z2(z2(u2*m)+z2(r2*N))+z2(K*F)),H=j2[R+388>>2],L=j2[R+4>>2],P=j2[R+8>>2],f2=j2[R+12>>2],e2=z2(z2(z2(L*m)+z2(P*N))+z2(f2*F)),z=z2(H*e2),_=j2[R+392>>2],U=j2[R+20>>2],q=j2[R+24>>2],p=j2[R+28>>2],t2=z2(z2(z2(U*m)+z2(q*N))+z2(p*F)),T=z2(_*t2),$=z2(z2(O*o2)+z2(z+T)),m=z2(I*U),N=z2(y*q),F=z2(M*p),n2=z2(z2(z2(L*m)+z2(P*N))+z2(f2*F)),J=z2(H*n2),b2=z2(z2(z2(U*m)+z2(q*N))+z2(p*F)),c2=z2(z2(z2(m*u2)+z2(N*r2))+z2(F*K)),m=z2(O*c2),A2=z2(z2(J+z2(_*b2))+m),I=z2(I*L),y=z2(y*P),F=z2(M*f2),L=z2(z2(z2(L*I)+z2(P*y))+z2(f2*F)),p=z2(z2(z2(I*U)+z2(y*q))+z2(F*p)),N=z2(_*p),M=z2(z2(z2(I*u2)+z2(y*r2))+z2(F*K)),F=z2(O*M),r2=z2(z2(z2(H*L)+N)+F),K=z2(z2($+z2(z2(z2(H*A2)-z2(_*r2))*k2))-z2(a2+$)),I=z2(e2+z2(z2(A2+z2(z2(J-z2(_*L))+z2(e2*z2(0))))*k2)),P=z2(c2+z2(z2(r2+z2(z2(F+z2(c2*z2(0)))-z2(H*o2)))*k2)),f2=z2(p+z2(z2(z2(z2(z2(p*z2(0))-z2(O*b2))+T)+$)*k2)),U=z2(b2+z2(z2(z2(z2(O*p)+z2(b2*z2(0)))-z2(H*t2))*k2)),q=z2(M+z2(z2(z2(z2(z2(M*z2(0))-m)+z2(_*o2))-A2)*k2)),m=z2(z2(P*f2)-z2(U*q)),y=z2(L+z2(z2(z2(z2(L*z2(0))-z2(O*n2))+z2(_*e2))*k2)),p=z2(o2+z2(z2(z2(z2(H*c2)-z2(_*M))+z2(o2*z2(0)))*k2)),M=z2(t2+z2(z2(z2(z2(z2(H*b2)-N)+z2(t2*z2(0)))-r2)*k2)),N=z2(z2(U*p)-z2(M*P)),T=z2(n2+z2(z2(z2(z2(z2(O*L)+z2(n2*z2(0)))-z)-$)*k2)),F=z2(z2(M*q)-z2(p*f2)),J=z2(z2(I*m)+z2(z2(y*N)+z2(T*F))),J=z2(O2(J))>z2(1.1920928955078125e-7)?z2(z2(1)/J):J,W=V+P2(x,244)|0,z=z2(K*m),m=z2(z2(r2+z2(z2(z2(_*$)-z2(O*A2))*k2))-z2(a2+r2)),L=z2(N*m),N=z2(z2(A2+z2(z2(z2(O*r2)-z2(H*$))*k2))-z2(a2+A2)),j2[W+224>>2]=z2(z2(H-z2(z2(z+z2(L+z2(N*F)))*J))-H)+j2[W+224>>2],j2[(b=W+228|0)>>2]=z2(z2(_-z2(z2(z2(I*z2(z2(P*m)-z2(q*N)))+z2(z2(y*z2(z2(p*N)-z2(P*K)))+z2(T*z2(z2(q*K)-z2(p*m)))))*J))-_)+j2[b>>2],j2[(b=W+232|0)>>2]=z2(z2(O-z2(z2(z2(I*z2(z2(f2*N)-z2(U*m)))+z2(z2(y*z2(z2(U*K)-z2(M*N)))+z2(T*z2(z2(M*m)-z2(f2*K)))))*J))-O)+j2[b>>2],S=T2[R+564>>2]),8&S&&(z=j2[R+456>>2],T=j2[R+464>>2],J=j2[R+460>>2],r2=j2[R+396>>2],K=j2[R+392>>2],a2=j2[R+388>>2],O=j2[o+12>>2],C4(R+4|0,8+X|0),H=j2[16+X>>2],_=j2[20+X>>2],$=j2[12+X>>2],M=z2(z2(K*H)+z2(z2(a2*_)-z2(r2*$))),A2=j2[8+X>>2],m=z2(z2(z2(a2*A2)+z2(K*$))+z2(r2*H)),N=z2(z2(a2*$)+z2(z2(r2*_)-z2(K*A2))),F=z2(z2(r2*A2)+z2(z2(K*_)-z2(a2*H))),o2=z2(z2(z2($*M)+z2(z2(H*m)+z2(_*N)))-z2(A2*F)),I=z2(o2*z2(0)),b2=z2(z2(z2(H*F)+z2(z2(A2*m)+z2(_*M)))-z2($*N)),y=z2(b2*z2(0)),e2=J!=z2(0)?z2(z2(1)/J):z2(0),u2=z2(z2(z2(A2*N)+z2(z2($*m)+z2(_*F)))-z2(H*M)),t2=z2(I+z2(y+z2(e2*u2))),n2=z!=z2(0)?z2(z2(1)/z):z2(0),f2=z2(z2(O*z2(z2(z2(y-z2(n2*u2))+z2(0))+t2))+z2(0)),J=T!=z2(0)?z2(z2(1)/T):z2(0),F=z2(u2*z2(0)),P=z2(z2(o2*J)+z2(y+F)),U=z2(I+z2(z2(n2*b2)+F)),L=z2(O*z2(z2(o2*U)-z2(b2*P))),m=z2(o2*z2(-0)),q=z2(n2+z2(O*z2(F+z2(z2(n2*z2(0))+m)))),N=z2(u2*z2(-0)),c2=z2(z2(O*z2(z2(z2(N+z2(e2*b2))+z2(0))-U))+z2(0)),p=z2(z2(O*z2(z2(F+z2(z2(0)-z2(e2*o2)))+P))+z2(0)),M=z2(z2(O*z2(z2(z2(I+z2(0))-z2(J*b2))+U))+z2(0)),F=z2(b2*z2(-0)),z=z2(e2+z2(O*z2(F+z2(z2(e2*z2(0))+I)))),I=z2(z2(O*z2(z2(z2(J*u2)+z2(m+z2(0)))-t2))+z2(0)),m=z2(z2(p*M)-z2(z*I)),y=z2(J+z2(O*z2(z2(J*z2(0))+z2(N+y)))),N=z2(z2(z*y)-z2(c2*M)),T=z2(z2(O*z2(z2(F+z2(z2(n2*o2)+z2(0)))-P))+z2(0)),F=z2(z2(c2*I)-z2(y*p)),J=z2(z2(f2*m)+z2(z2(q*N)+z2(T*F))),J=z2(O2(J))>z2(1.1920928955078125e-7)?z2(z2(1)/J):J,W=V+P2(x,244)|0,P=z2(O*z2(z2(u2*P)-z2(o2*t2))),U=z2(O*z2(z2(b2*t2)-z2(u2*U))),z=z2(o2-z2(z2(z2(f2*z2(z2(p*L)-z2(z*P)))+z2(z2(q*z2(z2(z*U)-z2(c2*L)))+z2(T*z2(z2(c2*P)-z2(p*U)))))*J)),T=z2(u2-z2(z2(z2(f2*z2(z2(M*P)-z2(I*L)))+z2(z2(q*z2(z2(y*L)-z2(M*U)))+z2(T*z2(z2(I*U)-z2(y*P)))))*J)),F=z2(b2-z2(z2(z2(U*m)+z2(z2(P*N)+z2(L*F)))*J)),J=z2(z2(z2(_*z)+z2(A2*T))-z2($*F)),m=z2(z2(z2(_*F)+z2($*z))-z2(H*T)),N=z2(z2(z2(F*z2(-A2))-z2($*T))-z2(H*z)),F=z2(z2(z2(H*F)+z2(_*T))-z2(A2*z)),j2[W+224>>2]=z2(z2(z2($*J)+z2(z2(z2(_*m)-z2(A2*N))-z2(H*F)))-a2)+j2[W+224>>2],j2[(b=W+228|0)>>2]=z2(z2(z2(H*m)+z2(z2(z2(_*F)-z2($*N))-z2(A2*J)))-K)+j2[b>>2],j2[(b=W+232|0)>>2]=z2(z2(z2(A2*F)+z2(z2(z2(_*J)-z2(H*N))-z2($*m)))-r2)+j2[b>>2])),f=f+4|0,r=r-1|0;);if(1<=(0|n))for(b=a,W=n;f=T2[b>>2],n1[T2[T2[f>>2]+8>>2]](f),b=b+4|(T2[f+36>>2]=0),W=W-1|0;);if(!((0|n)<=(0|(f=T2[A+168>>2]))||T2[A+172>>2]>=(0|n))){if(W=0,n&&(T2[5498]=T2[5498]+1,(r=K2(19+(n<<3)|0))&&(T2[(W=r+19&-16)-4>>2]=r)),1<=(0|f))for(b=0;V=T2[A+176>>2]+b|0,r=T2[V+4>>2],T2[(x=b+W|0)>>2]=T2[V>>2],T2[x+4>>2]=r,b=b+8|0,f=f-1|0;);(f=T2[A+176>>2])&&S2[A+180|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+176>>2]=W,T2[A+172>>2]=n,p2[A+180|0]=1;}if((0|(T2[A+168>>2]=n))<1)S=0;else for(W=a,V=n,S=r=0;b=T2[A+176>>2],f=T2[W>>2],(x=T2[f+44>>2])&&(T2[x>>2]=0,T2[x+4>>2]=0,T2[(f=x+56|0)>>2]=0,T2[f+4>>2]=0,T2[(f=x+48|0)>>2]=0,T2[f+4>>2]=0,T2[(f=x+40|0)>>2]=0,T2[f+4>>2]=0,T2[(f=x+32|0)>>2]=0,T2[f+4>>2]=0,T2[(f=x+24|0)>>2]=0,T2[f+4>>2]=0,T2[(f=x+16|0)>>2]=0,T2[f+4>>2]=0,T2[(f=x+8|0)>>2]=0,T2[f+4>>2]=0,f=T2[W>>2]),b=r+b|0,W=W+4|0,r=r+8|0,S=(f=S2[f+20|0]?(n1[T2[T2[f>>2]+16>>2]](f,b),T2[b>>2]):(T2[b>>2]=0,T2[b+4>>2]=0))+S|0,V=V-1|0;);if(!((0|S)<=(0|(f=T2[A+48>>2]))||T2[A+52>>2]>=(0|S))){if(W=0,S&&(T2[5498]=T2[5498]+1,(r=K2(P2(S,152)+19|0))&&(T2[(W=r+19&-16)-4>>2]=r)),1<=(0|f))for(b=0;$2(b+W|0,T2[A+56>>2]+b|0,152),b=b+152|0,f=f-1|0;);(f=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+56>>2]=W,T2[A+52>>2]=S,p2[A+60|0]=1;}if(T2[A+48>>2]=S,1<=(0|n))for(f=T2[A+176>>2],W=v2=0;;){if(C=W,T2[(g=(G=v2<<3)+f|0)>>2]){if(Q=T2[(w=(v2<<2)+a|0)>>2],t=T2[Q+32>>2],r=T2[A+56>>2],S=Y4(A,c=T2[Q+28>>2],j2[o+12>>2]),x=Y4(A,t,j2[o+12>>2]),f=T2[Q+24>>2],b=T2[o+20>>2],(0|(V=0<(0|f)?f:b))>T2[A+184>>2]&&(T2[A+184>>2]=V),R=r+P2(W,152)|0,W=T2[A+16>>2],1<=T2[g>>2]){for(b=R+148|0,r=0;d2(b-148|0,0,152),T2[(f=b-28|0)>>2]=-8388609,T2[f+4>>2]=2139095039,T2[b>>2]=x,T2[b-4>>2]=S,T2[(f=b-52|0)>>2]=0,T2[f+4>>2]=0,T2[b-12>>2]=V,b=b+152|0,(0|(r=r+1|0))<T2[g>>2];);b=T2[o+20>>2];}if(u=W+P2(S,244)|0,T2[(f=u)+144>>2]=0,T2[f+148>>2]=0,T2[(f=f+152|0)>>2]=0,T2[f+4>>2]=0,T2[(f=160+u|0)>>2]=0,T2[f+4>>2]=0,T2[(f=168+u|0)>>2]=0,T2[f+4>>2]=0,T2[64+u>>2]=0,T2[68+u>>2]=0,T2[(f=88+u|0)>>2]=0,T2[f+4>>2]=0,T2[(f=80+u|0)>>2]=0,T2[f+4>>2]=0,T2[(f=72+u|0)>>2]=0,T2[f+4>>2]=0,r=W+P2(x,244)|0,T2[(f=r)+144>>2]=0,T2[f+148>>2]=0,T2[(f=f+152|0)>>2]=0,T2[f+4>>2]=0,T2[(f=r+160|0)>>2]=0,T2[f+4>>2]=0,T2[(f=r+168|0)>>2]=0,T2[f+4>>2]=0,T2[r+64>>2]=0,T2[r+68>>2]=0,T2[(f=r+72|0)>>2]=0,T2[f+4>>2]=0,T2[(f=r+80|0)>>2]=0,T2[f+4>>2]=0,T2[(f=r+88|0)>>2]=0,T2[f+4>>2]=0,j2[R+116>>2]=j2[o+40>>2],T2[36+X>>2]=R+112,T2[32+X>>2]=38,T2[28+X>>2]=R+32,T2[52+X>>2]=b,T2[48+X>>2]=R+124,T2[44+X>>2]=R+120,T2[40+X>>2]=R+116,j2[56+X>>2]=j2[o+4>>2],T2[24+X>>2]=R+48,T2[20+X>>2]=R,T2[16+X>>2]=R+16,j2[12+X>>2]=j2[o+32>>2],j2[8+X>>2]=z2(1)/j2[o+12>>2],f=T2[w>>2],n1[T2[T2[f>>2]+20>>2]](f,8+X|0),1<=T2[g>>2])for(b=R+68|0,E=r+232|0,D=r+228|0,h=r+224|0,Z=r+216|0,Y=r+212|0,i2=r+208|0,l2=r+240|0,s2=232+u|0,j=228+u|0,R=224+u|0,S=216+u|0,x=212+u|0,V=208+u|0,W=240+u|0,r=0;(F=j2[T2[w>>2]+16>>2])<=j2[(f=b+56|0)>>2]&&(j2[f>>2]=F),(F=z2(-F))>=j2[(f=b+52|0)>>2]&&(j2[f>>2]=F),T2[b- -64>>2]=Q,f=T2[Q+28>>2],U=j2[f+328>>2],q=j2[f+332>>2],p=j2[f+608>>2],M=j2[f+348>>2],I=j2[f+340>>2],y=j2[f+344>>2],z=j2[f+612>>2],T=j2[f+364>>2],J=j2[f+356>>2],m=j2[f+360>>2],N=j2[f+604>>2],F=j2[f+324>>2],T2[b+8>>2]=0,k=j2[b-68>>2],l=j2[b+-64>>2],s=j2[b-60>>2],j2[b+4>>2]=z*z2(z2(z2(J*k)+z2(m*l))+z2(T*s)),j2[b>>2]=p*z2(z2(z2(k*I)+z2(l*y))+z2(s*M)),j2[b-4>>2]=N*z2(z2(z2(F*k)+z2(U*l))+z2(q*s)),f=T2[Q+32>>2],U=j2[f+328>>2],q=j2[f+332>>2],p=j2[f+608>>2],M=j2[f+348>>2],I=j2[f+340>>2],y=j2[f+344>>2],z=j2[f+612>>2],T=j2[f+364>>2],J=j2[f+356>>2],m=j2[f+360>>2],N=j2[f+604>>2],F=j2[f+324>>2],T2[b+24>>2]=0,v=j2[b-36>>2],d=j2[b-32>>2],B=j2[b-28>>2],j2[b+20>>2]=z*z2(z2(z2(J*v)+z2(m*d))+z2(T*B)),j2[b+16>>2]=p*z2(z2(z2(v*I)+z2(d*y))+z2(B*M)),j2[b+12>>2]=N*z2(z2(z2(F*v)+z2(U*d))+z2(q*B)),k2=z2(0),O=j2[b-52>>2],F=j2[c+404>>2],H=j2[b-48>>2],_=j2[b-44>>2],m=z2(z2(z2(z2(O*z2(O*F))+z2(H*z2(F*H)))+z2(_*z2(F*_)))+z2(z2(z2(k*z2(z2(z2(k*j2[c+324>>2])+z2(l*j2[c+328>>2]))+z2(s*j2[c+332>>2])))+z2(l*z2(z2(z2(k*j2[c+340>>2])+z2(l*j2[c+344>>2]))+z2(s*j2[c+348>>2]))))+z2(s*z2(z2(z2(k*j2[c+356>>2])+z2(l*j2[c+360>>2]))+z2(s*j2[c+364>>2]))))),$=j2[b-20>>2],F=j2[t+404>>2],A2=j2[b-16>>2],o2=j2[b-12>>2],F=z2(z2(m+z2(z2(z2($*z2($*F))+z2(A2*z2(F*A2)))+z2(o2*z2(F*o2))))+z2(z2(z2(v*z2(z2(z2(v*j2[t+324>>2])+z2(d*j2[t+328>>2]))+z2(B*j2[t+332>>2])))+z2(d*z2(z2(z2(v*j2[t+340>>2])+z2(d*j2[t+344>>2]))+z2(B*j2[t+348>>2]))))+z2(B*z2(z2(z2(v*j2[t+356>>2])+z2(d*j2[t+360>>2]))+z2(B*j2[t+364>>2]))))),b2=z2(O2(F))>z2(1.1920928955078125e-7)?z2(z2(1)/F):z2(0),j2[b+40>>2]=b2,u2=z2(0),r2=z2(0),K=z2(0),a2=z2(0),L=z2(0),e2=z2(0),T2[W>>2]&&(L=j2[j>>2],a2=j2[R>>2],r2=j2[x>>2],K=j2[V>>2],u2=j2[S>>2],e2=j2[s2>>2]),t2=z2(0),n2=z2(0),c2=z2(0),P=z2(0),f2=z2(0),T2[l2>>2]&&(P=j2[D>>2],c2=j2[h>>2],t2=j2[Y>>2],n2=j2[i2>>2],k2=j2[Z>>2],f2=j2[E>>2]),U=j2[c+380>>2],q=j2[c+372>>2],p=j2[c+376>>2],M=j2[c+396>>2],I=j2[c+388>>2],y=j2[c+392>>2],z=j2[t+380>>2],T=j2[t+372>>2],J=j2[t+376>>2],m=j2[t+396>>2],N=j2[t+388>>2],F=j2[t+392>>2],T2[b+32>>2]=0,j2[(f=b+44|0)>>2]=z2(b2*j2[f>>2])+z2(b2*z2(z2(0)-z2(j2[56+X>>2]*z2(z2(z2(z2(z2(O*z2(K+q))+z2(H*z2(r2+p)))+z2(_*z2(u2+U)))+z2(z2(z2(k*z2(a2+I))+z2(l*z2(L+y)))+z2(s*z2(e2+M))))+z2(z2(z2(z2($*z2(n2+T))+z2(A2*z2(t2+J)))+z2(o2*z2(k2+z)))+z2(z2(z2(v*z2(c2+N))+z2(d*z2(P+F)))+z2(B*z2(f2+m)))))))),b=b+152|0,(0|(r=r+1|0))<T2[g>>2];);f=T2[A+176>>2],r=T2[G+f>>2];}else r=0;if(W=C+r|0,(0|(v2=v2+1|0))==(0|n))break;}if(n1[T2[T2[A>>2]+28>>2]](A,e,i,o),n=T2[A+68>>2],W=T2[A+28>>2],V=T2[A+128>>2],!((0|(a=T2[A+48>>2]))<=(0|V)||(0|a)<=T2[A+132>>2])){r=0,a&&(T2[5498]=T2[5498]+1,(f=K2(19+(a<<2)|0))&&(T2[(r=f+19&-16)-4>>2]=f)),e=T2[A+136>>2];A:{if(1<=(0|V))for(b=r,f=e;T2[b>>2]=T2[f>>2],b=b+4|0,f=f+4|0,V=V-1|0;);else if(!e)break A;S2[A+140|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]));}T2[A+136>>2]=r,T2[A+132>>2]=a,p2[A+140|0]=1;}if(T2[A+128>>2]=a,16&S2[o+72|0]){if(!((0|(i=W<<1))<=(0|(V=T2[A+108>>2]))||(0|i)<=T2[A+112>>2])){r=0,W&&(T2[5498]=T2[5498]+1,(f=K2(19+(W<<3)|0))&&(T2[(r=f+19&-16)-4>>2]=f)),e=T2[A+116>>2];A:{if(1<=(0|V))for(b=r,f=e;T2[b>>2]=T2[f>>2],b=b+4|0,f=f+4|0,V=V-1|0;);else if(!e)break A;S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]));}T2[A+116>>2]=r,T2[A+112>>2]=i,p2[A+120|0]=1;}T2[A+108>>2]=i;}else {if(!((0|W)<=(0|(V=T2[A+108>>2]))||(0|W)<=T2[A+112>>2])){r=0,W&&(T2[5498]=T2[5498]+1,(f=K2(19+(W<<2)|0))&&(T2[(r=f+19&-16)-4>>2]=f)),e=T2[A+116>>2];A:{if(1<=(0|V))for(b=r,f=e;T2[b>>2]=T2[f>>2],b=b+4|0,f=f+4|0,V=V-1|0;);else if(!e)break A;S2[A+120|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]));}T2[A+116>>2]=r,T2[A+112>>2]=W,p2[A+120|0]=1;}T2[A+108>>2]=W;}if(!((0|n)<=(0|(V=T2[A+148>>2]))||(0|n)<=T2[A+152>>2])){r=0,n&&(T2[5498]=T2[5498]+1,(f=K2(19+(n<<2)|0))&&(T2[(r=f+19&-16)-4>>2]=f)),e=T2[A+156>>2];A:{if(1<=(0|V))for(b=r,f=e;T2[b>>2]=T2[f>>2],b=b+4|0,f=f+4|0,V=V-1|0;);else if(!e)break A;S2[A+160|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]));}T2[A+156>>2]=r,T2[A+152>>2]=n,p2[A+160|0]=1;}if(T2[A+148>>2]=n,1<=(0|a))for(b=T2[A+136>>2],f=0;T2[b>>2]=f,b=b+4|0,(0|a)!=(0|(f=f+1|0)););if(1<=(0|W))for(b=T2[A+116>>2],f=0;T2[b>>2]=f,b=b+4|0,(0|W)!=(0|(f=f+1|0)););if(1<=(0|n))for(b=T2[A+156>>2],f=0;T2[b>>2]=f,b=b+4|0,(0|n)!=(0|(f=f+1|0)););return L2=256+X|0,z2(z2(0));},function(A,f,r,e,i,a,n,o,b){A|=0,f|=0,r|=0,e|=0,i|=0,a|=0,n|=0,o|=0,b|=0;var t,c,u,k=0,l=0;n1[T2[T2[A>>2]+32>>2]](A,f,r,e,i,a,n,o,b),k=T2[A+184>>2];A:if(!((0|(l=(0|(l=T2[o+20>>2]))<(0|k)?k:l))<1))for(u=l-1|0,k=1;;){if(c=z2(n1[T2[T2[A>>2]+40>>2]](A,t=k-1|0,f,r,e,i,a,n,o,b)),j2[A+228>>2]=c,(0|u)<=(0|t))break A;if(j2[o+92>>2]>=c)break A;if(t=(0|k)<(0|l),k=k+1|0,!t)break;}return z2(z2(0));},I,N4,M,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t=0;T2[(o=604+(L2=t=L2-688|0)|0)>>2]=1065353216,T2[4+o>>2]=0,n=T2[f+20>>2],T2[(o=656+t|0)>>2]=T2[f+16>>2],T2[4+o>>2]=n,n=T2[f+36>>2],T2[(o=672+t|0)>>2]=T2[f+32>>2],T2[4+o>>2]=n,i=T2[4+(n=f+8|0)>>2],T2[(o=648+t|0)>>2]=T2[n>>2],T2[4+o>>2]=i,i=T2[4+(n=f+24|0)>>2],T2[(o=664+t|0)>>2]=T2[n>>2],T2[4+o>>2]=i,i=T2[4+(n=f+40|0)>>2],T2[(o=680+t|0)>>2]=T2[n>>2],T2[4+o>>2]=i,T2[636+t>>2]=0,T2[596+t>>2]=1065353216,T2[600+t>>2]=1065353216,T2[588+t>>2]=0,T2[592+t>>2]=0,T2[580+t>>2]=1,T2[584+t>>2]=0,T2[576+t>>2]=13376,o=T2[f+4>>2],T2[640+t>>2]=T2[f>>2],T2[644+t>>2]=o,j2[628+t>>2]=j2[A+204>>2],p2[548+t|0]=0,T2[524+t>>2]=953267991,T2[208+t>>2]=14688,T2[204+t>>2]=0,T2[184+t>>2]=17352,T2[196+t>>2]=T2[A+4>>2],T2[200+t>>2]=576+t,T2[192+t>>2]=208+t,T2[188+t>>2]=216+t,T2[8+t>>2]=12640,T2[172+t>>2]=1065353216,T2[176+t>>2]=0,j2[180+t>>2]=j2[A+208>>2],N4(184+t|0,A+8|0,A+72|0,f=A+136|0,f,8+t|0)&&(a=j2[140+t>>2],n=j2[144+t>>2],i=j2[148+t>>2],(o=z2(z2(z2(a*a)+z2(n*n))+z2(i*i)))>z2(9999999747378752e-20)&&(b=j2[172+t>>2])<j2[A+200>>2]&&(f=i,i=z2(z2(1)/z2(_2(o))),j2[148+t>>2]=f*i,j2[144+t>>2]=n*i,j2[140+t>>2]=a*i,z2(n1[T2[T2[A>>2]+12>>2]](A,140+t|0,156+t|0,b,r,e)))),T2[576+t>>2]=7916,(A=T2[636+t>>2])&&(n1[T2[T2[A>>2]>>2]](A),(A=T2[636+t>>2])&&(T2[5499]=T2[5499]+1,q2(T2[A-4>>2]))),L2=688+t|0;},J4,function(A){var f,r,e=0,i=0,a=0;if(T2[(A|=0)>>2]=17524,1<=(0|(e=T2[A+8>>2])))for(;r=T2[T2[A+16>>2]+i>>2],(f=T2[r+188>>2])&&(e=T2[A+68>>2],e=0|n1[T2[T2[e>>2]+36>>2]](e),n1[T2[T2[e>>2]+40>>2]](e,f,T2[A+24>>2]),e=T2[A+68>>2],n1[T2[T2[e>>2]+12>>2]](e,f,T2[A+24>>2]),T2[r+188>>2]=0,e=T2[A+8>>2]),i=i+4|0,(0|(a=a+1|0))<(0|e););(e=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2])),u(A);},function(A){A|=0;var f=0,r=0,e=z2(0),i=z2(0),a=0,n=z2(0),o=z2(0),b=z2(0),t=z2(0),c=z2(0),u=0,k=0;if(L2=f=L2+-64|0,1<=(0|(a=T2[A+8>>2])))for(;;){r=T2[T2[A+16>>2]+u>>2];A:{f:if(!S2[A+76|0])switch(T2[r+220>>2]-2|0){case 0:case 3:break A;default:break f;}a=T2[r+192>>2],n1[T2[T2[a>>2]+8>>2]](a,r+4|0,48+f|0,32+f|0),i=z2(j2[48+f>>2]+z2(-.019999999552965164)),j2[48+f>>2]=i,n=z2(j2[52+f>>2]+z2(-.019999999552965164)),j2[52+f>>2]=n,o=z2(j2[56+f>>2]+z2(-.019999999552965164)),j2[56+f>>2]=o,e=z2(j2[32+f>>2]+z2(.019999999552965164)),j2[32+f>>2]=e,b=z2(j2[36+f>>2]+z2(.019999999552965164)),j2[36+f>>2]=b,t=z2(j2[40+f>>2]+z2(.019999999552965164)),j2[40+f>>2]=t,S2[A+44|0]&&2==T2[r+252>>2]&&(3&S2[r+204|0]||(a=T2[r+192>>2],n1[T2[T2[a>>2]+8>>2]](a,r+68|0,16+f|0,f),n=z2(j2[16+f>>2]+z2(-.019999999552965164)),j2[16+f>>2]=n,o=z2(j2[20+f>>2]+z2(-.019999999552965164)),j2[20+f>>2]=o,e=z2(j2[24+f>>2]+z2(-.019999999552965164)),j2[24+f>>2]=e,b=z2(j2[f>>2]+z2(.019999999552965164)),j2[f>>2]=b,t=z2(j2[4+f>>2]+z2(.019999999552965164)),j2[4+f>>2]=t,c=z2(j2[8+f>>2]+z2(.019999999552965164)),j2[8+f>>2]=c,n<(i=j2[48+f>>2])&&(i=j2[48+f>>2]=n),o<(n=j2[52+f>>2])&&(n=j2[52+f>>2]=o),e<(o=j2[56+f>>2])&&(o=j2[56+f>>2]=e),(e=j2[28+f>>2])<j2[60+f>>2]&&(j2[60+f>>2]=e),(e=j2[32+f>>2])<b&&(e=j2[32+f>>2]=b),(b=j2[36+f>>2])<t&&(b=j2[36+f>>2]=t),(t=j2[40+f>>2])<c&&(t=j2[40+f>>2]=c),(c=j2[12+f>>2])>j2[44+f>>2]&&(j2[44+f>>2]=c))),a=T2[A+68>>2],1&p2[r+204|0]||(i=z2(e-i),e=z2(i*i),i=z2(b-n),e=z2(e+z2(i*i)),i=z2(t-o),z2(e+z2(i*i))<z2(999999995904))?n1[T2[T2[a>>2]+16>>2]](a,T2[r+188>>2],48+f|0,32+f|0,T2[A+24>>2]):(4!=(-2&T2[r+220>>2])&&(T2[r+220>>2]=5),S2[23476]||(r=T2[A+72>>2])&&(p2[23476]=1,n1[T2[T2[r>>2]+44>>2]](r,18344),r=T2[A+72>>2],n1[T2[T2[r>>2]+44>>2]](r,18393),r=T2[A+72>>2],n1[T2[T2[r>>2]+44>>2]](r,18461),r=T2[A+72>>2],n1[T2[T2[r>>2]+44>>2]](r,18526))),a=T2[A+8>>2];}if(u=u+4|0,!((0|(k=k+1|0))<(0|a)))break;}L2=f+64|0;},function(A){var f=T2[(A|=0)+68>>2];n1[T2[T2[f>>2]+32>>2]](f,T2[A+24>>2]);},function(A,f){T2[(A|=0)+72>>2]=f|=0;},c4,M4,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b=0,t=0,c=0,u=0,k=z2(0),l=z2(0),s=z2(0),v=z2(0),d=0,B=z2(0),Q=z2(0),g=z2(0),w=z2(0),G=z2(0),C=z2(0),E=z2(0),D=z2(0),h=z2(0),Z=z2(0),Y=z2(0),R=z2(0),F=z2(0),W=z2(0),m=0,N=z2(0),V=z2(0),J=z2(0),M=0,I=0,x=0,y=0;L2=b=L2-144|0,0|n1[T2[T2[A>>2]+20>>2]](A)&&(t=0|n1[T2[T2[A>>2]+20>>2]](A),32768&n1[T2[T2[t>>2]+56>>2]](t)&&(t=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[t>>2]+64>>2]](t,f,z2(.10000000149011612))));A:{f:{r:{e:{i:{a:{n:{o:{b:{t:switch(0|(t=T2[r+4>>2])){case 0:break b;case 31:break t;case 28:break r;case 13:break e;case 11:break i;case 10:break a;case 9:break n;case 8:break o;default:break f;}if((0|(t=T2[r+24>>2]))<1)break A;for(c=t+1|0,u=P2(t,80)-80|0;t=T2[r+32>>2]+u|0,d=T2[t- -64>>2],k=j2[t+56>>2],l=j2[t+48>>2],s=j2[t+52>>2],B=j2[t+32>>2],w=j2[t>>2],G=j2[t+16>>2],C=j2[t+36>>2],D=j2[t+4>>2],Z=j2[t+20>>2],v=j2[t+40>>2],Q=j2[t+8>>2],g=j2[t+24>>2],T2[60+b>>2]=0,T2[44+b>>2]=0,T2[28+b>>2]=0,T2[12+b>>2]=0,Y=j2[f+32>>2],E=j2[f+36>>2],h=j2[f+40>>2],j2[40+b>>2]=z2(z2(Q*Y)+z2(g*E))+z2(v*h),j2[36+b>>2]=z2(z2(D*Y)+z2(Z*E))+z2(C*h),j2[32+b>>2]=z2(z2(w*Y)+z2(G*E))+z2(B*h),R=j2[f+16>>2],F=j2[f+20>>2],W=j2[f+24>>2],j2[24+b>>2]=z2(z2(Q*R)+z2(g*F))+z2(v*W),j2[20+b>>2]=z2(z2(D*R)+z2(Z*F))+z2(C*W),j2[16+b>>2]=z2(z2(w*R)+z2(G*F))+z2(B*W),N=Q,Q=j2[f>>2],V=g,g=j2[f+4>>2],J=v,v=j2[f+8>>2],j2[8+b>>2]=z2(z2(N*Q)+z2(V*g))+z2(J*v),j2[4+b>>2]=z2(z2(D*Q)+z2(Z*g))+z2(C*v),j2[b>>2]=z2(z2(w*Q)+z2(G*g))+z2(B*v),j2[56+b>>2]=z2(z2(z2(l*Y)+z2(s*E))+z2(k*h))+j2[f+56>>2],j2[52+b>>2]=z2(z2(z2(l*R)+z2(s*F))+z2(k*W))+j2[f+52>>2],j2[48+b>>2]=z2(z2(z2(l*Q)+z2(s*g))+z2(k*v))+j2[f+48>>2],n1[T2[T2[A>>2]+28>>2]](A,b,d,e),u=u-80|0,1<(0|(c=c-1|0)););break A;}d=T2[(u=r+44|0)+4>>2],T2[(t=c=8+b|0)>>2]=T2[u>>2],T2[t+4>>2]=d,u=T2[(t=r+36|0)+4>>2],T2[b>>2]=T2[t>>2],T2[4+b>>2]=u,k=z2(n1[T2[T2[r>>2]+48>>2]](r)),l=z2(n1[T2[T2[r>>2]+48>>2]](r)),s=z2(z2(n1[T2[T2[r>>2]+48>>2]](r))+j2[c>>2]),j2[c>>2]=s,k=z2(k+j2[b>>2]),j2[b>>2]=k,l=z2(l+j2[4+b>>2]),j2[4+b>>2]=l,A=0|n1[T2[T2[A>>2]+20>>2]](A),T2[140+b>>2]=0,j2[136+b>>2]=-s,j2[132+b>>2]=-l,j2[128+b>>2]=-k,n1[T2[T2[A>>2]+80>>2]](A,128+b|0,b,f,e);break A;}k=z2(n1[T2[T2[r>>2]+48>>2]](r)),A=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[A>>2]+24>>2]](A,k,f,e);break A;}if((0|(t=T2[r+100>>2]))<1)break A;for(m=t+1|0,c=(t<<4)-8|0,u=(t<<2)-4|0;t=T2[r+108>>2]+c|0,k=j2[t>>2],l=j2[t-8>>2],s=j2[t-4>>2],t=0|n1[T2[T2[A>>2]+20>>2]](A),Y=j2[T2[r+128>>2]+u>>2],T2[60+b>>2]=0,T2[44+b>>2]=0,T2[28+b>>2]=0,T2[12+b>>2]=0,B=j2[f+40>>2],w=j2[f+32>>2],C=z2(w*z2(0)),G=j2[f+36>>2],D=z2(G*z2(0)),j2[40+b>>2]=B+z2(C+D),v=z2(C+G),C=z2(B*z2(0)),j2[36+b>>2]=v+C,j2[32+b>>2]=z2(w+D)+C,C=j2[f+24>>2],D=j2[f+16>>2],v=z2(D*z2(0)),Z=j2[f+20>>2],Q=z2(Z*z2(0)),j2[24+b>>2]=C+z2(v+Q),g=z2(v+Z),v=z2(C*z2(0)),j2[20+b>>2]=g+v,j2[16+b>>2]=z2(D+Q)+v,v=j2[f+8>>2],Q=j2[f>>2],E=z2(Q*z2(0)),g=j2[f+4>>2],h=z2(g*z2(0)),j2[8+b>>2]=v+z2(E+h),N=z2(E+g),E=z2(v*z2(0)),j2[4+b>>2]=N+E,j2[b>>2]=z2(Q+h)+E,j2[56+b>>2]=z2(z2(z2(l*w)+z2(s*G))+z2(k*B))+j2[f+56>>2],j2[52+b>>2]=z2(z2(z2(l*D)+z2(s*Z))+z2(k*C))+j2[f+52>>2],j2[48+b>>2]=z2(z2(z2(l*Q)+z2(s*g))+z2(k*v))+j2[f+48>>2],n1[T2[T2[t>>2]+24>>2]](t,Y,b,e),c=c-16|0,u=u-4|0,1<(0|(m=m-1|0)););break A;}c=T2[r+60>>2],k=j2[(c<<2)+(r=r+36|0)>>2],l=j2[r+((c+2|0)%3<<2)>>2],A=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[A>>2]+84>>2]](A,l,k,c,f,e);break A;}c=T2[r+76>>2],k=j2[r+68>>2],l=j2[r- -64>>2],A=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[A>>2]+92>>2]](A,l,k,c,f,e);break A;}c=T2[r+60>>2],k=z2(n1[T2[T2[r>>2]+92>>2]](r)),m=T2[(d=r+44|0)+4>>2],T2[(t=8+b|0)>>2]=T2[d>>2],T2[t+4>>2]=m,d=T2[(u=r+36|0)+4>>2],T2[b>>2]=T2[u>>2],T2[4+b>>2]=d,l=z2(n1[T2[T2[r>>2]+48>>2]](r)),s=z2(n1[T2[T2[r>>2]+48>>2]](r)),n=t,o=z2(z2(n1[T2[T2[r>>2]+48>>2]](r))+j2[t>>2]),j2[n>>2]=o,j2[b>>2]=l+j2[b>>2],j2[4+b>>2]=s+j2[4+b>>2],l=j2[(c<<2)+b>>2],A=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[A>>2]+88>>2]](A,k,l,c,f,e);break A;}k=j2[r+72>>2],A=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[A>>2]+96>>2]](A,r+56|0,k,f,e);break A;}if(!(6<(0|t)))if(d=T2[r+60>>2]){if(!(T2[d+28>>2]<1))for(;;){s=z2(0);f:if(c=(x=P2(I,36))+T2[d+36>>2]|0,M=T2[c+4>>2]){if(k=z2(0),l=z2(0),!((0|M)<1))for(u=T2[c+12>>2],c=T2[(u+(M<<2)|0)-4>>2],m=1,y=0;;){if(u=(i=(t=T2[u+y>>2])<<4)+T2[d+16>>2]|0,C=j2[u>>2],D=j2[u+4>>2],Z=j2[u+8>>2],u=0|n1[T2[T2[A>>2]+20>>2]](A),T2[12+b>>2]=0,a=T2[d+16>>2],B=j2[(c=a+(c<<4)|0)>>2],v=j2[f+32>>2],w=j2[c+4>>2],Q=j2[f+36>>2],G=j2[c+8>>2],g=j2[f+40>>2],Y=j2[f+56>>2],j2[8+b>>2]=z2(z2(z2(B*v)+z2(w*Q))+z2(G*g))+Y,E=j2[f+16>>2],h=j2[f+20>>2],R=j2[f+24>>2],F=j2[f+52>>2],j2[4+b>>2]=z2(z2(z2(B*E)+z2(w*h))+z2(G*R))+F,W=j2[f>>2],N=j2[f+4>>2],V=j2[f+8>>2],J=j2[f+48>>2],j2[b>>2]=z2(z2(z2(B*W)+z2(w*N))+z2(G*V))+J,T2[140+b>>2]=0,B=j2[(c=i+a|0)>>2],w=j2[c+4>>2],G=j2[c+8>>2],j2[136+b>>2]=Y+z2(z2(z2(v*B)+z2(Q*w))+z2(g*G)),j2[132+b>>2]=F+z2(z2(z2(E*B)+z2(h*w))+z2(R*G)),j2[128+b>>2]=J+z2(z2(z2(W*B)+z2(N*w))+z2(V*G)),n1[T2[T2[u>>2]+16>>2]](u,b,128+b|0,e),l=z2(l+Z),k=z2(k+D),s=z2(s+C),c=T2[d+36>>2]+x|0,T2[c+4>>2]<=(0|m))break f;y=y+4|0,m=m+1|0,u=T2[c+12>>2],c=t;}}else k=z2(0),l=z2(0);if(c=0|n1[T2[T2[A>>2]+20>>2]](A),16384&n1[T2[T2[c>>2]+56>>2]](c)&&(T2[8+b>>2]=0,T2[12+b>>2]=0,T2[b>>2]=1065353216,T2[4+b>>2]=1065353216,c=T2[d+36>>2]+x|0,w=j2[c+28>>2],G=j2[c+20>>2],C=j2[c+24>>2],c=0|n1[T2[T2[A>>2]+20>>2]](A),T2[140+b>>2]=0,B=z2(z2(1)/z2(0|M)),s=z2(B*s),D=j2[f+32>>2],k=z2(B*k),Z=j2[f+36>>2],l=z2(B*l),B=j2[f+40>>2],v=j2[f+56>>2],j2[136+b>>2]=z2(z2(z2(s*D)+z2(k*Z))+z2(l*B))+v,Q=j2[f+16>>2],g=j2[f+20>>2],Y=j2[f+24>>2],E=j2[f+52>>2],j2[132+b>>2]=z2(z2(z2(s*Q)+z2(k*g))+z2(l*Y))+E,h=j2[f>>2],R=j2[f+4>>2],F=j2[f+8>>2],W=j2[f+48>>2],j2[128+b>>2]=z2(z2(z2(s*h)+z2(k*R))+z2(l*F))+W,T2[124+b>>2]=0,s=z2(s+G),k=z2(k+C),l=z2(l+w),j2[120+b>>2]=v+z2(z2(z2(D*s)+z2(Z*k))+z2(B*l)),j2[116+b>>2]=E+z2(z2(z2(s*Q)+z2(k*g))+z2(l*Y)),j2[112+b>>2]=W+z2(z2(z2(s*h)+z2(k*R))+z2(l*F)),n1[T2[T2[c>>2]+16>>2]](c,128+b|0,112+b|0,b)),!((0|(I=I+1|0))<T2[d+28>>2]))break;}}else if(!((0|n1[T2[T2[r>>2]+100>>2]](r))<1))for(;n1[T2[T2[r>>2]+104>>2]](r,c,b,128+b|0),T2[124+b>>2]=0,k=j2[b>>2],B=j2[f+32>>2],l=j2[4+b>>2],w=j2[f+36>>2],s=j2[8+b>>2],G=j2[f+40>>2],C=j2[f+56>>2],j2[120+b>>2]=z2(z2(z2(k*B)+z2(l*w))+z2(s*G))+C,D=j2[f+16>>2],Z=j2[f+20>>2],v=j2[f+24>>2],Q=j2[f+52>>2],j2[116+b>>2]=z2(z2(z2(k*D)+z2(l*Z))+z2(s*v))+Q,g=j2[f>>2],Y=j2[f+4>>2],E=j2[f+8>>2],h=j2[f+48>>2],j2[112+b>>2]=z2(z2(z2(k*g)+z2(l*Y))+z2(s*E))+h,T2[108+b>>2]=0,k=j2[128+b>>2],l=j2[132+b>>2],s=j2[136+b>>2],j2[104+b>>2]=C+z2(z2(z2(B*k)+z2(w*l))+z2(G*s)),j2[100+b>>2]=Q+z2(z2(z2(D*k)+z2(Z*l))+z2(v*s)),j2[96+b>>2]=h+z2(z2(z2(g*k)+z2(Y*l))+z2(E*s)),t=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[t>>2]+16>>2]](t,112+b|0,96+b|0,e),c=c+1|0,(0|n1[T2[T2[r>>2]+100>>2]](r))>(0|c););(c=T2[r+4>>2])-21>>>0<=8&&(T2[136+b>>2]=1566444395,T2[140+b>>2]=0,T2[128+b>>2]=1566444395,T2[132+b>>2]=1566444395,T2[120+b>>2]=-581039253,T2[124+b>>2]=0,T2[112+b>>2]=-581039253,T2[116+b>>2]=-581039253,c=0|n1[T2[T2[A>>2]+20>>2]](A),d=T2[(u=e+8|0)+4>>2],T2[(t=20+b|0)>>2]=T2[u>>2],T2[t+4>>2]=d,d=T2[(u=f+8|0)+4>>2],T2[(t=36+b|0)>>2]=T2[u>>2],T2[t+4>>2]=d,u=T2[f+20>>2],T2[(t=44+b|0)>>2]=T2[f+16>>2],T2[t+4>>2]=u,d=T2[(u=f+24|0)+4>>2],T2[(t=52+b|0)>>2]=T2[u>>2],T2[t+4>>2]=d,u=T2[f+36>>2],T2[(t=60+b|0)>>2]=T2[f+32>>2],T2[t+4>>2]=u,d=T2[(u=f+40|0)+4>>2],T2[(t=68+b|0)>>2]=T2[u>>2],T2[t+4>>2]=d,T2[8+b>>2]=c,T2[4+b>>2]=18280,T2[b>>2]=18256,c=T2[e+4>>2],T2[12+b>>2]=T2[e>>2],T2[16+b>>2]=c,c=T2[f+4>>2],T2[28+b>>2]=T2[f>>2],T2[32+b>>2]=c,u=T2[(t=f+56|0)+4>>2],T2[(c=84+b|0)>>2]=T2[t>>2],T2[c+4>>2]=u,t=T2[f+52>>2],T2[(c=76+b|0)>>2]=T2[f+48>>2],T2[c+4>>2]=t,n1[T2[T2[r>>2]+64>>2]](r,b,112+b|0,128+b|0),c=T2[r+4>>2]),3==(0|c)&&(T2[136+b>>2]=1566444395,T2[140+b>>2]=0,T2[128+b>>2]=1566444395,T2[132+b>>2]=1566444395,T2[120+b>>2]=-581039253,T2[124+b>>2]=0,T2[112+b>>2]=-581039253,T2[116+b>>2]=-581039253,A=0|n1[T2[T2[A>>2]+20>>2]](A),u=T2[(t=e+8|0)+4>>2],T2[(c=20+b|0)>>2]=T2[t>>2],T2[c+4>>2]=u,u=T2[(t=f+8|0)+4>>2],T2[(c=36+b|0)>>2]=T2[t>>2],T2[c+4>>2]=u,t=T2[f+20>>2],T2[(c=44+b|0)>>2]=T2[f+16>>2],T2[c+4>>2]=t,u=T2[(t=f+24|0)+4>>2],T2[(c=52+b|0)>>2]=T2[t>>2],T2[c+4>>2]=u,t=T2[f+36>>2],T2[(c=60+b|0)>>2]=T2[f+32>>2],T2[c+4>>2]=t,u=T2[(t=f+40|0)+4>>2],T2[(c=68+b|0)>>2]=T2[t>>2],T2[c+4>>2]=u,T2[8+b>>2]=A,T2[4+b>>2]=18280,T2[b>>2]=18256,A=T2[e+4>>2],T2[12+b>>2]=T2[e>>2],T2[16+b>>2]=A,A=T2[f+4>>2],T2[28+b>>2]=T2[f>>2],T2[32+b>>2]=A,c=T2[(e=f+56|0)+4>>2],T2[(A=84+b|0)>>2]=T2[e>>2],T2[A+4>>2]=c,e=T2[f+52>>2],T2[(A=76+b|0)>>2]=T2[f+48>>2],T2[A+4>>2]=e,A=T2[r+100>>2],n1[T2[T2[A>>2]+8>>2]](A,4|b,112+b|0,128+b|0));}L2=144+b|0;},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t,c,u,k=0,l=z2(0);T2[(n=104+(L2=k=L2-256|0)|0)>>2]=0,T2[4+n>>2]=0,T2[(n=112+k|0)>>2]=0,T2[4+n>>2]=0,T2[(n=124+k|0)>>2]=0,T2[4+n>>2]=0,T2[120+k>>2]=1065353216,T2[(n=132+k|0)>>2]=0,T2[4+n>>2]=0,T2[(n=140+k|0)>>2]=1065353216,T2[4+n>>2]=0,o=T2[4+(u=f+8|0)>>2],t=T2[u>>2],T2[(a=b=76+k|0)>>2]=t,T2[4+a>>2]=o,a=T2[4+(n=r+8|0)>>2],T2[(i=92+k|0)>>2]=T2[n>>2],T2[4+i>>2]=a,T2[32+k>>2]=17592,T2[248+k>>2]=e,T2[100+k>>2]=1065353216,c=T2[f+4>>2],a=T2[f>>2],T2[68+k>>2]=a,T2[72+k>>2]=c,e=T2[r+4>>2],T2[84+k>>2]=T2[r>>2],T2[88+k>>2]=e,T2[244+k>>2]=A,T2[(e=156+k|0)>>2]=t,T2[e+4>>2]=o,T2[(e=148+k|0)>>2]=a,T2[e+4>>2]=c,T2[(e=168+k|0)>>2]=0,T2[e+4>>2]=0,T2[(e=176+k|0)>>2]=0,T2[e+4>>2]=0,T2[184+k>>2]=1065353216,T2[(e=188+k|0)>>2]=0,T2[e+4>>2]=0,T2[(e=196+k|0)>>2]=0,T2[e+4>>2]=0,T2[(e=204+k|0)>>2]=1065353216,T2[e+4>>2]=0,e=T2[r+4>>2],T2[(a=212+k|0)>>2]=T2[r>>2],T2[4+a>>2]=e,e=T2[4+n>>2],T2[(a=220+k|0)>>2]=T2[n>>2],T2[4+a>>2]=e,T2[164+k>>2]=1065353216,o=z2(j2[r>>2]-j2[f>>2]),c=z2(j2[r+4>>2]-j2[f+4>>2]),l=z2(j2[n>>2]-j2[u>>2]),a=z2(z2(1)/z2(_2(z2(z2(z2(o*o)+z2(c*c))+z2(l*l))))),u=(n=z2(l*a))==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/n),j2[44+k>>2]=u,l=(c=z2(c*a))==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/c),j2[40+k>>2]=l,T2[60+k>>2]=u<z2(0),T2[56+k>>2]=l<z2(0),l=z2(o*a),j2[64+k>>2]=z2(z2(l*z2(j2[84+k>>2]-j2[68+k>>2]))+z2(c*z2(j2[88+k>>2]-j2[72+k>>2])))+z2(n*z2(j2[i>>2]-j2[b>>2])),l=l==z2(0)?z2(0xde0b6b000000000):z2(z2(1)/l),j2[36+k>>2]=l,T2[52+k>>2]=l<z2(0),e=T2[A+68>>2],T2[(A=24+k|0)>>2]=0,T2[A+4>>2]=0,T2[16+k>>2]=0,T2[20+k>>2]=0,T2[(A=8+k|0)>>2]=0,T2[A+4>>2]=0,T2[k>>2]=0,T2[4+k>>2]=0,n1[T2[T2[e>>2]+24>>2]](e,f,r,32+k|0,16+k|0,k),L2=256+k|0;},I4,x4,function(A){var f,r,e,i;n1[T2[T2[(A|=0)>>2]+8>>2]](A),n1[T2[T2[A>>2]+12>>2]](A),(f=T2[A+24>>2])&&(i=T2[A+68>>2],r=f,e=0|n1[T2[T2[i>>2]+36>>2]](i),i=T2[A+24>>2],f=T2[T2[f>>2]+32>>2],n1[f](0|r,0|e,0|(A+28|0),0|i));},function(A,f){A|=0,n1[T2[T2[(f|=0)>>2]+32>>2]](f),y4(A,f),n1[T2[T2[f>>2]+36>>2]](f);},_,I,function(A,f){A|=0,f|=0;var r,e,i,a=0;return L2=a=L2-32|0,r=T2[A+216>>2],(e=j2[r+4>>2])!=z2(0)&&(f=T2[f>>2],0|n1[T2[T2[r>>2]+8>>2]](r,T2[f+188>>2])&&(r=T2[A+216>>2],i=T2[f+192>>2],T2[24+a>>2]=-1,T2[28+a>>2]=-1,T2[20+a>>2]=f+4,T2[16+a>>2]=f,T2[12+a>>2]=i,U4(A+68|(T2[8+a>>2]=0),A+132|0,8+a|0,r))),L2=32+a|0,e!=z2(0)|0;},I,function(A,f,r,e){A|=0,f|=0,r|=0,e|=0,z2(0);var i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h=0,Z=(0),Y=z2(0);L2=h=L2-32|0,b=j2[f+20>>2],v=j2[f+36>>2],d=j2[f+24>>2],E=j2[f+40>>2],t=j2[f+4>>2],B=j2[f+32>>2],u=j2[f+8>>2],k=j2[f>>2],Q=j2[f+16>>2],T2[28+h>>2]=0,a=z2(b-t),n=z2(E-u),i=z2(d-u),l=z2(v-t),c=z2(z2(a*n)-z2(i*l)),G=i,i=z2(B-k),o=z2(Q-k),n=z2(z2(G*i)-z2(o*n)),a=z2(z2(o*l)-z2(a*i)),i=z2(z2(u*a)+z2(z2(k*c)+z2(t*n))),s=j2[A+4>>2],o=j2[A+8>>2],g=j2[A+12>>2],l=z2(z2(z2(z2(c*s)+z2(n*o))+z2(a*g))-i),C=j2[A+20>>2],w=j2[A+24>>2],D=j2[A+28>>2],i=z2(z2(z2(z2(c*C)+z2(n*w))+z2(a*D))-i),z2(l*i)>=z2(0)||1&(f=T2[A+36>>2])&&l<=z2(0)||(i=z2(l/z2(l-i)))<j2[A+40>>2]&&(G=o,o=z2(z2(1)-i),w=z2(z2(w*i)+z2(G*o)),b=z2(b-w),s=z2(z2(C*i)+z2(s*o)),k=z2(k-s),t=z2(t-w),Q=z2(Q-s),o=z2(z2(D*i)+z2(g*o)),d=z2(d-o),u=z2(u-o),C=z2(z2(a*a)+z2(z2(c*c)+z2(n*n))),g=z2(C*z2(-9999999747378752e-20)),z2(z2(a*z2(z2(b*k)-z2(t*Q)))+z2(z2(c*z2(z2(t*d)-z2(u*b)))+z2(n*z2(z2(u*Q)-z2(d*k)))))>=g&&(v=z2(v-w),B=z2(B-s),s=z2(a*z2(z2(v*Q)-z2(b*B))),G=b,b=z2(E-o),g<=z2(s+z2(z2(c*z2(z2(G*b)-z2(d*v)))+z2(n*z2(z2(d*B)-z2(b*Q)))))&&g<=z2(z2(a*z2(z2(t*B)-z2(v*k)))+z2(z2(c*z2(z2(v*u)-z2(b*t)))+z2(n*z2(z2(b*k)-z2(u*B)))))&&(o=a,a=z2(z2(1)/z2(_2(C))),t=z2(o*a),j2[24+h>>2]=t,n=z2(n*a),j2[20+h>>2]=n,c=z2(c*a),j2[16+h>>2]=c,Y=!(l<=z2(0))||2&f?z2(n1[T2[T2[(Z=A)>>2]+12>>2]](A,16+h|0,i,r,e)):(T2[12+h>>2]=0,j2[8+h>>2]=-t,j2[4+h>>2]=-n,j2[h>>2]=-c,z2(n1[T2[T2[(Z=A)>>2]+12>>2]](A,h,i,r,e))),j2[Z+40>>2]=Y))),L2=32+h|0;},function(A,f,r,e,i){A|=0,f|=0,r=z2(r),e|=0,i|=0;var a,n,o,b,t,c,u,k,l,s=0;return T2[36+(L2=s=L2-48|0)>>2]=i,T2[32+s>>2]=e,T2[40+s>>2]=T2[A+52>>2],a=j2[A- -64>>2],n=j2[A+60>>2],o=j2[A+80>>2],b=j2[A+72>>2],t=j2[A+76>>2],c=j2[A+96>>2],u=j2[A+88>>2],k=j2[A+92>>2],l=j2[A+56>>2],i=j2[f+8>>2],e=j2[f>>2],f=j2[f+4>>2],T2[20+s>>2]=0,j2[16+s>>2]=z2(z2(e*u)+z2(f*k))+z2(i*c),j2[12+s>>2]=z2(z2(e*b)+z2(f*t))+z2(i*o),j2[8+s>>2]=z2(z2(l*e)+z2(n*f))+z2(a*i),j2[24+s>>2]=r,T2[s>>2]=T2[A+48>>2],T2[4+s>>2]=32+s,A=T2[A+44>>2],r=z2(n1[T2[T2[A>>2]+12>>2]](A,s,1)),L2=48+s|0,z2(r);},I,function(A,f){A|=0,f|=0;var r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R=0;L2=R=L2-128|0,u=T2[f+36>>2],f=T2[T2[A+8>>2]+32>>2]+P2(u,80)|0,D=T2[f+64>>2],k=j2[f+32>>2],l=j2[f>>2],s=j2[f+16>>2],v=j2[f+56>>2],d=j2[f+52>>2],B=j2[f+48>>2],Q=j2[f+36>>2],g=j2[f+20>>2],w=j2[f+4>>2],G=j2[f+40>>2],C=j2[f+24>>2],E=j2[f+8>>2],f=T2[A+12>>2],h=j2[f+52>>2],Z=j2[f+56>>2],r=j2[f+24>>2],e=j2[f+20>>2],i=j2[f+40>>2],a=j2[f+36>>2],Y=j2[f+48>>2],n=j2[f+8>>2],o=j2[f>>2],b=j2[f+4>>2],t=j2[f+16>>2],c=j2[f+32>>2],T2[124+R>>2]=0,T2[108+R>>2]=0,T2[92+R>>2]=0,j2[104+R>>2]=z2(z2(E*c)+z2(C*a))+z2(G*i),j2[100+R>>2]=z2(z2(w*c)+z2(g*a))+z2(Q*i),j2[88+R>>2]=z2(z2(E*t)+z2(C*e))+z2(G*r),j2[84+R>>2]=z2(z2(w*t)+z2(g*e))+z2(Q*r),j2[120+R>>2]=Z+z2(z2(z2(c*B)+z2(a*d))+z2(i*v)),j2[116+R>>2]=h+z2(z2(z2(t*B)+z2(e*d))+z2(r*v)),T2[76+R>>2]=0,j2[72+R>>2]=z2(z2(o*E)+z2(b*C))+z2(n*G),j2[68+R>>2]=z2(z2(o*w)+z2(b*g))+z2(n*Q),j2[64+R>>2]=z2(z2(l*o)+z2(s*b))+z2(k*n),j2[112+R>>2]=Y+z2(z2(z2(o*B)+z2(b*d))+z2(n*v)),j2[96+R>>2]=z2(z2(l*c)+z2(s*a))+z2(k*i),j2[80+R>>2]=z2(z2(l*t)+z2(s*e))+z2(k*r),T2[60+R>>2]=u,T2[56+R>>2]=-1,T2[44+R>>2]=D,T2[40+R>>2]=0,T2[48+R>>2]=T2[A+4>>2],T2[52+R>>2]=R+64,T2[12+R>>2]=1065353216,T2[16+R>>2]=0,T2[24+R>>2]=0,T2[36+R>>2]=u,T2[28+R>>2]=D,T2[8+R>>2]=17684,f=T2[A+24>>2],T2[32+R>>2]=f,j2[12+R>>2]=j2[f+4>>2],T2[24+R>>2]=T2[f+16>>2],U4(T2[A+16>>2],T2[A+20>>2],40+R|0,8+R|0),L2=128+R|0;},I,function(A,f){return A=T2[(A|=0)+24>>2],0|n1[T2[T2[A>>2]+8>>2]](A,f|=0);},function(A,f,r){A|=0,f|=0,r|=0;var e,i=0,a=0;return L2=a=L2-16|0,i=T2[A+28>>2],T2[4+a>>2]=i,T2[a>>2]=i,(e=T2[f+4>>2])?(T2[e+4>>2]=i,T2[e>>2]=i):T2[f+4>>2]=a,i=T2[A+24>>2],r=z2(n1[T2[T2[i>>2]+12>>2]](i,f,r)),j2[A+4>>2]=j2[T2[A+24>>2]+4>>2],L2=16+a|0,z2(r);},_,I,function(A,f,r,e){var i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D;A|=0,f|=0,r|=0,e|=0,T2[(L2=r=L2-96|0)+92>>2]=0,i=j2[f>>2],t=j2[A+60>>2],n=j2[f+4>>2],v=j2[A- -64>>2],o=j2[f+8>>2],d=j2[A+68>>2],B=j2[A+84>>2],k=z2(z2(z2(z2(i*t)+z2(n*v))+z2(o*d))+B),j2[r+88>>2]=k,b=j2[A+44>>2],Q=j2[A+48>>2],g=j2[A+52>>2],w=j2[A+80>>2],a=z2(z2(z2(z2(i*b)+z2(n*Q))+z2(o*g))+w),j2[r+84>>2]=a,c=i,i=j2[A+28>>2],u=n,n=j2[A+32>>2],G=o,o=j2[A+36>>2],l=j2[A+76>>2],D=z2(z2(z2(z2(c*i)+z2(u*n))+z2(G*o))+l),j2[r+80>>2]=D,T2[r+76>>2]=0,T2[r+60>>2]=0,s=j2[f+16>>2],c=j2[f+20>>2],u=j2[f+24>>2],C=z2(l+z2(z2(z2(i*s)+z2(n*c))+z2(o*u))),j2[r+64>>2]=C,E=z2(w+z2(z2(z2(b*s)+z2(Q*c))+z2(g*u))),j2[r+68>>2]=E,s=z2(B+z2(z2(z2(t*s)+z2(v*c))+z2(d*u))),j2[r+72>>2]=s,c=i,i=j2[f+32>>2],u=n,n=j2[f+36>>2],G=o,o=j2[f+40>>2],l=z2(l+z2(z2(z2(c*i)+z2(u*n))+z2(G*o))),j2[r+48>>2]=l,b=z2(w+z2(z2(z2(b*i)+z2(Q*n))+z2(g*o))),j2[r+52>>2]=b,i=z2(B+z2(z2(z2(t*i)+z2(v*n))+z2(d*o))),j2[r+56>>2]=i,T2[r+44>>2]=0,n=z2(z2(z2(k+s)+i)*z2(.3333333432674408)),j2[r+40>>2]=n,v=z2(z2(z2(a+E)+b)*z2(.3333333432674408)),j2[r+36>>2]=v,o=z2(z2(z2(D+C)+l)*z2(.3333333432674408)),j2[r+32>>2]=o,f=T2[A+8>>2],16384&n1[T2[T2[f>>2]+56>>2]](f)&&(t=j2[r+80>>2],T2[r+24>>2]=0,T2[r+28>>2]=0,T2[r+16>>2]=1065353216,T2[r+20>>2]=1065353216,f=T2[A+8>>2],T2[r+12>>2]=0,d=z2(C-t),B=z2(b-a),b=z2(E-a),t=z2(l-t),a=z2(z2(d*B)-z2(b*t)),u=z2((c=a)*a),a=z2(i-k),i=z2(s-k),k=z2(z2(b*a)-z2(i*B)),a=z2(z2(i*t)-z2(d*a)),i=z2(z2(1)/z2(_2(z2(u+z2(z2(k*k)+z2(a*a)))))),j2[r+8>>2]=z2(c*i)+n,j2[r+4>>2]=z2(a*i)+v,j2[r>>2]=o+z2(k*i),n1[T2[T2[f>>2]+16>>2]](f,r+32|0,r,r+16|0)),e=T2[A+8>>2],n1[T2[T2[e>>2]+16>>2]](e,r+80|0,r- -64|0,f=A+12|0),e=T2[A+8>>2],n1[T2[T2[e>>2]+16>>2]](e,r- -64|0,r+48|0,f),A=T2[A+8>>2],n1[T2[T2[A>>2]+16>>2]](A,r+48|0,r+80|0,f),L2=r+96|0;},R0,function(A){return (A|=0)-4|0;},function(A){u((A|=0)-4|0);},function(A,f,r,e){n1[T2[T2[(A=(A|=0)-4|0)>>2]+8>>2]](A,f|=0,r|=0,e|=0);},I,p4,I,p4,I,function(A,f){A|=0,f|=0;var r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h=0;L2=h=L2-128|0,u=T2[f+36>>2],f=T2[T2[A+24>>2]+32>>2]+P2(u,80)|0,G=T2[f+64>>2],k=j2[f+32>>2],l=j2[f>>2],s=j2[f+16>>2],v=j2[f+56>>2],d=j2[f+52>>2],B=j2[f+48>>2],Q=j2[f+36>>2],g=j2[f+20>>2],w=j2[f+4>>2],r=j2[f+40>>2],e=j2[f+24>>2],i=j2[f+8>>2],T2[124+h>>2]=0,T2[108+h>>2]=0,T2[92+h>>2]=0,f=T2[A+28>>2],a=j2[f+32>>2],n=j2[f+36>>2],o=j2[f+40>>2],j2[104+h>>2]=z2(z2(i*a)+z2(e*n))+z2(r*o),j2[100+h>>2]=z2(z2(w*a)+z2(g*n))+z2(Q*o),b=j2[f+16>>2],t=j2[f+20>>2],c=j2[f+24>>2],j2[88+h>>2]=z2(z2(i*b)+z2(e*t))+z2(r*c),j2[84+h>>2]=z2(z2(w*b)+z2(g*t))+z2(Q*c),j2[120+h>>2]=z2(z2(z2(B*a)+z2(d*n))+z2(v*o))+j2[f+56>>2],j2[116+h>>2]=z2(z2(z2(B*b)+z2(d*t))+z2(v*c))+j2[f+52>>2],T2[76+h>>2]=0,C=i,i=j2[f>>2],E=e,e=j2[f+4>>2],D=r,r=j2[f+8>>2],j2[72+h>>2]=z2(z2(C*i)+z2(E*e))+z2(D*r),j2[68+h>>2]=z2(z2(w*i)+z2(g*e))+z2(Q*r),j2[64+h>>2]=z2(z2(l*i)+z2(s*e))+z2(k*r),j2[112+h>>2]=z2(z2(z2(B*i)+z2(d*e))+z2(v*r))+j2[f+48>>2],j2[96+h>>2]=z2(z2(l*a)+z2(s*n))+z2(k*o),j2[80+h>>2]=z2(z2(l*b)+z2(s*t))+z2(k*c),T2[36+h>>2]=1065353216,T2[40+h>>2]=1,T2[44+h>>2]=-1,T2[56+h>>2]=u,T2[48+h>>2]=G,T2[32+h>>2]=18648,f=T2[A+32>>2],T2[52+h>>2]=f,j2[36+h>>2]=j2[f+4>>2],T2[28+h>>2]=u,T2[24+h>>2]=-1,T2[12+h>>2]=G,f=T2[A+4>>2],T2[8+h>>2]=f,T2[16+h>>2]=T2[f+8>>2],T2[20+h>>2]=h+64,X4(T2[A+8>>2],T2[A+12>>2],T2[A+16>>2],8+h|0,32+h|0,j2[A+20>>2]),L2=128+h|0;},_,I,function(A,f){return A=T2[(A|=0)+20>>2],0|n1[T2[T2[A>>2]+8>>2]](A,f|=0);},function(A,f,r){A|=0,f|=0,r|=0;var e,i=0;return T2[(L2=i=L2-16|0)>>2]=-1,T2[4+i>>2]=T2[A+24>>2],T2[8+i>>2]=T2[A+16>>2],T2[f+4>>2]||(T2[f+4>>2]=i),e=T2[A+20>>2],r=z2(n1[T2[T2[e>>2]+12>>2]](e,f,r)),j2[A+4>>2]=j2[T2[A+20>>2]+4>>2],L2=16+i|0,z2(r);},I,function(A,f){A|=0,f|=0;var r,e,i,a,n,o=0;return L2=o=L2-32|0,r=T2[A+184>>2],(e=j2[r+4>>2])!=z2(0)&&(f=T2[f>>2],0|n1[T2[T2[r>>2]+8>>2]](r,T2[f+188>>2])&&(i=j2[A+188>>2],r=T2[A+184>>2],a=T2[A+192>>2],n=T2[f+192>>2],T2[24+o>>2]=-1,T2[28+o>>2]=-1,T2[20+o>>2]=f+4,T2[16+o>>2]=f,T2[12+o>>2]=n,X4(a,A+36|(T2[8+o>>2]=0),A+100|0,8+o|0,r,i))),L2=32+o|0,e!=z2(0)|0;},function(A){var f=0;return T2[(A|=0)>>2]=19576,(f=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+56>>2]=0,p2[A+60|0]=1,T2[(f=A+48|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+36>>2])&&S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+36>>2]=0,p2[A+40|0]=1,T2[(f=A+28|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+16>>2]=0,p2[A+20|0]=1,T2[(f=A+8|0)>>2]=0,(T2[f+4>>2]=0)|A;},function(A){var f=0;T2[(A|=0)>>2]=19576,(f=T2[A+56>>2])&&S2[A+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+56>>2]=0,p2[A+60|0]=1,T2[(f=A+48|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+36>>2])&&S2[A+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+36>>2]=0,p2[A+40|0]=1,T2[(f=A+28|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),u(A);},function(A,f,r){A|=0,r|=0;var e=0,i=0,a=0,n=0,o=0,b=0,t=0;if(1<=(0|(n=T2[(f|=0)+8>>2])))for(r=T2[f+16>>2];e=T2[r>>2],3&S2[e+204|0]||(a=(T2[e+208>>2]=a)+1|0),T2[e+268>>2]=1065353216,T2[e+212>>2]=-1,r=r+4|0,n=n-1|0;);if((0|(e=T2[A+8>>2]))<(0|a)){if(T2[A+12>>2]<(0|a)){if(n=0,a&&(T2[5498]=T2[5498]+1,(r=K2(19+(a<<3)|0))&&(T2[(n=r+19&-16)-4>>2]=r)),1<=(0|e))for(r=e;t=T2[A+16>>2]+i|0,o=T2[t+4>>2],T2[(b=i+n|0)>>2]=T2[t>>2],T2[b+4>>2]=o,i=i+8|0,r=r-1|0;);(r=T2[A+16>>2])&&S2[A+20|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+16>>2]=n,T2[A+12>>2]=a,p2[A+20|0]=1;}for(i=e<<3,r=a-e|0;e=T2[A+16>>2]+i|0,T2[e>>2]=0,i=i+8|(T2[e+4>>2]=0),r=r-1|0;);}if(1<=(0|(T2[A+8>>2]=a)))for(i=T2[A+16>>2],r=0;T2[i>>2]=r,T2[i+4>>2]=1,i=i+8|0,(0|a)!=(0|(r=r+1|0)););if(f=T2[f+68>>2],f=0|n1[T2[T2[f>>2]+36>>2]](f),(b=0|n1[T2[T2[f>>2]+36>>2]](f))&&(t=0|n1[T2[T2[f>>2]+20>>2]](f),!((0|b)<1)))for(r=0;;){if((f=T2[T2[(e=(r<<4)+t|0)>>2]>>2])&&(e=T2[T2[e+4>>2]>>2])&&!(7&T2[f+204>>2]||7&S2[e+204|0])){if(a=T2[e+208>>2],e=T2[A+16>>2],n=T2[f+208>>2],(0|(f=T2[(i=e+(n<<3)|0)>>2]))!=(0|n)&&(T2[i>>2]=T2[(f=e+(f<<3)|0)>>2],n=T2[f>>2],(0|(i=T2[(f=e+(n<<3)|0)>>2]))!=(0|n)))for(;T2[(o=f)>>2]=T2[(f=e+(i<<3)|0)>>2],n=T2[f>>2],(0|(i=T2[(f=e+(n<<3)|0)>>2]))!=(0|n););if((0|(i=T2[(f=e+(a<<3)|0)>>2]))!=(0|a)&&(T2[(o=f)>>2]=T2[(f=e+(i<<3)|0)>>2],a=T2[f>>2],(0|(i=T2[(f=e+(a<<3)|0)>>2]))!=(0|a)))for(;T2[(o=f)>>2]=T2[(f=e+(i<<3)|0)>>2],a=T2[f>>2],(0|(i=T2[(f=e+(a<<3)|0)>>2]))!=(0|a););(0|a)!=(0|n)&&(T2[(f=e+(n<<3)|0)>>2]=a,T2[(e=e+(a<<3)|0)+4>>2]=T2[e+4>>2]+T2[f+4>>2]);}if((0|b)==(0|(r=r+1|0)))break;}},function(A,f){A|=0;var r,e,i,a,n=0,o=0,b=0,t=0,c=0;if(1<=(0|(t=T2[(f|=0)+8>>2])))for(a=T2[f+16>>2];;){if(r=T2[(o<<2)+a>>2],3&S2[r+204|0])T2[r+208>>2]=-1,T2[r+212>>2]=-2;else {if(e=T2[A+16>>2],(0|(f=c))!=(0|(n=T2[(i=e+(f<<3)|0)>>2]))&&(T2[i>>2]=T2[(f=(n<<3)+e|0)>>2],(0|(f=T2[f>>2]))!=(0|(n=T2[(b=(f<<3)+e|0)>>2]))))for(;T2[b>>2]=T2[(f=(n<<3)+e|0)>>2],(0|(f=T2[f>>2]))!=(0|(n=T2[(b=(f<<3)+e|0)>>2])););T2[r+208>>2]=f,T2[r+212>>2]=-1,T2[4+i>>2]=o,c=c+1|0;}if((0|t)==(0|(o=o+1|0)))break;}},function(A){return T2[(A|=0)>>2]=19636,0|A;},M,Q4,function(A,f,r,e,i){},U0,J2,S4,z4,function(A){A=z4(A|=0),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A){A|=0;var f,r,e,i,a=0,n=0;if(M4(A),0|n1[T2[T2[A>>2]+20>>2]](A)&&(a=0|n1[T2[T2[A>>2]+20>>2]](A),6144&n1[T2[T2[a>>2]+56>>2]](a)&&!((0|(a=0|n1[T2[T2[A>>2]+104>>2]](A)))<1)))for(a=a+1|0;i=0|n1[T2[T2[(e=A)>>2]+108>>2]](A,a-2|0),r=T2[T2[A>>2]+172>>2],n1[r](0|e,0|i),1<(0|(a=a-1|0)););if(0|n1[T2[T2[A>>2]+20>>2]](A)&&(a=0|n1[T2[T2[A>>2]+20>>2]](A),16387&n1[T2[T2[a>>2]+56>>2]](a)&&0|n1[T2[T2[A>>2]+20>>2]](A)&&(a=0|n1[T2[T2[A>>2]+20>>2]](A),0|n1[T2[T2[a>>2]+56>>2]](a)&&!(T2[A+296>>2]<1))))for(a=0;f=T2[T2[A+304>>2]+a>>2],n1[T2[T2[f>>2]+12>>2]](f,T2[A+72>>2]),a=a+4|0,(0|(n=n+1|0))<T2[A+296>>2];);0|n1[T2[T2[A>>2]+20>>2]](A)&&(A=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[A>>2]+104>>2]](A));},function(A,f,r,e){I4(A|=0,f|=0,r|=0,e|=0);},function(A,f){A|=0,(f|=0)&&2&T2[f+252>>2]?n1[T2[T2[A>>2]+92>>2]](A,f):x4(A,f);},function(A,f){A|=0;var r,e=0,i=0,a=0,n=0,o=0,b=0,t=0,c=0;if(n1[T2[T2[(f|=0)>>2]+32>>2]](f),a=0|n1[T2[T2[f>>2]+16>>2]](f,104,1),e=d2(T2[a+8>>2],0,104),j2[e+88>>2]=j2[A+264>>2],j2[e+92>>2]=j2[A+268>>2],j2[e+96>>2]=j2[A+272>>2],j2[e+100>>2]=j2[A+276>>2],r=T2[(i=A+124|0)+4>>2],T2[e+28>>2]=T2[i>>2],T2[e+32>>2]=r,r=T2[(i=A+104|0)+4>>2],T2[e+12>>2]=T2[i>>2],T2[e+16>>2]=r,r=T2[(i=A+116|0)+4>>2],T2[e+20>>2]=T2[i>>2],T2[e+24>>2]=r,r=T2[(i=A+96|0)+4>>2],T2[e+4>>2]=T2[i>>2],T2[e+8>>2]=r,j2[e>>2]=j2[A+92>>2],j2[e+36>>2]=j2[A+132>>2],j2[e+40>>2]=j2[A+148>>2],j2[e+44>>2]=j2[A+152>>2],j2[e+48>>2]=j2[A+156>>2],j2[e+52>>2]=j2[A+160>>2],j2[e+56>>2]=j2[A+176>>2],j2[e+60>>2]=j2[A+180>>2],T2[e+64>>2]=T2[A+112>>2],T2[e+68>>2]=T2[A+164>>2],T2[e+72>>2]=T2[A+168>>2],T2[e+76>>2]=T2[A+172>>2],i=T2[A+144>>2],T2[e+84>>2]=0,T2[e+80>>2]=i,n1[T2[T2[f>>2]+20>>2]](f,a,20177,1145853764,e),y4(A,f),1<=(0|(e=T2[A+8>>2])))for(i=0;a=T2[T2[A+16>>2]+n>>2],2&S2[a+252|0]&&(b=f,t=0|n1[T2[T2[a>>2]+16>>2]](a),o=T2[T2[f>>2]+16>>2],e=0|n1[o](0|b,0|t,0|(c=1)),r=0|n1[T2[T2[a>>2]+20>>2]](a,T2[e+8>>2],f),n1[T2[T2[f>>2]+20>>2]](f,e,r,1497645650,a),e=T2[A+8>>2]),n=n+4|0,(0|(i=i+1|0))<(0|e););if(1<=T2[A+228>>2])for(e=n=0;a=T2[T2[A+236>>2]+n>>2],c=f,t=0|n1[T2[T2[a>>2]+36>>2]](a),o=T2[T2[f>>2]+16>>2],i=0|n1[o](0|c,0|t,0|(b=1)),c=0|n1[T2[T2[a>>2]+40>>2]](a,T2[(t=i)+8>>2],b=f),o=T2[T2[f>>2]+20>>2],n1[o](0|b,0|t,0|c,1397641027,0|a),n=n+4|0,(0|(e=e+1|0))<T2[A+228>>2];);n1[T2[T2[f>>2]+36>>2]](f);},function(A,f,r,e){A|=0,f=z2(f),r|=0,e=z2(e);var i,a=0,n=0;if(r?(j2[A+284>>2]=e,f=z2(j2[A+280>>2]+f),e<=(j2[A+280>>2]=f)&&(n=A,f=z2((i=f)/e),a=z2(O2(f))<z2(2147483648)?~~f:-2147483648,j2[n+280>>2]=i-z2(z2(0|a)*e))):(T2[A+284>>2]=0,j2[A+280>>2]=S2[A+316|0]?z2(0):f,r=a=!(z2(O2(e=f))<z2(1.1920928955078125e-7))),0|n1[T2[T2[A>>2]+20>>2]](A)&&(n=0|n1[T2[T2[A>>2]+20>>2]](A),n=n1[T2[T2[n>>2]+56>>2]](n)>>>4&1,p2[23468]=n),a){if(n1[T2[T2[A>>2]+168>>2]](A,z2(e*z2(0|(r=(0|r)<(0|a)?r:a)))),n1[T2[T2[A>>2]+176>>2]](A),!((0|r)<1))for(;n1[T2[T2[A>>2]+160>>2]](A,e),n1[T2[T2[A>>2]+80>>2]](A),r=r-1|0;);}else n1[T2[T2[A>>2]+80>>2]](A);return n1[T2[T2[A>>2]+120>>2]](A),0|a;},function(A,f,r){f|=0,r|=0;var e,i=0,a=0,n=0,o=0,a=T2[(A|=0)+228>>2];if((0|a)==T2[A+232>>2]&&!((0|(e=a?a<<1:1))<=(0|a))){if(e&&(T2[5498]=T2[5498]+1,(i=K2(19+(e<<2)|0))&&(T2[(n=i+19&-16)-4>>2]=i)),1<=(0|a))for(i=a;T2[o+n>>2]=T2[T2[A+236>>2]+o>>2],o=o+4|0,i=i-1|0;);(i=T2[A+236>>2])&&S2[A+240|0]&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2]),a=T2[A+228>>2]),T2[A+236>>2]=n,T2[A+232>>2]=e,p2[A+240|0]=1;}T2[A+228>>2]=a+1,T2[T2[A+236>>2]+(a<<2)>>2]=f,r&&(D4(T2[f+28>>2],f),D4(T2[f+32>>2],f));},function(A,f){f|=0;var r,e=0,i=0,a=0;A:if(!((0|(e=T2[(A|=0)+228>>2]))<1)){for(i=r=T2[A+236>>2];T2[i>>2]!=(0|f);)if(i=i+4|0,(0|e)==(0|(a=a+1|0)))break A;(0|e)<=(0|a)||(T2[(a=i)>>2]=T2[(e=(i=e-1|0)<<2)+r>>2],T2[A+228>>2]=i,T2[e+T2[A+236>>2]>>2]=f);}h4(T2[f+28>>2],f),h4(T2[f+32>>2],f);},function(A,f){f|=0;var r,e=0,i=0,a=0,n=0,i=T2[(A|=0)+296>>2];if((0|i)==T2[A+300>>2]&&!((0|(r=i?i<<1:1))<=(0|i))){if(r&&(T2[5498]=T2[5498]+1,(e=K2(19+(r<<2)|0))&&(T2[(a=e+19&-16)-4>>2]=e)),1<=(0|i))for(e=i;T2[n+a>>2]=T2[T2[A+304>>2]+n>>2],n=n+4|0,e=e-1|0;);(e=T2[A+304>>2])&&S2[A+308|0]&&(T2[5499]=T2[5499]+1,q2(T2[e-4>>2]),i=T2[A+296>>2]),T2[A+304>>2]=a,T2[A+300>>2]=r,p2[A+308|0]=1;}T2[A+296>>2]=i+1,T2[T2[A+304>>2]+(i<<2)>>2]=f;},function(A,f){f|=0;var r,e=0,i=0,a=0;A:if(!((0|(e=T2[(A|=0)+296>>2]))<1)){for(i=r=T2[A+304>>2];T2[i>>2]!=(0|f);)if(i=i+4|0,(0|e)==(0|(a=a+1|0)))break A;(0|e)<=(0|a)||(T2[(a=i)>>2]=T2[(e=(i=e-1|0)<<2)+r>>2],T2[A+296>>2]=i,T2[e+T2[A+304>>2]>>2]=f);}},function(A,f){A|=0,f|=0;var r,e,i,a,n,o,b=0,t=0,c=(0),u=0,b=(T2[f+4>>2]);if(T2[A+264>>2]=T2[f>>2],T2[A+268>>2]=b,i=T2[(t=e=f+8|0)+4>>2],T2[(b=A+272|0)>>2]=T2[t>>2],T2[b+4>>2]=i,1<=(0|(t=T2[A+248>>2])))for(;;){A:{f:switch(b=T2[T2[A+256>>2]+c>>2],T2[b+220>>2]-2|0){case 0:case 3:break A;default:break f;}1&p2[b+564|0]||((r=j2[b+404>>2])!=z2(0)&&(a=j2[f>>2],n=j2[f+4>>2],o=j2[f+8>>2],T2[b+436>>2]=0,r=z2(z2(1)/r),j2[b+432>>2]=o*r,j2[b+428>>2]=r*n,j2[b+424>>2]=r*a),t=T2[f+4>>2],T2[b+440>>2]=T2[f>>2],T2[b+444>>2]=t,t=T2[4+e>>2],T2[(b=b+448|0)>>2]=T2[e>>2],T2[b+4>>2]=t,t=T2[A+248>>2]);}if(c=c+4|0,!((0|(u=u+1|0))<(0|t)))break;}},function(A,f){var r=T2[(f|=0)+268>>2];T2[(A|=0)>>2]=T2[f+264>>2],T2[A+4>>2]=r,r=T2[(f=f+272|0)+4>>2],T2[(A=A+8|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},function(A){A|=0;var f=0,r=0,e=z2(0),i=0,a=0,n=0;if(L2=i=L2+-64|0,S2[A+290|0]){if(!((0|(r=T2[A+8>>2]))<1))for(;(f=T2[T2[A+16>>2]+a>>2])&&2&T2[f+252>>2]&&T2[f+540>>2]&&(3&S2[f+204|0]||(W4(r=f+68|0,j2[f+132>>2],j2[f+136>>2],j2[f+140>>2],f+148|0,e=S2[A+316|0]&&(e=j2[A+284>>2])!=z2(0)?z2(j2[A+280>>2]-e):z2(j2[A+280>>2]*j2[f+268>>2]),i),f=T2[f+540>>2],n1[T2[T2[f>>2]+12>>2]](f,i),r=T2[A+8>>2])),a=a+4|0,(0|(n=n+1|0))<(0|r););}else if(!((0|(r=T2[A+248>>2]))<1))for(;;){A:{f:switch(f=T2[T2[A+256>>2]+n>>2],T2[f+220>>2]-2|0){case 0:case 3:break A;default:break f;}T2[f+540>>2]&&(3&S2[f+204|0]||(W4(r=f+68|0,j2[f+132>>2],j2[f+136>>2],j2[f+140>>2],f+148|0,e=S2[A+316|0]&&(e=j2[A+284>>2])!=z2(0)?z2(j2[A+280>>2]-e):z2(j2[A+280>>2]*j2[f+268>>2]),i),f=T2[f+540>>2],n1[T2[T2[f>>2]+12>>2]](f,i),r=T2[A+248>>2]));}if(n=n+4|0,!((0|(a=a+1|0))<(0|r)))break;}L2=i+64|0;},function(A,f){A|=0,f|=0;var r,e,i,a,n,o=0,b=0,t=0,c=(0),u=0,k=0,l=0;if((c=3&(l=T2[f+204>>2]))||1&p2[f+564|0]||((e=j2[f+404>>2])!=z2(0)&&(i=j2[A+268>>2],a=j2[A+272>>2],r=j2[A+264>>2],T2[f+436>>2]=0,n=r,r=z2(z2(1)/e),j2[f+424>>2]=n*r,j2[f+432>>2]=r*a,j2[f+428>>2]=r*i),b=T2[(o=A+264|0)+4>>2],T2[f+440>>2]=T2[o>>2],T2[f+444>>2]=b,b=T2[(o=o+8|0)+4>>2],T2[(t=f+448|0)>>2]=T2[o>>2],T2[t+4>>2]=b),T2[f+192>>2]){if(1&l)4!=(-2&T2[f+220>>2])&&(T2[f+220>>2]=2);else {if((0|(o=T2[A+248>>2]))==T2[A+252>>2]&&!((0|(t=o?o<<1:1))<=(0|o))){if(t&&(T2[5498]=T2[5498]+1,(b=K2(19+(t<<2)|0))&&(T2[(u=b+19&-16)-4>>2]=b)),1<=(0|o))for(b=o;T2[k+u>>2]=T2[T2[A+256>>2]+k>>2],k=k+4|0,b=b-1|0;);(b=T2[A+256>>2])&&S2[A+260|0]&&(T2[5499]=T2[5499]+1,q2(T2[b-4>>2]),c=3&T2[f+204>>2],o=T2[A+248>>2]),T2[A+256>>2]=u,T2[A+252>>2]=t,p2[A+260|0]=1;}T2[A+248>>2]=o+1,T2[T2[A+256>>2]+(o<<2)>>2]=f;}n1[T2[T2[A>>2]+36>>2]](A,f,c?2:1,c?-3:-1);}},function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a,n,o,b,t=0,c=0,u=0,k=(0),l=0,s=0;if(3&(s=T2[f+204>>2])||1&p2[f+564|0]||((a=j2[f+404>>2])!=z2(0)&&(n=j2[A+268>>2],o=j2[A+272>>2],i=j2[A+264>>2],T2[f+436>>2]=0,b=i,i=z2(z2(1)/a),j2[f+424>>2]=b*i,j2[f+432>>2]=i*o,j2[f+428>>2]=i*n),c=T2[(t=A+264|0)+4>>2],T2[f+440>>2]=T2[t>>2],T2[f+444>>2]=c,c=T2[(t=t+8|0)+4>>2],T2[(u=f+448|0)>>2]=T2[t>>2],T2[u+4>>2]=c),T2[f+192>>2]){if(1&s)4!=(-2&T2[f+220>>2])&&(T2[f+220>>2]=2);else {if((0|(t=T2[A+248>>2]))==T2[A+252>>2]&&!((0|(u=t?t<<1:1))<=(0|t))){if(u&&(T2[5498]=T2[5498]+1,(c=K2(19+(u<<2)|0))&&(T2[(k=c+19&-16)-4>>2]=c)),1<=(0|t))for(c=t;T2[l+k>>2]=T2[T2[A+256>>2]+l>>2],l=l+4|0,c=c-1|0;);(c=T2[A+256>>2])&&S2[A+260|0]&&(T2[5499]=T2[5499]+1,q2(T2[c-4>>2]),t=T2[A+248>>2]),T2[A+256>>2]=k,T2[A+252>>2]=u,p2[A+260|0]=1;}T2[A+248>>2]=t+1,T2[T2[A+256>>2]+(t<<2)>>2]=f;}n1[T2[T2[A>>2]+36>>2]](A,f,r,e);}},function(A,f){f|=0;var r,e=0,i=0,a=0;A:if(!((0|(e=T2[(A|=0)+248>>2]))<1)){for(i=r=T2[A+256>>2];T2[i>>2]!=(0|f);)if(i=i+4|0,(0|e)==(0|(a=a+1|0)))break A;(0|e)<=(0|a)||(T2[(a=i)>>2]=T2[(e=(i=e-1|0)<<2)+r>>2],T2[A+248>>2]=i,T2[e+T2[A+256>>2]>>2]=f);}x4(A,f);},function(A,f){var r;f|=0,S2[(A|=0)+289|0]&&(r=T2[A+216>>2])&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+216>>2]=f,p2[A+289|0]=0,T2[T2[A+212>>2]+8>>2]=f;},function(A){return T2[(A|=0)+216>>2];},function(A){return T2[(A|=0)+228>>2];},O4,O4,p0,function(A){var f,r,e=0,i=0;if(1<=T2[(A|=0)+248>>2])for(;r=T2[T2[A+256>>2]+e>>2],T2[(f=r)+472>>2]=0,T2[f+476>>2]=0,T2[(f=f+496|0)>>2]=0,T2[4+f>>2]=0,T2[(f=r+488|0)>>2]=0,T2[4+f>>2]=0,T2[(r=r+480|0)>>2]=0,e=e+4|(T2[4+r>>2]=0),(0|(i=i+1|0))<T2[A+248>>2];);},F0,H4,F0,H4,function(A,f){A|=0,f=z2(f);var r,e,i,a,n,o=z2(0),b=z2(0),t=z2(0),c=z2(0),u=0,k=z2(0),l=z2(0),s=z2(0),v=z2(0),d=0,B=(0);if(1<=(0|(u=T2[A+248>>2])))for(;r=T2[T2[A+256>>2]+d>>2],3&S2[r+204|0]||(c=j2[(u=r+372|0)>>2],v=j2[r+504>>2],b=J(z2(z2(1)-v),f),k=z2(c*b),j2[u>>2]=k,c=z2(b*j2[(i=r+376|0)>>2]),j2[i>>2]=c,b=z2(b*j2[(a=r+380|0)>>2]),j2[a>>2]=b,o=j2[r+388>>2],n=j2[r+508>>2],t=J(z2(z2(1)-n),f),l=z2(o*t),j2[r+388>>2]=l,s=z2(t*j2[(e=r+392|0)>>2]),j2[e>>2]=s,t=z2(t*j2[(e=r+396|0)>>2]),j2[e>>2]=t,e=r+388|0,S2[r+512|0]&&(j2[r+524>>2]>z2(z2(z2(l*l)+z2(s*s))+z2(t*t))&&j2[r+520>>2]>z2(z2(z2(k*k)+z2(c*c))+z2(b*b))&&(o=j2[r+516>>2],t=z2(t*o),j2[r+396>>2]=t,s=z2(s*o),j2[r+392>>2]=s,l=z2(l*o),j2[r+388>>2]=l,b=z2(b*o),j2[a>>2]=b,c=z2(c*o),j2[i>>2]=c,k=z2(k*o),j2[r+372>>2]=k),(o=z2(_2(z2(z2(z2(k*k)+z2(c*c))+z2(b*b)))))<v&&(o>z2(.004999999888241291)?(o=z2(z2(1)/o),b=z2(b-z2(z2(b*o)*z2(.004999999888241291))),j2[a>>2]=b,c=z2(c-z2(z2(c*o)*z2(.004999999888241291))),j2[i>>2]=c,k=z2(k-z2(z2(k*o)*z2(.004999999888241291))),j2[r+372>>2]=k):(T2[u>>2]=0,T2[u+4>>2]=0,T2[(u=u+8|0)>>2]=0,T2[u+4>>2]=0,b=z2(0),c=z2(0),k=z2(0))),(o=z2(_2(z2(z2(z2(l*l)+z2(s*s))+z2(t*t)))))<n&&(o>z2(.004999999888241291)?(v=t,t=z2(z2(1)/o),j2[r+396>>2]=v-z2(z2(v*t)*z2(.004999999888241291)),j2[r+392>>2]=s-z2(z2(s*t)*z2(.004999999888241291)),j2[r+388>>2]=l-z2(z2(l*t)*z2(.004999999888241291))):(T2[e>>2]=0,T2[4+e>>2]=0,T2[(u=8+e|0)>>2]=0,T2[u+4>>2]=0))),W4(r+4|0,k,c,b,e,f,r+68|0),u=T2[A+248>>2]),d=d+4|0,(0|(B=B+1|0))<(0|u););},function(A,f){A|=0,f=z2(f);var r,e,i,a,n,o,b,t,c,u,k,l=0,s=0,v=0,d=0,B=z2(0),Q=0,g=0,w=z2(0),G=0,C=0,E=z2(0);if(L2=l=L2-304|0,1<=(0|(G=T2[A+248>>2])))for(d=T2[A+256>>2],i=56+l|0,a=40+l|0,n=24+l|0,C=104+l|0,o=168+l|0,b=152+l|0,Q=288+l|0;;){v=T2[d>>2],T2[v+268>>2]=1065353216;A:{f:switch(T2[v+220>>2]-2|0){case 0:case 3:break A;default:break f;}3&S2[v+204|0]||(W4(g=v+4|0,j2[v+372>>2],j2[(c=v+376|0)>>2],j2[(u=v+380|0)>>2],k=v+388|0,f,240+l|0),S2[A+44|0]&&(B=j2[v+276>>2],(B=z2(B*B))!=z2(0)&&(w=z2(j2[288+l>>2]-j2[(s=v+52|0)>>2]),E=z2(w*w),w=z2(j2[292+l>>2]-j2[v+56>>2]),E=z2(E+z2(w*w)),w=z2(j2[296+l>>2]-j2[v+60>>2]),B<z2(E+z2(w*w))&&!(19<T2[T2[v+192>>2]+4>>2])&&(T2[6039]=T2[6039]+1,r=T2[A+68>>2],r=0|n1[T2[T2[r>>2]+36>>2]](r),e=T2[s+4>>2],T2[b>>2]=T2[s>>2],T2[4+b>>2]=e,t=T2[(s=s+8|0)+4>>2],T2[(e=8+b|0)>>2]=T2[s>>2],T2[4+e>>2]=t,s=T2[Q+4>>2],T2[o>>2]=T2[Q>>2],T2[4+o>>2]=s,t=T2[(s=Q+8|0)+4>>2],T2[(e=8+o|0)>>2]=T2[s>>2],T2[4+e>>2]=t,T2[140+l>>2]=1065353216,T2[136+l>>2]=20112,T2[216+l>>2]=0,T2[232+l>>2]=T2[A+24>>2],T2[228+l>>2]=r,T2[220+l>>2]=v,T2[C>>2]=0,T2[C+4>>2]=0,T2[(r=C+8|0)>>2]=0,T2[4+r>>2]=0,T2[C+16>>2]=0,T2[84+l>>2]=0,T2[88+l>>2]=0,T2[100+l>>2]=1065353216,T2[92+l>>2]=1065353216,T2[96+l>>2]=1065353216,T2[76+l>>2]=8,T2[80+l>>2]=0,T2[72+l>>2]=11936,T2[128+l>>2]=0,B=j2[v+272>>2],j2[108+l>>2]=B,j2[124+l>>2]=B,j2[224+l>>2]=j2[A+56>>2],r=T2[v+188>>2],T2[144+l>>2]=T2[r+4>>2],T2[148+l>>2]=T2[r+8>>2],e=T2[s+4>>2],T2[(r=8+i|0)>>2]=T2[s>>2],T2[4+r>>2]=e,s=T2[Q+4>>2],T2[i>>2]=T2[Q>>2],T2[4+i>>2]=s,e=T2[4+(r=g+8|0)>>2],T2[(s=16+l|0)>>2]=T2[r>>2],T2[s+4>>2]=e,r=T2[(s=v+20|0)+4>>2],T2[n>>2]=T2[s>>2],T2[4+n>>2]=r,e=T2[4+(r=v+28|0)>>2],T2[(s=8+n|0)>>2]=T2[r>>2],T2[s+4>>2]=e,r=T2[(s=v+36|0)+4>>2],T2[a>>2]=T2[s>>2],T2[4+a>>2]=r,e=T2[4+(r=v+44|0)>>2],T2[(s=8+a|0)>>2]=T2[r>>2],T2[s+4>>2]=e,s=T2[g+4>>2],T2[8+l>>2]=T2[g>>2],T2[12+l>>2]=s,T4(A,72+l|0,g,8+l|0,136+l|0,z2(0)),(B=j2[140+l>>2])<z2(1))))?(j2[v+268>>2]=B,W4(g,j2[v+372>>2],j2[c>>2],j2[u>>2],k,z2(B*f),240+l|0),E4(v,240+l|(T2[v+268>>2]=0))):E4(v,240+l|0));}if(d=d+4|0,!(G=G-1|0))break;}if(S2[A+291|0]&&!((0|(d=T2[A+324>>2]))<1))for(g=0;;){if(Q=T2[T2[A+332>>2]+(g<<2)>>2],1<=(0|(G=T2[Q+844>>2]))){for(s=T2[Q+840>>2],s=T2[s+252>>2]<<30>>31&s,v=T2[Q+836>>2],v=T2[v+252>>2]<<30>>31&v,d=Q+68|0,C=0;(f=z2(j2[v+232>>2]*j2[s+232>>2]))>z2(0)&&(B=j2[d+68>>2])!=z2(0)&&(T2[148+l>>2]=0,w=z2(f*z2(B*z2(-j2[d>>2]))),j2[136+l>>2]=w,E=z2(f*z2(B*z2(-j2[d+4>>2]))),j2[140+l>>2]=E,f=z2(f*z2(B*z2(-j2[d+8>>2]))),j2[144+l>>2]=f,T2[252+l>>2]=0,j2[248+l>>2]=j2[d-8>>2]-j2[v+60>>2],j2[244+l>>2]=j2[d-12>>2]-j2[v+56>>2],j2[240+l>>2]=j2[d-16>>2]-j2[v+52>>2],T2[20+l>>2]=0,j2[16+l>>2]=j2[d-24>>2]-j2[s+60>>2],j2[12+l>>2]=j2[d-28>>2]-j2[s+56>>2],j2[8+l>>2]=j2[d-32>>2]-j2[s+52>>2],_4(v,136+l|0,240+l|0),T2[84+l>>2]=0,j2[80+l>>2]=-f,j2[76+l>>2]=-E,j2[72+l>>2]=-w,_4(s,72+l|0,8+l|0),G=T2[Q+844>>2]),d=d+208|0,(0|(C=C+1|0))<(0|G););d=T2[A+324>>2];}if(!((0|(g=g+1|0))<(0|d)))break;}L2=304+l|0;},function(A){var f=0,r=0,e=0,i=0,a=0,n=0,o=0,b=0,f=T2[(A|=0)+220>>2];if(n1[T2[T2[f>>2]+8>>2]](f,A,T2[A+24>>2]),1<=(0|(o=T2[A+324>>2])))for(b=T2[A+332>>2];;){if(f=T2[b+(n<<2)>>2],(r=T2[f+836>>2])&&(f=T2[f+840>>2])&&!(3&T2[r+204>>2]||3&S2[f+204|0])){if(f=T2[f+208>>2],i=T2[T2[A+220>>2]+16>>2],a=T2[r+208>>2],(0|(r=T2[(e=i+(a<<3)|0)>>2]))!=(0|a)&&(T2[e>>2]=T2[(r=i+(r<<3)|0)>>2],a=T2[r>>2],(0|(r=T2[(e=i+(a<<3)|0)>>2]))!=(0|a)))for(;T2[e>>2]=T2[(r=i+(r<<3)|0)>>2],a=T2[r>>2],(0|(r=T2[(e=i+(a<<3)|0)>>2]))!=(0|a););if((0|(e=T2[(r=i+(f<<3)|0)>>2]))!=(0|f)&&(T2[r>>2]=T2[(f=i+(e<<3)|0)>>2],f=T2[f>>2],(0|(r=T2[(e=i+(f<<3)|0)>>2]))!=(0|f)))for(;T2[e>>2]=T2[(f=i+(r<<3)|0)>>2],f=T2[f>>2],(0|(r=T2[(e=i+(f<<3)|0)>>2]))!=(0|f););(0|f)!=(0|a)&&(T2[(r=i+(a<<3)|0)>>2]=f,T2[(f=i+(f<<3)|0)+4>>2]=T2[f+4>>2]+T2[r+4>>2]);}if((0|o)==(0|(n=n+1|0)))break;}if(1<=(0|(o=T2[A+228>>2])))for(b=T2[A+236>>2],n=0;;){if(f=T2[b+(n<<2)>>2],S2[f+20|0]&&(r=T2[f+28>>2],!(3&S2[r+204|0]||(f=T2[f+32>>2],3&S2[f+204|0])))){if(f=T2[f+208>>2],i=T2[T2[A+220>>2]+16>>2],a=T2[r+208>>2],(0|(r=T2[(e=i+(a<<3)|0)>>2]))!=(0|a)&&(T2[e>>2]=T2[(r=i+(r<<3)|0)>>2],a=T2[r>>2],(0|(r=T2[(e=i+(a<<3)|0)>>2]))!=(0|a)))for(;T2[e>>2]=T2[(r=i+(r<<3)|0)>>2],a=T2[r>>2],(0|(r=T2[(e=i+(a<<3)|0)>>2]))!=(0|a););if((0|(e=T2[(r=i+(f<<3)|0)>>2]))!=(0|f)&&(T2[r>>2]=T2[(f=i+(e<<3)|0)>>2],f=T2[f>>2],(0|(r=T2[(e=i+(f<<3)|0)>>2]))!=(0|f)))for(;T2[e>>2]=T2[(f=i+(r<<3)|0)>>2],f=T2[f>>2],(0|(r=T2[(e=i+(f<<3)|0)>>2]))!=(0|f););(0|f)!=(0|a)&&(T2[(r=i+(a<<3)|0)>>2]=f,T2[(f=i+(f<<3)|0)+4>>2]=T2[f+4>>2]+T2[r+4>>2]);}if((0|o)==(0|(n=n+1|0)))break;}f=T2[A+220>>2],n1[T2[T2[f>>2]+12>>2]](f,A);},function(A,f){f|=0;var r,e,i,a,n,o,b,t,c=0,u=0,k=0,l=0,s=0,v=0,d=0,B=0,Q=0,g=0,w=0,G=0,C=0,E=0;if(L2=E=L2-16|0,(0|(k=T2[(A|=0)+196>>2]))<(0|(s=T2[A+228>>2]))){if((0|s)>T2[A+200>>2]){if(s&&(T2[5498]=T2[5498]+1,(c=K2(19+(s<<2)|0))&&(T2[(l=c+19&-16)-4>>2]=c)),1<=(0|k))for(c=k;T2[u+l>>2]=T2[T2[A+204>>2]+u>>2],u=u+4|0,c=c-1|0;);(c=T2[A+204>>2])&&S2[A+208|0]&&(T2[5499]=T2[5499]+1,q2(T2[c-4>>2])),T2[A+204>>2]=l,T2[A+200>>2]=s,p2[A+208|0]=1;}for(u=k<<2,c=s-k|0;u=u+4|(T2[T2[A+204>>2]+u>>2]=0),c=c-1|0;);}if(T2[A+196>>2]=s,1<=(0|n1[T2[T2[A>>2]+104>>2]](A)))for(c=u=0;T2[T2[A+204>>2]+u>>2]=T2[T2[A+236>>2]+u>>2],u=u+4|0,c=c+1|0,(0|n1[T2[T2[A>>2]+104>>2]](A))>(0|c););if(2<=(0|(c=T2[A+196>>2]))&&function A(f,r,e){var i=0,a=0,n=0,o=0,b=0,t=0,c=0,u=0,k=0,l=0;for(;;){for(k=r,a=T2[f+12>>2],u=T2[a+((r+e|0)/2<<2)>>2],i=e;;){if(c=T2[T2[u+28>>2]+208>>2],b=(0|c)<0)for(n=r-1|0,o=((r<<2)+a|0)-4|0,l=T2[T2[u+32>>2]+208>>2];n=n+1|0,t=T2[(o=o+4|0)>>2],(0|(r=(0|(r=T2[T2[t+28>>2]+208>>2]))<=-1?T2[T2[t+32>>2]+208>>2]:r))<(0|l););else for(n=r-1|0,o=((r<<2)+a|0)-4|0;n=n+1|0,t=T2[(o=o+4|0)>>2],(0|(r=(0|(r=T2[T2[t+28>>2]+208>>2]))<=-1?T2[T2[t+32>>2]+208>>2]:r))<(0|c););for(b?(r=i+1|0,b=(i<<2)+a|0,c=T2[T2[u+32>>2]+208>>2]):(r=i+1|0,b=(i<<2)+a|0);a=T2[b>>2],(0|(i=T2[T2[a+28>>2]+208>>2]))<=-1&&(i=T2[T2[a+32>>2]+208>>2]),b=b-4|0,r=r-1|0,(0|c)<(0|i););if(!((0|(r=(0|r)<(0|n)?(i=r,n):(T2[o>>2]=a,T2[T2[f+12>>2]+(r<<2)>>2]=t,i=r-1|0,n+1|0)))<=(0|i)))break;a=T2[f+12>>2];}if((0|k)<(0|i)&&A(f,k,i),!((0|r)<(0|e)))break;}}(A+192|0,0,c-1|0),(c=0)|n1[T2[T2[A>>2]+104>>2]](A)&&(c=T2[A+204>>2]),u=T2[A+196>>2],n=k=T2[A+212>>2],o=0|n1[T2[T2[A>>2]+20>>2]](A),T2[n+20>>2]=o,T2[k+16>>2]=u,T2[k+12>>2]=c,T2[k+4>>2]=f,(0|(c=T2[k+32>>2]))<=-1)for(T2[k+36>>2]<=-1&&((u=T2[k+40>>2])&&S2[k+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[u-4>>2])),T2[k+36>>2]=0,T2[k+40>>2]=0,p2[k+44|0]=1),l=c<<2;l=l+4|(T2[T2[k+40>>2]+l>>2]=0),(u=c)>>>0<=(c=c+1|0)>>>0;);if(((T2[k+32>>2]=0)|(c=T2[k+52>>2]))<=-1)for(T2[k+56>>2]<=-1&&((u=T2[k+60>>2])&&S2[k- -64|0]&&(T2[5499]=T2[5499]+1,q2(T2[u-4>>2])),T2[k+56>>2]=0,T2[k+60>>2]=0,p2[k- -64|0]=1),l=c<<2;l=l+4|(T2[T2[k+60>>2]+l>>2]=0),(u=c)>>>0<=(c=c+1|0)>>>0;);if(((T2[k+52>>2]=0)|(c=T2[k+72>>2]))<=-1)for(T2[k+76>>2]<=-1&&((u=T2[k+80>>2])&&S2[k+84|0]&&(T2[5499]=T2[5499]+1,q2(T2[u-4>>2])),T2[k+76>>2]=0,T2[k+80>>2]=0,p2[k+84|0]=1),l=c<<2;l=l+4|(T2[T2[k+80>>2]+l>>2]=0),(u=c)>>>0<=(c=c+1|0)>>>0;);if(T2[k+72>>2]=0,c=T2[A+216>>2],u=T2[A+24>>2],o=c,b=T2[A+8>>2],t=0|n1[T2[T2[u>>2]+36>>2]](u),n=T2[T2[c>>2]+8>>2],n1[n](0|o,0|b,0|t),i=T2[A+212>>2],B=T2[A+24>>2],r=T2[A+220>>2],(0|(u=T2[r+28>>2]))<=-1)for(T2[r+32>>2]<=-1&&((c=T2[r+36>>2])&&S2[r+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[c-4>>2])),T2[r+32>>2]=0,T2[r+36>>2]=0,p2[r+40|0]=1),l=u<<2;l=l+4|(T2[T2[r+36>>2]+l>>2]=0),(c=u)>>>0<=(u=c+1|0)>>>0;);if(!(((T2[r+28>>2]=0)|(d=T2[r+8>>2]))<=0)){for(Q=r+4|0,k=T2[r+16>>2],s=0;;){if((0|(c=T2[(l=k+((u=s)<<3)|0)>>2]))!=(0|u)&&(T2[l>>2]=T2[(c=k+(c<<3)|0)>>2],(0|(u=T2[c>>2]))!=(0|(v=T2[(c=k+(u<<3)|0)>>2]))))for(;T2[(u=c)>>2]=T2[(c=k+(v<<3)|0)>>2],(0|(u=T2[c>>2]))!=(0|(v=T2[(c=k+(u<<3)|0)>>2])););if(T2[l>>2]=u,(0|d)==(0|(s=s+1|0)))break;}if(2<=(0|d)&&(!function A(f,r,e){for(var i,a,n,o=0,b=0,t=0,c=0,u=0,k=0,l=0;;){for(u=T2[f+12>>2],a=T2[u+((e+(i=r)|0)/2<<3)>>2],t=r,c=e;;){for(b=((t<<3)+u|0)-8|0;t=t+1|0,T2[(b=b+8|0)>>2]<(0|a););for(r=t-1|0,o=8+(c<<3)|0;c=c-1|0,k=o+u|0,o=l=o-8|0,T2[k-8>>2]>(0|a););if((0|r)<=(0|(o=c+1|0))&&(n=T2[b>>2],k=T2[b+4>>2],r=T2[4+(o=u+l|0)>>2],T2[b>>2]=T2[o>>2],T2[b+4>>2]=r,r=T2[f+12>>2]+l|0,T2[r>>2]=n,T2[r+4>>2]=k,o=c,r=t),!((0|r)<=(0|o)))break;u=T2[f+12>>2],t=r,c=o;}if((0|i)<(0|o)&&A(f,i,o),!((0|r)<(0|e)))break;}}(Q,0,d-1|0),d=T2[r+8>>2]),!((0|d)<1))for(C=(G=T2[r+16>>2])+4|0,a=G+8|0,u=0;;){s=(l=(0|(c=(k=u)+1|0))<(0|d)?d:c)-1|0,c=(v=k<<3)+a|0,Q=T2[v+G>>2];A:{for(;;){if((0|u)==(0|s)){u=l;break A;}if(u=u+1|0,g=T2[c>>2],c=c+8|0,(0|Q)!=(0|g))break;}s=u-1|0;}A:if(!((0|s)<(0|k))){for(g=k-1|0,l=T2[A+16>>2],w=1,c=v=v+C|0;e=T2[l+(T2[c>>2]<<2)>>2],(0|Q)==T2[e+208>>2]&&(w&=4!=(0|(e=T2[e+220>>2]))&1!=(0|e)),c=c+8|0,(0|(g=g+1|0))!=(0|s););if(!w)for(c=s-k|0;;){if(k=T2[l+(T2[v>>2]<<2)>>2],(0|Q)==T2[k+208>>2]&&2==T2[k+220>>2]&&(T2[k+220>>2]=3,T2[k+224>>2]=0),!c)break A;v=v+8|0,c=c-1|0;}for(c=s-k|0;;){if(k=T2[l+(T2[v>>2]<<2)>>2],(0|Q)==T2[k+208>>2]&&4!=(-2&T2[k+220>>2])&&(T2[k+220>>2]=2),!c)break A;v=v+8|0,c=c-1|0;}}if(!((0|u)<(0|d)))break;}}if(1<=(0|(v=0|n1[T2[T2[B>>2]+36>>2]](B))))for(l=0;;){Q=0|n1[T2[T2[B>>2]+40>>2]](B,l),c=T2[Q+840>>2],u=T2[Q+836>>2];A:{if(2==T2[u+220>>2]||!u){if(!c)break A;if(2==T2[c+220>>2])break A;}if(2&(k=T2[u+204>>2])&&(4&k||2!=T2[u+220>>2]&&(3&S2[c+204|0]||(4!=(-2&T2[c+220>>2])&&(T2[c+220>>2]=1),T2[c+224>>2]=0))),2&(s=T2[c+204>>2])&&(4&s|3&k||2!=T2[c+220>>2]&&(4!=(-2&T2[u+220>>2])&&(T2[u+220>>2]=1),T2[u+224>>2]=0)),S2[r+64|0]&&0|n1[T2[T2[B>>2]+28>>2]](B,u,c)){if((0|(k=T2[r+28>>2]))==T2[r+32>>2]&&!((0|(d=k?k<<1:1))<=(0|k))){if(s=0,d&&(T2[5498]=T2[5498]+1,(c=K2(19+(d<<2)|0))&&(T2[(s=c+19&-16)-4>>2]=c)),1<=(0|k))for(u=0,c=k;T2[u+s>>2]=T2[T2[r+36>>2]+u>>2],u=u+4|0,c=c-1|0;);(c=T2[r+36>>2])&&S2[r+40|0]&&(T2[5499]=T2[5499]+1,q2(T2[c-4>>2]),k=T2[r+28>>2]),T2[r+36>>2]=s,p2[r+40|0]=1,T2[r+32>>2]=d;}T2[r+28>>2]=k+1,T2[T2[r+36>>2]+(k<<2)>>2]=Q;}}if((0|v)==(0|(l=l+1|0)))break;}if(S2[r+64|0]){if(Q=T2[r+8>>2],2<=(0|(w=T2[r+28>>2]))&&function A(f,r,e){for(var i,a,n,o=0,b=0,t=0,c=0,u=0,k=0,l=0;;){for(b=T2[f+12>>2],i=T2[b+(((a=r)+e|0)/2<<2)>>2],o=e;;){if(u=(0|(l=T2[T2[i+836>>2]+208>>2]))<0)for(t=r-1|0,c=((r<<2)+b|0)-4|0,n=T2[T2[i+840>>2]+208>>2];t=t+1|0,k=T2[(c=c+4|0)>>2],(0|(r=(0|(r=T2[T2[k+836>>2]+208>>2]))<=-1?T2[T2[k+840>>2]+208>>2]:r))<(0|n););else for(t=r-1|0,c=((r<<2)+b|0)-4|0;t=t+1|0,k=T2[(c=c+4|0)>>2],(0|(r=(0|(r=T2[T2[k+836>>2]+208>>2]))<=-1?T2[T2[k+840>>2]+208>>2]:r))<(0|l););for(u?(r=o+1|0,u=(o<<2)+b|0,l=T2[T2[i+840>>2]+208>>2]):(r=o+1|0,u=(o<<2)+b|0);b=T2[u>>2],u=u-4|0,r=r-1|0,(0|l)<(0|(o=(0|(o=T2[T2[b+836>>2]+208>>2]))<=-1?T2[T2[b+840>>2]+208>>2]:o)););if(!((0|(r=(0|r)<(0|t)?(o=r,t):(T2[c>>2]=b,T2[T2[f+12>>2]+(r<<2)>>2]=k,o=r-1|0,t+1|0)))<=(0|o)))break;b=T2[f+12>>2];}if((0|a)<(0|o)&&A(f,a,o),!((0|r)<(0|e)))break;}}(r+24|0,0,w-1|0),!((0|Q)<1))for(B=s=0,d=1;;){l=T2[r+16>>2],G=T2[l+(s<<3)>>2],C=1;A:if(!((0|Q)<=(0|s)))for(c=T2[r+52>>2],u=T2[r+48>>2];;){if(g=T2[T2[A+16>>2]+(T2[4+((s<<3)+l|0)>>2]<<2)>>2],(0|c)==(0|u)){if((0|(k=c?c<<1:1))<=(0|c))k=c;else {if(v=0,k&&(T2[5498]=T2[5498]+1,(u=K2(19+(k<<2)|0))&&(T2[(v=u+19&-16)-4>>2]=u)),1<=(0|c))for(u=0,l=c;T2[u+v>>2]=T2[T2[r+56>>2]+u>>2],u=u+4|0,l=l-1|0;);(u=T2[r+56>>2])&&S2[r+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[u-4>>2]),c=T2[r+48>>2]),T2[r+56>>2]=v,p2[r+60|0]=1,T2[r+52>>2]=k;}}else k=c,c=u;if(T2[r+48>>2]=u=c+1|0,T2[T2[r+56>>2]+(c<<2)>>2]=g,C&=2==(0|(c=T2[g+220>>2]))|5==(0|c),(0|Q)==(0|(s=s+1|0))){s=Q;break A;}if(c=k,l=T2[r+16>>2],(0|G)!=T2[l+(s<<3)>>2])break;}if(!(((c=g=0)|w)<=(0|B))&&(l=T2[r+36>>2],c=T2[(k=l+(v=B<<2)|0)>>2],(0|(u=T2[T2[c+836>>2]+208>>2]))<=-1&&(u=T2[T2[c+840>>2]+208>>2]),((c=0)|u)==(0|G))){for(g=(c=(0|(c=B+1|0))<(0|w)?w:c)-1|0,u=4+(l+v|0)|0,d=B;;){if((0|d)!=(0|g)){if(v=T2[u>>2],d=d+1|0,u=u+4|0,(0|(l=(0|(l=T2[T2[v+836>>2]+208>>2]))<=-1?T2[T2[v+840>>2]+208>>2]:l))==(0|G))continue;}else d=c;break;}g=d-B|0,c=k;}if(C||n1[T2[T2[i>>2]+8>>2]](i,T2[r+56>>2],T2[r+48>>2],c,g,G),(0|(u=T2[r+48>>2]))<=-1)for(T2[r+52>>2]<=-1&&((c=T2[r+56>>2])&&S2[r+60|0]&&(T2[5499]=T2[5499]+1,q2(T2[c-4>>2])),p2[r+60|0]=1,T2[r+52>>2]=0,T2[r+56>>2]=0),l=u<<2;l=l+4|(T2[T2[r+56>>2]+l>>2]=0),(c=u)>>>0<=(u=c+1|0)>>>0;);if(B=g?d:B,!(((T2[r+48>>2]=0)|s)<(0|Q)))break;}}else c=0|n1[T2[T2[B>>2]+44>>2]](B),u=0|n1[T2[T2[B>>2]+36>>2]](B),n1[T2[T2[i>>2]+8>>2]](i,T2[A+16>>2],T2[A+8>>2],c,u,-1);P4(T2[A+212>>2]),c=T2[A+216>>2],n1[T2[T2[c>>2]+16>>2]](c,f,T2[A+72>>2]),L2=16+E|0;},function(A,f){A|=0,f=z2(f),z2(0);var r,e,i,a,n,o=0,b=(0),t=0,c=0;if(1<=(0|(b=T2[A+248>>2])))for(n=S2[23468];;){A:if(r=T2[T2[A+256>>2]+t>>2]){f:{r:{e:switch((o=T2[r+220>>2])-2|0){case 0:case 2:break r;default:break e;}if(e=j2[r+372>>2],i=z2(e*e),e=j2[r+376>>2],i=z2(i+z2(e*e)),e=j2[r+380>>2],i=z2(i+z2(e*e)),e=j2[r+532>>2],i<z2(e*e)&&(e=j2[r+388>>2],i=z2(e*e),e=j2[r+392>>2],i=z2(i+z2(e*e)),e=j2[r+396>>2],i=z2(i+z2(e*e)),e=j2[r+536>>2],i<z2(e*e))){j2[r+224>>2]=j2[r+224>>2]+f;break f;}if(T2[r+224>>2]=0,4==(-2&o))break f;T2[r+220>>2]=o=0;break f;}if(4==(0|o))break A;}a=-2&o;f:{r:if(!n){e:{if(2!=(0|a)){if(!(j2[r+224>>2]>z2(2)))break r;if(3&S2[r+204|0]){if(4==(0|a))break A;break f;}if(1!=(0|o))break e;T2[r+220>>2]=3;break A;}if(3&S2[r+204|0])break f;}if(2!=(0|o))break A;T2[r+388>>2]=0,T2[r+392>>2]=0,T2[r+372>>2]=0,T2[r+376>>2]=0,T2[(o=r+396|0)>>2]=0,T2[o+4>>2]=0,T2[(o=r+380|0)>>2]=0,T2[o+4>>2]=0,T2[r+304>>2]=T2[r+304>>2]+2,b=T2[A+248>>2];break A;}if(4==(0|a))break A;T2[r+220>>2]=1;break A;}T2[r+220>>2]=2;}if(t=t+4|0,!((0|(c=c+1|0))<(0|b)))break;}},function(A,f){A|=0,f=z2(f);var r,e,i,a=0,n=0;if((a=T2[A+84>>2])&&n1[0|a](A,f),n1[T2[T2[A>>2]+140>>2]](A,f),T2[A+32>>2]=a=0,j2[A+28>>2]=f,e=A+48|0,i=0|n1[T2[T2[A>>2]+20>>2]](A),T2[e>>2]=i,n1[T2[T2[A>>2]+164>>2]](A,f),n1[T2[T2[A>>2]+44>>2]](A),n1[T2[T2[A>>2]+148>>2]](A),j2[A+104>>2]=f,n1[T2[T2[A>>2]+152>>2]](A,A+92|0),n1[T2[T2[A>>2]+144>>2]](A,f),1<=T2[A+296>>2])for(;r=T2[T2[A+304>>2]+a>>2],n1[T2[T2[r>>2]+8>>2]](r,A,f),a=a+4|0,(0|(n=n+1|0))<T2[A+296>>2];);n1[T2[T2[A>>2]+156>>2]](A,f),(a=T2[A+80>>2])&&n1[0|a](A,f);},function(A,f){A|=0,f=z2(f);var r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M,I,x=0,y=0,U=0,X=0,p=(0),T=(0),S=(0),j=(0);if(L2=y=L2-512|0,1<=T2[A+324>>2])for(;T=T2[A+24>>2],n1[T2[T2[T>>2]+16>>2]](T,T2[T2[A+332>>2]+S>>2]),S=S+4|0,(0|(U=U+1|0))<T2[A+324>>2];);if((T=T2[A+332>>2])&&S2[A+336|0]&&(T2[5499]=T2[5499]+1,q2(T2[T-4>>2])),T2[A+332>>2]=0,T2[A+324>>2]=0,T2[A+328>>2]=0,(p2[A+336|0]=1)<=(0|(D=T2[A+248>>2])))for(I=T2[A+256>>2],b=124+y|0,s=92+y|0,v=72+y|0,T=392+y|0,d=264+y|0,B=248+y|0,Q=232+y|0,u=312+y|0,g=376+y|0,w=360+y|0,c=496+y|0,S=0;;){r=T2[(S<<2)+I>>2],T2[r+268>>2]=1065353216;A:{f:switch(T2[r+220>>2]-2|0){case 0:case 3:break A;default:break f;}if(!(3&S2[r+204|0])&&(W4(a=r+4|0,j2[r+372>>2],j2[r+376>>2],j2[r+380>>2],r+388|0,f,448+y|0),S2[A+44|0]&&(e=j2[r+276>>2],(n=z2(e*e))!=z2(0)&&(k=j2[496+y>>2],e=z2(k-j2[(t=r+52|0)>>2]),i=z2(e*e),l=j2[500+y>>2],e=z2(l-j2[r+56>>2]),o=z2(i+z2(e*e)),i=j2[504+y>>2],e=z2(i-j2[r+60>>2]),n<z2(o+z2(e*e))&&!(19<T2[T2[r+192>>2]+4>>2])&&(T2[6039]=T2[6039]+1,x=T2[A+68>>2],p=0|n1[T2[T2[x>>2]+36>>2]](x),x=T2[4+t>>2],T2[w>>2]=T2[t>>2],T2[4+w>>2]=x,x=T2[(U=G=8+t|0)+4>>2],T2[(X=8+w|0)>>2]=T2[U>>2],T2[X+4>>2]=x,x=T2[4+c>>2],T2[g>>2]=T2[c>>2],T2[4+g>>2]=x,x=T2[(X=8+c|0)+4>>2],T2[(U=8+g|0)>>2]=T2[X>>2],T2[U+4>>2]=x,T2[348+y>>2]=1065353216,T2[344+y>>2]=20112,T2[424+y>>2]=0,T2[440+y>>2]=T2[A+24>>2],T2[436+y>>2]=p,T2[428+y>>2]=r,T2[u>>2]=0,T2[4+u>>2]=0,T2[(x=8+u|0)>>2]=0,T2[x+4>>2]=0,T2[16+u>>2]=0,T2[292+y>>2]=0,T2[296+y>>2]=0,T2[308+y>>2]=1065353216,T2[300+y>>2]=1065353216,T2[304+y>>2]=1065353216,T2[284+y>>2]=8,T2[288+y>>2]=0,T2[280+y>>2]=11936,T2[336+y>>2]=0,e=j2[r+272>>2],j2[316+y>>2]=e,j2[332+y>>2]=e,j2[432+y>>2]=j2[A+56>>2],x=T2[r+188>>2],T2[352+y>>2]=T2[x+4>>2],T2[356+y>>2]=T2[x+8>>2],x=T2[X+4>>2],T2[(U=8+d|0)>>2]=T2[X>>2],T2[U+4>>2]=x,x=T2[4+c>>2],T2[d>>2]=T2[c>>2],T2[4+d>>2]=x,x=T2[(U=8+a|0)+4>>2],T2[(X=224+y|0)>>2]=T2[U>>2],T2[X+4>>2]=x,x=T2[(U=r+20|0)+4>>2],T2[Q>>2]=T2[U>>2],T2[4+Q>>2]=x,x=T2[(U=r+28|0)+4>>2],T2[(X=8+Q|0)>>2]=T2[U>>2],T2[X+4>>2]=x,x=T2[(U=r+36|0)+4>>2],T2[B>>2]=T2[U>>2],T2[4+B>>2]=x,x=T2[(U=r+44|0)+4>>2],T2[(X=8+B|0)>>2]=T2[U>>2],T2[X+4>>2]=x,x=T2[4+a>>2],T2[216+y>>2]=T2[a>>2],T2[220+y>>2]=x,T4(A,280+y|0,a,216+y|0,344+y|0,z2(0)),(e=j2[348+y>>2])<z2(1)))))){if(h=z2(e*z2(l-j2[r+56>>2])),o=z2(e*z2(k-j2[r+52>>2])),Z=z2(e*z2(i-j2[r+60>>2])),n=z2(z2(z2(h*z2(-j2[396+y>>2]))-z2(o*j2[392+y>>2]))-z2(Z*j2[400+y>>2])),x=T2[A+24>>2],a=0|n1[T2[T2[x>>2]+12>>2]](x,r,T2[424+y>>2]),(0|(U=T2[A+324>>2]))==T2[A+328>>2]&&!((0|(p=U?U<<1:1))<=(0|U))){if(X=0,p&&(T2[5498]=T2[5498]+1,(x=K2(19+(p<<2)|0))&&(T2[(X=x+19&-16)-4>>2]=x)),1<=(0|U))for(j=0,x=U;T2[X+j>>2]=T2[T2[A+332>>2]+j>>2],j=j+4|0,x=x-1|0;);(x=T2[A+332>>2])&&S2[A+336|0]&&(T2[5499]=T2[5499]+1,q2(T2[x-4>>2]),U=T2[A+324>>2]),T2[A+332>>2]=X,p2[A+336|0]=1,T2[A+328>>2]=p;}T2[T2[A+332>>2]+(U<<2)>>2]=a,T2[A+324>>2]=U+1,x=T2[424+y>>2],Y=j2[x+20>>2],R=j2[x+36>>2],F=j2[x+40>>2],W=j2[x+8>>2],m=j2[x+24>>2],C=j2[x+60>>2],k=j2[x+56>>2],E=j2[x+52>>2],N=j2[x+44>>2],V=j2[x+12>>2],J=j2[x+28>>2],M=j2[x+4>>2],l=j2[r+60>>2],i=j2[r+52>>2],e=j2[r+56>>2],T2[(x=16+y|0)>>2]=0,T2[x+4>>2]=0,T2[s>>2]=0,T2[4+s>>2]=0,T2[(x=8+s|0)>>2]=0,T2[x+4>>2]=0,T2[b>>2]=0,T2[4+b>>2]=0,T2[(x=8+b|0)>>2]=0,T2[x+4>>2]=0,T2[(x=16+b|0)>>2]=0,T2[x+4>>2]=0,T2[(x=24+b|0)>>2]=0,T2[x+4>>2]=0,T2[(x=32+b|0)>>2]=0,T2[x+4>>2]=0,T2[(x=40+b|0)>>2]=0,T2[x+4>>2]=0,T2[48+b>>2]=0,x=T2[T+4>>2],T2[v>>2]=T2[T>>2],T2[4+v>>2]=x,x=T2[(U=T+8|0)+4>>2],T2[(X=8+v|0)>>2]=T2[U>>2],T2[X+4>>2]=x,T2[8+y>>2]=0,T2[12+y>>2]=0,T2[36+y>>2]=0,j2[88+y>>2]=n,o=z2(o+i),n=z2(h+e),i=z2(Z+l),e=z2(-k),j2[32+y>>2]=z2(z2(z2(V*o)+z2(J*n))+z2(N*i))+z2(z2(z2(J*e)-z2(V*E))-z2(N*C)),j2[28+y>>2]=z2(z2(z2(o*W)+z2(n*m))+z2(i*F))+z2(z2(z2(m*e)-z2(W*E))-z2(F*C)),j2[24+y>>2]=z2(z2(z2(o*M)+z2(n*Y))+z2(i*R))+z2(z2(z2(Y*e)-z2(M*E))-z2(R*C)),p=P2(W0(a,8+y|0),208)+a|0,T2[p+100>>2]=0,j2[p+88>>2]=F2(z2(H2(z2(j2[r+228>>2]*j2[T2[424+y>>2]+228>>2]),z2(-10))),z2(10)),x=T2[4+G>>2],T2[(U=p+60|0)>>2]=T2[G>>2],T2[U+4>>2]=x,X=T2[4+t>>2],U=T2[t>>2],T2[p+48>>2]=0,j2[p+44>>2]=i,j2[p+40>>2]=n,T2[(x=p+52|0)>>2]=U,T2[x+4>>2]=X,j2[p+36>>2]=o;}}if((0|D)==(0|(S=S+1|0)))break;}L2=512+y|0;},function(A,f){A|=0,f=z2(f);var r,e,i,a,n,o,b,t,c,u=0,k=0,l=0,s=0,v=(0),d=0;if(L2=s=L2-32|0,1<=(0|(l=T2[A+8>>2])))for(i=z2(z2(1)/f),k=l;(u=T2[T2[A+16>>2]+v>>2])&&2&T2[u+252>>2]&&2!=T2[u+220>>2]&&(k=(a=2&S2[u+204|0])?l:k,a&&f!=z2(0)&&((k=T2[u+540>>2])&&n1[T2[T2[k>>2]+8>>2]](k,u+4|0),T2[u+384>>2]=0,j2[(k=u+380|0)>>2]=i*z2(j2[(l=u+60|0)>>2]-j2[(a=u+124|0)>>2]),j2[u+376>>2]=i*z2(j2[u+56>>2]-j2[u+120>>2]),j2[(r=u+372|0)>>2]=i*z2(j2[(n=u+52|0)>>2]-j2[(o=u+116|0)>>2]),G4(u+68|0,u+4|0,16+s|0,12+s|0),T2[u+400>>2]=0,t=j2[12+s>>2],j2[(e=u+396|0)>>2]=i*z2(t*j2[24+s>>2]),j2[u+392>>2]=i*z2(t*j2[20+s>>2]),j2[(b=u+388|0)>>2]=i*z2(t*j2[16+s>>2]),c=T2[k+4>>2],T2[(t=u+140|0)>>2]=T2[k>>2],T2[4+t>>2]=c,k=T2[4+r>>2],T2[u+132>>2]=T2[r>>2],T2[u+136>>2]=k,k=T2[4+b>>2],T2[u+148>>2]=T2[b>>2],T2[u+152>>2]=k,r=T2[4+e>>2],T2[(k=u+156|0)>>2]=T2[e>>2],T2[k+4>>2]=r,k=T2[u+8>>2],T2[u+68>>2]=T2[u+4>>2],T2[u+72>>2]=k,e=T2[4+(r=u+12|0)>>2],T2[(k=u+76|0)>>2]=T2[r>>2],T2[k+4>>2]=e,e=T2[4+(r=u+20|0)>>2],T2[(k=u+84|0)>>2]=T2[r>>2],T2[k+4>>2]=e,e=T2[4+(r=u+28|0)>>2],T2[(k=u+92|0)>>2]=T2[r>>2],T2[k+4>>2]=e,e=T2[4+(r=u+44|0)>>2],T2[(k=u+108|0)>>2]=T2[r>>2],T2[k+4>>2]=e,k=u+100|0,r=T2[(u=u+36|0)+4>>2],T2[k>>2]=T2[u>>2],T2[k+4>>2]=r,k=T2[l+4>>2],T2[a>>2]=T2[l>>2],T2[4+a>>2]=k,k=T2[4+n>>2],T2[o>>2]=T2[n>>2],T2[4+o>>2]=k,k=l=T2[A+8>>2])),v=v+4|0,(0|(d=d+1|0))<(0|k););L2=32+s|0;},function(A,f){A|=0,f|=0;var r,e=0,i=0,a=0,n=0,o=z2(0),b=z2(0),t=0,c=z2(0),u=z2(0),k=z2(0),l=z2(0),s=0,v=z2(0),d=z2(0),B=z2(0),Q=z2(0),g=0,w=0,G=z2(0),C=(z2(0)),E=z2(0),D=0,h=z2(0),Z=z2(0),Y=z2(0),R=z2(0),F=z2(0),W=z2(0),m=0,N=0,V=z2(0),J=z2(0),M=0,I=0,x=z2(0),y=z2(0),U=z2(0),X=0,p=z2(0),T=z2(0),S=z2(0),j=z2(0),P=0;L2=e=L2-176|0,i=0|n1[T2[T2[A>>2]+20>>2]](A),i=0|n1[T2[T2[i>>2]+56>>2]](i),n=0|n1[T2[T2[A>>2]+20>>2]](A),n=0|n1[T2[T2[n>>2]+56>>2]](n);A:if(!((r=j2[f+40>>2])<=z2(0))){a=2048&i,s=4096&n;f:switch(T2[f+4>>2]-3|0){case 0:if(T2[(n=172+e|0)>>2]=0,T2[(i=t=164+e|0)>>2]=0,T2[i+4>>2]=0,T2[(i=156+e|0)>>2]=0,T2[i+4>>2]=0,T2[(i=124+e|0)>>2]=0,T2[i+4>>2]=0,T2[(i=136+e|0)>>2]=0,T2[i+4>>2]=0,T2[132+e>>2]=1065353216,T2[(i=144+e|0)>>2]=0,T2[i+4>>2]=0,T2[152+e>>2]=1065353216,T2[116+e>>2]=0,T2[120+e>>2]=0,T2[112+e>>2]=1065353216,i=T2[f+28>>2],u=j2[i+52>>2],k=j2[i+8>>2],l=j2[i+12>>2],v=j2[i+56>>2],d=j2[i+28>>2],B=j2[i+20>>2],Q=j2[i+24>>2],o=j2[i+60>>2],c=j2[i+44>>2],b=j2[i+36>>2],G=j2[i+40>>2],C=j2[i+4>>2],D=168+e|(T2[n>>2]=0),p=o,o=j2[f+300>>2],T=z2(b*o),b=j2[f+304>>2],S=c,c=j2[f+308>>2],j2[D>>2]=p+z2(z2(T+z2(G*b))+z2(S*c)),j2[t>>2]=v+z2(z2(z2(o*B)+z2(b*Q))+z2(c*d)),j2[160+e>>2]=u+z2(z2(z2(o*C)+z2(b*k))+z2(c*l)),i=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[i>>2]+64>>2]](i,112+e|0,r),i=T2[f+32>>2],u=j2[i+52>>2],k=j2[i+8>>2],l=j2[i+12>>2],v=j2[i+56>>2],d=j2[i+28>>2],B=j2[i+20>>2],Q=j2[i+24>>2],o=j2[i+60>>2],c=j2[i+44>>2],b=j2[i+36>>2],G=j2[i+40>>2],C=j2[i+4>>2],T2[n>>2]=0,p=o,o=j2[f+316>>2],T=z2(b*o),b=j2[f+320>>2],S=c,c=j2[f+324>>2],j2[D>>2]=p+z2(z2(T+z2(G*b))+z2(S*c)),j2[t>>2]=v+z2(z2(z2(o*B)+z2(b*Q))+z2(c*d)),j2[160+e>>2]=u+z2(z2(z2(o*C)+z2(b*k))+z2(c*l)),!a)break A;A=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[A>>2]+64>>2]](A,112+e|0,r);break A;case 1:if(i=T2[f+28>>2],x=j2[i+52>>2],o=j2[i+8>>2],b=j2[i+12>>2],Q=j2[f+584>>2],G=j2[f+552>>2],C=j2[f+568>>2],y=j2[i+56>>2],U=j2[i+60>>2],R=j2[f+608>>2],F=j2[f+600>>2],E=j2[f+604>>2],c=j2[i+28>>2],u=j2[i+20>>2],k=j2[i+24>>2],W=j2[f+588>>2],V=j2[f+556>>2],h=j2[f+572>>2],Z=j2[f+592>>2],l=j2[i+44>>2],Y=j2[f+560>>2],v=j2[i+36>>2],J=j2[f+576>>2],d=j2[i+40>>2],B=j2[i+4>>2],T2[172+e>>2]=0,T2[156+e>>2]=0,T2[140+e>>2]=0,j2[152+e>>2]=z2(z2(Y*v)+z2(J*d))+z2(Z*l),j2[148+e>>2]=z2(z2(V*v)+z2(h*d))+z2(W*l),j2[136+e>>2]=z2(z2(Y*u)+z2(J*k))+z2(Z*c),j2[132+e>>2]=z2(z2(V*u)+z2(h*k))+z2(W*c),j2[168+e>>2]=U+z2(z2(z2(v*F)+z2(d*E))+z2(l*R)),j2[164+e>>2]=y+z2(z2(z2(u*F)+z2(k*E))+z2(c*R)),T2[124+e>>2]=0,j2[144+e>>2]=z2(z2(G*v)+z2(C*d))+z2(Q*l),j2[128+e>>2]=z2(z2(G*u)+z2(C*k))+z2(Q*c),j2[120+e>>2]=z2(z2(B*Y)+z2(o*J))+z2(b*Z),j2[116+e>>2]=z2(z2(B*V)+z2(o*h))+z2(b*W),j2[112+e>>2]=z2(z2(G*B)+z2(C*o))+z2(Q*b),j2[160+e>>2]=x+z2(z2(z2(B*F)+z2(o*E))+z2(b*R)),a?(i=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[i>>2]+64>>2]](i,112+e|0,r),i=T2[f+32>>2],x=j2[i+52>>2],o=j2[i+8>>2],b=j2[i+12>>2],y=j2[i+56>>2],U=j2[i+60>>2],Q=j2[f+672>>2],G=j2[f+664>>2],C=j2[f+668>>2],c=j2[i+28>>2],u=j2[i+20>>2],k=j2[i+24>>2],R=j2[f+648>>2],F=j2[f+616>>2],E=j2[f+632>>2],W=j2[f+652>>2],V=j2[f+620>>2],h=j2[f+636>>2],Z=j2[f+656>>2],l=j2[i+44>>2],Y=j2[f+624>>2],v=j2[i+36>>2],J=j2[f+640>>2],d=j2[i+40>>2],B=j2[i+4>>2],T2[172+e>>2]=0,T2[156+e>>2]=0,T2[140+e>>2]=0,j2[152+e>>2]=z2(z2(Y*v)+z2(J*d))+z2(Z*l),j2[148+e>>2]=z2(z2(V*v)+z2(h*d))+z2(W*l),j2[144+e>>2]=z2(z2(F*v)+z2(E*d))+z2(R*l),j2[136+e>>2]=z2(z2(Y*u)+z2(J*k))+z2(Z*c),j2[132+e>>2]=z2(z2(V*u)+z2(h*k))+z2(W*c),j2[168+e>>2]=U+z2(z2(z2(v*G)+z2(d*C))+z2(l*Q)),j2[164+e>>2]=y+z2(z2(z2(u*G)+z2(k*C))+z2(c*Q)),j2[160+e>>2]=x+z2(z2(z2(B*G)+z2(o*C))+z2(b*Q)),T2[124+e>>2]=0,j2[128+e>>2]=z2(z2(F*u)+z2(E*k))+z2(R*c),j2[120+e>>2]=z2(z2(B*Y)+z2(o*J))+z2(b*Z),j2[116+e>>2]=z2(z2(B*V)+z2(o*h))+z2(b*W),j2[112+e>>2]=z2(z2(F*B)+z2(E*o))+z2(R*b),i=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[i>>2]+64>>2]](i,112+e|0,r)):(i=T2[f+32>>2],x=j2[i+52>>2],y=j2[i+56>>2],U=j2[i+60>>2],Q=j2[f+672>>2],G=j2[f+664>>2],C=j2[f+668>>2],o=j2[i+8>>2],b=j2[i+12>>2],c=j2[i+28>>2],u=j2[i+20>>2],k=j2[i+24>>2],R=j2[f+648>>2],F=j2[f+616>>2],E=j2[f+632>>2],W=j2[f+652>>2],V=j2[f+620>>2],h=j2[f+636>>2],Z=j2[f+656>>2],l=j2[i+44>>2],Y=j2[f+624>>2],v=j2[i+36>>2],J=j2[f+640>>2],d=j2[i+40>>2],B=j2[i+4>>2],T2[172+e>>2]=0,T2[156+e>>2]=0,T2[140+e>>2]=0,T2[124+e>>2]=0,j2[152+e>>2]=z2(z2(Y*v)+z2(J*d))+z2(Z*l),j2[148+e>>2]=z2(z2(V*v)+z2(h*d))+z2(W*l),j2[144+e>>2]=z2(z2(F*v)+z2(E*d))+z2(R*l),j2[136+e>>2]=z2(z2(Y*u)+z2(J*k))+z2(Z*c),j2[132+e>>2]=z2(z2(V*u)+z2(h*k))+z2(W*c),j2[128+e>>2]=z2(z2(F*u)+z2(E*k))+z2(R*c),j2[120+e>>2]=z2(z2(B*Y)+z2(o*J))+z2(b*Z),j2[116+e>>2]=z2(z2(B*V)+z2(o*h))+z2(b*W),j2[112+e>>2]=z2(z2(F*B)+z2(E*o))+z2(R*b),j2[168+e>>2]=U+z2(z2(z2(v*G)+z2(d*C))+z2(l*Q)),j2[164+e>>2]=y+z2(z2(z2(u*G)+z2(k*C))+z2(c*Q)),j2[160+e>>2]=x+z2(z2(z2(B*G)+z2(o*C))+z2(b*Q))),o=j2[f+688>>2],c=j2[f+692>>2],(b=o2(z2(o-c)))<z2(-3.1415927410125732)?b=z2(b+z2(6.2831854820251465)):b>z2(3.1415927410125732)&&(b=z2(b+z2(-6.2831854820251465))),(o=o2(z2(o+c)))<z2(-3.1415927410125732)?o=z2(o+z2(6.2831854820251465)):o>z2(3.1415927410125732)&&(o=z2(o+z2(-6.2831854820251465))),o==b)break A;if(!s)break A;j2[96+e>>2]=j2[120+e>>2],j2[100+e>>2]=j2[136+e>>2],T2[108+e>>2]=0,j2[104+e>>2]=j2[152+e>>2],j2[80+e>>2]=j2[112+e>>2],j2[84+e>>2]=j2[128+e>>2],T2[92+e>>2]=0,j2[88+e>>2]=j2[144+e>>2],A=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(f=72+e|0)>>2]=0,T2[f+4>>2]=0,T2[64+e>>2]=0,T2[68+e>>2]=0,f=c>z2(0),n1[T2[T2[A>>2]+68>>2]](A,160+e|0,96+e|0,80+e|0,r,r,f?b:z2(0),f?o:z2(6.2831854820251465),e+64|0,f,z2(10));break A;case 2:if(i=T2[f+28>>2],x=j2[i+52>>2],o=j2[i+8>>2],b=j2[i+12>>2],Q=j2[f+332>>2],G=j2[f+300>>2],C=j2[f+316>>2],y=j2[i+56>>2],U=j2[i+60>>2],R=j2[f+356>>2],F=j2[f+348>>2],E=j2[f+352>>2],c=j2[i+28>>2],u=j2[i+20>>2],k=j2[i+24>>2],W=j2[f+336>>2],V=j2[f+304>>2],h=j2[f+320>>2],Z=j2[f+340>>2],l=j2[i+44>>2],Y=j2[f+308>>2],v=j2[i+36>>2],J=j2[f+324>>2],d=j2[i+40>>2],B=j2[i+4>>2],T2[172+e>>2]=0,T2[156+e>>2]=0,T2[140+e>>2]=0,j2[152+e>>2]=z2(z2(Y*v)+z2(J*d))+z2(Z*l),j2[148+e>>2]=z2(z2(V*v)+z2(h*d))+z2(W*l),j2[136+e>>2]=z2(z2(Y*u)+z2(J*k))+z2(Z*c),j2[132+e>>2]=z2(z2(V*u)+z2(h*k))+z2(W*c),j2[168+e>>2]=U+z2(z2(z2(v*F)+z2(d*E))+z2(l*R)),j2[164+e>>2]=y+z2(z2(z2(u*F)+z2(k*E))+z2(c*R)),T2[124+e>>2]=0,j2[144+e>>2]=z2(z2(G*v)+z2(C*d))+z2(Q*l),j2[128+e>>2]=z2(z2(G*u)+z2(C*k))+z2(Q*c),j2[120+e>>2]=z2(z2(B*Y)+z2(o*J))+z2(b*Z),j2[116+e>>2]=z2(z2(B*V)+z2(o*h))+z2(b*W),j2[112+e>>2]=z2(z2(G*B)+z2(C*o))+z2(Q*b),j2[160+e>>2]=x+z2(z2(z2(B*F)+z2(o*E))+z2(b*R)),a?(i=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[i>>2]+64>>2]](i,112+e|0,r),i=T2[f+32>>2],x=j2[i+52>>2],o=j2[i+8>>2],b=j2[i+12>>2],y=j2[i+56>>2],U=j2[i+60>>2],Q=j2[f+420>>2],G=j2[f+412>>2],C=j2[f+416>>2],c=j2[i+28>>2],u=j2[i+20>>2],k=j2[i+24>>2],R=j2[f+396>>2],F=j2[f+364>>2],E=j2[f+380>>2],W=j2[f+400>>2],V=j2[f+368>>2],h=j2[f+384>>2],Z=j2[f+404>>2],l=j2[i+44>>2],Y=j2[f+372>>2],v=j2[i+36>>2],J=j2[f+388>>2],d=j2[i+40>>2],B=j2[i+4>>2],T2[172+e>>2]=0,T2[156+e>>2]=0,T2[140+e>>2]=0,j2[152+e>>2]=z2(z2(Y*v)+z2(J*d))+z2(Z*l),j2[148+e>>2]=z2(z2(V*v)+z2(h*d))+z2(W*l),j2[144+e>>2]=z2(z2(F*v)+z2(E*d))+z2(R*l),j2[136+e>>2]=z2(z2(Y*u)+z2(J*k))+z2(Z*c),j2[132+e>>2]=z2(z2(V*u)+z2(h*k))+z2(W*c),j2[168+e>>2]=U+z2(z2(z2(v*G)+z2(d*C))+z2(l*Q)),j2[164+e>>2]=y+z2(z2(z2(u*G)+z2(k*C))+z2(c*Q)),j2[160+e>>2]=x+z2(z2(z2(B*G)+z2(o*C))+z2(b*Q)),T2[124+e>>2]=0,j2[128+e>>2]=z2(z2(F*u)+z2(E*k))+z2(R*c),j2[120+e>>2]=z2(z2(B*Y)+z2(o*J))+z2(b*Z),j2[116+e>>2]=z2(z2(B*V)+z2(o*h))+z2(b*W),j2[112+e>>2]=z2(z2(F*B)+z2(E*o))+z2(R*b),i=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[i>>2]+64>>2]](i,112+e|0,r)):(i=T2[f+32>>2],x=j2[i+52>>2],y=j2[i+56>>2],U=j2[i+60>>2],Q=j2[f+420>>2],G=j2[f+412>>2],C=j2[f+416>>2],o=j2[i+8>>2],b=j2[i+12>>2],c=j2[i+28>>2],u=j2[i+20>>2],k=j2[i+24>>2],R=j2[f+396>>2],F=j2[f+364>>2],E=j2[f+380>>2],W=j2[f+400>>2],V=j2[f+368>>2],h=j2[f+384>>2],Z=j2[f+404>>2],l=j2[i+44>>2],Y=j2[f+372>>2],v=j2[i+36>>2],J=j2[f+388>>2],d=j2[i+40>>2],B=j2[i+4>>2],T2[172+e>>2]=0,T2[156+e>>2]=0,T2[140+e>>2]=0,T2[124+e>>2]=0,j2[152+e>>2]=z2(z2(Y*v)+z2(J*d))+z2(Z*l),j2[148+e>>2]=z2(z2(V*v)+z2(h*d))+z2(W*l),j2[144+e>>2]=z2(z2(F*v)+z2(E*d))+z2(R*l),j2[136+e>>2]=z2(z2(Y*u)+z2(J*k))+z2(Z*c),j2[132+e>>2]=z2(z2(V*u)+z2(h*k))+z2(W*c),j2[128+e>>2]=z2(z2(F*u)+z2(E*k))+z2(R*c),j2[120+e>>2]=z2(z2(B*Y)+z2(o*J))+z2(b*Z),j2[116+e>>2]=z2(z2(B*V)+z2(o*h))+z2(b*W),j2[112+e>>2]=z2(z2(F*B)+z2(E*o))+z2(R*b),j2[168+e>>2]=U+z2(z2(z2(v*G)+z2(d*C))+z2(l*Q)),j2[164+e>>2]=y+z2(z2(z2(u*G)+z2(k*C))+z2(c*Q)),j2[160+e>>2]=x+z2(z2(z2(B*G)+z2(o*C))+z2(b*Q))),!s)break A;for(T2[108+e>>2]=0,o=j2[f+444>>2],d=z2(z2(.0395662896335125)/z2(o*o)),o=j2[f+448>>2],o=m2(b=z2(z2(_2(z2(z2(1.0395662784576416)/z2(d+z2(z2(1)/z2(o*o))))))*z2(.5))),u=z2(W2(b)/z2(.9999999403953552)),b=z2(u*z2(.9807851910591125)),d=z2(o*z2(0)),c=z2(u*z2(0)),B=z2(c*z2(0)),k=z2(z2(d+B)-z2(b*r)),v=z2(b*z2(0)),u=z2(u*z2(.19509069621562958)),Q=z2(u*z2(0)),l=z2(z2(z2(o*r)+v)-Q),v=z2(z2(z2(r*z2(-c))-v)-Q),d=z2(z2(d+z2(u*r))-B),B=z2(z2(b*k)+z2(z2(z2(o*l)-z2(c*v))-z2(u*d))),Q=z2(z2(u*l)+z2(z2(z2(o*d)-z2(b*v))-z2(c*k))),o=z2(z2(c*d)+z2(z2(z2(o*k)-z2(u*v))-z2(b*l))),j2[104+e>>2]=z2(z2(z2(B*j2[144+e>>2])+z2(Q*j2[148+e>>2]))+z2(o*j2[152+e>>2]))+j2[168+e>>2],j2[100+e>>2]=z2(z2(z2(B*j2[128+e>>2])+z2(Q*j2[132+e>>2]))+z2(o*j2[136+e>>2]))+j2[164+e>>2],j2[96+e>>2]=z2(z2(z2(B*j2[112+e>>2])+z2(Q*j2[116+e>>2]))+z2(o*j2[120+e>>2]))+j2[160+e>>2],n=160+e|0,t=72+e|0,i=0;b=m2(c=z2(z2(z2(0|i)*z2(6.283185005187988))*z2(.03125))),o=j2[f+444>>2],k=W2(c),z2(O2(b))>z2(1.1920928955078125e-7)?(c=z2(k*k),u=z2(b*b),l=z2(c/u),d=z2(l/z2(o*o)),o=j2[f+448>>2],o=z2(_2(z2(z2(l+z2(1))/z2(d+z2(z2(1)/z2(o*o))))))):(c=z2(k*k),u=z2(b*b)),T2[92+e>>2]=0,d=b,b=z2(o*z2(.5)),u=z2(W2(b)/z2(_2(z2(c+z2(u+z2(0)))))),o=z2(d*u),b=m2(b),d=z2(b*z2(0)),c=z2(u*z2(0)),B=z2(c*z2(0)),l=z2(z2(d+B)-z2(o*r)),v=z2(o*z2(0)),u=z2(u*z2(-k)),Q=z2(u*z2(0)),k=z2(z2(z2(b*r)+v)-Q),v=z2(z2(z2(r*z2(-c))-v)-Q),d=z2(z2(d+z2(u*r))-B),B=z2(z2(o*l)+z2(z2(z2(b*k)-z2(c*v))-z2(u*d))),Q=z2(z2(u*k)+z2(z2(z2(b*d)-z2(o*v))-z2(c*l))),o=z2(z2(c*d)+z2(z2(z2(b*l)-z2(u*v))-z2(o*k))),j2[88+e>>2]=z2(z2(z2(B*j2[144+e>>2])+z2(Q*j2[148+e>>2]))+z2(o*j2[152+e>>2]))+j2[168+e>>2],j2[84+e>>2]=z2(z2(z2(B*j2[128+e>>2])+z2(Q*j2[132+e>>2]))+z2(o*j2[136+e>>2]))+j2[164+e>>2],j2[80+e>>2]=z2(z2(z2(B*j2[112+e>>2])+z2(Q*j2[116+e>>2]))+z2(o*j2[120+e>>2]))+j2[160+e>>2],a=0|n1[T2[T2[A>>2]+20>>2]](A),T2[t>>2]=0,T2[t+4>>2]=0,T2[64+e>>2]=0,T2[68+e>>2]=0,n1[T2[T2[a>>2]+16>>2]](a,96+e|0,80+e|0,e+64|0),3&i||(a=0|n1[T2[T2[A>>2]+20>>2]](A),T2[t>>2]=0,T2[t+4>>2]=0,T2[64+e>>2]=0,T2[68+e>>2]=0,n1[T2[T2[a>>2]+16>>2]](a,n,80+e|0,e+64|0)),M=T2[(D=88+e|0)+4>>2],T2[(a=104+e|0)>>2]=T2[D>>2],T2[a+4>>2]=M,a=T2[84+e>>2],T2[96+e>>2]=T2[80+e>>2],T2[100+e>>2]=a,32!=(0|(i=i+1|0)););C=j2[f+512>>2],R=j2[f+452>>2],i=T2[f+32>>2],d=(l=(k=(v=(b=(u=(S=(o=(p=j2[i+404>>2]>z2(0)?(o=j2[i+36>>2],c=j2[f+412>>2],b=j2[i+40>>2],u=j2[f+416>>2],F=z2(z2(o*c)+z2(b*u)),k=j2[i+20>>2],l=j2[i+24>>2],v=j2[i+28>>2],E=j2[f+420>>2],W=z2(z2(z2(k*c)+z2(l*u))+z2(v*E)),d=j2[i+4>>2],B=j2[i+8>>2],Q=j2[i+12>>2],V=z2(z2(z2(d*c)+z2(B*u))+z2(Q*E)),h=j2[f+372>>2],Z=j2[f+388>>2],Y=j2[f+404>>2],G=j2[i+44>>2],J=z2(z2(z2(h*o)+z2(Z*b))+z2(Y*G)),x=j2[f+368>>2],y=j2[f+384>>2],U=j2[f+400>>2],c=z2(z2(z2(x*o)+z2(y*b))+z2(U*G)),j=j2[f+364>>2],T=j2[f+380>>2],j2[f+396>>2]):(i=T2[f+28>>2],o=j2[i+36>>2],c=j2[f+348>>2],b=j2[i+40>>2],u=j2[f+352>>2],F=z2(z2(o*c)+z2(b*u)),k=j2[i+20>>2],l=j2[i+24>>2],v=j2[i+28>>2],E=j2[f+356>>2],W=z2(z2(z2(k*c)+z2(l*u))+z2(v*E)),d=j2[i+4>>2],B=j2[i+8>>2],Q=j2[i+12>>2],V=z2(z2(z2(d*c)+z2(B*u))+z2(Q*E)),h=j2[f+308>>2],Z=j2[f+324>>2],Y=j2[f+340>>2],G=j2[i+44>>2],J=z2(z2(z2(h*o)+z2(Z*b))+z2(Y*G)),x=j2[f+304>>2],y=j2[f+320>>2],U=j2[f+336>>2],c=z2(z2(z2(x*o)+z2(y*b))+z2(U*G)),j=j2[f+300>>2],T=j2[f+316>>2],j2[f+332>>2]),z2(z2(z2(j*o)+z2(T*b))+z2(p*G))),z2(z2(z2(h*k)+z2(Z*l))+z2(Y*v))),z2(z2(z2(x*k)+z2(y*l))+z2(U*v))),z2(z2(z2(j*k)+z2(T*l))+z2(p*v))),z2(z2(z2(d*h)+z2(B*Z))+z2(Q*Y))),z2(z2(z2(d*x)+z2(B*y))+z2(Q*U))),z2(z2(z2(j*d)+z2(T*B))+z2(p*Q))),z2(G*E)),T2[156+e>>2]=0,j2[152+e>>2]=J,j2[148+e>>2]=c,j2[144+e>>2]=o,T2[140+e>>2]=0,j2[136+e>>2]=S,j2[132+e>>2]=u,j2[128+e>>2]=b,T2[124+e>>2]=0,j2[120+e>>2]=v,j2[116+e>>2]=k,j2[112+e>>2]=l,v=j2[i+52>>2],B=j2[i+56>>2],Q=j2[i+60>>2],T2[172+e>>2]=0,j2[168+e>>2]=Q+z2(F+d),j2[164+e>>2]=W+B,j2[160+e>>2]=v+V,t=T2[(i=n+8|0)+4>>2],T2[(f=88+e|0)>>2]=T2[i>>2],T2[f+4>>2]=t,f=T2[n+4>>2],T2[80+e>>2]=T2[n>>2],T2[84+e>>2]=f,T2[76+e>>2]=0,j2[72+e>>2]=o,j2[68+e>>2]=b,j2[64+e>>2]=l,T2[60+e>>2]=0,j2[56+e>>2]=c,j2[52+e>>2]=u,j2[48+e>>2]=k,A=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(f=40+e|0)>>2]=0,T2[f+4>>2]=0,T2[32+e>>2]=0,T2[36+e>>2]=0,n1[T2[T2[A>>2]+68>>2]](A,80+e|0,e+64|0,48+e|0,r,r,z2(z2(-C)-R),z2(R-C),32+e|0,1,z2(10));break A;case 3:case 6:if(t=T2[(n=f+1072|0)+4>>2],T2[(i=g=120+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+1088|0)+4>>2],T2[(i=136+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+1104|0)+4>>2],T2[(i=152+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+1120|0)+4>>2],T2[(i=168+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,n=T2[(i=D=f+1064|0)+4>>2],T2[112+e>>2]=T2[i>>2],T2[116+e>>2]=n,n=T2[(i=M=f+1080|0)+4>>2],T2[128+e>>2]=T2[i>>2],T2[132+e>>2]=n,n=T2[(i=I=f+1096|0)+4>>2],T2[144+e>>2]=T2[i>>2],T2[148+e>>2]=n,n=T2[(i=X=f+1112|0)+4>>2],T2[160+e>>2]=T2[i>>2],T2[164+e>>2]=n,i=160+e|0,n=144+e|0,t=128+e|0,a&&(a=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[a>>2]+64>>2]](a,112+e|0,r),m=T2[(w=f+1184|0)+4>>2],T2[(a=i+8|0)>>2]=T2[w>>2],T2[a+4>>2]=m,w=T2[(a=f+1176|0)+4>>2],T2[i>>2]=T2[a>>2],T2[i+4>>2]=w,w=T2[(a=f+1144|0)+4>>2],T2[t>>2]=T2[a>>2],T2[t+4>>2]=w,m=T2[(w=f+1152|0)+4>>2],T2[(a=t+8|0)>>2]=T2[w>>2],T2[a+4>>2]=m,w=T2[(a=f+1160|0)+4>>2],T2[n>>2]=T2[a>>2],T2[n+4>>2]=w,m=T2[(w=f+1168|0)+4>>2],T2[(a=n+8|0)>>2]=T2[w>>2],T2[a+4>>2]=m,w=T2[(a=f+1136|0)+4>>2],T2[g>>2]=T2[a>>2],T2[g+4>>2]=w,g=T2[(a=f+1128|0)+4>>2],T2[112+e>>2]=T2[a>>2],T2[116+e>>2]=g,a=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[a>>2]+64>>2]](a,112+e|0,r)),!s)break A;a=T2[M+4>>2],T2[t>>2]=T2[M>>2],T2[t+4>>2]=a,a=T2[I+4>>2],T2[n>>2]=T2[I>>2],T2[n+4>>2]=a,a=T2[X+4>>2],T2[i>>2]=T2[X>>2],T2[i+4>>2]=a,w=T2[(g=D+8|0)+4>>2],T2[(a=s=120+e|0)>>2]=T2[g>>2],T2[a+4>>2]=w,m=T2[(w=M+8|0)+4>>2],T2[(a=g=t+8|0)>>2]=T2[w>>2],T2[a+4>>2]=m,N=T2[(m=I+8|0)+4>>2],T2[(a=w=n+8|0)>>2]=T2[m>>2],T2[a+4>>2]=N,P=T2[(N=X+8|0)+4>>2],T2[(a=m=i+8|0)>>2]=T2[N>>2],T2[a+4>>2]=P,a=T2[D+4>>2],T2[112+e>>2]=T2[D>>2],T2[116+e>>2]=a,j2[96+e>>2]=j2[s>>2],j2[100+e>>2]=j2[136+e>>2],T2[108+e>>2]=0,j2[104+e>>2]=j2[152+e>>2],j2[80+e>>2]=j2[112+e>>2],j2[84+e>>2]=j2[128+e>>2],T2[92+e>>2]=0,j2[88+e>>2]=j2[144+e>>2],o=j2[f+932>>2],b=j2[f+936>>2],c=j2[f+996>>2],u=j2[f+1e3>>2],N=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(a=72+e|0)>>2]=0,T2[a+4>>2]=0,T2[64+e>>2]=0,T2[68+e>>2]=0,n1[T2[T2[N>>2]+72>>2]](N,a=f+1176|0,96+e|0,80+e|0,z2(r*z2(.8999999761581421)),o,b,c,u,e+64|0,z2(10),1),T2[92+e>>2]=0,u=j2[148+e>>2],j2[88+e>>2]=u,o=j2[132+e>>2],j2[84+e>>2]=o,b=j2[116+e>>2],j2[80+e>>2]=b,k=j2[f+1196>>2],l=j2[f+1200>>2],P=T2[(N=f+1136|0)+4>>2],T2[s>>2]=T2[N>>2],T2[s+4>>2]=P,N=T2[(s=f+1144|0)+4>>2],T2[t>>2]=T2[s>>2],T2[t+4>>2]=N,N=T2[(s=f+1152|0)+4>>2],T2[g>>2]=T2[s>>2],T2[g+4>>2]=N,g=T2[(s=f+1160|0)+4>>2],T2[n>>2]=T2[s>>2],T2[n+4>>2]=g,g=T2[(s=f+1168|0)+4>>2],T2[w>>2]=T2[s>>2],T2[w+4>>2]=g,s=T2[a+4>>2],T2[i>>2]=T2[a>>2],T2[i+4>>2]=s,g=T2[(s=f+1184|0)+4>>2],T2[m>>2]=T2[s>>2],T2[m+4>>2]=g,g=T2[(s=f+1128|0)+4>>2],T2[112+e>>2]=T2[s>>2],T2[116+e>>2]=g,c=W2(l),l=m2(l),j2[68+e>>2]=z2(o*l)-z2(c*b),v=W2(k),k=m2(k),j2[72+e>>2]=z2(z2(b*z2(l*v))+z2(o*z2(v*c)))+z2(u*k),j2[64+e>>2]=z2(z2(b*z2(k*l))+z2(o*z2(k*c)))-z2(v*u),T2[60+e>>2]=0,j2[56+e>>2]=-j2[144+e>>2],j2[52+e>>2]=-j2[128+e>>2],j2[48+e>>2]=-j2[112+e>>2],o=j2[f+868>>2],(b=j2[f+872>>2])<o?(s=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(g=40+e|0)>>2]=0,T2[g+4>>2]=0,T2[32+e>>2]=0,T2[36+e>>2]=0,n1[T2[T2[s>>2]+68>>2]](s,a,48+e|0,e+64|0,r,r,z2(-3.1415927410125732),z2(3.1415927410125732),32+e|0,0,z2(10))):o<b&&(s=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(g=40+e|0)>>2]=0,T2[g+4>>2]=0,T2[32+e>>2]=0,T2[36+e>>2]=0,n1[T2[T2[s>>2]+68>>2]](s,a,48+e|0,e+64|0,r,r,o,b,32+e|0,1,z2(10))),a=T2[M+4>>2],T2[t>>2]=T2[M>>2],T2[t+4>>2]=a,a=T2[I+4>>2],T2[n>>2]=T2[I>>2],T2[n+4>>2]=a,a=T2[X+4>>2],T2[i>>2]=T2[X>>2],T2[i+4>>2]=a,g=T2[(s=D+8|0)+4>>2],T2[(a=120+e|0)>>2]=T2[s>>2],T2[a+4>>2]=g,M=T2[(a=M+8|0)+4>>2],T2[(t=t+8|0)>>2]=T2[a>>2],T2[t+4>>2]=M,a=T2[(t=I+8|0)+4>>2],T2[(n=n+8|0)>>2]=T2[t>>2],T2[n+4>>2]=a,t=T2[(n=X+8|0)+4>>2],T2[(i=i+8|0)>>2]=T2[n>>2],T2[i+4>>2]=t,i=T2[D+4>>2],T2[112+e>>2]=T2[D>>2],T2[116+e>>2]=i,t=T2[(n=f+688|0)+4>>2],T2[(i=40+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,n=T2[(i=f+680|0)+4>>2],T2[32+e>>2]=T2[i>>2],T2[36+e>>2]=n,t=T2[(n=f+704|0)+4>>2],T2[(i=24+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,i=T2[(f=f+696|0)+4>>2],T2[16+e>>2]=T2[f>>2],T2[20+e>>2]=i,A=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(f=8+e|0)>>2]=0,T2[f+4>>2]=0,T2[e>>2]=0,T2[4+e>>2]=0,n1[T2[T2[A>>2]+80>>2]](A,32+e|0,16+e|0,112+e|0,e);break A;case 9:if(t=T2[(n=f+1244|0)+4>>2],T2[(i=g=120+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+1260|0)+4>>2],T2[(i=136+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+1276|0)+4>>2],T2[(i=152+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+1292|0)+4>>2],T2[(i=168+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,n=T2[(i=D=f+1236|0)+4>>2],T2[112+e>>2]=T2[i>>2],T2[116+e>>2]=n,n=T2[(i=M=f+1252|0)+4>>2],T2[128+e>>2]=T2[i>>2],T2[132+e>>2]=n,n=T2[(i=I=f+1268|0)+4>>2],T2[144+e>>2]=T2[i>>2],T2[148+e>>2]=n,n=T2[(i=X=f+1284|0)+4>>2],T2[160+e>>2]=T2[i>>2],T2[164+e>>2]=n,i=160+e|0,n=144+e|0,t=128+e|0,a&&(a=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[a>>2]+64>>2]](a,112+e|0,r),m=T2[(w=f+1356|0)+4>>2],T2[(a=i+8|0)>>2]=T2[w>>2],T2[a+4>>2]=m,w=T2[(a=f+1348|0)+4>>2],T2[i>>2]=T2[a>>2],T2[i+4>>2]=w,w=T2[(a=f+1316|0)+4>>2],T2[t>>2]=T2[a>>2],T2[t+4>>2]=w,m=T2[(w=f+1324|0)+4>>2],T2[(a=t+8|0)>>2]=T2[w>>2],T2[a+4>>2]=m,w=T2[(a=f+1332|0)+4>>2],T2[n>>2]=T2[a>>2],T2[n+4>>2]=w,m=T2[(w=f+1340|0)+4>>2],T2[(a=n+8|0)>>2]=T2[w>>2],T2[a+4>>2]=m,w=T2[(a=f+1308|0)+4>>2],T2[g>>2]=T2[a>>2],T2[g+4>>2]=w,g=T2[(a=f+1300|0)+4>>2],T2[112+e>>2]=T2[a>>2],T2[116+e>>2]=g,a=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[a>>2]+64>>2]](a,112+e|0,r)),!s)break A;a=T2[M+4>>2],T2[t>>2]=T2[M>>2],T2[t+4>>2]=a,a=T2[I+4>>2],T2[n>>2]=T2[I>>2],T2[n+4>>2]=a,a=T2[X+4>>2],T2[i>>2]=T2[X>>2],T2[i+4>>2]=a,w=T2[(g=D+8|0)+4>>2],T2[(a=s=120+e|0)>>2]=T2[g>>2],T2[a+4>>2]=w,m=T2[(w=M+8|0)+4>>2],T2[(a=g=t+8|0)>>2]=T2[w>>2],T2[a+4>>2]=m,N=T2[(m=I+8|0)+4>>2],T2[(a=w=n+8|0)>>2]=T2[m>>2],T2[a+4>>2]=N,P=T2[(N=X+8|0)+4>>2],T2[(a=m=i+8|0)>>2]=T2[N>>2],T2[a+4>>2]=P,a=T2[D+4>>2],T2[112+e>>2]=T2[D>>2],T2[116+e>>2]=a,j2[96+e>>2]=j2[s>>2],j2[100+e>>2]=j2[136+e>>2],T2[108+e>>2]=0,j2[104+e>>2]=j2[152+e>>2],j2[80+e>>2]=j2[112+e>>2],j2[84+e>>2]=j2[128+e>>2],T2[92+e>>2]=0,j2[88+e>>2]=j2[144+e>>2],o=j2[f+1060>>2],b=j2[f+1144>>2],c=j2[f+1148>>2],u=j2[f+1056>>2],N=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(a=72+e|0)>>2]=0,T2[a+4>>2]=0,T2[64+e>>2]=0,T2[68+e>>2]=0,n1[T2[T2[N>>2]+72>>2]](N,a=f+1348|0,96+e|0,80+e|0,z2(r*z2(.8999999761581421)),u,o,b,c,e+64|0,z2(10),1),T2[92+e>>2]=0,u=j2[148+e>>2],j2[88+e>>2]=u,o=j2[132+e>>2],j2[84+e>>2]=o,b=j2[116+e>>2],j2[80+e>>2]=b,k=j2[f+1368>>2],l=j2[f+1372>>2],P=T2[(N=f+1308|0)+4>>2],T2[s>>2]=T2[N>>2],T2[s+4>>2]=P,N=T2[(s=f+1316|0)+4>>2],T2[t>>2]=T2[s>>2],T2[t+4>>2]=N,N=T2[(s=f+1324|0)+4>>2],T2[g>>2]=T2[s>>2],T2[g+4>>2]=N,g=T2[(s=f+1332|0)+4>>2],T2[n>>2]=T2[s>>2],T2[n+4>>2]=g,g=T2[(s=f+1340|0)+4>>2],T2[w>>2]=T2[s>>2],T2[w+4>>2]=g,s=T2[a+4>>2],T2[i>>2]=T2[a>>2],T2[i+4>>2]=s,g=T2[(s=f+1356|0)+4>>2],T2[m>>2]=T2[s>>2],T2[m+4>>2]=g,g=T2[(s=f+1300|0)+4>>2],T2[112+e>>2]=T2[s>>2],T2[116+e>>2]=g,c=W2(l),l=m2(l),j2[68+e>>2]=z2(o*l)-z2(b*c),v=W2(k),k=m2(k),j2[72+e>>2]=z2(z2(b*z2(l*v))+z2(o*z2(v*c)))+z2(u*k),j2[64+e>>2]=z2(z2(b*z2(k*l))+z2(o*z2(k*c)))-z2(v*u),T2[60+e>>2]=0,j2[56+e>>2]=-j2[144+e>>2],j2[52+e>>2]=-j2[128+e>>2],j2[48+e>>2]=-j2[112+e>>2],o=j2[f+968>>2],(b=j2[f+972>>2])<o?(s=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(g=40+e|0)>>2]=0,T2[g+4>>2]=0,T2[32+e>>2]=0,T2[36+e>>2]=0,n1[T2[T2[s>>2]+68>>2]](s,a,48+e|0,e+64|0,r,r,z2(-3.1415927410125732),z2(3.1415927410125732),32+e|0,0,z2(10))):o<b&&(s=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(g=40+e|0)>>2]=0,T2[g+4>>2]=0,T2[32+e>>2]=0,T2[36+e>>2]=0,n1[T2[T2[s>>2]+68>>2]](s,a,48+e|0,e+64|0,r,r,o,b,32+e|0,1,z2(10))),a=T2[M+4>>2],T2[t>>2]=T2[M>>2],T2[t+4>>2]=a,a=T2[I+4>>2],T2[n>>2]=T2[I>>2],T2[n+4>>2]=a,a=T2[X+4>>2],T2[i>>2]=T2[X>>2],T2[i+4>>2]=a,g=T2[(s=D+8|0)+4>>2],T2[(a=120+e|0)>>2]=T2[s>>2],T2[a+4>>2]=g,M=T2[(a=M+8|0)+4>>2],T2[(t=t+8|0)>>2]=T2[a>>2],T2[t+4>>2]=M,a=T2[(t=I+8|0)+4>>2],T2[(n=n+8|0)>>2]=T2[t>>2],T2[n+4>>2]=a,t=T2[(n=X+8|0)+4>>2],T2[(i=i+8|0)>>2]=T2[n>>2],T2[i+4>>2]=t,i=T2[D+4>>2],T2[112+e>>2]=T2[D>>2],T2[116+e>>2]=i,t=T2[(n=f+688|0)+4>>2],T2[(i=40+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,n=T2[(i=f+680|0)+4>>2],T2[32+e>>2]=T2[i>>2],T2[36+e>>2]=n,t=T2[(n=f+704|0)+4>>2],T2[(i=24+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,i=T2[(f=f+696|0)+4>>2],T2[16+e>>2]=T2[f>>2],T2[20+e>>2]=i,A=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(f=8+e|0)>>2]=0,T2[f+4>>2]=0,T2[e>>2]=0,T2[4+e>>2]=0,n1[T2[T2[A>>2]+80>>2]](A,32+e|0,16+e|0,112+e|0,e);break A;case 4:break f;default:break A;}t=T2[(n=f+832|0)+4>>2],T2[(i=D=120+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+848|0)+4>>2],T2[(i=136+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+864|0)+4>>2],T2[(i=152+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+880|0)+4>>2],T2[(i=168+e|0)>>2]=T2[n>>2],T2[i+4>>2]=t,n=T2[(i=M=f+824|0)+4>>2],T2[112+e>>2]=T2[i>>2],T2[116+e>>2]=n,n=T2[(i=f+840|0)+4>>2],T2[128+e>>2]=T2[i>>2],T2[132+e>>2]=n,n=T2[(i=f+856|0)+4>>2],T2[144+e>>2]=T2[i>>2],T2[148+e>>2]=n,n=T2[(i=f+872|0)+4>>2],T2[160+e>>2]=T2[i>>2],T2[164+e>>2]=n,i=160+e|0,n=144+e|0,t=128+e|0,a?(a=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[a>>2]+64>>2]](a,112+e|0,r),X=T2[(I=f+944|0)+4>>2],T2[(a=i+8|0)>>2]=T2[I>>2],T2[a+4>>2]=X,I=T2[(a=f+936|0)+4>>2],T2[i>>2]=T2[a>>2],T2[i+4>>2]=I,a=T2[(i=f+904|0)+4>>2],T2[t>>2]=T2[i>>2],T2[t+4>>2]=a,i=t+8|0,a=T2[(t=f+912|0)+4>>2],T2[i>>2]=T2[t>>2],T2[i+4>>2]=a,t=T2[(i=f+920|0)+4>>2],T2[n>>2]=T2[i>>2],T2[n+4>>2]=t,i=n+8|0,t=T2[(n=f+928|0)+4>>2],T2[i>>2]=T2[n>>2],T2[i+4>>2]=t,n=T2[(i=f+896|0)+4>>2],T2[D>>2]=T2[i>>2],T2[D+4>>2]=n,n=T2[(i=f+888|0)+4>>2],T2[112+e>>2]=T2[i>>2],T2[116+e>>2]=n,i=0|n1[T2[T2[A>>2]+20>>2]](A),n1[T2[T2[i>>2]+64>>2]](i,112+e|0,r)):(I=T2[(a=f+896|0)+4>>2],T2[D>>2]=T2[a>>2],T2[D+4>>2]=I,D=T2[(a=f+904|0)+4>>2],T2[t>>2]=T2[a>>2],T2[t+4>>2]=D,D=T2[(a=f+912|0)+4>>2],T2[(t=t+8|0)>>2]=T2[a>>2],T2[t+4>>2]=D,a=T2[(t=f+920|0)+4>>2],T2[n>>2]=T2[t>>2],T2[n+4>>2]=a,a=T2[(t=f+928|0)+4>>2],T2[(n=n+8|0)>>2]=T2[t>>2],T2[n+4>>2]=a,t=T2[(n=f+936|0)+4>>2],T2[i>>2]=T2[n>>2],T2[i+4>>2]=t,t=T2[(n=f+944|0)+4>>2],T2[(i=i+8|0)>>2]=T2[n>>2],T2[i+4>>2]=t,n=T2[(i=f+888|0)+4>>2],T2[112+e>>2]=T2[i>>2],T2[116+e>>2]=n),s&&(i=S2[f+180|0]?M:f+888|0,u=j2[i+48>>2],G=j2[i+8>>2],o=j2[i>>2],k=j2[i+4>>2],l=j2[i+52>>2],C=j2[i+24>>2],b=j2[i+16>>2],v=j2[i+20>>2],d=j2[i+56>>2],Q=j2[i+40>>2],c=j2[i+32>>2],B=j2[i+36>>2],T2[108+e>>2]=0,R=z2(Q*z2(0)),F=z2(B*z2(0)),Q=j2[f+184>>2],j2[104+e>>2]=d+z2(R+z2(F+z2(c*Q))),C=z2(C*z2(0)),E=z2(v*z2(0)),j2[100+e>>2]=l+z2(C+z2(E+z2(b*Q))),G=z2(G*z2(0)),W=z2(k*z2(0)),j2[96+e>>2]=u+z2(G+z2(W+z2(o*Q))),T2[92+e>>2]=0,S=d,d=j2[f+188>>2],j2[88+e>>2]=S+z2(R+z2(F+z2(c*d))),j2[84+e>>2]=l+z2(C+z2(E+z2(b*d))),j2[80+e>>2]=u+z2(G+z2(W+z2(o*d))),i=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(n=72+e|0)>>2]=0,T2[n+4>>2]=0,T2[64+e>>2]=0,T2[68+e>>2]=0,n1[T2[T2[i>>2]+16>>2]](i,96+e|0,80+e|0,e+64|0),T2[76+e>>2]=0,j2[72+e>>2]=c,j2[68+e>>2]=b,j2[64+e>>2]=o,T2[60+e>>2]=0,j2[56+e>>2]=B,j2[52+e>>2]=v,j2[48+e>>2]=k,o=j2[f+196>>2],b=j2[f+192>>2],A=0|n1[T2[T2[A>>2]+20>>2]](A),T2[(i=40+e|0)>>2]=0,T2[i+4>>2]=0,T2[32+e>>2]=0,T2[36+e>>2]=0,n1[T2[T2[A>>2]+68>>2]](A,f+936|0,e+64|0,48+e|0,r,r,b,o,32+e|0,1,z2(10)));}L2=176+e|0;},function(A){var f,r=0,e=0,i=0;if(1<=(0|(e=T2[(A|=0)+248>>2])))for(A=T2[A+256>>2];;){A:{f:switch(r=T2[A>>2],T2[r+220>>2]-2|0){case 0:case 3:break A;default:break f;}3&S2[r+204|0]||(j2[r+472>>2]=z2(j2[r+424>>2]*j2[r+408>>2])+j2[r+472>>2],j2[(f=r+476|0)>>2]=z2(j2[r+428>>2]*j2[r+412>>2])+j2[f>>2],j2[(f=r+480|0)>>2]=z2(j2[r+432>>2]*j2[r+416>>2])+j2[f>>2]);}if(A=A+4|0,!((0|(i=i+1|0))<(0|e)))break;}},c0,function(A,f){A|=0,f=z2(f);var r,e=0,i=0;if(1<=T2[A+296>>2])for(;r=T2[T2[A+304>>2]+e>>2],n1[T2[T2[r>>2]+8>>2]](r,A,f),e=e+4|0,(0|(i=i+1|0))<T2[A+296>>2];);},function(A){var f=0;return T2[(A|=0)>>2]=19980,(f=T2[A+80>>2])&&S2[A+84|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+80>>2]=0,p2[A+84|0]=1,T2[(f=A+72|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+60>>2])&&S2[A- -64|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+60>>2]=0,p2[A- -64|0]=1,T2[(f=A+52|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+40>>2]=0,p2[A+44|0]=1,T2[(f=A+32|0)>>2]=0,(T2[f+4>>2]=0)|A;},function(A){var f=0;T2[(A|=0)>>2]=19980,(f=T2[A+80>>2])&&S2[A+84|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+80>>2]=0,p2[A+84|0]=1,T2[(f=A+72|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+60>>2])&&S2[A- -64|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+60>>2]=0,p2[A- -64|0]=1,T2[(f=A+52|0)>>2]=0,T2[f+4>>2]=0,(f=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),u(A);},function(A,f,r,e,i,a){A|=0,f|=0,r|=0,e|=0,i|=0;var n,o=0,b=0,t=0,c=0,u=0,k=0,l=0;A:{f:{r:{if(0<=(0|(a|=0))){if(1<=(0|(o=T2[A+16>>2])))break r;break f;}return a=T2[A+8>>2],void z2(n1[T2[T2[a>>2]+12>>2]](a,f,r,e,i,T2[A+12>>2],T2[A+16>>2],T2[A+4>>2],T2[A+20>>2],T2[A+24>>2]));}for(k=T2[A+12>>2];;){if(c=T2[k>>2],(0|a)==(0|(b=(0|(b=T2[T2[c+28>>2]+208>>2]))<=-1?T2[T2[c+32>>2]+208>>2]:b)))break f;if(k=k+4|0,(0|o)==(0|(t=t+1|0)))break;}k=0;break A;}if(!((0|o)<=(0|t)))for(b=o-t|0,o=T2[A+12>>2]+(t<<2)|0;c=T2[o>>2],o=o+4|0,l=((0|a)==(0|(t=(0|(t=T2[T2[c+28>>2]+208>>2]))<=-1?T2[T2[c+32>>2]+208>>2]:t)))+l|0,b=b-1|0;);}if(a=T2[A+4>>2],2<=T2[a+80>>2]){if(1<=(0|r))for(b=T2[A+36>>2],t=T2[A+32>>2];;){if(n=(u<<2)+f|0,(0|b)==(0|t)){if((0|(c=b?b<<1:1))<=(0|b))o=b;else {if(a=0,c&&(T2[5498]=T2[5498]+1,(o=K2(19+(c<<2)|0))&&(T2[(a=o+19&-16)-4>>2]=o)),1<=(0|b))for(o=0,t=b;T2[a+o>>2]=T2[T2[A+40>>2]+o>>2],o=o+4|0,t=t-1|0;);(o=T2[A+40>>2])&&S2[A+44|0]&&(T2[5499]=T2[5499]+1,q2(T2[o-4>>2]),b=T2[A+32>>2]),o=b,T2[A+40>>2]=a,p2[A+44|0]=1,b=T2[A+36>>2]=c;}}else o=t;if(T2[A+32>>2]=t=o+1|0,T2[T2[A+40>>2]+(o<<2)>>2]=T2[n>>2],(0|(u=u+1|0))==(0|r))break;}if(1<=(0|i))for(b=T2[A+56>>2],t=T2[A+52>>2],u=0;;){if(c=(u<<2)+e|0,(0|b)==(0|t)){if((0|(f=b?b<<1:1))<=(0|b))o=b;else {if(a=0,f&&(T2[5498]=T2[5498]+1,(r=K2(19+(f<<2)|0))&&(T2[(a=r+19&-16)-4>>2]=r)),1<=(0|b))for(o=0,t=b;T2[a+o>>2]=T2[T2[A+60>>2]+o>>2],o=o+4|0,t=t-1|0;);(r=T2[A+60>>2])&&S2[A+64|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]),b=T2[A+52>>2]),o=b,T2[A+60>>2]=a,p2[A+64|0]=1,b=T2[A+56>>2]=f;}}else o=t;if(T2[A+52>>2]=t=o+1|0,T2[T2[A+60>>2]+(o<<2)>>2]=T2[c>>2],(0|(u=u+1|0))==(0|i))break;}if(l)for(b=T2[A+76>>2],t=T2[A+72>>2],u=0;;){if(e=(u<<2)+k|0,(0|b)==(0|t)){if((0|(f=b?b<<1:1))<=(0|b))o=b;else {if(a=0,f&&(T2[5498]=T2[5498]+1,(r=K2(19+(f<<2)|0))&&(T2[(a=r+19&-16)-4>>2]=r)),1<=(0|b))for(o=0,t=b;T2[a+o>>2]=T2[T2[A+80>>2]+o>>2],o=o+4|0,t=t-1|0;);(r=T2[A+80>>2])&&S2[A+84|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]),b=T2[A+72>>2]),o=b,T2[A+80>>2]=a,p2[A+84|0]=1,b=T2[A+76>>2]=f;}}else o=t;if(T2[A+72>>2]=t=o+1|0,T2[T2[A+80>>2]+(o<<2)>>2]=T2[e>>2],(0|l)==(0|(u=u+1|0)))break;}else t=T2[A+72>>2];T2[T2[A+4>>2]+80>>2]<(T2[A+52>>2]+t|0)&&P4(A);}else b=T2[A+8>>2],z2(n1[T2[T2[b>>2]+12>>2]](b,f,r,e,i,k,l,a,T2[A+20>>2],T2[A+24>>2]));},I,function(A,f){var r=0,e=0,i=0;return (0|(r=T2[(f|=0)>>2]))!=(0|(e=T2[(A|=0)+84>>2]))&&T2[A+12>>2]&T2[f+4>>2]&&T2[f+8>>2]&T2[A+8>>2]&&(A=T2[A+96>>2],i=0|n1[T2[T2[A>>2]+28>>2]](A,e,r)),0|i;},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o,b,t,c,u,k,l,s=0,v=z2(0),v=(z2(1));return (0|(s=T2[f>>2]))!=T2[A+84>>2]&&(4&S2[s+204|0]||z2(-j2[A+88>>2])<=z2(z2(z2(z2(j2[A+32>>2]-j2[A+16>>2])*j2[f+8>>2])+z2(z2(j2[A+36>>2]-j2[A+20>>2])*j2[f+12>>2]))+z2(z2(j2[A+40>>2]-j2[A+24>>2])*j2[f+16>>2]))||(T2[A+80>>2]=s,j2[A+4>>2]=j2[f+40>>2],r?(s=T2[(r=f+8|0)+4>>2],T2[A+48>>2]=T2[r>>2],T2[A+52>>2]=s,i=T2[(r=r+8|0)+4>>2],T2[(s=A+56|0)>>2]=T2[r>>2],T2[s+4>>2]=i):(a=j2[s+12>>2],n=j2[s+8>>2],o=j2[s+28>>2],b=j2[s+20>>2],t=j2[s+24>>2],c=j2[s+44>>2],u=j2[s+36>>2],k=j2[s+40>>2],l=j2[s+4>>2],v=j2[f+16>>2],e=j2[f+8>>2],i=j2[f+12>>2],T2[A+60>>2]=0,j2[A+56>>2]=z2(z2(e*u)+z2(i*k))+z2(v*c),j2[A+52>>2]=z2(z2(e*b)+z2(i*t))+z2(v*o),j2[A+48>>2]=z2(z2(l*e)+z2(n*i))+z2(a*v)),r=T2[f+28>>2],T2[A+64>>2]=T2[f+24>>2],T2[A+68>>2]=r,s=T2[(r=f+32|0)+4>>2],T2[(A=A+72|0)>>2]=T2[r>>2],T2[A+4>>2]=s,v=j2[f+40>>2])),z2(v);},function(A){return z4(A|=0),0|A;},function(A){z4(A|=0),T2[5499]=T2[5499]+1,q2(T2[A-4>>2]);},function(A,f){A|=0,f=z2(f);var r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z,Y,R,F,W,m,N,V,J,M,I=0,x=0,y=0,U=0,X=(0),p=(0),T=(0),S=(0);if(L2=x=L2-496|0,1<=T2[A+324>>2])for(;p=T2[A+24>>2],n1[T2[T2[p>>2]+16>>2]](p,T2[T2[A+332>>2]+T>>2]),T=T+4|0,(0|(y=y+1|0))<T2[A+324>>2];);if((p=T2[A+332>>2])&&S2[A+336|0]&&(T2[5499]=T2[5499]+1,q2(T2[p-4>>2])),T2[A+332>>2]=0,T2[A+324>>2]=0,T2[A+328>>2]=0,(p2[A+336|0]=1)<=(0|(D=T2[A+248>>2])))for(o=116+x|0,l=84+x|0,s=x+64|0,p=384+x|0,v=256+x|0,d=240+x|0,B=224+x|0,c=304+x|0,Q=368+x|0,g=352+x|0,t=480+x|0,T=0;;){r=T2[T2[A+256>>2]+(T<<2)>>2],T2[r+268>>2]=1065353216;A:{f:switch(T2[r+220>>2]-2|0){case 0:case 3:break A;default:break f;}if(!(3&S2[r+204|0])&&(W4(X=r+4|0,j2[r+372>>2],j2[r+376>>2],j2[r+380>>2],r+388|0,f,432+x|0),S2[A+44|0]&&(e=j2[r+276>>2],(a=z2(e*e))!=z2(0)&&(u=j2[480+x>>2],e=z2(u-j2[(b=r+52|0)>>2]),i=z2(e*e),k=j2[484+x>>2],e=z2(k-j2[r+56>>2]),n=z2(i+z2(e*e)),i=j2[488+x>>2],e=z2(i-j2[r+60>>2]),a<z2(n+z2(e*e))&&!(19<T2[T2[r+192>>2]+4>>2])&&(I=T2[4+b>>2],T2[g>>2]=T2[b>>2],T2[4+g>>2]=I,I=T2[4+t>>2],T2[Q>>2]=T2[t>>2],T2[4+Q>>2]=I,I=T2[(y=w=8+b|0)+4>>2],T2[(U=8+g|0)>>2]=T2[y>>2],T2[U+4>>2]=I,I=T2[(U=8+t|0)+4>>2],T2[(y=8+Q|0)>>2]=T2[U>>2],T2[y+4>>2]=I,T2[340+x>>2]=1065353216,T2[336+x>>2]=20576,T2[416+x>>2]=0,T2[420+x>>2]=0,T2[428+x>>2]=A,T2[424+x>>2]=r,T2[c>>2]=0,T2[4+c>>2]=0,T2[(I=8+c|0)>>2]=0,T2[I+4>>2]=0,T2[16+c>>2]=0,T2[284+x>>2]=0,T2[288+x>>2]=0,T2[300+x>>2]=1065353216,T2[292+x>>2]=1065353216,T2[296+x>>2]=1065353216,T2[276+x>>2]=8,T2[280+x>>2]=0,T2[272+x>>2]=11936,T2[328+x>>2]=0,e=j2[r+272>>2],j2[308+x>>2]=e,j2[324+x>>2]=e,I=T2[r+188>>2],T2[344+x>>2]=T2[I+4>>2],T2[348+x>>2]=T2[I+8>>2],I=T2[U+4>>2],T2[(y=8+v|0)>>2]=T2[U>>2],T2[y+4>>2]=I,I=T2[4+t>>2],T2[v>>2]=T2[t>>2],T2[4+v>>2]=I,I=T2[(y=X+8|0)+4>>2],T2[(U=216+x|0)>>2]=T2[y>>2],T2[U+4>>2]=I,I=T2[(y=r+20|0)+4>>2],T2[B>>2]=T2[y>>2],T2[4+B>>2]=I,I=T2[(y=r+28|0)+4>>2],T2[(U=8+B|0)>>2]=T2[y>>2],T2[U+4>>2]=I,I=T2[(y=r+36|0)+4>>2],T2[d>>2]=T2[y>>2],T2[4+d>>2]=I,I=T2[(y=r+44|0)+4>>2],T2[(U=8+d|0)>>2]=T2[y>>2],T2[U+4>>2]=I,I=T2[X+4>>2],T2[208+x>>2]=T2[X>>2],T2[212+x>>2]=I,T4(A,272+x|0,X,208+x|0,336+x|0,z2(0)),(e=j2[340+x>>2])<z2(1)))))){if(h=z2(z2(k-j2[r+56>>2])*e),n=z2(z2(u-j2[r+52>>2])*e),Z=z2(e*z2(i-j2[r+60>>2])),a=z2(z2(z2(h*z2(-j2[388+x>>2]))-z2(j2[384+x>>2]*n))-z2(Z*j2[392+x>>2])),I=T2[A+24>>2],G=0|n1[T2[T2[I>>2]+12>>2]](I,r,T2[416+x>>2]),(0|(y=T2[A+324>>2]))==T2[A+328>>2]&&!((0|(X=y?y<<1:1))<=(0|y))){if(U=0,X&&(T2[5498]=T2[5498]+1,(I=K2(19+(X<<2)|0))&&(T2[(U=I+19&-16)-4>>2]=I)),1<=(0|y))for(S=0,I=y;T2[U+S>>2]=T2[T2[A+332>>2]+S>>2],S=S+4|0,I=I-1|0;);(I=T2[A+332>>2])&&S2[A+336|0]&&(T2[5499]=T2[5499]+1,q2(T2[I-4>>2]),y=T2[A+324>>2]),T2[A+332>>2]=U,p2[A+336|0]=1,T2[A+328>>2]=X;}T2[T2[A+332>>2]+(y<<2)>>2]=G,T2[A+324>>2]=y+1,I=T2[416+x>>2],Y=j2[I+20>>2],R=j2[I+36>>2],F=j2[I+40>>2],W=j2[I+8>>2],m=j2[I+24>>2],C=j2[I+60>>2],u=j2[I+56>>2],E=j2[I+52>>2],N=j2[I+44>>2],V=j2[I+12>>2],J=j2[I+28>>2],M=j2[I+4>>2],k=j2[r+60>>2],i=j2[r+52>>2],e=j2[r+56>>2],T2[(I=8+x|0)>>2]=0,T2[I+4>>2]=0,T2[l>>2]=0,T2[4+l>>2]=0,T2[(I=8+l|0)>>2]=0,T2[I+4>>2]=0,T2[o>>2]=0,T2[4+o>>2]=0,T2[(I=8+o|0)>>2]=0,T2[I+4>>2]=0,T2[(I=16+o|0)>>2]=0,T2[I+4>>2]=0,T2[(I=24+o|0)>>2]=0,T2[I+4>>2]=0,T2[(I=32+o|0)>>2]=0,T2[I+4>>2]=0,T2[(I=40+o|0)>>2]=0,T2[I+4>>2]=0,T2[48+o>>2]=0,I=T2[p+4>>2],T2[s>>2]=T2[p>>2],T2[4+s>>2]=I,I=T2[(y=p+8|0)+4>>2],T2[(U=8+s|0)>>2]=T2[y>>2],T2[U+4>>2]=I,T2[x>>2]=0,T2[4+x>>2]=0,T2[28+x>>2]=0,j2[80+x>>2]=a,n=z2(n+i),a=z2(h+e),i=z2(Z+k),e=z2(-u),j2[24+x>>2]=z2(z2(z2(V*n)+z2(J*a))+z2(N*i))+z2(z2(z2(J*e)-z2(V*E))-z2(N*C)),j2[20+x>>2]=z2(z2(z2(n*W)+z2(a*m))+z2(i*F))+z2(z2(z2(m*e)-z2(W*E))-z2(F*C)),j2[16+x>>2]=z2(z2(z2(n*M)+z2(a*Y))+z2(i*R))+z2(z2(z2(Y*e)-z2(M*E))-z2(R*C)),T2[200+x>>2]=T2[r+192>>2],T2[204+x>>2]=T2[420+x>>2],X=P2(W0(G,x),208)+G|0,T2[X+100>>2]=0,j2[X+88>>2]=F2(z2(H2(z2(j2[r+228>>2]*j2[T2[416+x>>2]+228>>2]),z2(-10))),z2(10)),I=T2[4+w>>2],T2[(y=X+60|0)>>2]=T2[w>>2],T2[y+4>>2]=I,U=T2[4+b>>2],y=T2[b>>2],T2[X+48>>2]=0,j2[X+44>>2]=i,j2[X+40>>2]=a,T2[(I=X+52|0)>>2]=y,T2[I+4>>2]=U,j2[X+36>>2]=n;}}if((0|D)==(0|(T=T+1|0)))break;}L2=496+x|0;},function(A){var f=0,r=0,e=0,i=0;if(1<=T2[(A|=0)+248>>2])for(;;){A:{f:switch(f=T2[T2[A+256>>2]+e>>2],T2[f+220>>2]-2|0){case 0:case 3:break A;default:break f;}2&(r=T2[f+204>>2])||(j2[f+504>>2]!=z2(1)?3&r||(j2[f+472>>2]=z2(j2[f+424>>2]*j2[f+408>>2])+j2[f+472>>2],j2[(r=f+476|0)>>2]=z2(j2[f+428>>2]*j2[f+412>>2])+j2[r>>2],j2[(r=f+480|0)>>2]=z2(j2[f+432>>2]*j2[f+416>>2])+j2[r>>2]):(T2[f+472>>2]=0,T2[f+476>>2]=0,T2[(r=f+480|0)>>2]=0,T2[r+4>>2]=0),j2[f+508>>2]==z2(1)&&(T2[f+488>>2]=0,T2[f+492>>2]=0,T2[(f=f+496|0)>>2]=0,T2[f+4>>2]=0));}if(e=e+4|0,!((0|(i=i+1|0))<T2[A+248>>2]))break;}},_,I,function(A,f,r){return A|=0,T2[(r|=A=0)+8>>2]&T2[(f|=0)+4>>2]&&T2[f+8>>2]&T2[r+4>>2]&&(f=T2[f>>2],r=T2[r>>2],1&p2[r+204|0]&&1&p2[f+204|0]||2==T2[r+220>>2]&&2==T2[f+220>>2]||(A=1)),0|A;},I,function(A,f){var r=0,e=0,i=0;return (0|(r=T2[(f|=0)>>2]))!=(0|(e=T2[(A|=0)+88>>2]))&&T2[A+12>>2]&T2[f+4>>2]&&T2[f+8>>2]&T2[A+8>>2]&&(A=T2[T2[A+92>>2]+24>>2],i=0|n1[T2[T2[A>>2]+28>>2]](A,e,r)),0|i;},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o,b,t,c,u,k,l,s,v=0;return j2[A+4>>2]=j2[f+40>>2],v=T2[f>>2],T2[A+80>>2]=v,T2[A+84>>2]=T2[T2[f+4>>2]+8>>2],r?(r=T2[f+12>>2],T2[A+48>>2]=T2[f+8>>2],T2[A+52>>2]=r,a=T2[(v=f+16|0)+4>>2],T2[(r=A+56|0)>>2]=T2[v>>2],T2[r+4>>2]=a):(n=j2[v+8>>2],o=j2[v+12>>2],b=j2[v+20>>2],t=j2[v+24>>2],c=j2[v+28>>2],u=j2[v+36>>2],k=j2[v+40>>2],e=j2[f+12>>2],l=j2[v+44>>2],i=j2[f+16>>2],s=j2[v+4>>2],a=j2[f+8>>2],T2[A+60>>2]=0,j2[A+56>>2]=z2(z2(a*u)+z2(e*k))+z2(i*l),j2[A+52>>2]=z2(z2(a*b)+z2(e*t))+z2(i*c),j2[A+48>>2]=z2(z2(s*a)+z2(n*e))+z2(o*i)),r=T2[f+28>>2],T2[A+64>>2]=T2[f+24>>2],T2[A+68>>2]=r,v=T2[(r=f+32|0)+4>>2],T2[(A=A+72|0)>>2]=T2[r>>2],T2[A+4>>2]=v,z2(j2[f+40>>2]);},L4,function(A){A|=0;var f,r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w=0,G=0,C=z2(0),E=z2(0),D=z2(0),h=z2(0),Z=0,Y=z2(0),R=0,F=z2(0),W=z2(0),m=0,N=z2(0),V=z2(0),J=z2(0),M=z2(0),I=z2(0),x=z2(0),y=z2(0),U=z2(0),X=z2(0),p=z2(0),T=z2(0),S=z2(0),j=z2(0),P=(z2(0)),z=z2(0),O=(z2(0)),H=(0),_=0,L=0,K=0,q=0,$=0,A2=0,f2=0,r2=0,e2=0,i2=0,a2=0,n2=(z2(0));L2=w=L2-176|0,S2[A+738|0]&&(T2[A+744>>2]=0,T2[A+36>>2]=0,S2[A+736|0]||(D=j2[A+664>>2],Z=T2[A+32>>2],X=j2[Z+4>>2],h=j2[A+668>>2],J=j2[Z+8>>2],p=j2[A+672>>2],I=j2[Z+12>>2],P=z2(z2(z2(z2(D*X)+z2(h*J))+z2(p*I))+j2[Z+52>>2]),V=j2[A+600>>2],G=T2[A+28>>2],E=j2[A+604>>2],C=j2[A+608>>2],O=z2(z2(z2(z2(V*j2[G+4>>2])+z2(E*j2[G+8>>2]))+z2(C*j2[G+12>>2]))+j2[G+52>>2]),M=z2(P-O),y=j2[Z+20>>2],U=j2[Z+24>>2],F=j2[Z+28>>2],T=z2(z2(z2(z2(D*y)+z2(h*U))+z2(p*F))+j2[Z+56>>2]),S=z2(z2(z2(z2(V*j2[G+20>>2])+z2(E*j2[G+24>>2]))+z2(C*j2[G+28>>2]))+j2[G+56>>2]),W=z2(T-S),z=D,D=j2[Z+36>>2],n2=h,h=j2[Z+40>>2],j=z2(z2(z2(z2(z*D)+z2(n2*h))+z2(p*j2[Z+44>>2]))+j2[Z+60>>2]),p=z2(z2(z2(z2(V*j2[G+36>>2])+z2(E*j2[G+40>>2]))+z2(C*j2[G+44>>2]))+j2[G+60>>2]),E=z2(j-p),C=(C=z2(z2(z2(M*M)+z2(W*W))+z2(E*E)))>z2(1.1920928955078125e-7)?(C=z2(z2(1)/z2(_2(C))),Y=z2(E*C),N=z2(W*C),z2(M*C)):z2(1),T2[140+w>>2]=0,j2[132+w>>2]=N,j2[128+w>>2]=C,j2[136+w>>2]=Y,a2=160+w|0,G=144+w|0,z2(O2(Y))>z2(.7071067690849304)?(E=z2(z2(Y*Y)+z2(N*N)),V=z2(z2(1)/z2(_2(E))),M=z2(E*V),W=z2(V*z2(-Y)),E=z2(C*W),Y=z2(N*V),N=z2(Y*z2(-C))):(E=z2(z2(C*C)+z2(N*N)),W=z2(z2(1)/z2(_2(E))),E=z2(E*W),x=z2(W*z2(-N)),N=z2(Y*x),W=z2(C*W),M=z2(W*z2(-Y)),Y=z2(0)),j2[168+w>>2]=E,j2[164+w>>2]=N,j2[152+w>>2]=Y,j2[148+w>>2]=W,j2[160+w>>2]=M,j2[144+w>>2]=x,T2[(H=108+w|0)>>2]=0,R=T2[A+28>>2],j2[(m=100+w|0)>>2]=j2[R+24>>2],j2[(_=104+w|0)>>2]=j2[R+40>>2],j2[(L=116+w|0)>>2]=j2[R+28>>2],T2[92+w>>2]=0,j2[80+w>>2]=j2[R+4>>2],j2[84+w>>2]=j2[R+20>>2],j2[88+w>>2]=j2[R+36>>2],j2[96+w>>2]=j2[R+8>>2],j2[112+w>>2]=j2[R+12>>2],T2[(K=124+w|0)>>2]=0,j2[(q=120+w|0)>>2]=j2[R+44>>2],j2[($=68+w|0)>>2]=F,T2[(A2=60+w|0)>>2]=0,j2[(f2=56+w|0)>>2]=h,j2[(r2=52+w|0)>>2]=U,T2[(e2=76+w|0)>>2]=0,j2[(i2=72+w|0)>>2]=j2[Z+44>>2],j2[64+w>>2]=I,j2[48+w>>2]=J,T2[44+w>>2]=0,j2[40+w>>2]=D,j2[36+w>>2]=y,j2[32+w>>2]=X,T2[28+w>>2]=0,j2[24+w>>2]=p-j2[R+60>>2],j2[20+w>>2]=S-j2[R+56>>2],j2[16+w>>2]=O-j2[R+52>>2],T2[12+w>>2]=0,j2[8+w>>2]=j-j2[Z+60>>2],j2[4+w>>2]=T-j2[Z+56>>2],j2[w>>2]=P-j2[Z+52>>2],j4(A+48|0,80+w|0,32+w|0,16+w|0,w,128+w|0,R+456|0,j2[R+404>>2],Z+456|0,j2[Z+404>>2]),T2[H>>2]=0,Z=T2[A+28>>2],j2[m>>2]=j2[Z+24>>2],j2[_>>2]=j2[Z+40>>2],j2[L>>2]=j2[Z+28>>2],T2[92+w>>2]=0,j2[80+w>>2]=j2[Z+4>>2],j2[84+w>>2]=j2[Z+20>>2],j2[88+w>>2]=j2[Z+36>>2],j2[96+w>>2]=j2[Z+8>>2],j2[112+w>>2]=j2[Z+12>>2],T2[K>>2]=0,j2[q>>2]=j2[Z+44>>2],T2[A2>>2]=0,R=T2[A+32>>2],j2[r2>>2]=j2[R+24>>2],j2[f2>>2]=j2[R+40>>2],j2[$>>2]=j2[R+28>>2],T2[44+w>>2]=0,j2[32+w>>2]=j2[R+4>>2],j2[36+w>>2]=j2[R+20>>2],j2[40+w>>2]=j2[R+36>>2],j2[48+w>>2]=j2[R+8>>2],j2[64+w>>2]=j2[R+12>>2],T2[e2>>2]=0,j2[i2>>2]=j2[R+44>>2],T2[28+w>>2]=0,j2[24+w>>2]=p-j2[Z+60>>2],j2[20+w>>2]=S-j2[Z+56>>2],j2[16+w>>2]=O-j2[Z+52>>2],T2[12+w>>2]=0,j2[8+w>>2]=j-j2[R+60>>2],j2[4+w>>2]=T-j2[R+56>>2],j2[w>>2]=P-j2[R+52>>2],j4(A+132|0,80+w|0,32+w|0,16+w|0,w,G,Z+456|0,j2[Z+404>>2],R+456|0,j2[R+404>>2]),T2[H>>2]=0,G=m,m=T2[A+28>>2],j2[G>>2]=j2[m+24>>2],j2[_>>2]=j2[m+40>>2],j2[L>>2]=j2[m+28>>2],T2[92+w>>2]=0,j2[80+w>>2]=j2[m+4>>2],j2[84+w>>2]=j2[m+20>>2],j2[88+w>>2]=j2[m+36>>2],j2[96+w>>2]=j2[m+8>>2],j2[112+w>>2]=j2[m+12>>2],T2[K>>2]=0,j2[q>>2]=j2[m+44>>2],T2[A2>>2]=0,G=T2[A+32>>2],j2[r2>>2]=j2[G+24>>2],j2[f2>>2]=j2[G+40>>2],j2[$>>2]=j2[G+28>>2],T2[44+w>>2]=0,j2[32+w>>2]=j2[G+4>>2],j2[36+w>>2]=j2[G+20>>2],j2[40+w>>2]=j2[G+36>>2],j2[48+w>>2]=j2[G+8>>2],j2[64+w>>2]=j2[G+12>>2],T2[e2>>2]=0,j2[i2>>2]=j2[G+44>>2],T2[28+w>>2]=0,j2[24+w>>2]=p-j2[m+60>>2],j2[20+w>>2]=S-j2[m+56>>2],j2[16+w>>2]=O-j2[m+52>>2],T2[12+w>>2]=0,j2[8+w>>2]=j-j2[G+60>>2],j2[4+w>>2]=T-j2[G+56>>2],j2[w>>2]=P-j2[G+52>>2],j4(A+216|0,80+w|0,32+w|0,16+w|0,w,a2,m+456|0,j2[m+404>>2],G+456|0,j2[G+404>>2])),i=j2[A+576>>2],n=j2[A+560>>2],a=j2[A+592>>2],C=z2(O2(a))>z2(.7071067690849304)?(C=z2(z2(i*i)+z2(a*a)),E=z2(z2(1)/z2(_2(C))),Y=z2(C*E),V=z2(E*z2(-a)),N=z2(n*V),x=z2(0),M=z2(i*E),z2(M*z2(-n))):(C=z2(z2(n*n)+z2(i*i)),E=z2(z2(1)/z2(_2(C))),N=z2(C*E),V=z2(n*E),Y=z2(V*z2(-a)),M=z2(0),x=z2(E*z2(-i)),z2(a*x)),f=T2[A+32>>2],X=j2[(v=f+36|0)>>2],J=j2[(d=f+20|0)>>2],I=j2[(B=f+40|0)>>2],y=j2[(Q=f+24|0)>>2],U=j2[(g=f+8|0)>>2],F=j2[(Z=f+44|0)>>2],D=j2[(R=f+28|0)>>2],h=j2[(H=f+12|0)>>2],r=T2[A+28>>2],o=j2[(m=r+44|0)>>2],b=j2[(_=r+36|0)>>2],t=j2[(L=r+40|0)>>2],c=j2[(K=r+12|0)>>2],u=j2[(q=r+8|0)>>2],k=j2[($=r+28|0)>>2],l=j2[(A2=r+20|0)>>2],s=j2[(f2=r+24|0)>>2],E=j2[f+4>>2],e=j2[r+4>>2],T2[A+344>>2]=0,T2[A+328>>2]=0,T2[(G=A+308|0)>>2]=0,T2[G+4>>2]=0,T2[A+300>>2]=0,T2[A+304>>2]=0,T=z2(z2(z2(x*e)+z2(V*u))+z2(M*c)),W=z2(z2(z2(x*l)+z2(V*s))+z2(M*k)),S=z2(z2(z2(x*b)+z2(V*t))+z2(M*o)),j=z2(z2(z2(c*T)+z2(k*W))+z2(o*S)),j2[A+324>>2]=j,p=z2(z2(z2(u*T)+z2(s*W))+z2(t*S)),j2[A+320>>2]=p,V=z2(z2(z2(e*T)+z2(l*W))+z2(b*S)),j2[A+316>>2]=V,z=D,D=z2(-W),M=z2(z2(z2(z*D)-z2(T*h))-z2(S*F)),j2[A+340>>2]=M,W=z2(z2(z2(y*D)-z2(T*U))-z2(S*I)),j2[A+336>>2]=W,J=z2(z2(z2(J*D)-z2(T*E))-z2(S*X)),j2[A+332>>2]=J,D=j2[(r2=r+460|0)>>2],h=j2[(e2=r+464|0)>>2],E=j2[r+456>>2],T2[A+360>>2]=0,I=z2(j*h),j2[A+356>>2]=I,y=z2(p*D),j2[A+352>>2]=y,U=z2(V*E),j2[A+348>>2]=U,F=j2[(i2=f+460|0)>>2],h=j2[(a2=f+464|0)>>2],E=j2[f+456>>2],T2[A+376>>2]=0,D=z2(M*h),j2[A+372>>2]=D,h=z2(W*F),j2[A+368>>2]=h,E=z2(J*E),j2[A+364>>2]=E,j2[A+380>>2]=z2(z2(z2(V*U)+z2(p*y))+z2(j*I))+z2(z2(z2(J*E)+z2(W*h))+z2(M*D)),P=j2[_>>2],O=j2[A2>>2],T=j2[L>>2],S=j2[q>>2],j=j2[f2>>2],p=j2[m>>2],V=j2[K>>2],M=j2[$>>2],W=j2[v>>2],X=j2[d>>2],J=j2[B>>2],I=j2[Q>>2],y=j2[g>>2],U=j2[Z>>2],F=j2[R>>2],D=j2[H>>2],h=j2[r+4>>2],E=j2[f+4>>2],T2[A+428>>2]=0,T2[A+412>>2]=0,T2[(G=A+392|0)>>2]=0,T2[G+4>>2]=0,T2[(G=A+384|0)>>2]=0,T2[G+4>>2]=0,z=F,x=z2(z2(z2(Y*l)+z2(C*s))+z2(N*k)),F=z2(-x),n2=D,D=z2(z2(z2(Y*e)+z2(C*u))+z2(N*c)),C=z2(z2(z2(Y*b)+z2(C*t))+z2(N*o)),Y=z2(z2(z2(z*F)-z2(n2*D))-z2(U*C)),j2[A+424>>2]=Y,N=z2(z2(z2(I*F)-z2(D*y))-z2(C*J)),j2[A+420>>2]=N,W=z2(z2(z2(X*F)-z2(D*E))-z2(C*W)),j2[A+416>>2]=W,X=z2(z2(z2(D*V)+z2(x*M))+z2(C*p)),j2[A+408>>2]=X,J=z2(z2(z2(D*S)+z2(x*j))+z2(C*T)),j2[A+404>>2]=J,I=z2(z2(z2(D*h)+z2(x*O))+z2(C*P)),j2[A+400>>2]=I,h=j2[r2>>2],E=j2[e2>>2],C=j2[r+456>>2],T2[A+444>>2]=0,y=z2(X*E),j2[A+440>>2]=y,U=z2(J*h),j2[A+436>>2]=U,F=z2(I*C),j2[A+432>>2]=F,D=j2[i2>>2],E=j2[a2>>2],C=j2[f+456>>2],T2[A+460>>2]=0,h=z2(Y*E),j2[A+456>>2]=h,E=z2(N*D),j2[A+452>>2]=E,C=z2(W*C),j2[A+448>>2]=C,j2[A+464>>2]=z2(z2(z2(I*F)+z2(J*U))+z2(X*y))+z2(z2(z2(W*C)+z2(N*E))+z2(Y*h)),O=j2[_>>2],T=j2[A2>>2],S=j2[L>>2],j=j2[q>>2],p=j2[f2>>2],V=j2[m>>2],M=j2[K>>2],W=j2[$>>2],X=j2[v>>2],J=j2[d>>2],I=j2[B>>2],y=j2[Q>>2],U=j2[g>>2],F=j2[Z>>2],D=j2[R>>2],h=j2[H>>2],E=j2[r+4>>2],C=j2[f+4>>2],T2[A+512>>2]=0,T2[A+496>>2]=0,T2[(G=A+476|0)>>2]=0,T2[G+4>>2]=0,T2[(G=A+468|0)>>2]=0,T2[G+4>>2]=0,z=D,x=z2(z2(z2(n*l)+z2(i*s))+z2(a*k)),D=z2(-x),e=z2(z2(z2(n*e)+z2(i*u))+z2(a*c)),z=z2(z2(z*D)-z2(h*e)),h=z2(z2(z2(n*b)+z2(i*t))+z2(a*o)),Y=z2(z-z2(F*h)),j2[A+508>>2]=Y,N=z2(z2(z2(y*D)-z2(e*U))-z2(h*I)),j2[A+504>>2]=N,P=z2(z2(z2(J*D)-z2(e*C))-z2(h*X)),j2[A+500>>2]=P,X=z2(z2(z2(e*M)+z2(x*W))+z2(h*V)),j2[A+492>>2]=X,J=z2(z2(z2(e*j)+z2(x*p))+z2(h*S)),j2[A+488>>2]=J,I=z2(z2(z2(e*E)+z2(x*T))+z2(h*O)),j2[A+484>>2]=I,h=j2[r2>>2],E=j2[e2>>2],C=j2[r+456>>2],T2[A+528>>2]=0,y=z2(X*E),j2[A+524>>2]=y,U=z2(J*h),j2[A+520>>2]=U,F=z2(I*C),j2[A+516>>2]=F,D=j2[i2>>2],E=j2[a2>>2],C=j2[f+456>>2],T2[A+724>>2]=0,T2[A+544>>2]=0,h=z2(Y*E),j2[A+540>>2]=h,E=z2(N*D),j2[A+536>>2]=E,C=z2(P*C),j2[A+532>>2]=C,j2[A+548>>2]=z2(z2(z2(I*F)+z2(J*U))+z2(X*y))+z2(z2(z2(P*C)+z2(N*E))+z2(Y*h)),C=K4(A,r+4|0,f+4|0),T2[(G=A+708|0)>>2]=0,T2[G+4>>2]=0,j2[A+728>>2]=C,p2[A+716|0]=0,(E=j2[A+692>>2])>=z2(0)&&((Y=o2(z2(C-j2[A+688>>2])))<z2(-3.1415927410125732)?Y=z2(Y+z2(6.2831854820251465)):Y>z2(3.1415927410125732)&&(Y=z2(Y+z2(-6.2831854820251465))),z2(-E)>Y?(T2[A+712>>2]=1065353216,p2[A+716|0]=1,j2[A+708>>2]=-z2(E+Y)):E<Y&&(T2[A+712>>2]=-1082130432,p2[A+716|0]=1,j2[A+708>>2]=E-Y)),h=j2[(m=A)+560>>2],G=T2[A+28>>2],E=j2[A+576>>2],C=j2[A+592>>2],F=z2(z2(z2(h*j2[G+4>>2])+z2(E*j2[G+8>>2]))+z2(C*j2[G+12>>2])),D=z2(z2(z2(h*j2[G+20>>2])+z2(E*j2[G+24>>2]))+z2(C*j2[G+28>>2])),C=z2(z2(z2(h*j2[G+36>>2])+z2(E*j2[G+40>>2]))+z2(C*j2[G+44>>2])),A=T2[A+32>>2],j2[m+720>>2]=z2(1)/z2(z2(z2(z2(F*z2(z2(z2(F*j2[G+324>>2])+z2(D*j2[G+340>>2]))+z2(C*j2[G+356>>2])))+z2(D*z2(z2(z2(F*j2[G+328>>2])+z2(D*j2[G+344>>2]))+z2(C*j2[G+360>>2]))))+z2(C*z2(z2(z2(F*j2[G+332>>2])+z2(D*j2[G+348>>2]))+z2(C*j2[G+364>>2]))))+z2(z2(z2(F*z2(z2(z2(F*j2[A+324>>2])+z2(D*j2[A+340>>2]))+z2(C*j2[A+356>>2])))+z2(D*z2(z2(z2(F*j2[A+328>>2])+z2(D*j2[A+344>>2]))+z2(C*j2[A+360>>2]))))+z2(C*z2(z2(z2(F*j2[A+332>>2])+z2(D*j2[A+348>>2]))+z2(C*j2[A+364>>2])))))),L2=176+w|0;},function(A,f){A|=0,f|=0;var r,e,i=z2(0);if(S2[A+738|0])return T2[f>>2]=0,void(T2[f+4>>2]=0);T2[f>>2]=5,T2[f+4>>2]=1,i=K4(A,T2[A+28>>2]+4|0,T2[A+32>>2]+4|0),T2[(e=A+708|0)>>2]=0,T2[4+e>>2]=0,j2[A+728>>2]=i,p2[A+716|0]=0;A:{f:{if((r=j2[A+692>>2])>=z2(0)){if((i=o2(z2(i-j2[A+688>>2])))<z2(-3.1415927410125732)?i=z2(i+z2(6.2831854820251465)):i>z2(3.1415927410125732)&&(i=z2(i+z2(-6.2831854820251465))),z2(-r)>i){T2[A+712>>2]=1065353216,p2[A+716|0]=1,j2[A+708>>2]=-z2(r+i);break f;}if(r<i){T2[A+712>>2]=-1082130432,p2[A+716|0]=1,j2[A+708>>2]=r-i;break f;}}if(!S2[A+737|0])break A;}T2[f>>2]=T2[f>>2]+1,T2[f+4>>2]=T2[f+4>>2]-1;}},function(A,f){A|=0,f|=0;var r,e=z2(0),i=z2(0),a=z2(0),n=0,o=0,b=z2(0),t=z2(0),c=0,u=z2(0),k=0,l=z2(0),s=z2(0),v=z2(0),d=z2(0),B=z2(0),Q=z2(0),g=z2(0),w=z2(0),G=z2(0),C=0,E=z2(0),D=0,h=z2(0),Z=z2(0),Y=z2(0),R=z2(0),F=0,W=0,m=z2(0),N=z2(0),V=z2(0),J=z2(0),M=0,I=z2(0),x=z2(0),y=z2(0),U=z2(0),X=z2(0),p=z2(0),T=z2(0),S=0,j=z2(0),P=z2(0),z=z2(0),O=z2(0),H=z2(0),_=z2(0),L=z2(0),K=z2(0),q=z2(0),$=z2(0),A2=z2(0),f2=z2(0),r2=z2(0),c=T2[f+24>>2],e2=T2[A+32>>2],i2=T2[A+28>>2];A:{if(S2[A+739|0]){if(a=j2[T2[A+32>>2]+404>>2],_=j2[T2[A+28>>2]+404>>2],e=(e=z2(a+_))>z2(0)?z2(a/e):z2(.5),i=z2(z2(1)-e),v=j2[e2+36>>2],u=j2[A+664>>2],l=j2[e2+40>>2],G=j2[A+668>>2],B=j2[e2+44>>2],b=j2[A+672>>2],s=j2[e2+60>>2],L=z2(z2(z2(z2(v*u)+z2(l*G))+z2(B*b))+s),x=h=z2(L-s),s=j2[A+560>>2],w=j2[i2+36>>2],g=j2[A+576>>2],Q=j2[i2+40>>2],t=j2[A+592>>2],Y=j2[i2+44>>2],j=z2(z2(z2(s*w)+z2(g*Q))+z2(t*Y)),d=j2[A+624>>2],J=z2(d*v),v=j2[A+640>>2],J=z2(J+z2(v*l)),l=j2[A+656>>2],P=z2(J+z2(l*B)),B=z2(z2(j*e)+z2(P*i)),I=z2((J=B)*B),R=j2[i2+4>>2],m=j2[i2+8>>2],N=j2[i2+12>>2],z=z2(z2(z2(R*s)+z2(m*g))+z2(N*t)),E=j2[e2+4>>2],Z=j2[e2+8>>2],y=j2[e2+12>>2],O=z2(z2(z2(E*d)+z2(Z*v))+z2(y*l)),B=z2(z2(z*e)+z2(O*i)),V=j2[i2+20>>2],X=j2[i2+24>>2],H=j2[i2+28>>2],p=z2(z2(z2(s*V)+z2(g*X))+z2(t*H)),U=j2[e2+20>>2],t=v,v=j2[e2+24>>2],s=l,l=j2[e2+28>>2],T=z2(z2(z2(d*U)+z2(t*v))+z2(s*l)),t=z2(z2(p*e)+z2(T*i)),d=z2(z2(1)/z2(_2(z2(I+z2(z2(B*B)+z2(t*t)))))),s=z2(J*d),J=z2(h*s),g=j2[e2+52>>2],y=z2(g+z2(z2(z2(E*u)+z2(Z*G))+z2(y*b))),h=z2(y-g),g=z2(B*d),v=z2(z2(z2(U*u)+z2(v*G))+z2(l*b)),u=j2[e2+56>>2],U=z2(v+u),v=z2(U-u),G=z2(t*d),u=z2(J+z2(z2(h*g)+z2(v*G))),l=z2(s*u),K=z2(x-l),b=j2[A+600>>2],t=j2[A+604>>2],d=j2[A+608>>2],B=j2[i2+60>>2],q=z2(z2(z2(z2(w*b)+z2(Q*t))+z2(Y*d))+B),E=z2(q-B),B=j2[i2+52>>2],$=z2(B+z2(z2(z2(R*b)+z2(m*t))+z2(N*d))),Z=z2($-B),B=z2(z2(z2(V*b)+z2(X*t))+z2(H*d)),b=j2[i2+56>>2],A2=z2(B+b),d=z2(A2-b),b=z2(z2(s*E)+z2(z2(Z*g)+z2(d*G))),I=z2(s*b),l=z2(I-l),t=z2(K-z2(i*l)),B=v,v=z2(G*u),f2=z2(B-v),r2=z2(G*b),x=z2(r2-v),v=z2(f2-z2(i*x)),u=z2(g*u),J=z2(h-u),b=z2(g*b),u=z2(b-u),B=z2(J-z2(i*u)),I=z2(E-I),h=z2(I+z2(e*l)),l=z2(d-r2),E=z2(l+z2(e*x)),b=z2(Z-b),Z=z2(b+z2(e*u)),o=_<z2(1.1920928955078125e-7)|a<z2(1.1920928955078125e-7),a=z2(z2(e*K)+z2(i*I)),d=z2(z2(e*J)+z2(i*b)),u=z2(z2(e*f2)+z2(i*l)),(b=z2(z2(a*a)+z2(z2(d*d)+z2(u*u))))>z2(1.1920928955078125e-7)?(l=a,a=z2(z2(1)/z2(_2(b))),b=z2(l*a),u=z2(u*a),a=z2(d*a)):(b=j2[A+556>>2],d=j2[A+572>>2],l=j2[A+588>>2],a=z2(z2(z2(R*b)+z2(m*d))+z2(N*l)),u=z2(z2(z2(b*V)+z2(d*X))+z2(l*H)),b=z2(z2(z2(b*w)+z2(d*Q))+z2(l*Y))),n=T2[f+12>>2],j2[n+8>>2]=z2(Z*u)-z2(E*a),j2[n+4>>2]=z2(h*a)-z2(Z*b),j2[n>>2]=z2(E*b)-z2(h*u),n=T2[f+20>>2],j2[n+8>>2]=-z2(z2(B*u)-z2(v*a)),j2[n+4>>2]=-z2(z2(t*a)-z2(B*b)),j2[n>>2]=-z2(z2(v*b)-z2(t*u)),Q=z2(z2(s*a)-z2(g*b)),Y=z2(z2(G*b)-z2(s*u)),l=z2(z2(B*Q)-z2(v*Y)),d=z2(z2(g*u)-z2(G*a)),w=z2(z2(t*Y)-z2(B*d)),m=z2(z2(v*d)-z2(t*Q)),N=z2(z2(Z*Q)-z2(E*Y)),V=z2(z2(h*Y)-z2(Z*d)),R=z2(z2(E*d)-z2(h*Q)),o&&S2[A+716|0]&&(N=z2(e*N),V=z2(e*V),R=z2(e*R),l=z2(i*l),w=z2(i*w),m=z2(i*m)),n=(k=c<<2)+T2[f+12>>2]|0,j2[n+8>>2]=N,j2[n+4>>2]=V,j2[n>>2]=R,n=T2[f+20>>2],j2[n+k>>2]=-m,j2[n+((C=c+1|0)<<2)>>2]=-w,j2[n+((D=c+2|0)<<2)>>2]=-l,l=z2(z2(B*G)-z2(v*g)),B=z2(z2(t*g)-z2(B*s)),v=z2(z2(v*s)-z2(t*G)),w=z2(z2(Z*G)-z2(E*g)),t=z2(z2(h*g)-z2(Z*s)),h=z2(z2(E*s)-z2(h*G)),o&&(w=z2(e*w),h=z2(e*h),l=z2(i*l),B=z2(i*B),v=z2(i*v),t=z2(e*t)),n=(k=(o=c<<1)<<2)+T2[f+12>>2]|0,j2[n+8>>2]=w,j2[n+4>>2]=t,j2[n>>2]=h,n=T2[f+20>>2],j2[k+n>>2]=-v,j2[((F=1|o)<<2)+n>>2]=-B,j2[((W=o+2|0)<<2)+n>>2]=-l,v=j2[(8&S2[A+748|0]?A+756|0:f+4|0)>>2],S2[A+736|0]?(e=z2(-d),i=z2(-Q),w=z2(-Y),B=z2(-b),h=z2(-u),t=z2(-a),D=T2[f+28>>2]):(l=j2[f>>2],n=T2[f+8>>2],j2[n+8>>2]=b,j2[n+4>>2]=u,j2[n>>2]=a,k=(n=c<<2)+T2[f+8>>2]|0,j2[k+8>>2]=d,j2[k+4>>2]=Q,j2[k>>2]=Y,o=(k=o<<2)+T2[f+8>>2]|0,j2[o+8>>2]=s,j2[o+4>>2]=G,j2[o>>2]=g,o=T2[f+16>>2],B=z2(-b),j2[o+8>>2]=B,h=z2(-u),j2[o+4>>2]=h,t=z2(-a),j2[o>>2]=t,w=z2(-Y),j2[n+o>>2]=w,e=z2(-d),j2[o+(D<<2)>>2]=e,i=z2(-Q),j2[o+(C<<2)>>2]=i,j2[o+k>>2]=-g,j2[o+(W<<2)>>2]=-s,j2[o+(F<<2)>>2]=-G,D=T2[f+28>>2],l=z2(v*l),E=z2(y-$),Z=z2(U-A2),R=z2(L-q),j2[D>>2]=l*z2(z2(z2(E*a)+z2(Z*u))+z2(R*b)),j2[n+D>>2]=l*z2(z2(z2(E*Y)+z2(Z*Q))+z2(R*d)),j2[k+D>>2]=l*z2(z2(z2(E*g)+z2(Z*G))+z2(R*s)),n=T2[f+20>>2]),k=T2[f+12>>2],o=P2(c,12),j2[k+o>>2]=a,j2[(C=o+4|0)+k>>2]=u,j2[(F=o+8|0)+k>>2]=b,j2[(c<<=4)+k>>2]=Y,j2[(W=8|c)+k>>2]=d,j2[(M=4|c)+k>>2]=Q,j2[n+o>>2]=t,j2[n+F>>2]=B,j2[n+C>>2]=h,j2[n+c>>2]=w,j2[n+W>>2]=e,j2[n+M>>2]=i,e=z2(v*j2[f>>2]),i=z2(z2(p*P)-z2(j*T)),l=z2(i*a),a=z2(z2(j*O)-z2(z*P)),l=z2(l+z2(a*u)),u=z2(z2(z*T)-z2(p*O)),j2[o+D>>2]=e*z2(l+z2(u*b)),j2[c+D>>2]=e*z2(z2(z2(i*Y)+z2(a*Q))+z2(u*d)),W=S2[A+716|0])F=0!=S2[A+737|0],o=(u=z2(j2[A+708>>2]*j2[A+732>>2]))>z2(0)?1:2;else {if(!S2[A+737|0])break A;u=z2(0),F=1,o=0;}if(C=P2(T2[f+24>>2],5),j2[(c=C<<2)+k>>2]=g,j2[(M=c+4|0)+k>>2]=G,j2[(S=k)+(k=c+8|0)>>2]=s,j2[n+c>>2]=-g,j2[n+k>>2]=-s,j2[n+M>>2]=-G,i=j2[A+688>>2],a=j2[A+692>>2],(e=o2(z2(i-a)))<z2(-3.1415927410125732)?e=z2(e+z2(6.2831854820251465)):e>z2(3.1415927410125732)&&(e=z2(e+z2(-6.2831854820251465))),(i=o2(z2(i+a)))<z2(-3.1415927410125732)?i=z2(i+z2(6.2831854820251465)):i>z2(3.1415927410125732)&&(i=z2(i+z2(-6.2831854820251465))),T2[(c=(C<<2)+D|0)>>2]=0,v=2&(n=T2[A+748>>2])?j2[A+764>>2]:v,D=((k=e!=i)|!W)&F){4&n&&(j2[T2[f+32>>2]+(C<<2)>>2]=j2[A+752>>2]),w=j2[A+680>>2];f:if(i<=e)a=z2(i<e?1:0);else {b=j2[A+728>>2];r:{if((t=z2(w/z2(v*j2[f>>2])))<z2(0)){if(e<=b&&b<z2(e-t)){a=z2(z2(e-b)/t);break f;}if(a=z2(0),!(b<e))break r;break f;}if(a=z2(0),!(t>z2(0)))break f;if(b<=i&&b>z2(i-t)){a=z2(z2(i-b)/t);break f;}if(i<b)break f;}a=z2(1);}j2[c>>2]=z2(z2(a*w)*j2[A+732>>2])+j2[c>>2],j2[(D=C<<2)+T2[f+36>>2]>>2]=-j2[A+684>>2],j2[D+T2[f+40>>2]>>2]=j2[A+684>>2];}if(!W)break A;return j2[c>>2]=j2[c>>2]+z2(u*z2(v*j2[f>>2])),1&n&&(j2[T2[f+32>>2]+(C<<2)>>2]=j2[A+760>>2]),e=k?(n=T2[f+36>>2]+(C<<2)|0,1!=(0|o)?(T2[n>>2]=-8388609,z2(0)):(T2[n>>2]=0,z2(34028234663852886e22))):(T2[T2[f+36>>2]+(C<<2)>>2]=-8388609,z2(34028234663852886e22)),j2[T2[f+40>>2]+(C<<2)>>2]=e,(i=j2[A+704>>2])>z2(0)&&(e=z2(z2(z2(z2(j2[i2+388>>2]*g)+z2(j2[i2+392>>2]*G))+z2(j2[i2+396>>2]*s))-z2(z2(z2(g*j2[e2+388>>2])+z2(G*j2[e2+392>>2]))+z2(s*j2[e2+396>>2]))),1!=(0|o)?e>z2(0)&&(e=z2(e*z2(-i)))<j2[c>>2]&&(j2[c>>2]=e):e<z2(0)&&(e=z2(e*z2(-i)))>j2[c>>2]&&(j2[c>>2]=e)),void(j2[c>>2]=j2[A+700>>2]*j2[c>>2]);}if(e=j2[A+624>>2],E=j2[e2+36>>2],i=j2[A+640>>2],Z=j2[e2+40>>2],j=z2(z2(e*E)+z2(i*Z)),a=j2[A+656>>2],R=j2[e2+44>>2],P=z2(a*R),m=j2[e2+20>>2],N=j2[e2+24>>2],z=z2(z2(e*m)+z2(i*N)),V=j2[e2+28>>2],O=z2(a*V),X=j2[e2+12>>2],H=z2(X*a),p=j2[e2+4>>2],T=j2[e2+8>>2],_=z2(z2(p*e)+z2(T*i)),t=j2[A+560>>2],e=j2[i2+36>>2],Q=j2[A+576>>2],i=j2[i2+40>>2],L=z2(z2(t*e)+z2(Q*i)),b=j2[A+592>>2],a=j2[i2+44>>2],y=z2(b*a),Y=j2[A+556>>2],d=j2[A+572>>2],U=z2(z2(Y*e)+z2(d*i)),v=j2[A+588>>2],K=z2(v*a),l=j2[A+584>>2],q=z2(l*a),B=j2[A+552>>2],h=j2[A+568>>2],$=z2(z2(B*e)+z2(h*i)),u=j2[i2+20>>2],s=j2[i2+24>>2],A2=z2(z2(t*u)+z2(Q*s)),g=j2[i2+28>>2],I=z2(b*g),G=j2[i2+12>>2],f2=z2(G*b),b=j2[i2+4>>2],w=j2[i2+8>>2],r2=z2(z2(b*t)+z2(w*Q)),t=j2[A+664>>2],Q=j2[A+668>>2],x=z2(z2(E*t)+z2(Z*Q)),E=j2[A+672>>2],Z=z2(z2(x+z2(R*E))+j2[e2+60>>2]),m=z2(z2(z2(z2(m*t)+z2(N*Q))+z2(V*E))+j2[e2+56>>2]),Q=z2(j2[e2+52>>2]+z2(z2(z2(p*t)+z2(T*Q))+z2(X*E))),E=j2[A+600>>2],x=i,i=j2[A+604>>2],J=a,a=j2[A+608>>2],t=j2[i2+60>>2],N=z2(z2(z2(z2(e*E)+z2(x*i))+z2(J*a))+t),e=j2[i2+56>>2],V=z2(z2(z2(z2(u*E)+z2(s*i))+z2(g*a))+e),R=j2[i2+52>>2],i=z2(R+z2(z2(z2(b*E)+z2(w*i))+z2(G*a))),k=c<<1,(F=S2[A+736|0])||(o=T2[f+8>>2],T2[o>>2]=1065353216,T2[(n=4+(c<<2)|0)+o>>2]=1065353216,T2[(k=8+(c<<3)|0)+o>>2]=1065353216,o=T2[f+16>>2],T2[o>>2]=-1082130432,T2[n+o>>2]=-1082130432,T2[o+k>>2]=-1082130432,t=j2[i2+60>>2],e=j2[i2+56>>2],R=j2[i2+52>>2],k=c<<1),n=T2[f+12>>2],T2[n+12>>2]=0,a=z2(N-t),j2[n+4>>2]=a,T2[n>>2]=0,e=z2(V-e),j2[n+8>>2]=-e,j2[(o=(C=c<<2)+n|0)>>2]=-a,a=z2(i-R),j2[o+8>>2]=a,T2[o+12>>2]=0,T2[o+4>>2]=0,j2[(o=(D=k<<2)+n|0)>>2]=e,j2[o+4>>2]=-a,T2[o+8>>2]=0,T2[o+12>>2]=0,e=j2[e2+52>>2],a=j2[e2+60>>2],t=j2[e2+56>>2],k=T2[f+20>>2],T2[k+12>>2]=0,T2[k>>2]=0,t=z2(m-t),j2[k+8>>2]=t,a=z2(Z-a),j2[k+4>>2]=-a,j2[(o=k+C|0)>>2]=a,e=z2(Q-e),j2[o+8>>2]=-e,T2[o+12>>2]=0,T2[o+4>>2]=0,j2[(o=k+D|0)>>2]=-t,j2[o+4>>2]=e,T2[o+8>>2]=0,T2[o+12>>2]=0,W=T2[A+748>>2],t=j2[(8&W?A+756|0:f+4|0)>>2],e=z2(t*j2[f>>2]),D=T2[f+28>>2],F||(j2[D>>2]=e*z2(Q-i),j2[C+D>>2]=e*z2(m-V),j2[D+(c<<3)>>2]=e*z2(Z-N)),o=P2(c,12),i=z2(z2(z2(B*b)+z2(h*w))+z2(l*G)),j2[o+n>>2]=i,F=o+4|0,a=z2(z2(z2(B*u)+z2(h*s))+z2(l*g)),j2[F+n>>2]=a,M=o+8|0,Q=z2($+q),j2[M+n>>2]=Q,r=4|(C=c<<4),u=z2(z2(z2(Y*u)+z2(d*s))+z2(v*g)),j2[r+n>>2]=u,s=z2(z2(z2(b*Y)+z2(w*d))+z2(G*v)),j2[n+C>>2]=s,S=8|C,w=z2(U+K),j2[S+n>>2]=w,j2[k+F>>2]=-a,j2[o+k>>2]=-i,j2[k+M>>2]=-Q,j2[k+r>>2]=-u,j2[k+C>>2]=-s,j2[k+S>>2]=-w,v=Q,g=z2(r2+f2),Q=z2(z+O),G=z2(A2+I),Y=z2(_+H),d=z2(z2(g*Q)-z2(G*Y)),l=i,i=z2(j+P),b=z2(L+y),Q=z2(z2(G*i)-z2(b*Q)),i=z2(z2(b*Y)-z2(g*i)),j2[o+D>>2]=z2(z2(v*d)+z2(z2(l*Q)+z2(a*i)))*e,j2[C+D>>2]=z2(z2(w*d)+z2(z2(s*Q)+z2(u*i)))*e,M=S2[A+716|0])F=(u=z2(j2[A+708>>2]*j2[A+732>>2]))>z2(0)?1:2,o=0!=S2[A+737|0];else {if(!S2[A+737|0])break A;u=z2(F=0),o=1;}if(C=P2(c,5),j2[(c=C<<2)+n>>2]=g,j2[(r=c+4|0)+n>>2]=G,j2[(S=n)+(n=c+8|0)>>2]=b,j2[k+r>>2]=-G,j2[c+k>>2]=-g,j2[n+k>>2]=-b,i=j2[A+688>>2],a=j2[A+692>>2],(e=o2(z2(i-a)))<z2(-3.1415927410125732)?e=z2(e+z2(6.2831854820251465)):e>z2(3.1415927410125732)&&(e=z2(e+z2(-6.2831854820251465))),(i=o2(z2(i+a)))<z2(-3.1415927410125732)?i=z2(i+z2(6.2831854820251465)):i>z2(3.1415927410125732)&&(i=z2(i+z2(-6.2831854820251465))),T2[(c=D+(C<<2)|0)>>2]=0,t=2&W?j2[A+764>>2]:t,n=(k=o)&((o=e!=i)|!M)){4&W&&(j2[T2[f+32>>2]+(C<<2)>>2]=j2[A+752>>2]),Q=j2[A+680>>2];f:if(i<=e)a=z2(i<e?1:0);else {s=j2[A+728>>2];r:{if((w=z2(Q/z2(t*j2[f>>2])))<z2(0)){if(e<=s&&s<z2(e-w)){a=z2(z2(e-s)/w);break f;}if(a=z2(0),!(s<e))break r;break f;}if(a=z2(0),!(w>z2(0)))break f;if(s<=i&&s>z2(i-w)){a=z2(z2(i-s)/w);break f;}if(i<s)break f;}a=z2(1);}j2[c>>2]=z2(z2(a*Q)*j2[A+732>>2])+j2[c>>2],j2[(n=C<<2)+T2[f+36>>2]>>2]=-j2[A+684>>2],j2[n+T2[f+40>>2]>>2]=j2[A+684>>2];}M&&(j2[c>>2]=j2[c>>2]+z2(u*z2(t*j2[f>>2])),1&W&&(j2[T2[f+32>>2]+(C<<2)>>2]=j2[A+760>>2]),e=o?(o=T2[f+36>>2]+(C<<2)|0,1!=(0|F)?(T2[o>>2]=-8388609,z2(0)):(T2[o>>2]=0,z2(34028234663852886e22))):(T2[T2[f+36>>2]+(C<<2)>>2]=-8388609,z2(34028234663852886e22)),j2[T2[f+40>>2]+(C<<2)>>2]=e,(i=j2[A+704>>2])>z2(0)&&(e=z2(z2(z2(z2(g*j2[i2+388>>2])+z2(G*j2[i2+392>>2]))+z2(b*j2[i2+396>>2]))-z2(z2(z2(g*j2[e2+388>>2])+z2(G*j2[e2+392>>2]))+z2(b*j2[e2+396>>2]))),1!=(0|F)?e>z2(0)&&(e=z2(e*z2(-i)))<j2[c>>2]&&(j2[c>>2]=e):e<z2(0)&&(e=z2(e*z2(-i)))>j2[c>>2]&&(j2[c>>2]=e)),j2[c>>2]=j2[A+700>>2]*j2[c>>2]);}},function(A,f,r,e){A|=0,f|=0,r=z2(r);A:{f:switch((e|=0)+1|0){case 0:case 6:break f;default:break A;}f:switch(f-1|0){case 1:return j2[A+764>>2]=r,void(T2[A+748>>2]=2|T2[A+748>>2]);case 3:return j2[A+760>>2]=r,void(T2[A+748>>2]=1|T2[A+748>>2]);case 2:return j2[A+752>>2]=r,void(T2[A+748>>2]=4|T2[A+748>>2]);case 0:break f;default:break A;}j2[A+756>>2]=r,T2[A+748>>2]=8|T2[A+748>>2];}},function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0);A:{f:switch(r+1|0){case 0:case 6:break f;default:break A;}f:switch(f-1|0){case 1:return z2(j2[A+764>>2]);case 3:return z2(j2[A+760>>2]);case 2:return z2(j2[A+752>>2]);case 0:break f;default:break A;}e=j2[A+756>>2];}return z2(e);},function(A){return 220;},function(A,f,r){A|=0,f|=0,r|=0;var e,i,a=z2(0);return S4(A,f,r),j2[f+52>>2]=j2[A+552>>2],j2[f+56>>2]=j2[A+556>>2],j2[f+60>>2]=j2[A+560>>2],j2[f+64>>2]=j2[A+564>>2],j2[f+68>>2]=j2[A+568>>2],j2[f+72>>2]=j2[A+572>>2],j2[f+76>>2]=j2[A+576>>2],j2[f+80>>2]=j2[A+580>>2],j2[f+84>>2]=j2[A+584>>2],j2[f+88>>2]=j2[A+588>>2],j2[f+92>>2]=j2[A+592>>2],j2[f+96>>2]=j2[A+596>>2],j2[f+100>>2]=j2[A+600>>2],j2[f+104>>2]=j2[A+604>>2],j2[f+108>>2]=j2[A+608>>2],j2[f+112>>2]=j2[A+612>>2],j2[f+116>>2]=j2[A+616>>2],j2[f+120>>2]=j2[A+620>>2],j2[f+124>>2]=j2[A+624>>2],j2[f+128>>2]=j2[A+628>>2],j2[f+132>>2]=j2[A+632>>2],j2[f+136>>2]=j2[A+636>>2],j2[f+140>>2]=j2[A+640>>2],j2[f+144>>2]=j2[A+644>>2],j2[f+148>>2]=j2[A+648>>2],j2[f+152>>2]=j2[A+652>>2],j2[f+156>>2]=j2[A+656>>2],j2[f+160>>2]=j2[A+660>>2],j2[f+164>>2]=j2[A+664>>2],j2[f+168>>2]=j2[A+668>>2],j2[f+172>>2]=j2[A+672>>2],j2[f+176>>2]=j2[A+676>>2],T2[f+184>>2]=S2[A+736|0],r=T2[A+684>>2],T2[f+192>>2]=T2[A+680>>2],T2[f+196>>2]=r,T2[f+188>>2]=S2[A+737|0],T2[f+180>>2]=S2[A+740|0],e=j2[A+688>>2],i=j2[A+692>>2],(a=o2(z2(e-i)))<z2(-3.1415927410125732)?a=z2(a+z2(6.2831854820251465)):a>z2(3.1415927410125732)&&(a=z2(a+z2(-6.2831854820251465))),j2[f+200>>2]=a,(a=o2(z2(e+i)))<z2(-3.1415927410125732)?a=z2(a+z2(6.2831854820251465)):a>z2(3.1415927410125732)&&(a=z2(a+z2(-6.2831854820251465))),j2[f+204>>2]=a,j2[f+208>>2]=j2[A+696>>2],r=T2[(A=A+700|0)+4>>2],T2[f+212>>2]=T2[A>>2],T2[f+216>>2]=r,20812;},function(A){return T2[(A|=0)+748>>2];},L4,function(A){A|=0;var f,r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w,G,C,E,D,h,Z=0,Y=(0),R=0;for(L2=Z=L2-144|0,T2[A+36>>2]=0,T2[(f=136+Z|0)>>2]=0,T2[4+f>>2]=0,T2[128+Z>>2]=0,Y=A+48|(T2[132+Z>>2]=0);T2[(t=(128+Z|0)+R|0)>>2]=1065353216,T2[92+Z>>2]=0,T2[108+Z>>2]=0,f=T2[A+28>>2],n=j2[f+4>>2],j2[80+Z>>2]=n,o=j2[f+20>>2],j2[84+Z>>2]=o,r=j2[f+36>>2],j2[88+Z>>2]=r,c=j2[f+8>>2],j2[96+Z>>2]=c,u=j2[f+24>>2],j2[100+Z>>2]=u,e=j2[f+40>>2],j2[104+Z>>2]=e,k=j2[f+12>>2],j2[112+Z>>2]=k,l=j2[f+28>>2],j2[116+Z>>2]=l,T2[124+Z>>2]=0,a=j2[f+44>>2],j2[120+Z>>2]=a,T2[44+Z>>2]=0,T2[60+Z>>2]=0,i=T2[A+32>>2],s=j2[i+4>>2],j2[32+Z>>2]=s,v=j2[i+20>>2],j2[36+Z>>2]=v,d=j2[i+36>>2],j2[40+Z>>2]=d,B=j2[i+8>>2],j2[48+Z>>2]=B,Q=j2[i+24>>2],j2[52+Z>>2]=Q,g=j2[i+40>>2],j2[56+Z>>2]=g,w=j2[i+12>>2],j2[64+Z>>2]=w,G=j2[i+28>>2],j2[68+Z>>2]=G,T2[76+Z>>2]=0,C=j2[i+44>>2],j2[72+Z>>2]=C,T2[28+Z>>2]=0,b=r,r=j2[A+300>>2],D=e,e=j2[A+304>>2],h=a,a=j2[A+308>>2],E=j2[f+60>>2],j2[24+Z>>2]=z2(z2(z2(z2(b*r)+z2(D*e))+z2(h*a))+E)-E,b=z2(z2(z2(r*o)+z2(e*u))+z2(a*l)),o=j2[f+56>>2],j2[20+Z>>2]=z2(b+o)-o,e=z2(z2(z2(r*n)+z2(e*c))+z2(a*k)),r=j2[f+52>>2],j2[16+Z>>2]=z2(e+r)-r,T2[12+Z>>2]=0,r=j2[A+316>>2],e=j2[A+320>>2],a=j2[A+324>>2],n=j2[i+60>>2],j2[8+Z>>2]=z2(z2(z2(z2(d*r)+z2(g*e))+z2(C*a))+n)-n,n=j2[i+56>>2],j2[4+Z>>2]=z2(z2(z2(z2(r*v)+z2(e*Q))+z2(a*G))+n)-n,e=z2(z2(z2(r*s)+z2(e*B))+z2(a*w)),r=j2[i+52>>2],j2[Z>>2]=z2(e+r)-r,j4(Y,80+Z|0,32+Z|0,16+Z|0,Z,128+Z|0,f+456|0,j2[f+404>>2],i+456|0,j2[i+404>>2]),Y=Y+84|(T2[t>>2]=0),12!=(0|(R=R+4|0)););L2=144+Z|0;},function(A,f){A=S2[(A|=0)+344|0]?0:3,T2[(f|=0)+4>>2]=A,T2[f>>2]=A;},function(A,f){A|=0,f|=0;var r,e,i,a,n,o,b,t,c,u,k,l,s,v,d,B,Q,g,w=0,G=0,C=(z2(0)),E=(0),w=(T2[f+8>>2]);T2[w>>2]=1065353216,u=T2[f+24>>2],T2[(a=(E=u<<2)+4|0)+w>>2]=1065353216,T2[w+(g=8+(k=u<<3)|0)>>2]=1065353216,G=T2[A+28>>2],b=j2[G+8>>2],n=j2[G+12>>2],t=j2[G+20>>2],o=j2[G+24>>2],l=j2[G+28>>2],c=j2[G+36>>2],C=j2[A+304>>2],s=j2[G+40>>2],e=j2[A+308>>2],v=j2[G+44>>2],d=j2[G+4>>2],i=j2[A+300>>2],w=T2[f+12>>2],T2[w>>2]=0,T2[w+12>>2]=0,c=z2(z2(z2(i*c)+z2(C*s))+z2(e*v)),j2[w+4>>2]=c,t=z2(z2(z2(i*t)+z2(C*o))+z2(e*l)),j2[w+8>>2]=-t,j2[(r=w+E|0)>>2]=-c,b=z2(z2(z2(d*i)+z2(b*C))+z2(n*e)),j2[8+r>>2]=b,T2[12+r>>2]=0,T2[4+r>>2]=0,j2[(r=w+k|0)>>2]=t,j2[4+r>>2]=-b,w=T2[A+32>>2],T2[8+r>>2]=0,T2[12+r>>2]=0,r=T2[f+16>>2],T2[r>>2]=-1082130432,T2[r+a>>2]=-1082130432,T2[r+g>>2]=-1082130432,l=j2[w+8>>2],s=j2[w+12>>2],o=j2[w+36>>2],v=j2[w+40>>2],d=j2[w+44>>2],n=j2[w+20>>2],C=j2[A+320>>2],B=j2[w+24>>2],e=j2[A+324>>2],Q=j2[w+28>>2],g=j2[w+4>>2],i=j2[A+316>>2],r=T2[f+20>>2],T2[r>>2]=0,T2[r+12>>2]=0,n=z2(z2(z2(i*n)+z2(C*B))+z2(e*Q)),j2[r+8>>2]=n,o=z2(z2(z2(i*o)+z2(C*v))+z2(e*d)),j2[r+4>>2]=-o,j2[(a=r+E|0)>>2]=o,C=z2(z2(z2(g*i)+z2(l*C))+z2(s*e)),j2[8+a>>2]=-C,T2[12+a>>2]=0,T2[4+a>>2]=0,j2[4+(r=r+k|0)>>2]=C,j2[r>>2]=-n,T2[8+r>>2]=0,T2[12+r>>2]=0,r=T2[f+28>>2],a=T2[A+332>>2],e=z2(j2[(1&a?A+336|0:f+4|0)>>2]*j2[f>>2]),j2[r>>2]=e*z2(z2(z2(C+j2[w+52>>2])-b)-j2[G+52>>2]),j2[r+E>>2]=e*z2(z2(z2(n+j2[w+56>>2])-t)-j2[G+56>>2]),j2[r+k>>2]=e*z2(z2(z2(o+j2[w+60>>2])-c)-j2[G+60>>2]),w=u<<1,2&a&&(G=T2[f+32>>2],j2[G>>2]=j2[A+340>>2],j2[G+E>>2]=j2[A+340>>2],j2[G+(w<<2)>>2]=j2[A+340>>2]),(e=j2[A+356>>2])>z2(0)&&(G=T2[f+36>>2],i=z2(-e),j2[G>>2]=i,r=T2[f+40>>2],j2[r>>2]=e,(C=j2[A+356>>2])>z2(0)&&(j2[(E=u<<2)+G>>2]=i,j2[r+E>>2]=e,C=j2[A+356>>2]),C>z2(0)&&(j2[(w<<=2)+G>>2]=i,j2[w+r>>2]=e)),j2[f+48>>2]=j2[A+352>>2];},function(A,f,r,e){A|=0,f|=0,r=z2(r);A:if(-1==(0|(e|=0))){f:switch(f-1|0){case 0:case 1:return j2[A+336>>2]=r,void(T2[A+332>>2]=1|T2[A+332>>2]);case 2:case 3:break f;default:break A;}j2[A+340>>2]=r,T2[A+332>>2]=2|T2[A+332>>2];}},function(A,f,r){A|=0,f|=0,r|=0;var e=z2(0),e=z2(34028234663852886e22);A:if(-1==(0|r)){f:switch(f-1|0){case 0:case 1:return z2(j2[A+336>>2]);case 2:case 3:break f;default:break A;}e=j2[A+340>>2];}return z2(e);},w0,function(A,f,r){return S4(A|=0,f|=0,r|=0),j2[f+52>>2]=j2[A+300>>2],j2[f+56>>2]=j2[A+304>>2],j2[f+60>>2]=j2[A+308>>2],j2[f+64>>2]=j2[A+312>>2],j2[f+68>>2]=j2[A+316>>2],j2[f+72>>2]=j2[A+320>>2],j2[f+76>>2]=j2[A+324>>2],j2[f+80>>2]=j2[A+328>>2],20928;},function(A){return T2[(A|=0)+332>>2];},_,I,function(A,f){var r,e,i=T2[(A|=0)+12>>2];T2[(f|=0)>>2]=T2[A+8>>2],T2[f+4>>2]=i,e=T2[4+(r=A+16|0)>>2],T2[(i=f+8|0)>>2]=T2[r>>2],T2[4+i>>2]=e,e=T2[4+(r=A+32|0)>>2],T2[(i=f+24|0)>>2]=T2[r>>2],T2[4+i>>2]=e,r=T2[4+(i=A+24|0)>>2],T2[f+16>>2]=T2[i>>2],T2[f+20>>2]=r,r=T2[4+(i=A+40|0)>>2],T2[f+32>>2]=T2[i>>2],T2[f+36>>2]=r,e=T2[4+(r=A+48|0)>>2],T2[(i=f+40|0)>>2]=T2[r>>2],T2[4+i>>2]=e,e=T2[4+(r=A- -64|0)>>2],T2[(i=f+56|0)>>2]=T2[r>>2],T2[4+i>>2]=e,i=T2[(A=A+56|0)+4>>2],T2[f+48>>2]=T2[A>>2],T2[f+52>>2]=i;},function(A,f){var r,e,i=T2[(f|=0)+4>>2];T2[(A|=0)+8>>2]=T2[f>>2],T2[A+12>>2]=i,e=T2[4+(r=f+8|0)>>2],T2[(i=A+16|0)>>2]=T2[r>>2],T2[4+i>>2]=e,e=T2[4+(r=f+24|0)>>2],T2[(i=A+32|0)>>2]=T2[r>>2],T2[4+i>>2]=e,r=T2[f+20>>2],T2[(i=A+24|0)>>2]=T2[f+16>>2],T2[4+i>>2]=r,r=T2[f+36>>2],T2[(i=A+40|0)>>2]=T2[f+32>>2],T2[4+i>>2]=r,e=T2[4+(r=f+40|0)>>2],T2[(i=A+48|0)>>2]=T2[r>>2],T2[4+i>>2]=e,e=T2[4+(r=f+56|0)>>2],T2[(i=A- -64|0)>>2]=T2[r>>2],T2[4+i>>2]=e,r=T2[f+52>>2],T2[(i=A+56|0)>>2]=T2[f+48>>2],T2[4+i>>2]=r,a(T2[A+4>>2]);}];function o1(){return e.byteLength/65536|0;}function b1(A){var f=0|o1(),A=f+(A|=0)|0;return f<A&&A<65536&&(A=new ArrayBuffer(P2(A,65536)),new Int8Array(A).set(p2),p2=new Int8Array(A),$=new Int16Array(A),T2=new Int32Array(A),S2=new Uint8Array(A),A2=new Uint16Array(A),T=new Uint32Array(A),j2=new Float32Array(A),X=new Float64Array(A),e=A,r.buffer=e,t1=S2),f;}return {RayCallback_hasHit:function(A){return 0!=T2[(A|=0)+8>>2]|0;},ccClosestRayCallback_static:function(){return S2[22e3]||(T2[5502]=1065353216,T2[5503]=0,p2[22092]=1,T2[5501]=7304,T2[5504]=-1,T2[5505]=0,T2[5522]=0,t(22),p2[22e3]=1),22004;},ccClosestRayCallback_reset:function(A,f,r,e,i){r|=0,e|=0,i|=0;var a,n=T2[(f|=0)+4>>2];T2[(A|=0)+20>>2]=T2[f>>2],T2[A+24>>2]=n,a=T2[(f=f+8|0)+4>>2],T2[(n=A+28|0)>>2]=T2[f>>2],T2[4+n>>2]=a,f=T2[r+4>>2],T2[A+36>>2]=T2[r>>2],T2[A+40>>2]=f,n=T2[(r=r+8|0)+4>>2],T2[(f=A+44|0)>>2]=T2[r>>2],T2[f+4>>2]=n,p2[A+88|0]=i,T2[A+12>>2]=e,T2[A+4>>2]=1065353216,T2[A+8>>2]=0;},ccClosestRayCallback_getHitNormalWorld:function(A){return (A|=0)+52|0;},ccClosestRayCallback_getHitPointWorld:function(A){return (A|=0)+68|0;},ccClosestRayCallback_getCollisionShapePtr:function(A){return T2[(A|=0)+84>>2];},ccAllRayCallback_static:function(){return S2[22096]||(p2[22136]=1,T2[5526]=1065353216,T2[5527]=0,p2[22188]=1,T2[5531]=0,T2[5532]=0,p2[22208]=1,T2[5544]=0,T2[5545]=0,p2[22228]=1,T2[5549]=0,T2[5550]=0,T2[5554]=0,T2[5555]=0,p2[22248]=1,T2[5525]=7508,T2[5529]=0,T2[5533]=0,T2[5546]=0,T2[5551]=0,T2[5556]=0,T2[5561]=0,p2[22252]=1,T2[5559]=0,T2[5560]=0,T2[5528]=-1,t(23),p2[22096]=1),22100;},ccAllRayCallback_reset:function(A,f,r,e,i){r|=0,e|=0,i|=0;var a,n=0,o=0;if(L2=o=L2-16|0,n=T2[(f|=0)+4>>2],T2[(A|=0)+40>>2]=T2[f>>2],T2[A+44>>2]=n,a=T2[(f=f+8|0)+4>>2],T2[(n=A+48|0)>>2]=T2[f>>2],T2[n+4>>2]=a,f=T2[r+4>>2],T2[A+56>>2]=T2[r>>2],T2[A+60>>2]=f,n=T2[(r=r+8|0)+4>>2],T2[(f=A- -64|0)>>2]=T2[r>>2],T2[f+4>>2]=n,p2[A+152|0]=i,T2[A+12>>2]=e,T2[A+4>>2]=1065353216,((T2[A+8>>2]=0)|(r=T2[A+136>>2]))<=-1&&(f=T2[A+144>>2],T2[A+140>>2]<=-1&&(f&&S2[A+148|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),p2[A+148|0]=1,T2[A+140>>2]=0,f=T2[A+144>>2]=0),d2((e=f)+(f=r<<2)|0,0,0-f|0)),((T2[A+136>>2]=0)|(r=T2[A+116>>2]))<=-1&&(f=T2[A+124>>2],T2[A+120>>2]<=-1&&(f&&S2[A+128|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),p2[A+128|0]=1,T2[A+120>>2]=0,f=T2[A+124>>2]=0),d2((e=f)+(f=r<<2)|0,0,0-f|0)),((T2[A+116>>2]=0)|(r=T2[A+24>>2]))<=-1)for(T2[A+28>>2]<=-1&&((f=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+28>>2]=0,T2[A+32>>2]=0,p2[A+36|0]=1),f=r<<2;f=f+4|(T2[T2[A+32>>2]+f>>2]=0),(e=r)>>>0<=(r=r+1|0)>>>0;);if(((T2[A+24>>2]=0)|(r=T2[A+96>>2]))<=-1)for(T2[A+100>>2]<=-1&&((f=T2[A+104>>2])&&S2[A+108|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+100>>2]=0,T2[A+104>>2]=0,p2[A+108|0]=1),f=r<<4;n=T2[4+o>>2],e=T2[A+104>>2]+f|0,T2[e>>2]=T2[o>>2],T2[e+4>>2]=n,n=T2[(i=8+o|0)+4>>2],T2[(e=e+8|0)>>2]=T2[i>>2],T2[e+4>>2]=n,f=f+16|0,(e=r)>>>0<=(r=r+1|0)>>>0;);if(((T2[A+96>>2]=0)|(r=T2[A+76>>2]))<=-1)for(T2[A+80>>2]<=-1&&((f=T2[A+84>>2])&&S2[A+88|0]&&(T2[5499]=T2[5499]+1,q2(T2[f-4>>2])),T2[A+80>>2]=0,T2[A+84>>2]=0,p2[A+88|0]=1),f=r<<4;n=T2[4+o>>2],e=T2[A+84>>2]+f|0,T2[e>>2]=T2[o>>2],T2[e+4>>2]=n,n=T2[(i=8+o|0)+4>>2],T2[(e=e+8|0)>>2]=T2[i>>2],T2[e+4>>2]=n,f=f+16|0,(e=r)>>>0<=(r=r+1|0)>>>0;);T2[A+76>>2]=0,L2=16+o|0;},ccAllRayCallback_getHitPointWorld:U,ccAllRayCallback_getHitNormalWorld:function(A){return (A|=0)+72|0;},ccAllRayCallback_getCollisionShapePtrs:function(A){return (A|=0)+132|0;},ManifoldPoint_get_m_positionWorldOnA:H,ManifoldPoint_get_m_positionWorldOnB:function(A){return (A|=0)+32|0;},ManifoldPoint_get_m_normalWorldOnB:function(A){return (A|=0)- -64|0;},ManifoldPoint_get_m_localPointA:_,ManifoldPoint_get_m_localPointB:function(A){return (A|=0)+16|0;},ManifoldPoint_getDistance:function(A){A|=0,z2(0);A=j2[A+80>>2];return z2(O2(A))<z2(2147483648)?0|~~A:-2147483648;},ManifoldPoint_getShape0:function(A){return T2[(A|=0)+200>>2];},ManifoldPoint_getShape1:L,ManifoldPoint_get_m_index0:function(A){return T2[(A|=0)+108>>2];},ManifoldPoint_get_m_index1:function(A){return T2[(A|=0)+112>>2];},PersistentManifold_getBody0:function(A){return T2[(A|=0)+836>>2];},PersistentManifold_getBody1:function(A){return T2[(A|=0)+840>>2];},PersistentManifold_getNumContacts:function(A){return T2[(A|=0)+844>>2];},PersistentManifold_getContactPoint:function(A,f){return A|=0,4+(P2(f|=0,208)+A|0)|0;},CollisionObject_new:function(){var A=0,f=0;return T2[5498]=T2[5498]+1,(f=K2(343))&&(T2[(A=f+19&-16)-4>>2]=f),T2[A+132>>2]=0,T2[A+136>>2]=0,T2[A>>2]=7664,T2[A+188>>2]=0,T2[A+192>>2]=0,T2[A+180>>2]=0,T2[A+184>>2]=1566444395,T2[A+172>>2]=1065353216,T2[A+176>>2]=0,T2[A+164>>2]=1065353216,T2[A+168>>2]=1065353216,p2[A+300|0]=1,T2[A+276>>2]=0,T2[A+280>>2]=0,T2[A+268>>2]=1065353216,T2[A+272>>2]=0,T2[A+260>>2]=-1,T2[A+264>>2]=-1,T2[A+252>>2]=1,T2[A+256>>2]=0,T2[A+244>>2]=1036831949,T2[A+248>>2]=1176256512,T2[A+236>>2]=0,T2[A+240>>2]=0,T2[A+228>>2]=1056964608,T2[A+232>>2]=0,T2[A+220>>2]=1,T2[A+224>>2]=0,T2[A+212>>2]=-1,T2[A+216>>2]=-1,T2[A+204>>2]=1,T2[A+208>>2]=-1,T2[(f=A+140|0)>>2]=0,T2[f+4>>2]=0,T2[(f=A+148|0)>>2]=0,T2[f+4>>2]=0,T2[(f=A+156|0)>>2]=0,T2[f+4>>2]=0,T2[(f=A+196|0)>>2]=0,T2[f+4>>2]=0,T2[A+304>>2]=0,T2[A+296>>2]=0,T2[A+288>>2]=0,T2[A+292>>2]=0,T2[A+4>>2]=1065353216,T2[A+8>>2]=0,T2[A+12>>2]=0,T2[(f=A+16|0)>>2]=0,T2[f+4>>2]=0,T2[A+24>>2]=1065353216,T2[A+28>>2]=0,T2[A+32>>2]=0,T2[(f=A+36|0)>>2]=0,T2[f+4>>2]=0,T2[A+44>>2]=1065353216,T2[A+48>>2]=0,T2[A+52>>2]=0,T2[(f=A+56|0)>>2]=0,T2[f+4>>2]=0,T2[(f=A- -64|0)>>2]=0,T2[f+4>>2]=1065353216,T2[A+72>>2]=0,T2[A+76>>2]=0,T2[(f=A+80|0)>>2]=0,T2[f+4>>2]=0,T2[A+88>>2]=1065353216,T2[A+92>>2]=0,T2[A+96>>2]=0,T2[(f=A+100|0)>>2]=0,T2[f+4>>2]=0,T2[A+112>>2]=0,T2[A+116>>2]=0,T2[A+108>>2]=1065353216,T2[(f=A+120|0)>>2]=0,T2[f+4>>2]=0,(T2[A+128>>2]=0)|A;},CollisionObject_del:q,CollisionObject_isStaticObject:function(A){return 1&T2[(A|=0)+204>>2];},CollisionObject_isKinematicObject:function(A){return (2&S2[(A|=0)+204|0])>>>1|0;},CollisionObject_isStaticOrKinematicObject:function(A){return 0!=(3&S2[(A|=0)+204|0])|0;},CollisionObject_forceActivationState:function(A,f){T2[(A|=0)+220>>2]=f|=0;},CollisionObject_activate:function(A,f){f|=0,3&S2[(A|=0)+204|0]&&!f||(4!=(-2&T2[A+220>>2])&&(T2[A+220>>2]=1),T2[A+224>>2]=0);},CollisionObject_isActive:function(A){return 2!=(0|(A=T2[(A|=0)+220>>2]))&5!=(0|A);},CollisionObject_setMaterial:function(A,f,r,e,i){A|=0,f=z2(f),r=z2(r),e=z2(e),i=z2(i),j2[A+232>>2]=f,j2[A+236>>2]=e,j2[A+228>>2]=r,j2[A+240>>2]=i,T2[A+304>>2]=T2[A+304>>2]+4;},CollisionObject_getCollisionFlags:L,CollisionObject_setCollisionFlags:function(A,f){T2[(A|=0)+204>>2]=f|=0;},CollisionObject_getWorldTransform:f2,CollisionObject_setCollisionShape:r2,CollisionObject_getCollisionShape:function(A){return T2[(A|=0)+192>>2];},CollisionObject_getCcdMotionThreshold:function(A){return z2(j2[(A|=0)+276>>2]);},CollisionObject_setCcdMotionThreshold:function(A,f){A|=0,f=z2(f),j2[A+276>>2]=f;},CollisionObject_getCcdSweptSphereRadius:function(A){return z2(j2[(A|=0)+272>>2]);},CollisionObject_setCcdSweptSphereRadius:function(A,f){A|=0,f=z2(f),j2[A+272>>2]=f;},CollisionObject_getUserIndex:function(A){return T2[(A|=0)+264>>2];},CollisionObject_setUserIndex:function(A,f){T2[(A|=0)+264>>2]=f|=0;},CollisionObject_getActivationState:function(A){return T2[(A|=0)+220>>2];},CollisionObject_setIgnoreCollisionCheck:function(A,f,r){f|=0;var e=0,i=0,a=0,n=0,e=T2[(A|=0)+288>>2];A:if(r|=0){if(T2[A+292>>2]==(0|e)&&!((0|(a=e?e<<1:1))<=(0|e))){if(a&&(T2[5498]=T2[5498]+1,(r=K2(19+(a<<2)|0))&&(T2[(n=r+19&-16)-4>>2]=r)),1<=(0|e))for(r=0,i=e;T2[r+n>>2]=T2[T2[A+296>>2]+r>>2],r=r+4|0,i=i-1|0;);(r=T2[A+296>>2])&&S2[A+300|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2]),e=T2[A+288>>2]),T2[A+296>>2]=n,T2[A+292>>2]=a,p2[A+300|0]=1;}T2[A+288>>2]=i=e+1|0,T2[T2[A+296>>2]+(e<<2)>>2]=f;}else if((0|e)<1)i=e;else {r=n=T2[A+296>>2];f:{for(;;){if(T2[r>>2]==(0|f))break f;if(r=r+4|0,(0|(i=i+1|0))==(0|e))break;}i=e;break A;}(0|e)<=(0|i)?i=e:(T2[(a=r)>>2]=T2[(r=(i=e-1|0)<<2)+n>>2],T2[A+288>>2]=i,T2[r+T2[A+296>>2]>>2]=f);}T2[A+280>>2]=0<(0|i);},CollisionShape_del:q,CollisionShape_setMaterial:function(A,f){T2[(A|=0)+16>>2]=f|=0;},CollisionShape_getMaterial:Z0,CollisionShape_setUserPointer:function(A,f){T2[(A|=0)+8>>2]=f|=0;},CollisionShape_getUserPointer:Y0,CollisionShape_getLocalScaling:function(A){return 0|n1[T2[T2[(A|=0)>>2]+28>>2]](A);},CollisionShape_setLocalScaling:function(A,f){n1[T2[T2[(A|=0)>>2]+24>>2]](A,f|=0);},CollisionShape_calculateLocalInertia:function(A,f,r){A|=0,f=z2(f),n1[T2[T2[A>>2]+32>>2]](A,f,r|=0);},CollisionShape_isCompound:function(A){return 31==T2[(A|=0)+4>>2]|0;},CollisionShape_getAabb:R0,CollisionShape_getLocalBoundingSphere:function(A){A|=0;var f,r=0;return T2[(f=44+(L2=r=L2-96|0)|0)>>2]=0,T2[4+f>>2]=0,T2[(f=56+r|0)>>2]=0,T2[4+f>>2]=0,T2[52+r>>2]=1065353216,T2[(f=r+64|0)>>2]=0,T2[4+f>>2]=0,T2[(f=76+r|0)>>2]=0,T2[4+f>>2]=0,T2[72+r>>2]=1065353216,T2[(f=84+r|0)>>2]=0,T2[4+f>>2]=0,T2[92+r>>2]=0,T2[36+r>>2]=0,T2[40+r>>2]=0,T2[32+r>>2]=1065353216,n1[T2[T2[A>>2]+8>>2]](A,32+r|0,16+r|0,r),L2=96+r|0,f=z2(j2[r>>2]-j2[16+r>>2]),A=z2(f*f),f=z2(j2[4+r>>2]-j2[20+r>>2]),A=z2(A+z2(f*f)),f=z2(j2[8+r>>2]-j2[24+r>>2]),z2(z2(z2(_2(z2(A+z2(f*f))))*z2(.5)));},CollisionShape_setMargin:function(A,f){A|=0,f=z2(f),n1[T2[T2[A>>2]+44>>2]](A,f);},BoxShape_new:function(A){A|=0;var f,r,e,i=0,a=z2(0),n=z2(0),o=0;return T2[5498]=T2[5498]+1,(o=K2(83))&&(T2[(i=o+19&-16)-4>>2]=o),T2[i+52>>2]=1025758986,T2[i+28>>2]=1065353216,T2[i+32>>2]=0,T2[i+20>>2]=1065353216,T2[i+24>>2]=1065353216,T2[i+12>>2]=0,T2[i+16>>2]=0,T2[i+4>>2]=0,T2[i+8>>2]=0,n=j2[A+8>>2],a=j2[A+4>>2],f=j2[A>>2],T2[i+48>>2]=0,f=z2(f+z2(-.03999999910593033)),j2[i+36>>2]=f,r=z2(a+z2(-.03999999910593033)),j2[i+40>>2]=r,e=z2(n+z2(-.03999999910593033)),j2[i+44>>2]=e,T2[i+60>>2]=0,T2[i>>2]=8140,n=j2[A>>2],a=j2[A+4>>2],(a=z2(j2[((j2[A+8>>2]>((o=n<a)?n:a)?!o:2)<<2)+A>>2]*z2(.10000000149011612)))<z2(.03999999910593033)&&(n=j2[i+52>>2],j2[i+52>>2]=a,a=j2[i+52>>2],T2[i+48>>2]=0,j2[i+44>>2]=z2(n+e)-a,j2[i+40>>2]=z2(n+r)-a,j2[i+36>>2]=z2(n+f)-a),0|i;},BoxShape_setUnscaledHalfExtents:function(A,f){A|=0,f|=0;var r=z2(0),r=(z2(n1[T2[T2[A>>2]+48>>2]](A))),e=z2(n1[T2[T2[A>>2]+48>>2]](A)),i=z2(n1[T2[T2[A>>2]+48>>2]](A)),a=j2[f>>2],n=j2[f+4>>2],o=j2[f+8>>2];T2[A+48>>2]=0,j2[A+44>>2]=z2(o*j2[A+28>>2])-i,j2[A+40>>2]=z2(n*j2[A+24>>2])-e,j2[A+36>>2]=z2(a*j2[A+20>>2])-r,r=j2[f>>2],e=j2[f+4>>2],r=z2(j2[((j2[f+8>>2]>((a=r<e)?r:e)?!a:2)<<2)+f>>2]*z2(.10000000149011612)),z2(n1[T2[T2[A>>2]+48>>2]](A))>r&&n1[T2[T2[A>>2]+44>>2]](A,r);},SphereShape_new:function(A){A=z2(A);var f=0,r=0;return T2[5498]=T2[5498]+1,(r=K2(79))&&(T2[(f=r+19&-16)-4>>2]=r),T2[f+32>>2]=0,T2[f+36>>2]=0,T2[f+12>>2]=0,T2[f+16>>2]=0,T2[f+4>>2]=8,T2[f+8>>2]=0,T2[f+28>>2]=1065353216,T2[f+20>>2]=1065353216,T2[f+24>>2]=1065353216,T2[f>>2]=11936,T2[f+56>>2]=0,j2[f+52>>2]=A,j2[f+36>>2]=A,T2[(r=f+40|0)>>2]=0,T2[r+4>>2]=0,(T2[f+48>>2]=0)|f;},SphereShape_setUnscaledRadius:function(A,f){A|=0,f=z2(f),j2[A+52>>2]=f,j2[A+36>>2]=f;},CapsuleShape_new:function(A,f){A=z2(A),f=z2(f);var r,e=0;return T2[5498]=T2[5498]+1,(r=K2(83))&&(T2[(e=r+19&-16)-4>>2]=r),T2[e+28>>2]=1065353216,T2[e+32>>2]=0,T2[e+20>>2]=1065353216,T2[e+24>>2]=1065353216,T2[e+12>>2]=0,T2[e+16>>2]=0,T2[e+4>>2]=10,T2[e+8>>2]=0,j2[e+52>>2]=A,T2[e>>2]=8500,T2[e+60>>2]=1,T2[e+48>>2]=0,j2[e+44>>2]=A,j2[e+36>>2]=A,j2[e+40>>2]=f*z2(.5),0|e;},CapsuleShape_updateProp:function(A,f,r,e){A|=0,f=z2(f),r=z2(r),e|=0;var i,a=z2(0),n=z2(0);T2[A+20>>2]=1065353216,T2[A+24>>2]=1065353216,T2[A+60>>2]=e,T2[(i=A+28|0)>>2]=1065353216,n=f,a=r;A:{f:switch((T2[4+i>>2]=0)|e){case 0:n=r,a=f;break A;case 1:break A;default:break f;}a=f,f=r;}j2[A+36>>2]=n,T2[A+48>>2]=0,j2[A+44>>2]=f,j2[A+40>>2]=a,j2[A+52>>2]=j2[(A+36|0)+((e+2|0)%3<<2)>>2];},ConvexInternalShape_getImplicitShapeDimensions:function(A){return (A|=0)+36|0;},CylinderShape_new:function(A){A|=0;var f,r,e,i=0,a=z2(0),n=z2(0),o=0;return T2[5498]=T2[5498]+1,(o=K2(83))&&(T2[(i=o+19&-16)-4>>2]=o),T2[i+52>>2]=1025758986,T2[i+28>>2]=1065353216,T2[i+32>>2]=0,T2[i+20>>2]=1065353216,T2[i+24>>2]=1065353216,T2[i+12>>2]=0,T2[i+16>>2]=0,T2[i+4>>2]=35,T2[i+8>>2]=0,n=j2[A+8>>2],a=j2[A+4>>2],f=j2[A>>2],T2[i+48>>2]=0,f=z2(f+z2(-.03999999910593033)),j2[i+36>>2]=f,r=z2(a+z2(-.03999999910593033)),j2[i+40>>2]=r,e=z2(n+z2(-.03999999910593033)),j2[i+44>>2]=e,T2[i+60>>2]=1,T2[i>>2]=8664,n=j2[A>>2],a=j2[A+4>>2],(a=z2(j2[((j2[A+8>>2]>((o=n<a)?n:a)?!o:2)<<2)+A>>2]*z2(.10000000149011612)))<z2(.03999999910593033)&&(n=j2[i+52>>2],j2[i+52>>2]=a,a=j2[i+52>>2],T2[i+48>>2]=0,j2[i+44>>2]=z2(n+e)-a,j2[i+40>>2]=z2(n+r)-a,j2[i+36>>2]=z2(n+f)-a),T2[i+4>>2]=13,0|i;},CylinderShape_updateProp:function(A,f,r,e){A|=0,f=z2(f),r=z2(r),e|=0;var i,a=z2(0),n=z2(0);T2[A+20>>2]=1065353216,T2[A+24>>2]=1065353216,T2[A+60>>2]=e,T2[(i=A+28|0)>>2]=1065353216,n=f,a=r;A:{f:switch((T2[4+i>>2]=0)|e){case 0:n=r,a=f;break A;case 1:break A;default:break f;}a=f,f=r;}j2[A+36>>2]=n,T2[A+48>>2]=0,j2[(e=A+44|0)>>2]=f,j2[(i=A+40|0)>>2]=a,f=z2(n1[T2[T2[A>>2]+48>>2]](A)),r=z2(n1[T2[T2[A>>2]+48>>2]](A)),a=z2(n1[T2[T2[A>>2]+48>>2]](A)),j2[A+36>>2]=j2[A+36>>2]-f,j2[i>>2]=j2[i>>2]-r,j2[e>>2]=j2[e>>2]-a;},ConeShape_new:function(A,f){A=z2(A),f=z2(f);var r,e=0;return T2[5498]=T2[5498]+1,(r=K2(103))&&(T2[(e=r+19&-16)-4>>2]=r),T2[e+52>>2]=1025758986,T2[e+28>>2]=1065353216,T2[e+32>>2]=0,T2[e+20>>2]=1065353216,T2[e+24>>2]=1065353216,T2[e+12>>2]=0,T2[e+16>>2]=0,T2[e+4>>2]=11,T2[e+8>>2]=0,j2[e+68>>2]=f,j2[e+64>>2]=A,T2[e>>2]=8828,T2[e+80>>2]=2,T2[e+72>>2]=0,T2[e+76>>2]=1,j2[e+44>>2]=A,j2[e+40>>2]=f,j2[e+36>>2]=A,j2[e+60>>2]=A/z2(_2(z2(z2(A*A)+z2(f*f)))),0|e;},ConeShape_setRadius:function(A,f){A|=0,f=z2(f),j2[A+64>>2]=f;},ConeShape_setHeight:function(A,f){A|=0,f=z2(f),j2[A+68>>2]=f;},ConeShape_setConeUpIndex:function(A,f){A|=0;var r,e=0,i=0;A:{f:switch(0|(f|=0)){default:e=T2[A+76>>2],i=T2[A+72>>2],f=T2[A+80>>2];break A;case 0:T2[A+72>>2]=1,T2[A+76>>2]=0,i=1,f=T2[A+80>>2]=2;break A;case 1:T2[A+72>>2]=0,e=T2[A+76>>2]=1,f=T2[A+80>>2]=2;break A;case 2:break f;}T2[A+72>>2]=0,e=T2[A+76>>2]=2,f=T2[A+80>>2]=1;}j2[(r=A+36|0)+(i<<2)>>2]=j2[A+64>>2],j2[(e<<2)+r>>2]=j2[A+68>>2],j2[(f<<2)+r>>2]=j2[A+64>>2];},StaticPlaneShape_new:function(A,f){A|=0,f=z2(f);var r,e,i,a=0;return T2[5498]=T2[5498]+1,(i=K2(111))&&(T2[(a=i+19&-16)-4>>2]=i),T2[a+20>>2]=0,T2[a+12>>2]=0,T2[a+16>>2]=0,T2[a+4>>2]=35,T2[a+8>>2]=0,T2[a>>2]=9008,r=j2[A+8>>2],e=j2[A>>2],i=j2[A+4>>2],A=j2[A+12>>2],T2[a+84>>2]=1065353216,T2[a+88>>2]=0,T2[a+76>>2]=1065353216,T2[a+80>>2]=1065353216,j2[a+72>>2]=f,j2[a+68>>2]=A,T2[a+4>>2]=28,f=z2(z2(1)/z2(_2(z2(z2(z2(e*e)+z2(i*i))+z2(r*r))))),j2[a+64>>2]=r*f,j2[a+60>>2]=i*f,j2[a+56>>2]=e*f,0|a;},StaticPlaneShape_setPlaneConstant:function(A,f){A|=0,f=z2(f),j2[A+72>>2]=f;},StaticPlaneShape_getPlaneNormal:function(A){return (A|=0)+56|0;},ccCompoundShape_new:function(){var A,f=0,r=0,e=0,i=T2[5498];return (r=K2(119))&&(T2[(f=r+19&-16)-4>>2]=r),T2[(r=f+32|0)>>2]=0,T2[r+4>>2]=0,T2[f+8>>2]=0,T2[f+12>>2]=0,T2[f>>2]=9180,T2[f+96>>2]=0,T2[f+88>>2]=1065353216,T2[f+92>>2]=1065353216,T2[f+80>>2]=0,T2[f+84>>2]=1065353216,T2[f+72>>2]=0,T2[f+76>>2]=1,T2[f+64>>2]=-581039253,T2[f+68>>2]=0,T2[f+56>>2]=-581039253,T2[f+60>>2]=-581039253,T2[f+48>>2]=1566444395,T2[f+52>>2]=0,T2[f+40>>2]=1566444395,T2[f+44>>2]=1566444395,T2[f+24>>2]=0,T2[f+28>>2]=0,T2[f+4>>2]=31,T2[(A=f+16|0)>>2]=0,T2[4+A>>2]=0,T2[5498]=i+2,p2[f+36|0]=1,T2[r>>2]=0,(r=K2(59))&&(T2[(e=r+19&-16)-4>>2]=r),T2[e+32>>2]=0,p2[e+36|0]=1,T2[e+24>>2]=0,T2[e+28>>2]=0,T2[e+16>>2]=0,T2[e+8>>2]=-1,T2[e+12>>2]=0,T2[e>>2]=0,T2[e+4>>2]=0,T2[f+72>>2]=e,T2[f>>2]=12064,0|f;},CompoundShape_getNumChildShapes:k0,CompoundShape_addChildShape:function(A,f,r){A|=0,f|=0,r|=0;var e,i,a,n,o,b,t,c,u,k,l,s=0,v=0,d=0,B=z2(0),Q=0,g=0,w=(L2-128|0);if(L2=w,T2[A+76>>2]=T2[A+76>>2]+1,s=T2[(v=f+24|0)>>2],v=T2[v+4>>2],Q=T2[(d=f+8|0)>>2],d=T2[d+4>>2],c=T2[(o=f+40|0)>>2],o=T2[4+o>>2],u=T2[f+16>>2],t=T2[f+20>>2],e=T2[f>>2],i=T2[f+4>>2],k=T2[f+32>>2],a=T2[f+36>>2],l=T2[4+(b=f+56|0)>>2],T2[(n=120+w|0)>>2]=T2[b>>2],T2[4+n>>2]=l,T2[(n=104+w|0)>>2]=c,T2[4+n>>2]=o,T2[(o=72+w|0)>>2]=Q,T2[4+o>>2]=d,T2[(d=88+w|0)>>2]=s,T2[d+4>>2]=v,v=T2[f+52>>2],T2[112+w>>2]=T2[f+48>>2],T2[116+w>>2]=v,T2[96+w>>2]=k,T2[100+w>>2]=a,T2[64+w>>2]=e,T2[68+w>>2]=i,T2[80+w>>2]=u,T2[84+w>>2]=t,k=T2[r+4>>2],l=z2(n1[T2[T2[r>>2]+48>>2]](r)),n1[T2[T2[r>>2]+8>>2]](r,f,48+w|0,32+w|0),(B=j2[48+w>>2])<j2[A+40>>2]&&(j2[A+40>>2]=B),(B=j2[32+w>>2])>j2[A+56>>2]&&(j2[A+56>>2]=B),(B=j2[52+w>>2])<j2[A+44>>2]&&(j2[A+44>>2]=B),(B=j2[36+w>>2])>j2[A+60>>2]&&(j2[A+60>>2]=B),(B=j2[56+w>>2])<j2[A+48>>2]&&(j2[A+48>>2]=B),(B=j2[40+w>>2])>j2[A- -64>>2]&&(j2[A+64>>2]=B),(v=T2[A+72>>2])?(d=T2[(s=40+w|0)+4>>2],T2[(f=24+w|0)>>2]=T2[s>>2],T2[f+4>>2]=d,d=T2[(s=56+w|0)+4>>2],T2[(f=8+w|0)>>2]=T2[s>>2],T2[f+4>>2]=d,f=T2[52+w>>2],T2[w>>2]=T2[48+w>>2],T2[4+w>>2]=f,f=T2[36+w>>2],T2[16+w>>2]=T2[32+w>>2],T2[20+w>>2]=f,d=T2[A+24>>2],(f=T2[v+4>>2])?T2[v+4>>2]=0:(T2[5498]=T2[5498]+1,f=0,(s=K2(63))&&(T2[(f=s+19&-16)-4>>2]=s),T2[f>>2]=0,T2[f+4>>2]=0,T2[f+40>>2]=0,T2[(s=f+32|0)>>2]=0,T2[s+4>>2]=0,T2[(s=f+24|0)>>2]=0,T2[s+4>>2]=0,T2[(s=f+16|0)>>2]=0,T2[s+4>>2]=0,T2[(s=f+8|0)>>2]=0,T2[s+4>>2]=0),T2[f+36>>2]=d,s=T2[4+w>>2],T2[f>>2]=T2[w>>2],T2[f+4>>2]=s,T2[f+40>>2]=0,Q=T2[(d=8+w|0)+4>>2],T2[(s=f+8|0)>>2]=T2[d>>2],T2[s+4>>2]=Q,Q=T2[(d=16+w|0)+4>>2],T2[(s=f+16|0)>>2]=T2[d>>2],T2[s+4>>2]=Q,Q=T2[(d=24+w|0)+4>>2],T2[(s=f+24|0)>>2]=T2[d>>2],T2[s+4>>2]=Q,T2[f+32>>2]=0,a0(v,T2[v>>2],f),T2[v+12>>2]=T2[v+12>>2]+1):f=0,o=112+w|0,c=96+w|0,u=80+w|0,(0|(v=T2[A+24>>2]))==T2[A+28>>2]&&!((0|(t=v?v<<1:1))<=(0|v))){if(t&&(T2[5498]=T2[5498]+1,(s=K2(P2(t,80)+19|0))&&(T2[(g=s+19&-16)-4>>2]=s)),1<=(0|v))for(Q=64;d=T2[A+32>>2]+Q|0,n=T2[4+(e=d+-64|0)>>2],T2[(i=(s=Q+g|0)+-64|0)>>2]=T2[e>>2],T2[4+i>>2]=n,a=T2[4+(e=8+e|0)>>2],T2[(i=8+i|0)>>2]=T2[e>>2],T2[4+i>>2]=a,b=T2[4+(n=8+(i=d-48|0)|0)>>2],T2[(a=8+(e=s-48|0)|0)>>2]=T2[n>>2],T2[4+a>>2]=b,a=T2[4+i>>2],T2[e>>2]=T2[i>>2],T2[4+e>>2]=a,b=T2[4+(n=8+(i=d-32|0)|0)>>2],T2[(a=8+(e=s-32|0)|0)>>2]=T2[n>>2],T2[4+a>>2]=b,a=T2[4+i>>2],T2[e>>2]=T2[i>>2],T2[4+e>>2]=a,b=T2[4+(n=8+(i=d-16|0)|0)>>2],T2[(a=8+(e=s-16|0)|0)>>2]=T2[n>>2],T2[4+a>>2]=b,a=T2[4+i>>2],T2[e>>2]=T2[i>>2],T2[4+e>>2]=a,e=T2[d+4>>2],T2[s>>2]=T2[d>>2],T2[s+4>>2]=e,e=T2[(d=d+8|0)+4>>2],T2[(s=s+8|0)>>2]=T2[d>>2],T2[s+4>>2]=e,Q=Q+80|0,v=v-1|0;);(v=T2[A+32>>2])&&S2[A+36|0]&&(T2[5499]=T2[5499]+1,q2(T2[v-4>>2])),T2[A+32>>2]=g,T2[A+28>>2]=t,p2[A+36|0]=1,v=T2[A+24>>2];}d=T2[4+u>>2],v=T2[A+32>>2]+P2(v,80)|0,T2[(s=v)+16>>2]=T2[u>>2],T2[s+20>>2]=d,s=T2[68+w>>2],T2[v>>2]=T2[64+w>>2],T2[v+4>>2]=s,s=T2[4+c>>2],T2[v+32>>2]=T2[c>>2],T2[v+36>>2]=s,s=T2[4+o>>2],T2[v+48>>2]=T2[o>>2],T2[v+52>>2]=s,T2[v+64>>2]=r,d=T2[(s=72+w|0)+4>>2],T2[(r=v+8|0)>>2]=T2[s>>2],T2[r+4>>2]=d,d=T2[(s=8+u|0)+4>>2],T2[(r=v+24|0)>>2]=T2[s>>2],T2[r+4>>2]=d,d=T2[(s=8+c|0)+4>>2],T2[(r=v+40|0)>>2]=T2[s>>2],T2[r+4>>2]=d,d=T2[(s=8+o|0)+4>>2],T2[(r=v+56|0)>>2]=T2[s>>2],T2[r+4>>2]=d,T2[v+76>>2]=f,j2[v+72>>2]=l,T2[v+68>>2]=k,T2[A+24>>2]=T2[A+24>>2]+1,L2=128+w|0;},CompoundShape_removeChildShape:F0,CompoundShape_removeChildShapeByIndex:function(A,f){b0(A|=0,f|=0);},CompoundShape_getChildShape:function(A,f){return T2[64+(T2[(A|=0)+32>>2]+P2(f|=0,80)|0)>>2];},CompoundShape_updateChildTransform:function(A,f,r,e){f|=0,r|=0,e|=0;var i=0,a=0,n=0,o=0,b=0,t=0;L2=n=L2+-64|0,i=(a=T2[(A|=0)+24>>2])+1|0,a=P2(a,80)+76|0;A:{for(;;){if((0|(i=i-1|0))<1)break A;if(t=(o=T2[A+32>>2])+a|0,a=b=a-80|0,T2[t-92>>2]==(0|f))break;}if(f=o+b|0,o=T2[r+4>>2],T2[(i=a=f-76|0)>>2]=T2[r>>2],T2[i+4>>2]=o,o=T2[(i=r+8|0)+4>>2],T2[(a=a+8|0)>>2]=T2[i>>2],T2[a+4>>2]=o,t=T2[(o=r+24|0)+4>>2],T2[(i=(a=f-60|0)+8|0)>>2]=T2[o>>2],T2[i+4>>2]=t,i=T2[r+20>>2],T2[a>>2]=T2[r+16>>2],T2[a+4>>2]=i,t=T2[(o=r+40|0)+4>>2],T2[(i=(a=f-44|0)+8|0)>>2]=T2[o>>2],T2[i+4>>2]=t,i=T2[r+36>>2],T2[a>>2]=T2[r+32>>2],T2[a+4>>2]=i,o=T2[(i=r+56|0)+4>>2],T2[(a=(f=f-28|0)+8|0)>>2]=T2[i>>2],T2[a+4>>2]=o,a=T2[r+52>>2],T2[f>>2]=T2[r+48>>2],T2[f+4>>2]=a,T2[A+72>>2]){f=T2[(T2[A+32>>2]+b|0)-12>>2],n1[T2[T2[f>>2]+8>>2]](f,r,48+n|0,32+n|0),a=T2[(r=56+n|0)+4>>2],T2[(f=8+n|0)>>2]=T2[r>>2],T2[f+4>>2]=a,a=T2[(r=40+n|0)+4>>2],T2[(f=24+n|0)>>2]=T2[r>>2],T2[f+4>>2]=a,f=T2[52+n>>2],T2[n>>2]=T2[48+n>>2],T2[4+n>>2]=f,f=T2[36+n>>2],T2[16+n>>2]=T2[32+n>>2],T2[20+n>>2]=f;f:if(a=i0(o=T2[A+72>>2],r=T2[T2[A+32>>2]+b>>2])){if(0<=(0|(i=T2[o+8>>2]))){if(i)for(;;){if(!(f=T2[a+32>>2]))break f;if(a=f,!(i=i-1|0))break;}}else a=T2[o>>2];}else a=0;f=T2[4+n>>2],T2[r>>2]=T2[n>>2],T2[r+4>>2]=f,b=T2[(i=24+n|0)+4>>2],T2[(f=r+24|0)>>2]=T2[i>>2],T2[f+4>>2]=b,b=T2[(i=16+n|0)+4>>2],T2[(f=r+16|0)>>2]=T2[i>>2],T2[f+4>>2]=b,b=T2[(i=8+n|0)+4>>2],T2[(f=r+8|0)>>2]=T2[i>>2],T2[f+4>>2]=b,a0(o,a,r);}e&&n1[T2[T2[A>>2]+68>>2]](A);}L2=n+64|0;},StridingMeshInterface_del:q,TriangleMesh_new:function(){var A,f=0,r=0,e=0,i=0,i=T2[5498];return (r=K2(191))&&(T2[(f=r+19&-16)-4>>2]=r),p2[f+36|0]=1,T2[f+12>>2]=1065353216,T2[f+16>>2]=0,T2[f+4>>2]=1065353216,T2[f+8>>2]=1065353216,T2[f+32>>2]=0,T2[f+48>>2]=0,T2[f+24>>2]=0,T2[f+28>>2]=0,p2[f+100|0]=1,T2[f>>2]=9704,T2[f+96>>2]=0,p2[f+120|0]=1,T2[f+88>>2]=0,T2[f+92>>2]=0,T2[f+116>>2]=0,p2[f+140|0]=1,T2[f+108>>2]=0,T2[f+112>>2]=0,T2[f+136>>2]=0,p2[f+160|0]=1,T2[f+128>>2]=0,T2[f+132>>2]=0,T2[f+168>>2]=0,T2[f+156>>2]=0,T2[f+148>>2]=0,T2[f+152>>2]=0,$[f+164>>1]=257,T2[5498]=i+2,(r=K2(51))&&(T2[(e=r+19&-16)-4>>2]=r),r=0,(i=T2[f+32>>2])&&(T2[5499]=T2[5499]+1,q2(T2[i-4>>2]),r=T2[f+24>>2]),T2[f+32>>2]=e,p2[f+36|0]=1,T2[f+28>>2]=1,T2[(r=(r<<5)+e|0)+24>>2]=2,T2[r+28>>2]=0,T2[r+16>>2]=0,T2[r+20>>2]=16,T2[r+8>>2]=12,T2[r+12>>2]=0,T2[r>>2]=0,T2[r+4>>2]=0,T2[f+24>>2]=T2[f+24>>2]+1,r=T2[f+32>>2],T2[r+4>>2]=0,e=S2[f+164|0],T2[r+24>>2]=e?2:3,A=T2[(e?128:148)+f>>2],i=12,T2[r+8>>2]=e?12:6,T2[r>>2]=(0|A)/3,e=S2[f+165|0]?(i=16,T2[f+88>>2]):T2[f+108>>2]/3|0,T2[r+20>>2]=i,T2[r+16>>2]=0,T2[r+12>>2]=e,0|f;},TriangleMesh_del:q,TriangleMesh_addTriangle:function(A,f,r,e,i){f|=0,r|=0,e|=0,i|=0;var a=T2[(A|=0)+32>>2];T2[a>>2]=T2[a>>2]+1,l0(A,s0(A,f,i)),l0(A,s0(A,r,i)),l0(A,s0(A,e,i));},BvhTriangleMeshShape_new:function(A,f,r){A|=0,f|=0,r|=0;var e,i,a=0,n=0,o=0;return L2=n=L2-48|0,T2[5498]=T2[5498]+1,(o=K2(103))&&(T2[(a=o+19&-16)-4>>2]=o),T2[a+12>>2]=0,T2[a+16>>2]=0,T2[a+4>>2]=21,T2[a+8>>2]=0,T2[a>>2]=9804,T2[a+56>>2]=A,(T2[a+20>>2]=0)|n1[T2[T2[A>>2]+40>>2]](A)?n1[T2[T2[A>>2]+48>>2]](A,a+24|0,a+40|0):(T2[44+n>>2]=0,T2[36+n>>2]=0,T2[40+n>>2]=0,T2[32+n>>2]=1065353216,n1[T2[T2[a>>2]+68>>2]](16+n|0,a,32+n|0),j2[a+40>>2]=j2[16+n>>2]+j2[a+20>>2],T2[32+n>>2]=-1082130432,n1[T2[T2[a>>2]+68>>2]](n,a,32+n|0),i=T2[(o=8+n|0)+4>>2],T2[(A=24+n|0)>>2]=T2[o>>2],T2[A+4>>2]=i,e=T2[4+n>>2],T2[16+n>>2]=T2[n>>2],T2[20+n>>2]=e,j2[a+24>>2]=j2[16+n>>2]-j2[a+20>>2],T2[(e=40+n|0)>>2]=0,T2[4+e>>2]=0,T2[32+n>>2]=0,T2[36+n>>2]=0,T2[36+n>>2]=1065353216,n1[T2[T2[a>>2]+68>>2]](16+n|0,a,32+n|0),j2[a+44>>2]=j2[20+n>>2]+j2[a+20>>2],T2[36+n>>2]=-1082130432,n1[T2[T2[a>>2]+68>>2]](n,a,32+n|0),i=T2[o+4>>2],T2[A>>2]=T2[o>>2],T2[A+4>>2]=i,i=T2[4+n>>2],T2[16+n>>2]=T2[n>>2],T2[20+n>>2]=i,j2[a+28>>2]=j2[20+n>>2]-j2[a+20>>2],T2[e>>2]=0,T2[4+e>>2]=0,T2[e>>2]=1065353216,T2[32+n>>2]=0,T2[36+n>>2]=0,n1[T2[T2[a>>2]+68>>2]](16+n|0,a,32+n|0),T2[e>>2]=-1082130432,j2[a+48>>2]=j2[A>>2]+j2[a+20>>2],n1[T2[T2[a>>2]+68>>2]](n,a,32+n|0),e=T2[o+4>>2],T2[A>>2]=T2[o>>2],T2[A+4>>2]=e,o=T2[4+n>>2],T2[16+n>>2]=T2[n>>2],T2[20+n>>2]=o,j2[a+32>>2]=j2[A>>2]-j2[a+20>>2]),p2[a+69|(A=0)]=0,p2[a+68|0]=f,T2[a+60>>2]=0,T2[a+64>>2]=0,T2[a>>2]=10608,T2[a+4>>2]=21,r&&(T2[5498]=T2[5498]+1,(r=K2(191))&&(T2[(A=r+19&-16)-4>>2]=r),p2[A+80|0]=1,p2[A+60|0]=0,T2[A+52>>2]=287,T2[A+76>>2]=0,p2[A+100|0]=1,T2[A+68>>2]=0,T2[A+72>>2]=0,T2[A+96>>2]=0,p2[A+120|0]=1,T2[A+88>>2]=0,T2[A+92>>2]=0,T2[A+116>>2]=0,p2[A+140|0]=1,T2[A+108>>2]=0,T2[A+112>>2]=0,T2[A+136>>2]=0,p2[A+164|0]=1,T2[A+144>>2]=0,T2[A+128>>2]=0,T2[A+132>>2]=0,T2[A+160>>2]=0,T2[A+152>>2]=0,T2[A+156>>2]=0,T2[A+168>>2]=0,T2[A+28>>2]=2139095039,T2[A+32>>2]=0,T2[A+20>>2]=2139095039,T2[A+24>>2]=2139095039,T2[A+12>>2]=-8388609,T2[A+16>>2]=0,T2[A+4>>2]=-8388609,T2[A+8>>2]=-8388609,T2[A>>2]=10280,G0(T2[a+60>>2]=A,T2[a+56>>2],f,a+24|0,a+40|0),p2[a+69|0]=1),L2=48+n|0,0|a;},ConvexTriangleMeshShape_new:function(A){A|=0;var f,r=0,e=(0);return L2=e=L2-96|0,T2[5498]=T2[5498]+1,(f=K2(123))&&(T2[(r=f+19&-16)-4>>2]=f),T2[r+88>>2]=-1082130432,T2[r+92>>2]=0,T2[r+80>>2]=-1082130432,T2[r+84>>2]=-1082130432,T2[r+72>>2]=1065353216,T2[r+76>>2]=0,T2[r+64>>2]=1065353216,T2[r+68>>2]=1065353216,T2[r+60>>2]=0,T2[r+52>>2]=1025758986,T2[r+28>>2]=1065353216,T2[r+32>>2]=0,T2[r+20>>2]=1065353216,T2[r+24>>2]=1065353216,T2[r+12>>2]=0,T2[r+16>>2]=0,T2[r+4>>2]=3,T2[r+8>>2]=0,T2[r+100>>2]=A,T2[r>>2]=11240,p2[r+96|0]=1,S2[22256]||(T2[5569]=0,T2[5570]=0,T2[5568]=1065353216,T2[5571]=0,T2[5572]=0,T2[5574]=0,T2[5575]=0,T2[5573]=1065353216,T2[5576]=0,T2[5577]=0,T2[5581]=0,T2[5582]=0,T2[5580]=-1082130432,T2[5578]=1065353216,T2[5579]=0,T2[5583]=0,T2[5584]=0,T2[5586]=0,T2[5587]=0,T2[5585]=-1082130432,T2[5588]=0,T2[5589]=0,T2[5590]=-1082130432,T2[5591]=0,p2[22256]=1),A=d2(e,0,96),n1[T2[T2[r>>2]+76>>2]](r,22272,A,6),e=j2[r+52>>2],j2[r+64>>2]=j2[A+48>>2]-e,j2[r+80>>2]=e+j2[A>>2],j2[r+84>>2]=e+j2[A+20>>2],j2[r+88>>2]=e+j2[A+40>>2],j2[r+68>>2]=j2[A+68>>2]-e,j2[r+72>>2]=j2[A+88>>2]-e,L2=A+96|0,0|r;},EmptyShape_static:function(){return S2[22372]||(T2[5597]=0,T2[5598]=0,T2[5595]=27,T2[5596]=0,T2[5594]=11488,p2[22372]=1,T2[5599]=0),22376;},SimplexShape_new:function(A){var f;return A|=0,T2[5498]=T2[5498]+1,A=0,(f=K2(187))&&(T2[(A=f+19&-16)-4>>2]=f),p2[A+96|0]=0,T2[A+92>>2]=0,T2[A+84>>2]=-1082130432,T2[A+88>>2]=-1082130432,T2[A+76>>2]=0,T2[A+80>>2]=-1082130432,T2[A+68>>2]=1065353216,T2[A+72>>2]=1065353216,T2[A+60>>2]=0,T2[A+64>>2]=1065353216,T2[A+52>>2]=1025758986,T2[A+32>>2]=0,T2[A+24>>2]=1065353216,T2[A+28>>2]=1065353216,T2[A+16>>2]=0,T2[A+20>>2]=1065353216,T2[A+8>>2]=0,T2[A+12>>2]=0,T2[A+100>>2]=0,T2[A>>2]=11600,T2[A+4>>2]=2,0|A;},SimplexShape_addVertex:function(A,f){A|=0,f|=0,z2(0);var r,e,i,a=0;L2=a=L2-96|0,r=T2[A+100>>2],T2[A+100>>2]=r+1,i=T2[f+4>>2],T2[(e=104+(r=(r<<4)+A|0)|0)>>2]=T2[f>>2],T2[4+e>>2]=i,e=T2[(f=f+8|0)+4>>2],T2[(r=112+r|0)>>2]=T2[f>>2],T2[4+r>>2]=e,p2[A+96|0]=1,S2[22256]||(T2[5569]=0,T2[5570]=0,T2[5568]=1065353216,T2[5571]=0,T2[5572]=0,T2[5574]=0,T2[5575]=0,T2[5573]=1065353216,T2[5576]=0,T2[5577]=0,T2[5581]=0,T2[5582]=0,T2[5580]=-1082130432,T2[5578]=1065353216,T2[5579]=0,T2[5583]=0,T2[5584]=0,T2[5586]=0,T2[5587]=0,T2[5585]=-1082130432,T2[5588]=0,T2[5589]=0,T2[5590]=-1082130432,T2[5591]=0,p2[22256]=1),f=d2(a,0,96),n1[T2[T2[A>>2]+76>>2]](A,22272,f,6),a=j2[A+52>>2],j2[A+64>>2]=j2[f+48>>2]-a,j2[A+80>>2]=a+j2[f>>2],j2[A+84>>2]=a+j2[f+20>>2],j2[A+88>>2]=a+j2[f+40>>2],j2[A+68>>2]=j2[f+68>>2]-a,j2[A+72>>2]=j2[f+88>>2]-a,L2=f+96|0;},TerrainShape_new:function(A,f,r,e,i,a){A|=0,f|=0,r|=0,e=z2(e),i=z2(i),a=z2(a);var n,o=0;return T2[5498]=T2[5498]+1,(n=K2(151))&&(T2[(o=n+19&-16)-4>>2]=n),T2[o+20>>2]=0,T2[o+12>>2]=0,T2[o+16>>2]=0,T2[o+4>>2]=24,T2[o+8>>2]=0,T2[o+104>>2]=0,T2[o+100>>2]=r,j2[o+96>>2]=e,j2[o+84>>2]=a,j2[o+80>>2]=i,T2[o+76>>2]=f,T2[o+72>>2]=A,T2[o>>2]=11796,T2[o+124>>2]=1065353216,T2[o+128>>2]=0,T2[o+116>>2]=1065353216,T2[o+120>>2]=1065353216,T2[o+112>>2]=1,p2[0|(r=o+107|0)]=0,p2[r+1|0]=0,p2[r+2|0]=0,p2[r+3|0]=0,e=z2(f-1|0),j2[o+92>>2]=e,A=z2(A-1|0),j2[o+88>>2]=A,T2[o+68>>2]=0,j2[o+64>>2]=e*z2(.5),j2[o+60>>2]=z2(i+a)*z2(.5),j2[o+56>>2]=A*z2(.5),T2[o+52>>2]=0,j2[o+48>>2]=e,j2[o+44>>2]=a,j2[o+40>>2]=A,T2[o+32>>2]=0,T2[o+36>>2]=0,j2[o+28>>2]=i,(T2[o+24>>2]=0)|o;},DefaultCollisionConfiguration_static:function(){var A=0;return L2=A=L2-32|0,S2[24160]||(T2[24+A>>2]=0,T2[28+A>>2]=1,T2[16+A>>2]=4096,T2[20+A>>2]=4096,T2[8+A>>2]=0,b4(8+A|(T2[12+A>>2]=0)),t(29),p2[24160]=1),L2=32+A|0,24164;},Dispatcher_getNumManifolds:function(A){return 0|n1[T2[T2[(A|=0)>>2]+36>>2]](A);},Dispatcher_getManifoldByIndexInternal:function(A,f){return 0|n1[T2[T2[(A|=0)>>2]+40>>2]](A,f|=0);},CollisionDispatcher_new:function(){var A,f,r,e,i=0,a=0,n=0,o=0,b=0;for(L2=i=L2-32|0,A=c(10448),S2[24160]||(T2[24+i>>2]=0,T2[28+i>>2]=1,T2[16+i>>2]=4096,T2[20+i>>2]=4096,T2[8+i>>2]=0,b4(8+i|(T2[12+i>>2]=0)),t(29),p2[24160]=1),p2[A+24|0]=1,T2[A+4>>2]=2,T2[A>>2]=16084,T2[A+20>>2]=0,T2[A+10444>>2]=24164,T2[A+60>>2]=0,T2[A+28>>2]=12508,T2[A+12>>2]=0,T2[A+16>>2]=0,T2[A+64>>2]=30,r=A,e=0|n1[T2[T2[6041]+12>>2]](24164),T2[r+68>>2]=e,r=A,e=0|n1[T2[T2[6041]+8>>2]](24164),T2[r+72>>2]=e,b=A+5260|0;;){for(a=0,n=b;f=T2[A+10444>>2],r=n-5184|0,e=0|n1[T2[T2[f>>2]+16>>2]](f,o,a),T2[r>>2]=e,f=T2[A+10444>>2],r=n,e=0|n1[T2[T2[f>>2]+20>>2]](f,o,a),T2[r>>2]=e,n=n+4|0,36!=(0|(a=a+1|0)););if(b=b+144|0,36==(0|(o=o+1|0)))break;}return L2=32+i|0,0|A;},CollisionDispatcher_del:q,DbvtBroadphase_new:function(){var A,f,r=0,e=0,i=0,a=0,n=0,o=0,b=0,t=0;L2=b=L2-32|0,A=c(176),p2[A+40|0]=1,T2[A>>2]=16780,T2[A+36>>2]=0,T2[A+28>>2]=0,T2[A+32>>2]=0,p2[A+80|0]=1,T2[A+20>>2]=0,T2[A+12>>2]=-1,T2[A+16>>2]=0,T2[A+4>>2]=0,T2[A+8>>2]=0,T2[A+76>>2]=0,T2[A+68>>2]=0,T2[A+72>>2]=0,p2[A+172|0]=1,T2[A+60>>2]=0,T2[A+52>>2]=-1,T2[A+56>>2]=0,T2[A+44>>2]=0,T2[A+48>>2]=0,T2[A+168>>2]=0,T2[A+160>>2]=0,T2[A+164>>2]=0,p2[A+153|0]=0,p2[A+154|0]=1,p2[A+152|0]=1,T2[A+124>>2]=0,T2[A+100>>2]=0,T2[A+104>>2]=0,T2[A+136>>2]=0,T2[A+128>>2]=0,T2[A+132>>2]=0,T2[A+116>>2]=10,T2[A+120>>2]=1,T2[A+108>>2]=1,T2[A+112>>2]=0,a=T2[5498],(r=K2(91))&&(T2[(e=r+19&-16)-4>>2]=r),p2[e+20|0]=1,T2[e>>2]=16280,T2[e+16>>2]=0,p2[e+44|0]=1,T2[e+24>>2]=0,T2[e+8>>2]=0,T2[e+12>>2]=0,T2[e+40>>2]=0,p2[e+64|0]=1,T2[e+32>>2]=0,T2[e+36>>2]=0,T2[e+60>>2]=0,T2[e+68>>2]=0,T2[e+52>>2]=0,T2[e+56>>2]=0,T2[5498]=a+2,(r=K2(51))&&(T2[(i=r+19&-16)-4>>2]=r),(r=T2[e+16>>2])&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[e+16>>2]=i,p2[e+20|0]=1,T2[e+12>>2]=2,u4(e),T2[A+148>>2]=0,T2[A+96>>2]=e,T2[A+140>>2]=0,T2[A+144>>2]=0,T2[(i=A+84|0)>>2]=0,T2[i+4>>2]=0,T2[A+92>>2]=0,i=T2[A+160>>2],T2[20+b>>2]=0,p2[24+b|0]=1,T2[12+b>>2]=0;A:{if(2<=((T2[16+b>>2]=0)|i))for(e=i-1|0,i=36;r=T2[A+168>>2]+i|0,(n=T2[(a=r-4|0)>>2])&&S2[0|r]&&(T2[5499]=T2[5499]+1,q2(T2[n-4>>2])),T2[a>>2]=0,p2[0|r]=1,T2[(r=r-12|0)>>2]=0,i=i+20|(T2[r+4>>2]=0),e=e-1|0;);else if(1!=(0|i)){for(T2[A+164>>2]<=(e=0)&&(T2[5498]=T2[5498]+1,(r=K2(39))&&(T2[(e=r+19&-16)-4>>2]=r),(r=T2[A+168>>2])&&S2[A+172|0]&&(T2[5499]=T2[5499]+1,q2(T2[r-4>>2])),T2[A+168>>2]=e,p2[A+172|0]=1,T2[A+164>>2]=1),e=P2(i,20),i=i-1|0;;){if(r=T2[A+168>>2]+e|(n=0),T2[r+4>>2]=0,T2[r+8>>2]=0,T2[r+12>>2]=0,p2[r+16|0]=1,(0|(a=T2[4+(f=8+b|0)>>2]))<=0)T2[r+4>>2]=a;else {if(T2[5498]=T2[5498]+1,(o=K2(19+(a<<2)|0))&&(T2[(n=o+19&-16)-4>>2]=o),(o=T2[r+12>>2])&&(T2[5499]=T2[5499]+1,q2(T2[o-4>>2])),T2[r+12>>2]=n,p2[r+16|0]=1,T2[r+8>>2]=a,1!=((T2[n>>2]=o=0)|a))for(t=a-1|0,n=4;n=n+4|(T2[T2[r+12>>2]+n>>2]=0),t=t-1|0;);for(T2[r+4>>2]=a,r=T2[r+12>>2];T2[r+o>>2]=T2[T2[12+f>>2]+o>>2],o=o+4|0,a=a-1|0;);}if(e=e+20|0,!((r=i)>>>0<=(i=r+1|0)>>>0))break;}if(T2[A+160>>2]=1,!(i=T2[20+b>>2]))break A;if(!S2[24+b|0])break A;T2[5499]=T2[5499]+1,q2(T2[i-4>>2]);break A;}T2[A+160>>2]=1;}return L2=32+b|0,0|A;},DbvtBroadphase_del:q,SequentialImpulseConstraintSolver_new:function(){var A,f=0;return T2[5498]=T2[5498]+1,(A=K2(255))&&(T2[(f=A+19&-16)-4>>2]=A),p2[f+20|0]=1,T2[f>>2]=17208,T2[f+16>>2]=0,p2[f+40|0]=1,T2[f+8>>2]=0,T2[f+12>>2]=0,T2[f+36>>2]=0,p2[f+60|0]=1,T2[f+28>>2]=0,T2[f+32>>2]=0,T2[f+56>>2]=0,p2[f+80|0]=1,T2[f+48>>2]=0,T2[f+52>>2]=0,T2[f+76>>2]=0,p2[f+100|0]=1,T2[f+68>>2]=0,T2[f+72>>2]=0,T2[f+96>>2]=0,p2[f+120|0]=1,T2[f+88>>2]=0,T2[f+92>>2]=0,T2[f+116>>2]=0,p2[f+140|0]=1,T2[f+108>>2]=0,T2[f+112>>2]=0,T2[f+136>>2]=0,T2[f+128>>2]=0,T2[f+132>>2]=0,p2[f+160|0]=1,T2[f+156>>2]=0,T2[f+148>>2]=0,T2[f+152>>2]=0,p2[f+180|0]=1,T2[f+176>>2]=0,T2[f+168>>2]=0,T2[f+172>>2]=0,p2[f+208|0]=1,T2[f+232>>2]=0,T2[f+204>>2]=0,T2[f+196>>2]=0,T2[f+200>>2]=0,T2[f+224>>2]=0,T2[f+212>>2]=28,T2[f+216>>2]=27,T2[f+220>>2]=26,0|f;},SequentialImpulseConstraintSolver_del:q,CollisionWorld_get_m_useContinuous:function(A){return S2[(A|=0)+16|0];},CollisionWorld_set_m_useContinuous:function(A,f){p2[(A|=0)+16|0]=f|=0;},CollisionWorld_del:q,CollisionWorld_rayTest:function(A,f,r,e){n1[T2[T2[(A|=0)>>2]+32>>2]](A,f|=0,r|=0,e|=0);},CollisionWorld_getDispatchInfo:function(A){return (A|=0)+28|0;},CollisionWorld_addCollisionObject:function(A,f,r,e){n1[T2[T2[(A|=0)>>2]+36>>2]](A,f|=0,r|=0,e|=0);},CollisionWorld_removeCollisionObject:function(A,f){n1[T2[T2[(A|=0)>>2]+40>>2]](A,f|=0);},CollisionWorld_convexSweepTest:function(A,f,r,e,i,a){T4(A|=0,f|=0,r|=0,e|=0,i|=0,a=z2(a));},DynamicsWorld_addAction:F0,DynamicsWorld_removeAction:H4,DynamicsWorld_getSolverInfo:U,ccDiscreteDynamicsWorld_new:function(A,f,r){A|=0,f|=0,r|=0;var e=0,i=0,a=0,n=0;return L2=n=L2-32|0,T2[5498]=T2[5498]+1,(e=K2(367))&&(T2[(i=e+19&-16)-4>>2]=e),S2[24160]||(T2[24+n>>2]=0,T2[28+n>>2]=1,T2[16+n>>2]=4096,T2[20+n>>2]=4096,T2[8+n>>2]=0,b4(8+n|(T2[12+n>>2]=0)),t(29),p2[24160]=1),T2[i+16>>2]=0,p2[i+20|0]=1,T2[i+116>>2]=1101004800,T2[i+108>>2]=0,T2[(e=i)+100>>2]=1050253722,T2[e+104>>2]=1015580809,T2[e+92>>2]=1058642330,T2[e+96>>2]=1065353216,T2[e+88>>2]=0,T2[e+80>>2]=0,T2[e+84>>2]=0,p2[e+76|0]=1,T2[e+72>>2]=0,T2[e+68>>2]=f,T2[e+64>>2]=0,p2[e+60|0]=0,T2[e+56>>2]=1025758986,p2[e+54|0]=1,$[e+52>>1]=256,T2[e+48>>2]=0,p2[e+44|0]=1,T2[e+36>>2]=1,T2[e+40>>2]=1065353216,T2[e+28>>2]=0,T2[e+32>>2]=0,T2[e+24>>2]=A,T2[e+8>>2]=0,T2[e+12>>2]=0,T2[e+132>>2]=0,T2[e+136>>2]=1045220557,T2[e+124>>2]=1045220557,T2[e+128>>2]=1045220557,T2[e+112>>2]=10,T2[e+140>>2]=0,T2[e+144>>2]=1,T2[e+172>>2]=128,T2[e+148>>2]=-1121724662,T2[e+152>>2]=1036831949,T2[e+156>>2]=0,T2[e+160>>2]=1062836634,T2[e+176>>2]=1120403456,T2[e+180>>2]=1900671690,T2[e+184>>2]=0,T2[e+188>>2]=1045220557,T2[e+164>>2]=260,T2[e+168>>2]=2,T2[e+120>>2]=1065353216,T2[e>>2]=19784,p2[e+208|0]=1,T2[e+212>>2]=0,T2[e+204>>2]=0,T2[e+216>>2]=r,T2[e+196>>2]=0,T2[e+200>>2]=0,p2[e+240|0]=1,p2[e+260|0]=1,T2[e+236>>2]=0,T2[e+228>>2]=0,T2[e+232>>2]=0,T2[e+256>>2]=0,T2[e+248>>2]=0,T2[e+252>>2]=0,T2[e+264>>2]=0,T2[e+268>>2]=-1054867456,$[e+290>>1]=0,T2[(f=e+280|0)>>2]=0,T2[f+4>>2]=0,T2[e+272>>2]=0,T2[e+276>>2]=0,p2[e+308|0]=1,p2[e+336|0]=1,T2[e+304>>2]=0,p2[e+316|0]=1,T2[e+296>>2]=0,T2[e+300>>2]=0,T2[e+312>>2]=0,T2[e+332>>2]=0,T2[e+340>>2]=0,T2[e+324>>2]=0,T2[e+328>>2]=0,f=r?0:(T2[5498]=T2[5498]+1,r=0,(f=K2(255))&&(T2[(r=f+19&-16)-4>>2]=f),p2[r+20|0]=1,T2[r>>2]=17208,T2[r+16>>2]=0,p2[r+40|0]=1,T2[r+8>>2]=0,T2[r+12>>2]=0,T2[r+36>>2]=0,p2[r+60|0]=1,T2[r+28>>2]=0,T2[r+32>>2]=0,T2[r+56>>2]=0,p2[r+80|0]=1,T2[r+48>>2]=0,T2[r+52>>2]=0,T2[r+76>>2]=0,p2[r+100|0]=1,T2[r+68>>2]=0,T2[r+72>>2]=0,T2[r+96>>2]=0,p2[r+120|0]=1,T2[r+88>>2]=0,T2[r+92>>2]=0,T2[r+116>>2]=0,T2[r+168>>2]=0,T2[r+172>>2]=0,T2[r+148>>2]=0,T2[r+152>>2]=0,T2[r+128>>2]=0,T2[r+132>>2]=0,T2[r+108>>2]=0,T2[r+112>>2]=0,T2[r+196>>2]=0,T2[r+200>>2]=0,p2[r+140|0]=1,T2[r+136>>2]=0,p2[r+160|0]=1,T2[r+156>>2]=0,p2[r+180|0]=1,T2[r+176>>2]=0,p2[r+208|0]=1,T2[r+232>>2]=0,T2[r+204>>2]=0,T2[r+224>>2]=0,T2[r+212>>2]=28,T2[r+216>>2]=27,T2[r+220>>2]=26,T2[i+216>>2]=r,1),p2[e+289|0]=f,f=T2[5498],(r=K2(87))&&(T2[(a=r+19&-16)-4>>2]=r),p2[a+20|0]=1,T2[a>>2]=19576,T2[a+16>>2]=0,p2[a+40|0]=1,T2[a+8>>2]=0,T2[a+12>>2]=0,T2[a+36>>2]=0,p2[a+60|0]=1,T2[a+28>>2]=0,T2[a+32>>2]=0,T2[a+56>>2]=0,p2[a+64|0]=1,T2[a+48>>2]=0,T2[a+52>>2]=0,p2[i+288|0]=1,T2[i+220>>2]=a,T2[5498]=f+2,r=0,(f=K2(107))&&(T2[(r=f+19&-16)-4>>2]=f),T2[r>>2]=19980,T2[r+52>>2]=0,T2[r+56>>2]=0,T2[r+72>>2]=0,T2[r+76>>2]=0,T2[r+12>>2]=0,T2[r+16>>2]=0,T2[r+32>>2]=0,T2[r+36>>2]=0,p2[r+44|0]=1,T2[r+24>>2]=A,T2[r+20>>2]=0,T2[r+4>>2]=0,T2[r+40>>2]=0,p2[r+64|0]=1,T2[r+60>>2]=0,p2[r+84|0]=1,T2[r+80>>2]=0,T2[i+344>>2]=20464,T2[i>>2]=20268,T2[r+8>>2]=T2[i+216>>2],T2[i+212>>2]=r,T2[i+56>>2]=1008981770,A=T2[i+68>>2],A=0|n1[T2[T2[A>>2]+36>>2]](A),n1[T2[T2[A>>2]+44>>2]](A,i+344|0),L2=32+n|0,0|i;},DynamicsWorld_setGravity:function(A,f){n1[T2[T2[(A|=0)>>2]+72>>2]](A,f|=0);},DynamicsWorld_addRigidBody:function(A,f,r,e){n1[T2[T2[(A|=0)>>2]+88>>2]](A,f|=0,r|=0,e|=0);},DynamicsWorld_removeRigidBody:function(A,f){n1[T2[T2[(A|=0)>>2]+92>>2]](A,f|=0);},DynamicsWorld_addConstraint:function(A,f,r){n1[T2[T2[(A|=0)>>2]+56>>2]](A,f|=0,r|=0);},DynamicsWorld_removeConstraint:function(A,f){n1[T2[T2[(A|=0)>>2]+60>>2]](A,f|=0);},DynamicsWorld_stepSimulation:function(A,f,r,e){A|=0,f=z2(f),r|=0,e=z2(e),n1[T2[T2[A>>2]+52>>2]](A,f,r,e);},ccDiscreteDynamicsWorld_setAllowSleep:function(A,f){p2[23468]=1^(f|=0);},TypedConstraint_del:q,TypedConstraint_getFixedBody:function(){var A,f=0;return L2=f=L2-144|0,S2[23477]||(T2[5909]=0,T2[5910]=0,T2[5907]=0,T2[5908]=0,T2[5905]=0,T2[5906]=0,T2[5903]=0,T2[5904]=0,T2[5917]=0,T2[5918]=0,T2[5915]=0,T2[5916]=1566444395,T2[5913]=1065353216,T2[5914]=0,T2[5911]=1065353216,T2[5912]=1065353216,T2[5919]=0,T2[5920]=0,p2[23780]=1,T2[5939]=0,T2[5940]=0,T2[5937]=1065353216,T2[5938]=0,T2[5935]=-1,T2[5936]=-1,T2[5933]=1,T2[5934]=0,T2[5931]=1036831949,T2[5932]=1176256512,T2[5929]=0,T2[5930]=0,T2[5927]=1056964608,T2[5928]=0,T2[5925]=1,T2[5926]=0,T2[5923]=-1,T2[5924]=-1,T2[5921]=1,T2[5922]=-1,T2[5942]=0,T2[5943]=0,T2[5871]=1065353216,T2[5872]=0,T2[5873]=0,T2[5874]=0,T2[5875]=0,T2[5876]=1065353216,T2[5877]=0,T2[5878]=0,T2[5879]=0,T2[5880]=0,T2[5881]=1065353216,T2[5882]=0,T2[5883]=0,T2[5884]=0,T2[5885]=0,T2[5886]=0,T2[5887]=1065353216,T2[5888]=0,T2[5889]=0,T2[5890]=0,T2[5891]=0,T2[5892]=1065353216,T2[5893]=0,T2[5894]=0,T2[5895]=0,T2[5896]=0,T2[5946]=0,T2[5944]=0,T2[5898]=0,T2[5899]=0,T2[5897]=1065353216,T2[5900]=0,T2[5901]=0,p2[24040]=1,T2[5870]=17124,T2[6007]=0,T2[6008]=0,T2[5902]=0,T2[6009]=0,T2[(A=80+f|0)>>2]=0,T2[4+A>>2]=0,T2[(A=88+f|0)>>2]=0,T2[4+A>>2]=0,T2[96+f>>2]=0,T2[(A=12+f|0)>>2]=0,T2[4+A>>2]=0,T2[(A=20+f|0)>>2]=0,T2[4+A>>2]=0,T2[28+f>>2]=1065353216,T2[(A=32+f|0)>>2]=0,T2[4+A>>2]=0,T2[(A=40+f|0)>>2]=0,T2[4+A>>2]=0,T2[48+f>>2]=1065353216,T2[72+f>>2]=0,T2[76+f>>2]=0,T2[f>>2]=0,T2[4+f>>2]=0,T2[136+f>>2]=1008981770,T2[140+f>>2]=1008981770,T2[128+f>>2]=1000593162,T2[132+f>>2]=1008981770,p2[124+f|0]=0,T2[116+f>>2]=1061997773,T2[120+f>>2]=1065353216,T2[108+f>>2]=0,T2[112+f>>2]=0,T2[100+f>>2]=1056964608,T2[104+f>>2]=0,T2[8+f>>2]=1065353216,T2[68+f>>2]=0,T2[(A=60+f|0)>>2]=0,T2[4+A>>2]=0,T2[(A=52+f|0)>>2]=0,T2[4+A>>2]=0,w4(23480,f),t(31),p2[23477]=1),T2[5984]=0,T2[5985]=0,T2[5986]=0,T2[5987]=0,T2[5921]=1|T2[5921],j2[5978]=j2[5982]*z2(0),j2[5977]=j2[5981]*z2(0),j2[5976]=j2[5980]*z2(0),j2[6027]=j2[5974]*z2(0),j2[6026]=j2[5973]*z2(0),j2[6025]=j2[5972]*z2(0),T2[5971]=0,T2[5979]=0,T2[6028]=0,L2=144+f|0,23480;},HingeConstraint_new:function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i=0,a=0;return T2[5498]=T2[5498]+1,(a=K2(787))&&(T2[(i=a+19&-16)-4>>2]=a),T2[i+44>>2]=0,T2[i+36>>2]=0,T2[i+40>>2]=1028443341,T2[i+32>>2]=f,T2[i+28>>2]=A,T2[i+24>>2]=-1,$[i+20>>1]=1,T2[i+12>>2]=-1,T2[i+16>>2]=2139095039,T2[i+4>>2]=4,T2[i+8>>2]=-1,T2[i>>2]=20752,a=T2[(f=r+8|0)+4>>2],T2[(A=i+560|0)>>2]=T2[f>>2],T2[A+4>>2]=a,A=T2[r+4>>2],T2[i+552>>2]=T2[r>>2],T2[i+556>>2]=A,a=T2[(f=r+24|0)+4>>2],T2[(A=i+576|0)>>2]=T2[f>>2],T2[A+4>>2]=a,A=T2[r+20>>2],T2[i+568>>2]=T2[r+16>>2],T2[i+572>>2]=A,a=T2[(f=r+40|0)+4>>2],T2[(A=i+592|0)>>2]=T2[f>>2],T2[A+4>>2]=a,A=T2[r+36>>2],T2[i+584>>2]=T2[r+32>>2],T2[i+588>>2]=A,a=T2[(f=r+56|0)+4>>2],T2[(A=i+608|0)>>2]=T2[f>>2],T2[A+4>>2]=a,A=T2[r+52>>2],T2[i+600>>2]=T2[r+48>>2],T2[i+604>>2]=A,r=T2[(f=e+8|0)+4>>2],T2[(A=i+624|0)>>2]=T2[f>>2],T2[A+4>>2]=r,A=T2[e+4>>2],T2[i+616>>2]=T2[e>>2],T2[i+620>>2]=A,r=T2[(f=e+24|0)+4>>2],T2[(A=i+640|0)>>2]=T2[f>>2],T2[A+4>>2]=r,A=T2[e+20>>2],T2[i+632>>2]=T2[e+16>>2],T2[i+636>>2]=A,r=T2[(f=e+40|0)+4>>2],T2[(A=i+656|0)>>2]=T2[f>>2],T2[A+4>>2]=r,A=T2[e+36>>2],T2[i+648>>2]=T2[e+32>>2],T2[i+652>>2]=A,r=T2[(f=e+56|0)+4>>2],T2[(A=i+672|0)>>2]=T2[f>>2],T2[A+4>>2]=r,A=T2[e+52>>2],T2[i+664>>2]=T2[e+48>>2],T2[i+668>>2]=A,T2[i+704>>2]=1065353216,T2[i+696>>2]=1063675494,T2[i+700>>2]=1050253722,T2[i+688>>2]=0,T2[i+692>>2]=-1082130432,p2[i+716|0]=0,T2[i+708>>2]=0,T2[i+712>>2]=0,p2[i+740|0]=0,T2[i+736>>2]=16777216,T2[i+764>>2]=0,T2[(A=i+756|0)>>2]=0,T2[A+4>>2]=0,T2[i+748>>2]=0,T2[i+752>>2]=0,T2[i+732>>2]=1065353216,0|i;},HingeConstraint_setFrames:function(A,f,r){r|=0;var e,i,a=T2[(f|=0)+4>>2];T2[(A|=0)+552>>2]=T2[f>>2],T2[A+556>>2]=a,i=T2[4+(e=f+8|0)>>2],T2[(a=A+560|0)>>2]=T2[e>>2],T2[4+a>>2]=i,i=T2[4+(e=f+24|0)>>2],T2[(a=A+576|0)>>2]=T2[e>>2],T2[4+a>>2]=i,e=T2[f+20>>2],T2[(a=A+568|0)>>2]=T2[f+16>>2],T2[4+a>>2]=e,i=T2[4+(e=f+40|0)>>2],T2[(a=A+592|0)>>2]=T2[e>>2],T2[4+a>>2]=i,e=T2[f+36>>2],T2[(a=A+584|0)>>2]=T2[f+32>>2],T2[4+a>>2]=e,i=T2[4+(e=f+56|0)>>2],T2[(a=A+608|0)>>2]=T2[e>>2],T2[4+a>>2]=i,e=T2[f+52>>2],T2[(a=A+600|0)>>2]=T2[f+48>>2],T2[4+a>>2]=e,e=T2[4+(a=r+8|0)>>2],T2[(f=A+624|0)>>2]=T2[a>>2],T2[f+4>>2]=e,f=T2[r+4>>2],T2[A+616>>2]=T2[r>>2],T2[A+620>>2]=f,a=T2[r+20>>2],T2[(f=A+632|0)>>2]=T2[r+16>>2],T2[f+4>>2]=a,e=T2[4+(a=r+24|0)>>2],T2[(f=A+640|0)>>2]=T2[a>>2],T2[f+4>>2]=e,a=T2[r+36>>2],T2[(f=A+648|0)>>2]=T2[r+32>>2],T2[f+4>>2]=a,e=T2[4+(a=r+40|0)>>2],T2[(f=A+656|0)>>2]=T2[a>>2],T2[f+4>>2]=e,e=T2[4+(a=r+56|0)>>2],T2[(f=A+672|0)>>2]=T2[a>>2],T2[f+4>>2]=e,a=T2[r+52>>2],T2[(f=A+664|0)>>2]=T2[r+48>>2],T2[f+4>>2]=a,n1[T2[T2[A>>2]+8>>2]](A);},P2PConstraint_new:function(A,f,r,e){A|=0,f|=0,r|=0,e|=0;var i,a=0;return T2[5498]=T2[5498]+1,(i=K2(379))&&(T2[(a=i+19&-16)-4>>2]=i),T2[a+44>>2]=0,T2[a+36>>2]=0,T2[a+40>>2]=1028443341,T2[a+32>>2]=f,T2[a+28>>2]=A,T2[a+24>>2]=-1,$[a+20>>1]=1,T2[a+12>>2]=-1,T2[a+16>>2]=2139095039,T2[a+4>>2]=3,T2[a+8>>2]=-1,T2[a>>2]=20868,A=T2[r+4>>2],T2[a+300>>2]=T2[r>>2],T2[a+304>>2]=A,r=T2[(f=r+8|0)+4>>2],T2[(A=a+308|0)>>2]=T2[f>>2],T2[A+4>>2]=r,A=T2[e+4>>2],T2[a+316>>2]=T2[e>>2],T2[a+320>>2]=A,r=T2[(f=e+8|0)+4>>2],T2[(A=a+324|0)>>2]=T2[f>>2],T2[A+4>>2]=r,T2[a+332>>2]=0,p2[a+344|0]=0,T2[a+348>>2]=1050253722,T2[a+352>>2]=1065353216,(T2[a+356>>2]=0)|a;},P2PConstraint_setPivotA:function(A,f){var r=T2[(f|=0)+4>>2];T2[(A|=0)+300>>2]=T2[f>>2],T2[A+304>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+308|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},P2PConstraint_setPivotB:function(A,f){var r=T2[(f|=0)+4>>2];T2[(A|=0)+316>>2]=T2[f>>2],T2[A+320>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+324|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},_malloc:function(A){return 0|K2(A|=0);},_free:function(A){q2(A|=0);},_read_f32:q4,_write_f32:function(A,f){A|=0,f=z2(f),j2[A>>2]=f;},Vec3_new:function(A,f,r){A=z2(A),f=z2(f),r=z2(r);var e,i=0;return T2[5498]=T2[5498]+1,(e=K2(35))&&(T2[(i=e+19&-16)-4>>2]=e),T2[i+12>>2]=0,j2[i+8>>2]=r,j2[i+4>>2]=f,j2[i>>2]=A,0|i;},Vec3_del:$4,Vec3_set:function(A,f,r,e){A|=0,f=z2(f),r=z2(r),e=z2(e),T2[A+12>>2]=0,j2[A+8>>2]=e,j2[A+4>>2]=r,j2[A>>2]=f;},Vec3_x:q4,Vec3_y:A1,Vec3_z:f1,Quat_new:function(A,f,r,e){A=z2(A),f=z2(f),r=z2(r),e=z2(e);var i=c(16);return j2[i+12>>2]=e,j2[i+8>>2]=r,j2[i+4>>2]=f,j2[i>>2]=A,0|i;},Quat_del:$4,Quat_set:r1,Quat_x:q4,Quat_y:A1,Quat_z:f1,Quat_w:function(A){return z2(j2[(A|=0)+12>>2]);},Transform_new:function(){var A=0,f=c(64);return T2[(A=f)+4>>2]=0,T2[A+8>>2]=0,T2[A>>2]=1065353216,T2[A+24>>2]=0,T2[A+28>>2]=0,T2[A+20>>2]=1065353216,T2[A+44>>2]=0,T2[A+48>>2]=0,T2[A+40>>2]=1065353216,T2[(A=A+12|0)>>2]=0,T2[4+A>>2]=0,T2[(A=f+32|0)>>2]=0,T2[4+A>>2]=0,T2[(A=f+52|0)>>2]=0,T2[4+A>>2]=0,(T2[f+60>>2]=0)|f;},Transform_del:function(A){(A|=0)&&u(A);},Transform_setIdentity:function(A){var f;T2[(A|=0)+4>>2]=0,T2[A+8>>2]=0,T2[A>>2]=1065353216,T2[(f=A+12|0)>>2]=0,T2[4+f>>2]=0,T2[(f=A+24|0)>>2]=0,T2[4+f>>2]=0,T2[A+20>>2]=1065353216,T2[(f=A+32|0)>>2]=0,T2[4+f>>2]=0,T2[(f=A+44|0)>>2]=0,T2[4+f>>2]=0,T2[A+40>>2]=1065353216,T2[(f=A+52|0)>>2]=0,T2[4+f>>2]=0,T2[A+60>>2]=0;},Transform_setOrigin:function(A,f){var r=T2[(f|=0)+4>>2];T2[(A|=0)+48>>2]=T2[f>>2],T2[A+52>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+56|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},Transform_setRotation:function(A,f){A|=0,f|=0,z2(0);var r,e,i,a,n,o,b=j2[f+12>>2],t=j2[f+8>>2],c=j2[f>>2],u=j2[f+4>>2];T2[A+44>>2]=0,T2[A+28>>2]=0,T2[A+12>>2]=0,r=z2(z2(2)/z2(z2(z2(z2(c*c)+z2(u*u))+z2(t*t))+z2(b*b))),i=z2(t*r),e=z2(u*i),a=z2(c*r),n=z2(b*a),j2[A+36>>2]=e+n,o=z2(c*i),r=z2(u*r),f=z2(b*r),j2[A+32>>2]=o-f,j2[A+24>>2]=e-n,e=z2(c*r),b=z2(b*i),j2[A+16>>2]=e+b,j2[A+8>>2]=o+f,j2[A+4>>2]=e-b,c=z2(c*a),b=z2(u*r),j2[A+40>>2]=z2(1)-z2(c+b),f=c,c=z2(t*i),j2[A+20>>2]=z2(1)-z2(f+c),j2[A>>2]=z2(1)-z2(b+c);},Transform_getOrigin:H,Transform_getRotation:function(A,f){return C4(A|=0,f|=0),0|f;},Vec3_array_at:function(A,f){return T2[(A|=0)+12>>2]+((f|=0)<<4)|0;},int_array_size:function(A){return T2[(A|=0)+4>>2];},int_array_at:function(A,f){return T2[T2[(A|=0)+12>>2]+((f|=0)<<2)>>2];},ccMaterial_new:function(){var A=c(16);return T2[A+8>>2]=1036831949,T2[A+12>>2]=1036831949,T2[A>>2]=1036831949,T2[A+4>>2]=1058642330,0|A;},ccMaterial_set:r1,MotionState_del:q,MotionState_getWorldTransform:r2,MotionState_setWorldTransform:function(A,f){n1[T2[T2[(A|=0)>>2]+12>>2]](A,f|=0);},ccMotionState_new:function(A,f){A|=0,f|=0;var r,e,i=c(72);return T2[i+4>>2]=A,T2[i>>2]=20996,e=T2[4+(r=f+8|0)>>2],T2[(A=i+16|0)>>2]=T2[r>>2],T2[A+4>>2]=e,A=T2[f+4>>2],T2[i+8>>2]=T2[f>>2],T2[i+12>>2]=A,e=T2[4+(r=f+24|0)>>2],T2[(A=i+32|0)>>2]=T2[r>>2],T2[A+4>>2]=e,A=T2[f+20>>2],T2[i+24>>2]=T2[f+16>>2],T2[i+28>>2]=A,A=T2[f+36>>2],T2[i+40>>2]=T2[f+32>>2],T2[i+44>>2]=A,e=T2[4+(r=f+40|0)>>2],T2[(A=i+48|0)>>2]=T2[r>>2],T2[A+4>>2]=e,A=T2[f+52>>2],T2[i+56>>2]=T2[f+48>>2],T2[i+60>>2]=A,r=T2[(f=f+56|0)+4>>2],T2[(A=i- -64|0)>>2]=T2[f>>2],T2[A+4>>2]=r,0|i;},RigidBody_new:function(A,f){A=z2(A),f|=0;var r,e,i=0,a=0;return L2=a=L2-144|0,S2[22372]||(T2[5597]=0,T2[5598]=0,T2[5595]=27,T2[5596]=0,T2[5594]=11488,p2[22372]=1,T2[5599]=0),T2[(r=88+a|0)>>2]=0,T2[4+r>>2]=0,e=A==z2(0)?z2(0):z2(1.6666666269302368),j2[84+a>>2]=e,j2[80+a>>2]=e,T2[(r=12+a|0)>>2]=0,T2[4+r>>2]=0,T2[(r=20+a|0)>>2]=0,T2[4+r>>2]=0,T2[136+a>>2]=1008981770,T2[140+a>>2]=1008981770,T2[128+a>>2]=1000593162,T2[132+a>>2]=1008981770,p2[124+a|0]=0,T2[120+a>>2]=1065353216,T2[112+a>>2]=0,T2[116+a>>2]=1061997773,T2[104+a>>2]=0,T2[108+a>>2]=0,T2[96+a>>2]=0,T2[100+a>>2]=1056964608,j2[76+a>>2]=e,T2[72+a>>2]=22376,T2[4+a>>2]=f,j2[a>>2]=A,T2[8+a>>2]=1065353216,T2[(f=32+a|0)>>2]=0,T2[f+4>>2]=0,T2[28+a>>2]=1065353216,T2[(f=40+a|0)>>2]=0,T2[f+4>>2]=0,T2[48+a>>2]=1065353216,T2[(f=52+a|0)>>2]=0,T2[f+4>>2]=0,T2[(f=60+a|0)>>2]=0,T2[f+4>>2]=0,T2[68+a>>2]=0,T2[5498]=T2[5498]+1,(f=K2(695))&&(T2[(i=f+19&-16)-4>>2]=f),T2[i+132>>2]=0,T2[i+136>>2]=0,T2[i+188>>2]=0,T2[i+192>>2]=0,T2[i+180>>2]=0,T2[i+184>>2]=1566444395,T2[i+172>>2]=1065353216,T2[i+176>>2]=0,T2[i+164>>2]=1065353216,T2[i+168>>2]=1065353216,p2[i+300|0]=1,T2[i+276>>2]=0,T2[i+280>>2]=0,T2[i+268>>2]=1065353216,T2[i+272>>2]=0,T2[i+260>>2]=-1,T2[i+264>>2]=-1,T2[i+252>>2]=1,T2[i+256>>2]=0,T2[i+244>>2]=1036831949,T2[i+248>>2]=1176256512,T2[i+236>>2]=0,T2[i+240>>2]=0,T2[i+228>>2]=1056964608,T2[i+232>>2]=0,T2[i+220>>2]=1,T2[i+224>>2]=0,T2[i+212>>2]=-1,T2[i+216>>2]=-1,T2[i+204>>2]=1,T2[i+208>>2]=-1,T2[(f=i+156|0)>>2]=0,T2[f+4>>2]=0,T2[(f=i+148|0)>>2]=0,T2[f+4>>2]=0,T2[(f=i+140|0)>>2]=0,T2[f+4>>2]=0,T2[(f=i+196|0)>>2]=0,T2[f+4>>2]=0,T2[i+304>>2]=0,T2[i+296>>2]=0,T2[i+288>>2]=0,T2[i+292>>2]=0,T2[i+4>>2]=1065353216,T2[i+8>>2]=0,T2[i+12>>2]=0,T2[(f=i+16|0)>>2]=0,T2[f+4>>2]=0,T2[i+24>>2]=1065353216,T2[i+28>>2]=0,T2[i+32>>2]=0,T2[(f=i+36|0)>>2]=0,T2[f+4>>2]=0,T2[i+44>>2]=1065353216,T2[i+48>>2]=0,T2[i+52>>2]=0,T2[(f=i+56|0)>>2]=0,T2[f+4>>2]=0,T2[(f=i- -64|0)>>2]=0,T2[f+4>>2]=1065353216,T2[i+72>>2]=0,T2[i+76>>2]=0,T2[(f=i+80|0)>>2]=0,T2[f+4>>2]=0,T2[i+88>>2]=1065353216,T2[i+92>>2]=0,T2[i+96>>2]=0,T2[(f=i+100|0)>>2]=0,T2[f+4>>2]=0,T2[i+112>>2]=0,T2[i+116>>2]=0,T2[i+108>>2]=1065353216,T2[(f=i+120|0)>>2]=0,T2[f+4>>2]=0,T2[i+128>>2]=0,p2[i+560|0]=1,T2[i>>2]=17124,T2[i+556>>2]=0,T2[i+548>>2]=0,T2[i+552>>2]=0,w4(i,a),L2=144+a|0,0|i;},RigidBody_setCenterOfMassTransform:function(A,f){E4(A|=0,f|=0);},RigidBody_setSleepingThresholds:function(A,f,r){A|=0,f=z2(f),r=z2(r),j2[A+536>>2]=r,j2[A+532>>2]=f;},RigidBody_getLinearSleepingThreshold:function(A){return z2(j2[(A|=0)+532>>2]);},RigidBody_getAngularSleepingThreshold:function(A){return z2(j2[(A|=0)+536>>2]);},RigidBody_setDamping:function(A,f,r){A|=0,f=z2(f),r=z2(r);var e=0;j2[8+(e=L2-16|0)>>2]=r,j2[12+e>>2]=f,T2[4+e>>2]=0,T2[e>>2]=1065353216,j2[A+504>>2]=j2[(f<z2(0)?4+e|0:f>z2(1)?e:12+e|0)>>2],T2[4+e>>2]=0,T2[e>>2]=1065353216,j2[A+508>>2]=j2[(r<z2(0)?4+e|0:r>z2(1)?e:8+e|0)>>2];},RigidBody_setMass:function(A,f){A|=0,f=z2(f);var r=0,e=z2(0),i=0,a=z2(0);T2[8+(L2=r=L2-16|0)>>2]=1070945621,T2[12+r>>2]=0,T2[r>>2]=1070945621,T2[4+r>>2]=1070945621,i=T2[A+192>>2],31==T2[i+4>>2]&&T2[i+24>>2]<1||n1[T2[T2[i>>2]+32>>2]](i,f,r),i=T2[A+204>>2],f!=z2(0)?(T2[A+204>>2]=-2&i,a=z2(z2(1)/f)):T2[A+204>>2]=1|i,j2[A+404>>2]=a,T2[A+436>>2]=0,T2[A+468>>2]=0,j2[A+424>>2]=j2[A+440>>2]*f,e=j2[8+r>>2],j2[A+464>>2]=e!=z2(0)?z2(z2(1)/e):z2(0),e=j2[4+r>>2],j2[A+460>>2]=e!=z2(0)?z2(z2(1)/e):z2(0),e=j2[r>>2],j2[A+456>>2]=e!=z2(0)?z2(z2(1)/e):z2(0),j2[A+432>>2]=j2[A+448>>2]*f,j2[A+428>>2]=j2[A+444>>2]*f,f=j2[A+412>>2],e=j2[A+416>>2],i=j2[A+408>>2],T2[A+632>>2]=0,j2[A+628>>2]=a*e,j2[A+624>>2]=a*f,j2[A+620>>2]=i*a,L2=16+r|0;},RigidBody_setMassProps:function(A,f,r){A|=0,f=z2(f),r|=0;var e=z2(0),i=(T2[A+204>>2]);f!=z2(0)?(T2[A+204>>2]=-2&i,e=z2(z2(1)/f)):T2[A+204>>2]=1|i,j2[A+404>>2]=e,T2[A+436>>2]=0,j2[A+424>>2]=j2[A+440>>2]*f,j2[A+432>>2]=j2[A+448>>2]*f,j2[A+428>>2]=j2[A+444>>2]*f,f=j2[r+8>>2],i=j2[r+4>>2],r=j2[r>>2],j2[A+620>>2]=j2[A+408>>2]*e,j2[A+624>>2]=e*j2[A+412>>2],j2[A+628>>2]=e*j2[A+416>>2],T2[A+632>>2]=0,T2[A+468>>2]=0,j2[A+456>>2]=r!=z2(0)?z2(z2(1)/r):z2(0),j2[A+460>>2]=i!=z2(0)?z2(z2(1)/i):z2(0),j2[A+464>>2]=f!=z2(0)?z2(z2(1)/f):z2(0);},RigidBody_setLinearFactor:function(A,f){A|=0,f|=0,z2(0);var r,e=T2[f+4>>2];T2[A+408>>2]=T2[f>>2],T2[A+412>>2]=e,r=T2[(f=f+8|0)+4>>2],T2[(e=A+416|0)>>2]=T2[f>>2],T2[4+e>>2]=r,T2[A+632>>2]=0,r=j2[A+404>>2],j2[A+624>>2]=r*j2[A+412>>2],j2[A+620>>2]=r*j2[A+408>>2],j2[A+628>>2]=r*j2[e>>2];},RigidBody_setAngularFactor:function(A,f){var r;f|=0,T2[(A|=0)+304>>2]=T2[A+304>>2]+1,r=T2[f+4>>2],T2[A+604>>2]=T2[f>>2],T2[A+608>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+612|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},RigidBody_getLinearVelocity:function(A){return (A|=0)+372|0;},RigidBody_getAngularVelocity:function(A){return (A|=0)+388|0;},RigidBody_setLinearVelocity:function(A,f){var r;f|=0,T2[(A|=0)+304>>2]=T2[A+304>>2]+1,r=T2[f+4>>2],T2[A+372>>2]=T2[f>>2],T2[A+376>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+380|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},RigidBody_setAngularVelocity:function(A,f){var r;f|=0,T2[(A|=0)+304>>2]=T2[A+304>>2]+1,r=T2[f+4>>2],T2[A+388>>2]=T2[f>>2],T2[A+392>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+396|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},RigidBody_getGravity:function(A){return (A|=0)+440|0;},RigidBody_setGravity:function(A,f){A|=0,f|=0;var r,e,i,a=z2(0);(a=j2[A+404>>2])!=z2(0)&&(r=j2[f>>2],e=j2[f+4>>2],i=j2[f+8>>2],T2[A+436>>2]=0,a=z2(z2(1)/a),j2[A+432>>2]=i*a,j2[A+428>>2]=a*e,j2[A+424>>2]=a*r),r=T2[f+4>>2],T2[A+440>>2]=T2[f>>2],T2[A+444>>2]=r,r=T2[(f=f+8|0)+4>>2],T2[(A=A+448|0)>>2]=T2[f>>2],T2[A+4>>2]=r;},RigidBody_applyTorque:function(A,f){A|=0,f|=0,z2(0);var r=j2[f+8>>2],e=j2[f+4>>2];j2[A+488>>2]=z2(j2[f>>2]*j2[A+604>>2])+j2[A+488>>2],j2[(f=A+492|0)>>2]=z2(e*j2[A+608>>2])+j2[f>>2],j2[(f=A+496|0)>>2]=z2(r*j2[A+612>>2])+j2[f>>2];},RigidBody_applyForce:function(A,f,r){A|=0,f|=0,r|=0,z2(0);var e,i,a,n,o=j2[f+8>>2],b=j2[f+4>>2],t=j2[A+408>>2];j2[A+472>>2]=z2(j2[f>>2]*t)+j2[A+472>>2],i=b,b=j2[A+412>>2],j2[(a=A+476|0)>>2]=z2(i*b)+j2[a>>2],e=j2[A+416>>2],j2[(a=A+480|0)>>2]=z2(o*e)+j2[a>>2],n=j2[f>>2],o=j2[r>>2],a=j2[r+4>>2],e=z2(e*j2[f+8>>2]),b=z2(b*j2[f+4>>2]),r=j2[r+8>>2],j2[A+488>>2]=z2(z2(z2(a*e)-z2(b*r))*j2[A+604>>2])+j2[A+488>>2],i=j2[A+612>>2],f=A+492|0,t=z2(t*n),j2[f>>2]=z2(z2(z2(r*t)-z2(e*o))*j2[A+608>>2])+j2[f>>2],j2[(A=A+496|0)>>2]=z2(i*z2(z2(b*o)-z2(t*a)))+j2[A>>2];},RigidBody_applyCentralForce:function(A,f){A|=0,f|=0,z2(0);var r=j2[f+8>>2],e=j2[f+4>>2];j2[A+472>>2]=z2(j2[f>>2]*j2[A+408>>2])+j2[A+472>>2],j2[(f=A+476|0)>>2]=z2(e*j2[A+412>>2])+j2[f>>2],j2[(f=A+480|0)>>2]=z2(r*j2[A+416>>2])+j2[f>>2];},RigidBody_applyTorqueImpulse:function(A,f){A|=0,f|=0,z2(0);var r=j2[f>>2],e=j2[f+4>>2],i=j2[f+8>>2];j2[A+388>>2]=z2(z2(z2(z2(j2[A+324>>2]*r)+z2(j2[A+328>>2]*e))+z2(j2[A+332>>2]*i))*j2[A+604>>2])+j2[A+388>>2],j2[(f=A+392|0)>>2]=z2(z2(z2(z2(r*j2[A+340>>2])+z2(e*j2[A+344>>2]))+z2(i*j2[A+348>>2]))*j2[A+608>>2])+j2[f>>2],j2[(f=A+396|0)>>2]=z2(z2(z2(z2(r*j2[A+356>>2])+z2(e*j2[A+360>>2]))+z2(i*j2[A+364>>2]))*j2[A+612>>2])+j2[f>>2];},RigidBody_applyImpulse:function(A,f,r){_4(A|=0,f|=0,r|=0);},RigidBody_applyCentralImpulse:function(A,f){A|=0,f|=0,z2(0);var r=j2[f+8>>2],e=j2[f+4>>2],i=j2[A+404>>2];j2[A+372>>2]=z2(z2(j2[f>>2]*j2[A+408>>2])*i)+j2[A+372>>2],j2[(f=A+376|0)>>2]=z2(i*z2(e*j2[A+412>>2]))+j2[f>>2],j2[(f=A+380|0)>>2]=z2(i*z2(r*j2[A+416>>2]))+j2[f>>2];},RigidBody_updateInertiaTensor:function(A){var f,r,e,i,a,n,o,b,t,c,u,k,l,s,v;A|=0,T2[A+368>>2]=0,T2[A+352>>2]=0,T2[A+336>>2]=0,r=j2[A+36>>2],b=j2[A+456>>2],e=z2(r*b),i=j2[A+40>>2],t=j2[A+460>>2],a=z2(i*t),n=j2[A+44>>2],s=j2[A+464>>2],f=z2(n*s),j2[A+364>>2]=z2(z2(r*e)+z2(i*a))+z2(n*f),c=j2[A+20>>2],u=j2[A+24>>2],k=j2[A+28>>2],j2[A+360>>2]=z2(z2(c*e)+z2(u*a))+z2(k*f),l=j2[A+4>>2],o=z2(l*e),e=j2[A+8>>2],o=z2(o+z2(e*a)),a=j2[A+12>>2],j2[A+356>>2]=o+z2(a*f),f=z2(b*c),o=z2(t*u),v=z2(s*k),j2[A+348>>2]=z2(z2(r*f)+z2(i*o))+z2(n*v),j2[A+344>>2]=z2(z2(c*f)+z2(u*o))+z2(k*v),j2[A+340>>2]=z2(z2(l*f)+z2(e*o))+z2(a*v),f=r,r=z2(l*b),b=i,i=z2(e*t),t=n,n=z2(a*s),j2[A+332>>2]=z2(z2(f*r)+z2(b*i))+z2(t*n),j2[A+328>>2]=z2(z2(r*c)+z2(i*u))+z2(n*k),j2[A+324>>2]=z2(z2(l*r)+z2(e*i))+z2(a*n);},RigidBody_getTotalForce:function(A){return (A|=0)+472|0;},RigidBody_getTotalTorque:function(A){return (A|=0)+488|0;},RigidBody_getFlags:function(A){return T2[(A|=0)+564>>2];},RigidBody_setFlags:function(A,f){T2[(A|=0)+564>>2]=f|=0;},RigidBody_clearForces:function(A){var f;T2[(A|=0)+472>>2]=0,T2[A+476>>2]=0,T2[(f=A+496|0)>>2]=0,T2[4+f>>2]=0,T2[(f=A+488|0)>>2]=0,T2[4+f>>2]=0,T2[(A=A+480|0)>>2]=0,T2[A+4>>2]=0;},RigidBody_wantsSleeping:function(A){var f=0,r=0;return 4!=(0|(f=T2[(A|=0)+220>>2]))&&(S2[23468]||(r=1,2!=(-2&f)&&(j2[A+224>>2]>z2(2)||(r=0)))),0|r;},RigidBody_clearState:function(A){var f;T2[(A|=0)+372>>2]=0,T2[A+376>>2]=0,T2[A+472>>2]=0,T2[A+476>>2]=0,T2[(f=A+396|0)>>2]=0,T2[4+f>>2]=0,T2[(f=A+388|0)>>2]=0,T2[4+f>>2]=0,T2[(f=A+380|0)>>2]=0,T2[4+f>>2]=0,T2[(f=A+480|0)>>2]=0,T2[4+f>>2]=0,T2[(f=A+488|0)>>2]=0,T2[4+f>>2]=0,T2[(A=A+496|0)>>2]=0,T2[A+4>>2]=0;},RigidBody_getMotionState:function(A){return T2[(A|=0)+540>>2];}};}(A);}const bullet=instantiate;var _default=bullet;_exports.default=_default;});});var Bullet = unwrapExports(bullet_cocos);

            const pageSize = 65536;
            const pageCount = 250;
            const importFunc = {
              syncPhysicsToGraphics(id) {
                const bt = globalThis.Bullet;
                const body = bt.CACHE.getWrapper(id, bt.BODY_CACHE_NAME);
                body.syncPhysicsToGraphics();
              }

            };

            let bulletLibs = Bullet;

            if (globalThis.BULLET) {
              console.log('[Physics][Bullet]: Using the external Bullet libs.');
              bulletLibs = globalThis.BULLET;
            }

            const bt = exports('fE', {});
            globalThis.Bullet = bt;
            bt.BODY_CACHE_NAME = 'body';
            function waitForAmmoInstantiation() {
              const supported = (() => {
                const isiOS15_4 = (sys.os === sys.OS.IOS || sys.os === sys.OS.OSX) && sys.isBrowser && /(OS 15_4)|(Version\/15.4)/.test(window.navigator.userAgent);

                if (isiOS15_4) {
                  return false;
                }

                try {
                  if (typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function') {
                    const module = new WebAssembly.Module(new Uint8Array([0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00]));

                    if (module instanceof WebAssembly.Module) {
                      return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;
                    }
                  }
                } catch (e) {
                  return false;
                }

                return false;
              })();

              return Promise.resolve().then(() => {

                return bulletLibs;
              }).then(module => {
                if (typeof module === 'string') {
                  console.info('[Physics][Bullet]: Using wasm Bullet libs.');

                  const infoReport = msg => {
                    console.info(msg);
                  };

                  const errorReport = msg => {
                    console.error(msg);
                  };

                  const memory = new WebAssembly.Memory({
                    initial: pageCount
                  });
                  const importObject = {
                    cc: importFunc,
                    wasi_snapshot_preview1: {
                      fd_close: infoReport,
                      fd_seek: infoReport,
                      fd_write: infoReport
                    },
                    env: {
                      memory
                    }
                  };
                  return new Promise((resolve, reject) => {
                    function instantiateWasm(buff) {
                      WebAssembly.instantiate(buff, importObject).then(results => {
                        const btInstance = results.instance.exports;
                        Object.assign(bt, btInstance);
                        resolve();
                      }, errorReport);
                    }

                    {
                      fetch(module).then(response => {
                        response.arrayBuffer().then(buff => {
                          instantiateWasm(buff);
                        }, errorReport);
                      }, errorReport);
                    }
                  });
                } else {
                  console.info('[Physics][Bullet]: Using asmjs Bullet libs.');
                  const env = importFunc;
                  const wasmMemory = {};
                  wasmMemory.buffer = new ArrayBuffer(pageSize * pageCount);
                  env.memory = wasmMemory;
                  const btInstance = module(env, wasmMemory);
                  Object.assign(bt, btInstance);
                  return new Promise((resolve, reject) => {
                    resolve();
                  });
                }
              });
            }
            game.onPostInfrastructureInitDelegate.add(waitForAmmoInstantiation);

        }
    };
});
//# sourceMappingURL=instantiated-21cd46c3.js.map
