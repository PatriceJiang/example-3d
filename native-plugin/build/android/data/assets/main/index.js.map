{"version":3,"sources":["../../file:/I:/Github/example-3d/native-plugin/assets/file:/I:/Github/example-3d/native-plugin/assets/HelloNative.ts"],"names":["ccclass","property","_decorator","HelloNative","type","Label","Component","constructor","_initializerDefineProperty","start","Demo","failTest","d","stateLabel","string","resultLabel","hello","state","error","color","Color","RED","configurable","enumerable","writable","initializer"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,YAAM;AAAEA,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAwBC,UAA9B;UAQaC,WAAb,kCADCH,OAAO,CAAC,aAAD,WAGHC,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEC;AAAR,OAAD,WAGRJ,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEC;AAAR,OAAD,4BANb,MACaF,WADb,SACiCG,SADjC,CAC2C;AAAAC,QAAAA;AAAA,uBAAA;;AAAAC,UAAAA,iEAAA;;AAAAA,UAAAA,mEAAA;;;AAQvCC,QAAAA,KAAK,GAAG;AACQ;AACR,gBAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC7B,mBAAKC,QAAL,CACI,2DADJ,EAEI,SAFJ;AADJ,aAAA,MAIO;AACH,oBAAMC,CAAC,GAAG,IAAIF,IAAJ,CAAS,OAAT,CAAV;AACA,mBAAKG,UAAL,CAAgBC,MAAhB,GAAyB,uBAAzB;AACA,mBAAKC,WAAL,CAAiBD,MAAjB,GAA0BF,CAAC,CAACI,KAAFJ,CAAQ,OAARA,CAA1B;;;;;AAOJD,QAAAA,QAAQ,CAACM,KAAD,EAAgBC,KAAhB,EAA+B;AAC3C,eAAKL,UAAL,CAAgBC,MAAhB,GAAyBG,KAAzB;AACA,eAAKF,WAAL,CAAiBD,MAAjB,GAA0BI,KAA1B;AACA,eAAKL,UAAL,CAAgBM,KAAhB,GAAwBC,KAAK,CAACC,GAA9B;;;AA3BmC;AAA3CC,QAAAA;AAAAC,QAAAA;AAAAC,QAAAA;AAAAC,QAAAA;;AAAAH,QAAAA;AAAAC,QAAAA;AAAAC,QAAAA;AAAAC,QAAAA","file":"all.js","sourcesContent":["import { _decorator, Component, Node, Label, Color } from 'cc';\r\nimport { NATIVE } from 'cc/env';\r\nconst { ccclass, property } = _decorator;\r\n\r\ndeclare class Demo {\r\n    constructor(name: string);\r\n    hello(msg: string): string;\r\n}\r\n\r\n@ccclass('HelloNative')\r\nexport class HelloNative extends Component {\r\n\r\n    @property({ type: Label })\r\n    stateLabel: Label;\r\n\r\n    @property({ type: Label })\r\n    resultLabel: Label;\r\n\r\n    start() {\r\n        if (NATIVE) {\r\n            if (typeof Demo === 'undefined') {\r\n                this.failTest(\r\n                    \"FAILED: class is not exported, native plugin not enabled?\",\r\n                    \"[empty]\");\r\n            } else {\r\n                const d = new Demo(\"Cocos\");\r\n                this.stateLabel.string = \"SUCCESS: see messageâ¬†\";\r\n                this.resultLabel.string = d.hello(\"World\");\r\n            }\r\n        } else {\r\n            this.failTest(\"FAILED: not supported\", \"[empty]\");\r\n        }\r\n    }\r\n\r\n    private failTest(state: string, error: string) {\r\n        this.stateLabel.string = state;\r\n        this.resultLabel.string = error;\r\n        this.stateLabel.color = Color.RED;\r\n    }\r\n}\r\n\r\n\r\n"]}